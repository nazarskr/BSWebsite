/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Output, EventEmitter, Input, HostListener, ViewChildren, QueryList, HostBinding } from '@angular/core';
import { isDateInRanges } from '../../calendar/calendar';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { IgxDayItemComponent } from './day-item.component';
import { DateRangeType } from '../../core/dates';
import { IgxCalendarBase, CalendarSelection } from '../calendar-base';
import { isEqual } from '../../core/utils';
import { IgxDaysViewNavigationService } from './daysview-navigation.service';
/** @type {?} */
let NEXT_ID = 0;
export class IgxDaysViewComponent extends IgxCalendarBase {
    /**
     * @hidden
     * @param {?} navService
     */
    constructor(navService) {
        super();
        this.navService = navService;
        /**
         * Sets/gets the `id` of the days view.
         * If not set, the `id` will have value `"igx-days-view-0"`.
         * ```html
         * <igx-days-view id="my-days-view"></igx-days-view>
         * ```
         * ```typescript
         * let daysViewId =  this.daysView.id;
         * ```
         */
        this.id = `igx-days-view-${NEXT_ID++}`;
        /**
         * @hidden
         */
        this.changeDaysView = false;
        /**
         * @hidden
         */
        this.onDateSelection = new EventEmitter();
        /**
         * @hidden
         */
        this.onViewChanging = new EventEmitter();
        /**
         * The default css class applied to the component.
         *
         * @hidden
         */
        this.styleClass = true;
    }
    /**
     * @hidden
     * @return {?}
     */
    get getCalendarMonth() {
        return this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth(), true);
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnInit() {
        this.navService.monthView = this;
    }
    /**
     * @hidden
     * @return {?}
     */
    ngDoCheck() {
        if (!this.changeDaysView && this.dates) {
            this.disableOutOfRangeDates();
        }
    }
    /**
     * Returns the locale representation of the date in the days view.
     *
     * @hidden
     * @param {?} value
     * @return {?}
     */
    formattedDate(value) {
        if (this.formatViews.day) {
            return this.formatterDay.format(value);
        }
        return `${value.getDate()}`;
    }
    /**
     * @hidden
     * @return {?}
     */
    generateWeekHeader() {
        /** @type {?} */
        const dayNames = [];
        /** @type {?} */
        const rv = this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth())[0];
        for (const day of rv) {
            dayNames.push(this.formatterWeekday.format(day.date));
        }
        return dayNames;
    }
    /**
     * @hidden
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    rowTracker(index, item) {
        return `${item[index].date.getMonth()}${item[index].date.getDate()}`;
    }
    /**
     * @hidden
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    dateTracker(index, item) {
        return `${item.date.getMonth()}--${item.date.getDate()}`;
    }
    /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    isCurrentMonth(value) {
        return this.viewDate.getMonth() === value.getMonth();
    }
    /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    isCurrentYear(value) {
        return this.viewDate.getFullYear() === value.getFullYear();
    }
    /**
     * @hidden
     * @param {?} date
     * @return {?}
     */
    isSelected(date) {
        /** @type {?} */
        let selectedDates;
        if (this.isDateDisabled(date.date) || !this.value ||
            (Array.isArray(this.value) && this.value.length === 0)) {
            return false;
        }
        if (this.selection === CalendarSelection.SINGLE) {
            selectedDates = ((/** @type {?} */ (this.value)));
            return this.getDateOnly(selectedDates).getTime() === date.date.getTime();
        }
        selectedDates = ((/** @type {?} */ (this.value)));
        if (this.selection === CalendarSelection.RANGE && selectedDates.length === 1) {
            return this.getDateOnly(selectedDates[0]).getTime() === date.date.getTime();
        }
        if (this.selection === CalendarSelection.MULTI) {
            /** @type {?} */
            const start = this.getDateOnly(selectedDates[0]);
            /** @type {?} */
            const end = this.getDateOnly(selectedDates[selectedDates.length - 1]);
            if (this.isWithinRange(date.date, false, start, end)) {
                /** @type {?} */
                const currentDate = selectedDates.find(element => element.getTime() === date.date.getTime());
                return !!currentDate;
            }
            else {
                return false;
            }
        }
        else {
            return this.isWithinRange(date.date, true);
        }
    }
    /**
     * @hidden
     * @param {?} date
     * @return {?}
     */
    isLastInRange(date) {
        if (this.isSingleSelection || !this.value) {
            return false;
        }
        /** @type {?} */
        const dates = (/** @type {?} */ (this.value));
        /** @type {?} */
        const lastDate = dates[dates.length - 1];
        return isEqual(lastDate, date.date);
    }
    /**
     * @hidden
     * @param {?} date
     * @return {?}
     */
    isFirstInRange(date) {
        if (this.isSingleSelection || !this.value) {
            return false;
        }
        return isEqual(((/** @type {?} */ (this.value)))[0], date.date);
    }
    /**
     * @hidden
     * @param {?} date
     * @param {?} checkForRange
     * @param {?=} min
     * @param {?=} max
     * @return {?}
     */
    isWithinRange(date, checkForRange, min, max) {
        if (checkForRange && !(Array.isArray(this.value) && this.value.length > 1)) {
            return false;
        }
        min = min ? min : this.value[0];
        max = max ? max : this.value[((/** @type {?} */ (this.value))).length - 1];
        return isDateInRanges(date, [
            {
                type: DateRangeType.Between,
                dateRange: [min, max]
            }
        ]);
    }
    /**
     * @hidden
     * @return {?}
     */
    focusActiveDate() {
        /** @type {?} */
        let date = this.dates.find((d) => d.selected);
        if (!date) {
            date = this.dates.find((d) => d.isToday);
        }
        if (date.isFocusable) {
            date.nativeElement.focus();
        }
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    selectDay(event) {
        this.selectDateFromClient(event.date);
        this.onDateSelection.emit(event);
        this.onSelection.emit(this.selectedDates);
    }
    /**
     * @hidden
     * @private
     * @return {?}
     */
    disableOutOfRangeDates() {
        /** @type {?} */
        const dateRange = [];
        this.dates.toArray().forEach((date) => {
            if (!date.isCurrentMonth) {
                dateRange.push(date.date.date);
            }
        });
        this.outOfRangeDates = [{
                type: DateRangeType.Specific,
                dateRange: dateRange
            }];
    }
    /**
     * @hidden
     * @return {?}
     */
    getFirstMonthView() {
        /** @type {?} */
        let monthView = (/** @type {?} */ (this));
        while (monthView.prevMonthView) {
            monthView = monthView.prevMonthView;
        }
        return monthView;
    }
    /**
     * @hidden
     * @private
     * @return {?}
     */
    getLastMonthView() {
        /** @type {?} */
        let monthView = (/** @type {?} */ (this));
        while (monthView.nextMonthView) {
            monthView = monthView.nextMonthView;
        }
        return monthView;
    }
    /**
     * @hidden
     * @private
     * @return {?}
     */
    get isSingleSelection() {
        return this.selection !== CalendarSelection.RANGE;
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onKeydownArrow(event) {
        event.preventDefault();
        event.stopPropagation();
        this.navService.focusNextDate((/** @type {?} */ (event.target)), event.key);
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onKeydownHome(event) {
        event.preventDefault();
        event.stopPropagation();
        this.getFirstMonthView().navService.focusHomeDate();
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onKeydownEnd(event) {
        event.preventDefault();
        event.stopPropagation();
        this.getLastMonthView().navService.focusEndDate();
    }
}
IgxDaysViewComponent.decorators = [
    { type: Component, args: [{
                providers: [
                    {
                        multi: true,
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: IgxDaysViewComponent
                    },
                    { provide: IgxDaysViewNavigationService, useClass: IgxDaysViewNavigationService }
                ],
                selector: 'igx-days-view',
                template: "<div class=\"igx-calendar__body-row\">\n    <span *ngFor=\"let dayName of generateWeekHeader()\" class=\"igx-calendar__label\">\n        {{ dayName | titlecase }}\n    </span>\n</div>\n\n<div *ngFor=\"let week of getCalendarMonth; last as isLast; index as i; trackBy: rowTracker\"\n    class=\"igx-calendar__body-row\">\n    <igx-day-item\n        *ngFor=\"let day of week; trackBy: dateTracker\"\n        [date]=\"day\"\n        [selection]=\"selection\"\n        [selected]=\"isSelected(day)\"\n        [isLastInRange]=\"isLastInRange(day)\"\n        [isFirstInRange]=\"isFirstInRange(day)\"\n        [isWithinRange]=\"isWithinRange(day.date, true)\"\n        [disabledDates]=\"disabledDates\"\n        [specialDates]=\"specialDates\"\n        [outOfRangeDates]=\"outOfRangeDates\"\n        [hideOutsideDays]=\"hideOutsideDays\"\n        (onDateSelection)=\"selectDay($event)\">\n        {{ formattedDate(day.date) }}\n    </igx-day-item>\n</div>\n"
            }] }
];
/** @nocollapse */
IgxDaysViewComponent.ctorParameters = () => [
    { type: IgxDaysViewNavigationService }
];
IgxDaysViewComponent.propDecorators = {
    id: [{ type: HostBinding, args: ['attr.id',] }, { type: Input }],
    changeDaysView: [{ type: Input }],
    onDateSelection: [{ type: Output }],
    onViewChanging: [{ type: Output }],
    dates: [{ type: ViewChildren, args: [IgxDayItemComponent, { read: IgxDayItemComponent },] }],
    styleClass: [{ type: HostBinding, args: ['class.igx-calendar',] }],
    onKeydownArrow: [{ type: HostListener, args: ['keydown.arrowleft', ['$event'],] }, { type: HostListener, args: ['keydown.arrowright', ['$event'],] }, { type: HostListener, args: ['keydown.arrowup', ['$event'],] }, { type: HostListener, args: ['keydown.arrowdown', ['$event'],] }],
    onKeydownHome: [{ type: HostListener, args: ['keydown.home', ['$event'],] }],
    onKeydownEnd: [{ type: HostListener, args: ['keydown.end', ['$event'],] }]
};
if (false) {
    /**
     * Sets/gets the `id` of the days view.
     * If not set, the `id` will have value `"igx-days-view-0"`.
     * ```html
     * <igx-days-view id="my-days-view"></igx-days-view>
     * ```
     * ```typescript
     * let daysViewId =  this.daysView.id;
     * ```
     * @type {?}
     */
    IgxDaysViewComponent.prototype.id;
    /**
     * @hidden
     * @type {?}
     */
    IgxDaysViewComponent.prototype.changeDaysView;
    /**
     * @hidden
     * @type {?}
     */
    IgxDaysViewComponent.prototype.onDateSelection;
    /**
     * @hidden
     * @type {?}
     */
    IgxDaysViewComponent.prototype.onViewChanging;
    /**
     * @hidden
     * @type {?}
     */
    IgxDaysViewComponent.prototype.dates;
    /**
     * @hidden
     * @type {?}
     */
    IgxDaysViewComponent.prototype.outOfRangeDates;
    /**
     * @hidden
     * @type {?}
     */
    IgxDaysViewComponent.prototype.nextMonthView;
    /**
     * @hidden
     * @type {?}
     */
    IgxDaysViewComponent.prototype.prevMonthView;
    /**
     * The default css class applied to the component.
     *
     * @hidden
     * @type {?}
     */
    IgxDaysViewComponent.prototype.styleClass;
    /** @type {?} */
    IgxDaysViewComponent.prototype.navService;
}
//# sourceMappingURL=data:application/json;base64,