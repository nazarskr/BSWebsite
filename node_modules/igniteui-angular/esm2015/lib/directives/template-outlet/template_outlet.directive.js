/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, ChangeDetectorRef, TemplateRef, ViewContainerRef, NgModule, NgZone, Output, EventEmitter } from '@angular/core';
import { CommonModule } from '@angular/common';
/**
 * @hidden
 */
export class IgxTemplateOutletDirective {
    /**
     * @param {?} _viewContainerRef
     * @param {?} _zone
     * @param {?} cdr
     */
    constructor(_viewContainerRef, _zone, cdr) {
        this._viewContainerRef = _viewContainerRef;
        this._zone = _zone;
        this.cdr = cdr;
        /**
         * The embedded views cache. Collection is key-value paired.
         * Key is the template id, value is the embedded view for the related template.
         */
        this._embeddedViewsMap = new Map();
        this.onViewCreated = new EventEmitter();
        this.onViewMoved = new EventEmitter();
        this.onCachedViewLoaded = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        const actionType = this._getActionType(changes);
        switch (actionType) {
            case TemplateOutletAction.CreateView:
                this._recreateView();
                break;
            case TemplateOutletAction.MoveView:
                this._moveView();
                break;
            case TemplateOutletAction.UseCachedView:
                this._useCachedView();
                break;
            case TemplateOutletAction.UpdateViewContext:
                this._updateExistingContext(this.igxTemplateOutletContext);
                break;
        }
    }
    /**
     * @return {?}
     */
    cleanCache() {
        this._embeddedViewsMap.forEach((item) => {
            if (!item.destroyed) {
                item.destroy();
            }
        });
        this._embeddedViewsMap.clear();
    }
    /**
     * @param {?} tmplID
     * @return {?}
     */
    cleanView(tmplID) {
        /** @type {?} */
        const embView = this._embeddedViewsMap.get(tmplID);
        if (embView) {
            embView.destroy();
            this._embeddedViewsMap.delete(tmplID);
        }
    }
    /**
     * @private
     * @return {?}
     */
    _recreateView() {
        // detach old and create new
        if (this._viewRef) {
            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this._viewRef));
        }
        if (this.igxTemplateOutlet) {
            this._viewRef = this._viewContainerRef.createEmbeddedView(this.igxTemplateOutlet, this.igxTemplateOutletContext);
            this.onViewCreated.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });
            /** @type {?} */
            const tmplId = this.igxTemplateOutletContext['templateID'];
            if (tmplId) {
                // if context contains a template id, check if we have a view for that template already stored in the cache
                // if not create a copy and add it to the cache in detached state.
                // Note: Views in detached state do not appear in the DOM, however they remain stored in memory.
                /** @type {?} */
                const res = this._embeddedViewsMap.get(this.igxTemplateOutletContext['templateID']);
                if (!res) {
                    this._embeddedViewsMap.set(this.igxTemplateOutletContext['templateID'], this._viewRef);
                }
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    _moveView() {
        // using external view and inserting it in current view.
        /** @type {?} */
        const view = this.igxTemplateOutletContext['moveView'];
        /** @type {?} */
        const owner = this.igxTemplateOutletContext['owner'];
        if (view !== this._viewRef) {
            if (owner._viewContainerRef.indexOf(view) !== -1) {
                // detach in case view it is attached somewhere else at the moment.
                owner._viewContainerRef.detach(owner._viewContainerRef.indexOf(view));
            }
            if (this._viewRef && this._viewContainerRef.indexOf(this._viewRef) !== -1) {
                this._viewContainerRef.detach(this._viewContainerRef.indexOf(this._viewRef));
            }
            this._viewRef = view;
            this._viewContainerRef.insert(view, 0);
            this._updateExistingContext(this.igxTemplateOutletContext);
            this.onViewMoved.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });
        }
    }
    /**
     * @private
     * @return {?}
     */
    _useCachedView() {
        // use view for specific template cached in the current template outlet
        /** @type {?} */
        const tmplID = this.igxTemplateOutletContext['templateID'];
        /** @type {?} */
        const cachedView = tmplID ?
            this._embeddedViewsMap.get(tmplID) :
            null;
        // if view exists, but template has been changed and there is a view in the cache with the related template
        // then detach old view and insert the stored one with the matching template
        // after that update its context.
        this._viewContainerRef.detach(this._viewContainerRef.indexOf(this._viewRef));
        this._viewRef = cachedView;
        /** @type {?} */
        const oldContext = this._cloneContext(cachedView.context);
        this._viewContainerRef.insert(this._viewRef, 0);
        this._updateExistingContext(this.igxTemplateOutletContext);
        this.onCachedViewLoaded.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext, oldContext });
    }
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    _shouldRecreateView(changes) {
        /** @type {?} */
        const ctxChange = changes['igxTemplateOutletContext'];
        return !!changes['igxTemplateOutlet'] || (ctxChange && this._hasContextShapeChanged(ctxChange));
    }
    /**
     * @private
     * @param {?} ctxChange
     * @return {?}
     */
    _hasContextShapeChanged(ctxChange) {
        /** @type {?} */
        const prevCtxKeys = Object.keys(ctxChange.previousValue || {});
        /** @type {?} */
        const currCtxKeys = Object.keys(ctxChange.currentValue || {});
        if (prevCtxKeys.length === currCtxKeys.length) {
            for (const propName of currCtxKeys) {
                if (prevCtxKeys.indexOf(propName) === -1) {
                    return true;
                }
            }
            return false;
        }
        else {
            return true;
        }
    }
    /**
     * @private
     * @param {?} ctx
     * @return {?}
     */
    _updateExistingContext(ctx) {
        for (const propName of Object.keys(ctx)) {
            ((/** @type {?} */ (this._viewRef.context)))[propName] = ((/** @type {?} */ (this.igxTemplateOutletContext)))[propName];
        }
    }
    /**
     * @private
     * @param {?} ctx
     * @return {?}
     */
    _cloneContext(ctx) {
        /** @type {?} */
        const clone = {};
        for (const propName of Object.keys(ctx)) {
            clone[propName] = ctx[propName];
        }
        return clone;
    }
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    _getActionType(changes) {
        /** @type {?} */
        const movedView = this.igxTemplateOutletContext['moveView'];
        /** @type {?} */
        const tmplID = this.igxTemplateOutletContext['templateID'];
        /** @type {?} */
        const cachedView = tmplID ?
            this._embeddedViewsMap.get(tmplID) :
            null;
        /** @type {?} */
        const shouldRecreate = this._shouldRecreateView(changes);
        if (movedView) {
            // view is moved from external source
            return TemplateOutletAction.MoveView;
        }
        else if (shouldRecreate && cachedView) {
            // should recreate (template or context change) and there is a matching template in cache
            return TemplateOutletAction.UseCachedView;
        }
        else if (!this._viewRef || shouldRecreate) {
            // no view or should recreate
            return TemplateOutletAction.CreateView;
        }
        else if (this.igxTemplateOutletContext) {
            // has context, update context
            return TemplateOutletAction.UpdateViewContext;
        }
    }
}
IgxTemplateOutletDirective.decorators = [
    { type: Directive, args: [{ selector: '[igxTemplateOutlet]' },] }
];
/** @nocollapse */
IgxTemplateOutletDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: NgZone },
    { type: ChangeDetectorRef }
];
IgxTemplateOutletDirective.propDecorators = {
    igxTemplateOutletContext: [{ type: Input }],
    igxTemplateOutlet: [{ type: Input }],
    onViewCreated: [{ type: Output }],
    onViewMoved: [{ type: Output }],
    onCachedViewLoaded: [{ type: Output }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxTemplateOutletDirective.prototype._viewRef;
    /**
     * The embedded views cache. Collection is key-value paired.
     * Key is the template id, value is the embedded view for the related template.
     * @type {?}
     * @private
     */
    IgxTemplateOutletDirective.prototype._embeddedViewsMap;
    /** @type {?} */
    IgxTemplateOutletDirective.prototype.igxTemplateOutletContext;
    /** @type {?} */
    IgxTemplateOutletDirective.prototype.igxTemplateOutlet;
    /** @type {?} */
    IgxTemplateOutletDirective.prototype.onViewCreated;
    /** @type {?} */
    IgxTemplateOutletDirective.prototype.onViewMoved;
    /** @type {?} */
    IgxTemplateOutletDirective.prototype.onCachedViewLoaded;
    /** @type {?} */
    IgxTemplateOutletDirective.prototype._viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    IgxTemplateOutletDirective.prototype._zone;
    /** @type {?} */
    IgxTemplateOutletDirective.prototype.cdr;
}
/** @enum {number} */
const TemplateOutletAction = {
    CreateView: 0,
    MoveView: 1,
    UseCachedView: 2,
    UpdateViewContext: 3,
};
TemplateOutletAction[TemplateOutletAction.CreateView] = 'CreateView';
TemplateOutletAction[TemplateOutletAction.MoveView] = 'MoveView';
TemplateOutletAction[TemplateOutletAction.UseCachedView] = 'UseCachedView';
TemplateOutletAction[TemplateOutletAction.UpdateViewContext] = 'UpdateViewContext';
/**
 * @record
 */
export function IViewChangeEventArgs() { }
if (false) {
    /** @type {?} */
    IViewChangeEventArgs.prototype.owner;
    /** @type {?} */
    IViewChangeEventArgs.prototype.view;
    /** @type {?} */
    IViewChangeEventArgs.prototype.context;
}
/**
 * @record
 */
export function ICachedViewLoadedEventArgs() { }
if (false) {
    /** @type {?} */
    ICachedViewLoadedEventArgs.prototype.oldContext;
}
/**
 * @hidden
 */
export class IgxTemplateOutletModule {
}
IgxTemplateOutletModule.decorators = [
    { type: NgModule, args: [{
                declarations: [IgxTemplateOutletDirective],
                entryComponents: [],
                exports: [IgxTemplateOutletDirective],
                imports: [CommonModule]
            },] }
];
//# sourceMappingURL=data:application/json;base64,