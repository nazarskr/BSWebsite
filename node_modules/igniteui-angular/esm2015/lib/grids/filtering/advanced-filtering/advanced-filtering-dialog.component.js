/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, ChangeDetectorRef, ViewChildren, QueryList, ElementRef, HostBinding } from '@angular/core';
import { VerticalAlignment, HorizontalAlignment, Point } from '../../../services/overlay/utilities';
import { ConnectedPositioningStrategy } from '../../../services/overlay/position/connected-positioning-strategy';
import { IgxFilteringService } from '../grid-filtering.service';
import { IgxOverlayService } from '../../../services/overlay/overlay';
import { FilteringExpressionsTree } from '../../../data-operations/filtering-expressions-tree';
import { FilteringLogic } from '../../../data-operations/filtering-expression.interface';
import { IgxChipComponent } from '../../../chips/chip.component';
import { IgxSelectComponent } from '../../../select/select.component';
import { CloseScrollStrategy } from '../../../services/overlay/scroll/close-scroll-strategy';
import { IgxToggleDirective, IgxOverlayOutletDirective } from '../../../directives/toggle/toggle.directive';
import { takeUntil, first } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { AbsoluteScrollStrategy, AutoPositionStrategy } from '../../../services/index';
/**
 * @hidden
 */
class ExpressionItem {
    /**
     * @param {?=} parent
     */
    constructor(parent) {
        this.parent = parent;
    }
}
if (false) {
    /** @type {?} */
    ExpressionItem.prototype.parent;
    /** @type {?} */
    ExpressionItem.prototype.selected;
}
/**
 * @hidden
 */
class ExpressionGroupItem extends ExpressionItem {
    /**
     * @param {?} operator
     * @param {?=} parent
     */
    constructor(operator, parent) {
        super(parent);
        this.operator = operator;
        this.children = [];
    }
}
if (false) {
    /** @type {?} */
    ExpressionGroupItem.prototype.operator;
    /** @type {?} */
    ExpressionGroupItem.prototype.children;
}
/**
 * @hidden
 */
class ExpressionOperandItem extends ExpressionItem {
    /**
     * @param {?} expression
     * @param {?} parent
     */
    constructor(expression, parent) {
        super(parent);
        this.expression = expression;
    }
}
if (false) {
    /** @type {?} */
    ExpressionOperandItem.prototype.expression;
    /** @type {?} */
    ExpressionOperandItem.prototype.inEditMode;
    /** @type {?} */
    ExpressionOperandItem.prototype.inAddMode;
    /** @type {?} */
    ExpressionOperandItem.prototype.hovered;
}
/**
 * @hidden
 */
export class IgxAdvancedFilteringDialogComponent {
    /**
     * @param {?} element
     * @param {?} cdr
     */
    constructor(element, cdr) {
        this.element = element;
        this.cdr = cdr;
        this.selectedExpressions = [];
        this.selectedGroups = [];
        this._positionSettings = {
            horizontalStartPoint: HorizontalAlignment.Right,
            verticalStartPoint: VerticalAlignment.Top
        };
        this._overlaySettings = {
            closeOnOutsideClick: false,
            modal: false,
            positionStrategy: new ConnectedPositioningStrategy(this._positionSettings),
            scrollStrategy: new CloseScrollStrategy()
        };
        this.columnSelectOverlaySettings = {
            scrollStrategy: new AbsoluteScrollStrategy(),
            modal: false,
            closeOnOutsideClick: false,
            excludePositionTarget: true
        };
        this.conditionSelectOverlaySettings = {
            scrollStrategy: new AbsoluteScrollStrategy(),
            modal: false,
            closeOnOutsideClick: false,
            excludePositionTarget: true
        };
        this.display = 'block';
        this.destroy$ = new Subject();
        this._dblClickDelay = 200;
        this._preventChipClick = false;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set editingInputsContainer(value) {
        if ((value && !this._editingInputsContainer) ||
            (value && this._editingInputsContainer && this._editingInputsContainer.nativeElement !== value.nativeElement)) {
            requestAnimationFrame(() => {
                this.scrollElementIntoView(value.nativeElement);
            });
        }
        this._editingInputsContainer = value;
    }
    /**
     * @return {?}
     */
    get editingInputsContainer() {
        return this._editingInputsContainer;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set addModeContainer(value) {
        if ((value && !this._addModeContainer) ||
            (value && this._addModeContainer && this._addModeContainer.nativeElement !== value.nativeElement)) {
            requestAnimationFrame(() => {
                this.scrollElementIntoView(value.nativeElement);
            });
        }
        this._addModeContainer = value;
    }
    /**
     * @return {?}
     */
    get addModeContainer() {
        return this._addModeContainer;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set currentGroupButtonsContainer(value) {
        if ((value && !this._currentGroupButtonsContainer) ||
            (value && this._currentGroupButtonsContainer && this._currentGroupButtonsContainer.nativeElement !== value.nativeElement)) {
            requestAnimationFrame(() => {
                this.scrollElementIntoView(value.nativeElement);
            });
        }
        this._currentGroupButtonsContainer = value;
    }
    /**
     * @return {?}
     */
    get currentGroupButtonsContainer() {
        return this._currentGroupButtonsContainer;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.addRootAndGroupButton) {
            this.addRootAndGroupButton.nativeElement.focus();
        }
        else if (this.addConditionButton) {
            this.addConditionButton.nativeElement.focus();
        }
        this._overlaySettings.outlet = this.overlayOutlet;
        this.columnSelectOverlaySettings.outlet = this.overlayOutlet;
        this.conditionSelectOverlaySettings.outlet = this.overlayOutlet;
        this.contextMenuToggle.onClosed.pipe(takeUntil(this.destroy$)).subscribe((args) => {
            this.contextualGroup = null;
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy$.next(true);
        this.destroy$.complete();
    }
    /**
     * @return {?}
     */
    get displayDensity() {
        return this.grid.displayDensity;
    }
    /**
     * @return {?}
     */
    get selectedColumn() {
        return this._selectedColumn;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set selectedColumn(value) {
        /** @type {?} */
        const oldValue = this._selectedColumn;
        if (this._selectedColumn !== value) {
            this._selectedColumn = value;
            if (oldValue && this._selectedColumn && this._selectedColumn.dataType !== oldValue.dataType) {
                this.selectedCondition = null;
                this.searchValue = null;
                this.cdr.detectChanges();
            }
        }
    }
    /**
     * @return {?}
     */
    get grid() {
        return this.filteringService.grid;
    }
    /**
     * @return {?}
     */
    get filterableColumns() {
        return this.grid.columns.filter((col) => !col.columnGroup && col.filterable);
    }
    /**
     * @param {?} dragArgs
     * @return {?}
     */
    dragStart(dragArgs) {
        if (!this.contextMenuToggle.collapsed) {
            this.contextMenuToggle.element.style.display = 'none';
        }
    }
    /**
     * @param {?} dragArgs
     * @return {?}
     */
    dragEnd(dragArgs) {
        if (!this.contextMenuToggle.collapsed) {
            this.calculateContextMenuTarget();
            this.contextMenuToggle.reposition();
            this.contextMenuToggle.element.style.display = '';
        }
    }
    /**
     * @param {?} parent
     * @param {?=} afterExpression
     * @return {?}
     */
    addCondition(parent, afterExpression) {
        this.cancelOperandAdd();
        /** @type {?} */
        const operandItem = new ExpressionOperandItem({
            fieldName: null,
            condition: null,
            ignoreCase: true,
            searchVal: null
        }, parent);
        if (afterExpression) {
            /** @type {?} */
            const index = parent.children.indexOf(afterExpression);
            parent.children.splice(index + 1, 0, operandItem);
        }
        else {
            parent.children.push(operandItem);
        }
        this.enterExpressionEdit(operandItem);
    }
    /**
     * @param {?=} parent
     * @param {?=} afterExpression
     * @return {?}
     */
    addAndGroup(parent, afterExpression) {
        this.addGroup(FilteringLogic.And, parent, afterExpression);
    }
    /**
     * @param {?=} parent
     * @param {?=} afterExpression
     * @return {?}
     */
    addOrGroup(parent, afterExpression) {
        this.addGroup(FilteringLogic.Or, parent, afterExpression);
    }
    /**
     * @param {?} groupItem
     * @return {?}
     */
    endGroup(groupItem) {
        this.currentGroup = groupItem.parent;
    }
    /**
     * @return {?}
     */
    commitOperandEdit() {
        if (this.editedExpression) {
            this.editedExpression.expression.fieldName = this.selectedColumn.field;
            this.editedExpression.expression.condition = this.selectedColumn.filters.condition(this.selectedCondition);
            this.editedExpression.expression.searchVal = this.searchValue;
            this.editedExpression.inEditMode = false;
            this.editedExpression = null;
        }
    }
    /**
     * @return {?}
     */
    cancelOperandAdd() {
        if (this.addModeExpression) {
            this.addModeExpression.inAddMode = false;
            this.addModeExpression = null;
        }
    }
    /**
     * @return {?}
     */
    cancelOperandEdit() {
        if (this.editedExpression) {
            this.editedExpression.inEditMode = false;
            if (!this.editedExpression.expression.fieldName) {
                this.deleteItem(this.editedExpression);
            }
            this.editedExpression = null;
        }
    }
    /**
     * @return {?}
     */
    operandCanBeCommitted() {
        return this.selectedColumn && this.selectedCondition &&
            (!!this.searchValue || this.selectedColumn.filters.condition(this.selectedCondition).isUnary);
    }
    /**
     * @return {?}
     */
    exitOperandEdit() {
        if (!this.editedExpression) {
            return;
        }
        if (this.operandCanBeCommitted()) {
            this.commitOperandEdit();
        }
        else {
            this.cancelOperandEdit();
        }
    }
    /**
     * @param {?} expression
     * @return {?}
     */
    isExpressionGroup(expression) {
        return expression instanceof ExpressionGroupItem;
    }
    /**
     * @private
     * @param {?} operator
     * @param {?=} parent
     * @param {?=} afterExpression
     * @return {?}
     */
    addGroup(operator, parent, afterExpression) {
        this.cancelOperandAdd();
        /** @type {?} */
        const groupItem = new ExpressionGroupItem(operator, parent);
        if (parent) {
            if (afterExpression) {
                /** @type {?} */
                const index = parent.children.indexOf(afterExpression);
                parent.children.splice(index + 1, 0, groupItem);
            }
            else {
                parent.children.push(groupItem);
            }
        }
        else {
            this.rootGroup = groupItem;
        }
        this.addCondition(groupItem);
        this.currentGroup = groupItem;
    }
    /**
     * @private
     * @param {?} expressionTree
     * @param {?=} parent
     * @return {?}
     */
    createExpressionGroupItem(expressionTree, parent) {
        /** @type {?} */
        let groupItem;
        if (expressionTree) {
            groupItem = new ExpressionGroupItem(expressionTree.operator, parent);
            for (const expr of expressionTree.filteringOperands) {
                if (expr instanceof FilteringExpressionsTree) {
                    groupItem.children.push(this.createExpressionGroupItem(expr, groupItem));
                }
                else {
                    /** @type {?} */
                    const filteringExpr = (/** @type {?} */ (expr));
                    /** @type {?} */
                    const exprCopy = {
                        fieldName: filteringExpr.fieldName,
                        condition: filteringExpr.condition,
                        searchVal: filteringExpr.searchVal,
                        ignoreCase: filteringExpr.ignoreCase
                    };
                    /** @type {?} */
                    const operandItem = new ExpressionOperandItem(exprCopy, groupItem);
                    groupItem.children.push(operandItem);
                }
            }
        }
        return groupItem;
    }
    /**
     * @private
     * @param {?} groupItem
     * @return {?}
     */
    createExpressionsTreeFromGroupItem(groupItem) {
        if (!groupItem) {
            return null;
        }
        /** @type {?} */
        const expressionsTree = new FilteringExpressionsTree(groupItem.operator);
        for (const item of groupItem.children) {
            if (item instanceof ExpressionGroupItem) {
                /** @type {?} */
                const subTree = this.createExpressionsTreeFromGroupItem(((/** @type {?} */ (item))));
                expressionsTree.filteringOperands.push(subTree);
            }
            else {
                expressionsTree.filteringOperands.push(((/** @type {?} */ (item))).expression);
            }
        }
        return expressionsTree;
    }
    /**
     * @param {?} expressionItem
     * @return {?}
     */
    onChipRemove(expressionItem) {
        this.deleteItem(expressionItem);
    }
    /**
     * @param {?} expressionItem
     * @return {?}
     */
    onChipClick(expressionItem) {
        this._clickTimer = setTimeout(() => {
            if (!this._preventChipClick) {
                this.onToggleExpression(expressionItem);
            }
            this._preventChipClick = false;
        }, this._dblClickDelay);
    }
    /**
     * @param {?} expressionItem
     * @return {?}
     */
    onChipDblClick(expressionItem) {
        clearTimeout(this._clickTimer);
        this._preventChipClick = true;
        this.enterExpressionEdit(expressionItem);
    }
    /**
     * @param {?} expressionItem
     * @return {?}
     */
    enterExpressionEdit(expressionItem) {
        this.clearSelection();
        this.exitOperandEdit();
        this.cancelOperandAdd();
        if (this.editedExpression) {
            this.editedExpression.inEditMode = false;
        }
        expressionItem.hovered = false;
        this.selectedColumn = expressionItem.expression.fieldName ?
            this.grid.getColumnByName(expressionItem.expression.fieldName) : null;
        this.selectedCondition = expressionItem.expression.condition ?
            expressionItem.expression.condition.name : null;
        this.searchValue = expressionItem.expression.searchVal;
        expressionItem.inEditMode = true;
        this.editedExpression = expressionItem;
        this.cdr.detectChanges();
        this.columnSelectOverlaySettings.positionStrategy = new AutoPositionStrategy({ target: this.columnSelect.element });
        this.conditionSelectOverlaySettings.positionStrategy = new AutoPositionStrategy({ target: this.conditionSelect.element });
        if (!this.selectedColumn) {
            this.columnSelect.input.nativeElement.focus();
        }
        else if (this.selectedColumn.filters.condition(this.selectedCondition).isUnary) {
            this.conditionSelect.input.nativeElement.focus();
        }
        else {
            this.searchValueInput.nativeElement.focus();
        }
    }
    /**
     * @return {?}
     */
    clearSelection() {
        for (const group of this.selectedGroups) {
            group.selected = false;
        }
        this.selectedGroups = [];
        for (const expr of this.selectedExpressions) {
            expr.selected = false;
        }
        this.selectedExpressions = [];
        this.toggleContextMenu();
    }
    /**
     * @param {?} expressionItem
     * @return {?}
     */
    enterExpressionAdd(expressionItem) {
        this.clearSelection();
        this.exitOperandEdit();
        if (this.addModeExpression) {
            this.addModeExpression.inAddMode = false;
        }
        expressionItem.inAddMode = true;
        this.addModeExpression = expressionItem;
        if (expressionItem.selected) {
            this.toggleExpression(expressionItem);
        }
    }
    /**
     * @private
     * @param {?} expressionItem
     * @return {?}
     */
    onToggleExpression(expressionItem) {
        this.exitOperandEdit();
        this.toggleExpression(expressionItem);
        this.toggleContextMenu();
    }
    /**
     * @private
     * @param {?} expressionItem
     * @return {?}
     */
    toggleExpression(expressionItem) {
        expressionItem.selected = !expressionItem.selected;
        if (expressionItem.selected) {
            this.selectedExpressions.push(expressionItem);
        }
        else {
            /** @type {?} */
            const index = this.selectedExpressions.indexOf(expressionItem);
            this.selectedExpressions.splice(index, 1);
            this.deselectParentRecursive(expressionItem);
        }
    }
    /**
     * @private
     * @return {?}
     */
    toggleContextMenu() {
        /** @type {?} */
        const contextualGroup = this.findSingleSelectedGroup();
        if (contextualGroup || this.selectedExpressions.length > 1) {
            this.contextualGroup = contextualGroup;
            if (contextualGroup) {
                this.filteringLogics = [
                    {
                        label: this.grid.resourceStrings.igx_grid_filter_operator_and,
                        selected: contextualGroup.operator === FilteringLogic.And
                    },
                    {
                        label: this.grid.resourceStrings.igx_grid_filter_operator_or,
                        selected: contextualGroup.operator === FilteringLogic.Or
                    }
                ];
            }
        }
        else {
            this.contextMenuToggle.close();
        }
    }
    /**
     * @private
     * @return {?}
     */
    findSingleSelectedGroup() {
        for (const group of this.selectedGroups) {
            /** @type {?} */
            const containsAllSelectedExpressions = this.selectedExpressions.every(op => this.isInsideGroup(op, group));
            if (containsAllSelectedExpressions) {
                return group;
            }
        }
        return null;
    }
    /**
     * @private
     * @param {?} item
     * @param {?} group
     * @return {?}
     */
    isInsideGroup(item, group) {
        if (!item) {
            return false;
        }
        if (item.parent === group) {
            return true;
        }
        return this.isInsideGroup(item.parent, group);
    }
    /**
     * @private
     * @param {?} expressionItem
     * @return {?}
     */
    deleteItem(expressionItem) {
        if (!expressionItem.parent) {
            this.rootGroup = null;
            this.currentGroup = null;
            return;
        }
        if (expressionItem === this.currentGroup) {
            this.currentGroup = this.currentGroup.parent;
        }
        /** @type {?} */
        const children = expressionItem.parent.children;
        /** @type {?} */
        const index = children.indexOf(expressionItem);
        children.splice(index, 1);
        if (!children.length) {
            this.deleteItem(expressionItem.parent);
        }
    }
    /**
     * @param {?} eventArgs
     * @return {?}
     */
    onKeyDown(eventArgs) {
        eventArgs.stopPropagation();
        if (!this.contextMenuToggle.collapsed &&
            (eventArgs.key === "Escape" /* ESCAPE */ || eventArgs.key === "Esc" /* ESCAPE_IE */)) {
            this.clearSelection();
        }
    }
    /**
     * @return {?}
     */
    createAndGroup() {
        this.createGroup(FilteringLogic.And);
    }
    /**
     * @return {?}
     */
    createOrGroup() {
        this.createGroup(FilteringLogic.Or);
    }
    /**
     * @private
     * @param {?} operator
     * @return {?}
     */
    createGroup(operator) {
        /** @type {?} */
        const chips = this.chips.toArray();
        /** @type {?} */
        const minIndex = this.selectedExpressions.reduce((i, e) => Math.min(i, chips.findIndex(c => c.data === e)), Number.MAX_VALUE);
        /** @type {?} */
        const firstExpression = chips[minIndex].data;
        /** @type {?} */
        const parent = firstExpression.parent;
        /** @type {?} */
        const groupItem = new ExpressionGroupItem(operator, parent);
        /** @type {?} */
        const index = parent.children.indexOf(firstExpression);
        parent.children.splice(index, 0, groupItem);
        for (const expr of this.selectedExpressions) {
            this.deleteItem(expr);
            groupItem.children.push(expr);
            expr.parent = groupItem;
        }
        this.clearSelection();
    }
    /**
     * @return {?}
     */
    deleteFilters() {
        for (const expr of this.selectedExpressions) {
            this.deleteItem(expr);
        }
        this.clearSelection();
    }
    /**
     * @param {?} groupItem
     * @return {?}
     */
    onGroupClick(groupItem) {
        this.toggleGroup(groupItem);
    }
    /**
     * @private
     * @param {?} groupItem
     * @return {?}
     */
    toggleGroup(groupItem) {
        this.exitOperandEdit();
        if (groupItem.children && groupItem.children.length) {
            this.toggleGroupRecursive(groupItem, !groupItem.selected);
            if (!groupItem.selected) {
                this.deselectParentRecursive(groupItem);
            }
            this.toggleContextMenu();
        }
    }
    /**
     * @private
     * @param {?} groupItem
     * @param {?} selected
     * @return {?}
     */
    toggleGroupRecursive(groupItem, selected) {
        if (groupItem.selected !== selected) {
            groupItem.selected = selected;
            if (groupItem.selected) {
                this.selectedGroups.push(groupItem);
            }
            else {
                /** @type {?} */
                const index = this.selectedGroups.indexOf(groupItem);
                this.selectedGroups.splice(index, 1);
            }
        }
        for (const expr of groupItem.children) {
            if (expr instanceof ExpressionGroupItem) {
                this.toggleGroupRecursive(expr, selected);
            }
            else {
                /** @type {?} */
                const operandExpression = (/** @type {?} */ (expr));
                if (operandExpression.selected !== selected) {
                    this.toggleExpression(operandExpression);
                }
            }
        }
    }
    /**
     * @private
     * @param {?} expressionItem
     * @return {?}
     */
    deselectParentRecursive(expressionItem) {
        /** @type {?} */
        const parent = expressionItem.parent;
        if (parent) {
            if (parent.selected) {
                parent.selected = false;
                /** @type {?} */
                const index = this.selectedGroups.indexOf(parent);
                this.selectedGroups.splice(index, 1);
            }
            this.deselectParentRecursive(parent);
        }
    }
    /**
     * @private
     * @return {?}
     */
    calculateContextMenuTarget() {
        /** @type {?} */
        const containerRect = this.expressionsContainer.nativeElement.getBoundingClientRect();
        /** @type {?} */
        const chips = this.chips.filter(c => this.selectedExpressions.indexOf(c.data) !== -1);
        /** @type {?} */
        let minTop = chips.reduce((t, c) => Math.min(t, c.elementRef.nativeElement.getBoundingClientRect().top), Number.MAX_VALUE);
        minTop = Math.max(containerRect.top, minTop);
        minTop = Math.min(containerRect.bottom, minTop);
        /** @type {?} */
        let maxRight = chips.reduce((r, c) => Math.max(r, c.elementRef.nativeElement.getBoundingClientRect().right), 0);
        maxRight = Math.max(maxRight, containerRect.left);
        maxRight = Math.min(maxRight, containerRect.right);
        this._overlaySettings.positionStrategy.settings.target = new Point(maxRight, minTop);
    }
    /**
     * @private
     * @param {?} target
     * @return {?}
     */
    scrollElementIntoView(target) {
        /** @type {?} */
        const container = this.expressionsContainer.nativeElement;
        /** @type {?} */
        const targetOffset = target.offsetTop - container.offsetTop;
        /** @type {?} */
        const delta = 10;
        if (container.scrollTop + delta > targetOffset) {
            container.scrollTop = targetOffset - delta;
        }
        else if (container.scrollTop + container.clientHeight < targetOffset + target.offsetHeight + delta) {
            container.scrollTop = targetOffset + target.offsetHeight + delta - container.clientHeight;
        }
    }
    /**
     * @return {?}
     */
    ungroup() {
        /** @type {?} */
        const selectedGroup = this.contextualGroup;
        /** @type {?} */
        const parent = selectedGroup.parent;
        if (parent) {
            /** @type {?} */
            const index = parent.children.indexOf(selectedGroup);
            parent.children.splice(index, 1, ...selectedGroup.children);
            for (const expr of selectedGroup.children) {
                expr.parent = parent;
            }
        }
        this.clearSelection();
    }
    /**
     * @return {?}
     */
    deleteGroup() {
        /** @type {?} */
        const selectedGroup = this.contextualGroup;
        /** @type {?} */
        const parent = selectedGroup.parent;
        if (parent) {
            /** @type {?} */
            const index = parent.children.indexOf(selectedGroup);
            parent.children.splice(index, 1);
        }
        else {
            this.rootGroup = null;
        }
        this.clearSelection();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    selectFilteringLogic(event) {
        this.contextualGroup.operator = (/** @type {?} */ (event.index));
    }
    /**
     * @param {?} name
     * @return {?}
     */
    getConditionFriendlyName(name) {
        return this.grid.resourceStrings[`igx_grid_filter_${name}`] || name;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    isDate(value) {
        return value instanceof Date;
    }
    /**
     * @return {?}
     */
    onExpressionsScrolled() {
        if (!this.contextMenuToggle.collapsed) {
            this.calculateContextMenuTarget();
            this.contextMenuToggle.reposition();
        }
    }
    /**
     * @param {?} eventArgs
     * @return {?}
     */
    invokeClick(eventArgs) {
        if (eventArgs.key === "Enter" /* ENTER */ || eventArgs.key === " " /* SPACE */ || eventArgs.key === "Spacebar" /* SPACE_IE */) {
            eventArgs.preventDefault();
            ((/** @type {?} */ (eventArgs.currentTarget))).click();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onOutletPointerDown(event) {
        // This prevents closing the select's dropdown when clicking the scroll
        event.preventDefault();
    }
    /**
     * @return {?}
     */
    getConditionList() {
        return this.selectedColumn ? this.selectedColumn.filters.conditionList() : [];
    }
    /**
     * @param {?} filteringService
     * @param {?} overlayService
     * @param {?} overlayComponentId
     * @return {?}
     */
    initialize(filteringService, overlayService, overlayComponentId) {
        this.filteringService = filteringService;
        this.overlayService = overlayService;
        this.overlayComponentId = overlayComponentId;
        this.filteringService.registerSVGIcons();
        // Set pointer-events to none of the overlay content element which blocks the grid interaction after dragging
        this.overlayService.onOpened.pipe(first()).subscribe(() => {
            if (this.element.nativeElement.parentElement) {
                this.element.nativeElement.parentElement.style['pointer-events'] = 'none';
            }
        });
        if (this.grid.advancedFilteringExpressionsTree) {
            this.rootGroup = this.createExpressionGroupItem(this.grid.advancedFilteringExpressionsTree);
            this.currentGroup = this.rootGroup;
        }
    }
    /**
     * @param {?} expression
     * @param {?=} afterExpression
     * @return {?}
     */
    context(expression, afterExpression) {
        return {
            $implicit: expression,
            afterExpression
        };
    }
    /**
     * @return {?}
     */
    onClearButtonClick() {
        this.clearSelection();
        this.cancelOperandAdd();
        this.cancelOperandEdit();
        this.currentGroup = null;
        this.rootGroup = null;
        this.grid.advancedFilteringExpressionsTree = null;
    }
    /**
     * @return {?}
     */
    closeDialog() {
        if (this.overlayComponentId) {
            this.overlayService.hide(this.overlayComponentId);
        }
    }
    /**
     * @return {?}
     */
    applyChanges() {
        this.exitOperandEdit();
        this.grid.advancedFilteringExpressionsTree = this.createExpressionsTreeFromGroupItem(this.rootGroup);
    }
    /**
     * @return {?}
     */
    onApplyButtonClick() {
        this.applyChanges();
        this.closeDialog();
    }
    /**
     * @return {?}
     */
    onChipSelectionEnd() {
        /** @type {?} */
        const contextualGroup = this.findSingleSelectedGroup();
        if (contextualGroup || this.selectedExpressions.length > 1) {
            this.contextualGroup = contextualGroup;
            this.calculateContextMenuTarget();
            if (this.contextMenuToggle.collapsed) {
                this.contextMenuToggle.open(this._overlaySettings);
            }
            else {
                this.contextMenuToggle.reposition();
            }
        }
    }
}
IgxAdvancedFilteringDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-advanced-filtering-dialog',
                template: "<article\n    class=\"igx-advanced-filter\"\n    igxDrag\n    [ghost]=\"false\"\n    [dragTolerance]=\"0\"\n    (dragStart)=\"dragStart($event)\"\n    (dragEnd)=\"dragEnd($event)\"\n    (keydown)=\"onKeyDown($event)\"\n    [ngClass]=\"{\n        'igx-advanced-filter--cosy': grid.displayDensity === 'cosy',\n        'igx-advanced-filter--compact': grid.displayDensity === 'compact'\n    }\"\n>\n    <header class=\"igx-advanced-filter__header\" igxDragHandle>\n        <h4 class=\"igx-typography__h6\" style=\"pointer-events: none;\">\n            {{ grid.resourceStrings.igx_grid_advanced_filter_title }}\n        </h4>\n        <div class=\"igx-filter-legend\">\n            <div class=\"igx-filter-legend__item--and\">\n                <span>{{ grid.resourceStrings.igx_grid_advanced_filter_and_label }}</span>\n            </div>\n            <div class=\"igx-filter-legend__item--or\">\n                <span>{{ grid.resourceStrings.igx_grid_advanced_filter_or_label }}</span>\n            </div>\n        </div>\n    </header>\n\n    <article #expressionsContainer\n             class=\"igx-advanced-filter__main\"\n             (scroll)=\"onExpressionsScrolled()\">\n        <ng-container *ngIf=\"!rootGroup\">\n\n            <button #addRootAndGroupButton\n                igxButton=\"outlined\"\n                [displayDensity]=\"displayDensity\"\n                (click)=\"addAndGroup()\"\n            >\n                <igx-icon fontSet=\"material\">add</igx-icon>\n                <span>{{grid.resourceStrings.igx_grid_advanced_filter_and_group}}</span>\n            </button>\n\n            <button igxButton=\"outlined\" [displayDensity]=\"displayDensity\" (click)=\"addOrGroup()\">\n                <igx-icon fontSet=\"material\">add</igx-icon>\n                <span>{{grid.resourceStrings.igx_grid_advanced_filter_or_group}}</span>\n            </button>\n\n            <div class=\"igx-filter-empty\">\n                <h6 class=\"igx-filter-empty__title\">\n                    {{grid.resourceStrings.igx_grid_advanced_filter_initial_text}}\n                </h6>\n            </div>\n        </ng-container>\n\n        <ng-template #addExpressionsTemplate let-expressionItem let-afterExpression=\"afterExpression\">\n            <button #addConditionButton\n                    igxButton=\"outlined\"\n                    [displayDensity]=\"displayDensity\"\n                    [disabled]=\"editedExpression\"\n                    (click)=\"addCondition(expressionItem, afterExpression)\"\n            >\n                <igx-icon fontSet=\"material\">add</igx-icon>\n                <span>{{grid.resourceStrings.igx_grid_advanced_filter_add_condition}}</span>\n            </button>\n\n            <button igxButton=\"outlined\"\n                    [displayDensity]=\"displayDensity\"\n                    [disabled]=\"editedExpression\"\n                    (click)=\"addAndGroup(expressionItem, afterExpression)\">\n                <igx-icon fontSet=\"material\">add</igx-icon>\n                <span>{{grid.resourceStrings.igx_grid_advanced_filter_and_group}}</span>\n            </button>\n\n            <button igxButton=\"outlined\"\n                    [displayDensity]=\"displayDensity\"\n                    [disabled]=\"editedExpression\"\n                    (click)=\"addOrGroup(expressionItem, afterExpression)\">\n                <igx-icon fontSet=\"material\">add</igx-icon>\n                <span>{{grid.resourceStrings.igx_grid_advanced_filter_or_group}}</span>\n            </button>\n\n        </ng-template>\n\n        <ng-template #filterOperandTemplate let-expressionItem>\n            <div *ngIf=\"!expressionItem.inEditMode\"\n                class=\"igx-filter-tree__expression-item\"\n                (mouseenter)=\"expressionItem.hovered = true\"\n                (mouseleave)=\"expressionItem.hovered = false\"\n                >\n                <igx-chip [data]=\"expressionItem\"\n                          [displayDensity]=\"displayDensity === 'compact' ? 'cosy' : displayDensity\"\n                          [removable]=\"true\"\n                          [selected]=\"expressionItem.selected\"\n                          (keydown)=\"invokeClick($event)\"\n                          (click)=\"onChipClick(expressionItem)\"\n                          (dblclick)=\"onChipDblClick(expressionItem)\"\n                          (onRemove)=\"onChipRemove(expressionItem)\"\n                          (onSelectionDone)=\"onChipSelectionEnd()\"\n                    >\n                    <span igxPrefix class=\"igx-filter-tree__expression-column\">{{ expressionItem.expression.fieldName }}</span>\n                    <igx-icon\n                        igxPrefix\n                        fontSet=\"filtering-icons\"\n                        [name]=\"expressionItem.expression.condition.iconName\"\n                    >\n                    </igx-icon>\n                    <span class=\"igx-filter-tree__expression-condition\">\n                        {{ getConditionFriendlyName(expressionItem.expression.condition.name) }}\n                    </span>\n                    <span igxSuffix *ngIf=\"!expressionItem.expression.condition.isUnary\">\n                        {{ isDate(expressionItem.expression.searchVal) ? (expressionItem.expression.searchVal | igxdate:grid.locale) : expressionItem.expression.searchVal }}\n                    </span>\n                </igx-chip>\n                <div class=\"igx-filter-tree__expression-actions\"\n                *ngIf=\"(expressionItem.selected && selectedExpressions.length === 1) || expressionItem.hovered\">\n                    <igx-icon\n                        tabindex=\"0\"\n                        (keydown)=\"invokeClick($event)\"\n                        (click)=\"enterExpressionEdit(expressionItem)\">\n                        edit\n                    </igx-icon>\n                    <igx-icon\n                        tabindex=\"0\"\n                        (keydown)=\"invokeClick($event)\"\n                        (click)=\"enterExpressionAdd(expressionItem)\"\n                        *ngIf=\"!expressionItem.inAddMode && (expressionItem.parent !== currentGroup || expressionItem !== currentGroup.children[currentGroup.children.length - 1])\"\n                    >\n                        add\n                    </igx-icon>\n                </div>\n            </div>\n\n            <div *ngIf=\"expressionItem.inEditMode\"\n                #editingInputsContainer\n                class=\"igx-filter-tree__inputs\"\n            >\n                <igx-select #columnSelect\n                            type=\"box\"\n                            [displayDensity]=\"'compact'\"\n                            [overlaySettings]=\"columnSelectOverlaySettings\"\n                            [placeholder]=\"grid.resourceStrings.igx_grid_advanced_filter_column_placeholder\"\n                            [(ngModel)]=\"selectedColumn\">\n                    <igx-select-item *ngFor=\"let column of filterableColumns\" [value]=\"column\">\n                        {{column.header || column.field}}\n                    </igx-select-item>\n                </igx-select>\n\n                <igx-select #conditionSelect\n                            type=\"box\"\n                            [displayDensity]=\"'compact'\"\n                            [overlaySettings]=\"conditionSelectOverlaySettings\"\n                            [placeholder]=\"grid.resourceStrings.igx_grid_filter_condition_placeholder\"\n                            [(ngModel)]=\"selectedCondition\"\n                            [disabled]=\"!selectedColumn\">\n                    <igx-icon *ngIf=\"selectedColumn && conditionSelect.value && selectedColumn.filters.condition(conditionSelect.value)\"\n                              igxPrefix\n                              fontSet=\"filtering-icons\"\n                              [name]=\"selectedColumn.filters.condition(conditionSelect.value).iconName\">\n                    </igx-icon>\n                    <igx-select-item *ngFor=\"let condition of getConditionList()\" [value]=\"condition\">\n                        <igx-icon fontSet=\"filtering-icons\"\n                                  [name]=\"selectedColumn.filters.condition(condition).iconName\">\n                        </igx-icon>\n                        <span>{{getConditionFriendlyName(condition)}}</span>\n                    </igx-select-item>\n                </igx-select>\n\n                <igx-input-group *ngIf=\"!selectedColumn || selectedColumn.dataType !== 'date'\"\n                                 type=\"box\"\n                                 [disabled]=\"!selectedColumn || !selectedCondition || (selectedColumn && selectedColumn.filters.condition(selectedCondition).isUnary)\"\n                                 [displayDensity]=\"'compact'\">\n                    <input #searchValueInput\n                           igxInput\n                           [type]=\"selectedColumn && selectedColumn.dataType === 'number' ? 'number' : 'text'\"\n                           [placeholder]=\"grid.resourceStrings.igx_grid_advanced_filter_value_placeholder\"\n                           [(ngModel)]=\"searchValue\"/>\n                </igx-input-group>\n\n                <igx-date-picker *ngIf=\"selectedColumn && selectedColumn.dataType === 'date'\"\n                                 mode=\"dropdown\"\n                                 [(ngModel)]=\"searchValue\"\n                                 [locale]=\"grid.locale\"\n                                 [outlet]=\"grid.outletDirective\">\n                    <ng-template igxDatePickerTemplate let-openDialog=\"openDialog\" let-value=\"value\">\n                        <igx-input-group #dropDownTarget type=\"box\" [displayDensity]=\"'compact'\" [supressInputAutofocus]=\"true\">\n                            <input #searchValueInput\n                                    igxInput\n                                    tabindex=\"0\"\n                                    (keydown)=\"invokeClick($event)\"\n                                    (click)=\"openDialog(dropDownTarget.element.nativeElement)\"\n                                    [placeholder]=\"grid.resourceStrings.igx_grid_filter_row_date_placeholder\"\n                                    autocomplete=\"off\"\n                                    [value]=\"value | igxdate: grid.locale\"\n                                    [readonly]=\"true\"\n                                    [disabled]=\"!selectedColumn || !selectedCondition || (selectedColumn && selectedColumn.filters.condition(selectedCondition).isUnary)\"/>\n                        </igx-input-group>\n                    </ng-template>\n                </igx-date-picker>\n\n                <div class=\"igx-filter-tree__inputs-actions\">\n                    <button igxButton=\"icon\"\n                            [displayDensity]=\"displayDensity\"\n                            [disabled]=\"!operandCanBeCommitted()\"\n                            (click)=\"commitOperandEdit()\">\n                        <igx-icon fontSet=\"material\">check</igx-icon>\n                    </button>\n                    <button igxButton=\"icon\"\n                            [displayDensity]=\"displayDensity\"\n                            (click)=\"cancelOperandEdit()\">\n                        <igx-icon fontSet=\"material\">close</igx-icon>\n                    </button>\n                </div>\n            </div>\n\n            <div *ngIf=\"expressionItem.inAddMode\"\n                #addModeContainer\n                class=\"igx-filter-tree__buttons\"\n            >\n                <ng-container *ngTemplateOutlet=\"addExpressionsTemplate; context: context(expressionItem.parent, expressionItem)\"></ng-container>\n                <button igxButton=\"icon\"\n                        [displayDensity]=\"displayDensity\"\n                        (click)=\"cancelOperandAdd()\">\n                    <igx-icon fontSet=\"material\">close</igx-icon>\n                </button>\n            </div>\n\n        </ng-template>\n\n        <ng-template #expressionTreeTemplate let-expressionItem>\n            <div class=\"igx-filter-tree\">\n                <div tabindex=\"0\"\n                     class=\"igx-filter-tree__line\"\n                     [ngClass]=\"{\n                         'igx-filter-tree__line--and': expressionItem.operator === 0,\n                         'igx-filter-tree__line--or': expressionItem.operator === 1,\n                         'igx-filter-tree__line--selected': expressionItem.selected\n                     }\"\n                     (keydown)=\"invokeClick($event)\"\n                     (click)=\"onGroupClick(expressionItem)\"\n                ></div>\n\n                <div class=\"igx-filter-tree__expression\">\n                    <ng-container *ngFor=\"let expr of expressionItem.children\">\n                        <ng-container *ngTemplateOutlet=\"isExpressionGroup(expr) ? expressionTreeTemplate : filterOperandTemplate; context: context(expr)\"></ng-container>\n                    </ng-container>\n                    <div *ngIf=\"currentGroup === expressionItem\"\n                        #currentGroupButtonsContainer\n                        class=\"igx-filter-tree__buttons\">\n                        <ng-container *ngTemplateOutlet=\"addExpressionsTemplate; context: context(expressionItem)\"></ng-container>\n                        <button igxButton=\"outlined\"\n                                *ngIf=\"expressionItem !== rootGroup\"\n                                [displayDensity]=\"displayDensity\"\n                                [disabled]=\"editedExpression || expressionItem.children.length < 2\"\n                                (click)=\"endGroup(expressionItem)\">\n                            <span>{{grid.resourceStrings.igx_grid_advanced_filter_end_group}}</span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </ng-template>\n\n        <ng-container *ngIf=\"rootGroup\">\n            <ng-container *ngTemplateOutlet=\"expressionTreeTemplate; context: context(rootGroup)\"></ng-container>\n        </ng-container>\n\n        <div igxToggle\n            class=\"igx-filter-contextual-menu\"\n            (keydown)=\"onKeyDown($event)\"\n            [ngClass]=\"{\n                'igx-filter-contextual-menu--cosy': displayDensity === 'cosy',\n                'igx-filter-contextual-menu--compact': displayDensity === 'compact'\n            }\"\n        >\n            <button igxButton=\"icon\"\n                    class=\"igx-filter-contextual-menu__close-btn\"\n                    (click)=\"clearSelection()\"\n            >\n                <igx-icon>close</igx-icon>\n            </button>\n\n            <ng-container *ngIf=\"contextualGroup\">\n                <igx-buttongroup [displayDensity]=\"displayDensity\"\n                                 [multiSelection]=\"false\"\n                                 [values]=\"filteringLogics\"\n                                 type=\"outline\"\n                                 (onSelect)=\"selectFilteringLogic($event)\">\n                </igx-buttongroup>\n\n                <button\n                    igxButton=\"outlined\"\n                    [displayDensity]=\"displayDensity\"\n                    [disabled]=\"!contextualGroup.parent\"\n                    (click)=\"ungroup()\"\n                >\n                    <igx-icon fontSet=\"filtering-icons\" name=\"ungroup\"></igx-icon>\n                    <span>{{grid.resourceStrings.igx_grid_advanced_filter_ungroup}}</span>\n                </button>\n                <button\n                    igxButton=\"outlined\"\n                    [displayDensity]=\"displayDensity\"\n                    (click)=\"deleteGroup()\"\n                    class=\"igx-filter-contextual-menu__delete-btn\"\n                >\n                    <igx-icon>delete</igx-icon>\n                    <span>{{grid.resourceStrings.igx_grid_advanced_filter_delete}}</span>\n                </button>\n            </ng-container>\n            <ng-container *ngIf=\"!contextualGroup\">\n                <button\n                    igxButton=\"outlined\"\n                    [displayDensity]=\"displayDensity\"\n                    (click)=\"createAndGroup()\"\n                >\n                    {{grid.resourceStrings.igx_grid_advanced_filter_create_and_group}}\n                </button>\n                <button\n                    igxButton=\"outlined\"\n                    [displayDensity]=\"displayDensity\"\n                    (click)=\"createOrGroup()\"\n                >\n                    {{grid.resourceStrings.igx_grid_advanced_filter_create_or_group}}\n                </button>\n                <button\n                    igxButton=\"outlined\"\n                    [displayDensity]=\"displayDensity\"\n                    (click)=\"deleteFilters()\"\n                    class=\"igx-filter-contextual-menu__delete-btn\"\n                >\n                    {{grid.resourceStrings.igx_grid_advanced_filter_delete_filters}}\n                </button>\n            </ng-container>\n        </div>\n    </article>\n\n    <footer class=\"igx-excel-filter__secondary-footer\">\n        <button igxButton [displayDensity]=\"displayDensity\" (click)=\"onClearButtonClick()\">{{ grid.resourceStrings.igx_grid_excel_custom_dialog_clear }}</button>\n\n        <div>\n            <button igxButton [displayDensity]=\"displayDensity\" (click)=\"closeDialog()\">{{ grid.resourceStrings.igx_grid_excel_cancel }}</button>\n            <button igxButton=\"raised\" [displayDensity]=\"displayDensity\" (click)=\"onApplyButtonClick()\">\n                {{ grid.resourceStrings.igx_grid_excel_apply }}\n            </button>\n        </div>\n    </footer>\n</article>\n<div #overlayOutlet\n     igxOverlayOutlet\n     class=\"igx-advanced-filter__outlet\"\n     (pointerdown)=\"onOutletPointerDown($event)\">\n</div>\n"
            }] }
];
/** @nocollapse */
IgxAdvancedFilteringDialogComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
IgxAdvancedFilteringDialogComponent.propDecorators = {
    filteringService: [{ type: Input }],
    overlayComponentId: [{ type: Input }],
    overlayService: [{ type: Input }],
    columnSelect: [{ type: ViewChild, args: ['columnSelect', { read: IgxSelectComponent, static: false },] }],
    conditionSelect: [{ type: ViewChild, args: ['conditionSelect', { read: IgxSelectComponent, static: false },] }],
    searchValueInput: [{ type: ViewChild, args: ['searchValueInput', { read: ElementRef, static: false },] }],
    addRootAndGroupButton: [{ type: ViewChild, args: ['addRootAndGroupButton', { read: ElementRef, static: false },] }],
    addConditionButton: [{ type: ViewChild, args: ['addConditionButton', { read: ElementRef, static: false },] }],
    editingInputsContainer: [{ type: ViewChild, args: ['editingInputsContainer', { read: ElementRef, static: false },] }],
    addModeContainer: [{ type: ViewChild, args: ['addModeContainer', { read: ElementRef, static: false },] }],
    currentGroupButtonsContainer: [{ type: ViewChild, args: ['currentGroupButtonsContainer', { read: ElementRef, static: false },] }],
    contextMenuToggle: [{ type: ViewChild, args: [IgxToggleDirective, { static: true },] }],
    chips: [{ type: ViewChildren, args: [IgxChipComponent,] }],
    expressionsContainer: [{ type: ViewChild, args: ['expressionsContainer', { static: true },] }],
    overlayOutlet: [{ type: ViewChild, args: ['overlayOutlet', { read: IgxOverlayOutletDirective, static: true },] }],
    display: [{ type: HostBinding, args: ['style.display',] }]
};
if (false) {
    /** @type {?} */
    IgxAdvancedFilteringDialogComponent.prototype.filteringService;
    /** @type {?} */
    IgxAdvancedFilteringDialogComponent.prototype.overlayComponentId;
    /** @type {?} */
    IgxAdvancedFilteringDialogComponent.prototype.overlayService;
    /** @type {?} */
    IgxAdvancedFilteringDialogComponent.prototype.rootGroup;
    /** @type {?} */
    IgxAdvancedFilteringDialogComponent.prototype.selectedExpressions;
    /** @type {?} */
    IgxAdvancedFilteringDialogComponent.prototype.selectedGroups;
    /** @type {?} */
    IgxAdvancedFilteringDialogComponent.prototype.currentGroup;
    /** @type {?} */
    IgxAdvancedFilteringDialogComponent.prototype.editedExpression;
    /** @type {?} */
    IgxAdvancedFilteringDialogComponent.prototype.addModeExpression;
    /** @type {?} */
    IgxAdvancedFilteringDialogComponent.prototype.contextualGroup;
    /** @type {?} */
    IgxAdvancedFilteringDialogComponent.prototype.filteringLogics;
    /** @type {?} */
    IgxAdvancedFilteringDialogComponent.prototype.selectedCondition;
    /** @type {?} */
    IgxAdvancedFilteringDialogComponent.prototype.searchValue;
    /** @type {?} */
    IgxAdvancedFilteringDialogComponent.prototype._positionSettings;
    /** @type {?} */
    IgxAdvancedFilteringDialogComponent.prototype._overlaySettings;
    /** @type {?} */
    IgxAdvancedFilteringDialogComponent.prototype.columnSelectOverlaySettings;
    /** @type {?} */
    IgxAdvancedFilteringDialogComponent.prototype.conditionSelectOverlaySettings;
    /** @type {?} */
    IgxAdvancedFilteringDialogComponent.prototype.columnSelect;
    /** @type {?} */
    IgxAdvancedFilteringDialogComponent.prototype.conditionSelect;
    /** @type {?} */
    IgxAdvancedFilteringDialogComponent.prototype.searchValueInput;
    /** @type {?} */
    IgxAdvancedFilteringDialogComponent.prototype.addRootAndGroupButton;
    /** @type {?} */
    IgxAdvancedFilteringDialogComponent.prototype.addConditionButton;
    /** @type {?} */
    IgxAdvancedFilteringDialogComponent.prototype.contextMenuToggle;
    /** @type {?} */
    IgxAdvancedFilteringDialogComponent.prototype.chips;
    /**
     * @type {?}
     * @protected
     */
    IgxAdvancedFilteringDialogComponent.prototype.expressionsContainer;
    /** @type {?} */
    IgxAdvancedFilteringDialogComponent.prototype.overlayOutlet;
    /** @type {?} */
    IgxAdvancedFilteringDialogComponent.prototype.display;
    /**
     * @type {?}
     * @private
     */
    IgxAdvancedFilteringDialogComponent.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    IgxAdvancedFilteringDialogComponent.prototype._selectedColumn;
    /**
     * @type {?}
     * @private
     */
    IgxAdvancedFilteringDialogComponent.prototype._clickTimer;
    /**
     * @type {?}
     * @private
     */
    IgxAdvancedFilteringDialogComponent.prototype._dblClickDelay;
    /**
     * @type {?}
     * @private
     */
    IgxAdvancedFilteringDialogComponent.prototype._preventChipClick;
    /**
     * @type {?}
     * @private
     */
    IgxAdvancedFilteringDialogComponent.prototype._editingInputsContainer;
    /**
     * @type {?}
     * @private
     */
    IgxAdvancedFilteringDialogComponent.prototype._addModeContainer;
    /**
     * @type {?}
     * @private
     */
    IgxAdvancedFilteringDialogComponent.prototype._currentGroupButtonsContainer;
    /**
     * @type {?}
     * @private
     */
    IgxAdvancedFilteringDialogComponent.prototype.element;
    /** @type {?} */
    IgxAdvancedFilteringDialogComponent.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,