{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://igniteui-angular/lib/animations/easings.ts","ng://igniteui-angular/lib/animations/fade/index.ts","ng://igniteui-angular/lib/animations/flip/index.ts","ng://igniteui-angular/lib/animations/rotate/index.ts","ng://igniteui-angular/lib/animations/misc/shake.ts","ng://igniteui-angular/lib/animations/misc/pulsate.ts","ng://igniteui-angular/lib/animations/scale/index.ts","ng://igniteui-angular/lib/animations/slide/index.ts","ng://igniteui-angular/lib/animations/swing/index.ts","ng://igniteui-angular/lib/animations/grow/index.ts","ng://igniteui-angular/lib/core/navigation/nav.service.ts","ng://igniteui-angular/lib/core/navigation/directives.ts","ng://igniteui-angular/lib/core/utils.ts","ng://igniteui-angular/lib/data-operations/sorting-expression.interface.ts","ng://igniteui-angular/lib/data-operations/operations.ts","ng://igniteui-angular/lib/data-operations/sorting-strategy.ts","ng://igniteui-angular/lib/data-operations/grouping-strategy.ts","ng://igniteui-angular/lib/data-operations/paging-state.interface.ts","ng://igniteui-angular/lib/data-operations/filtering-expression.interface.ts","ng://igniteui-angular/lib/data-operations/filtering-expressions-tree.ts","ng://igniteui-angular/lib/data-operations/filtering-strategy.ts","ng://igniteui-angular/lib/services/transaction/transaction.ts","ng://igniteui-angular/lib/data-operations/data-util.ts","ng://igniteui-angular/lib/services/exporter-common/export-utilities.ts","ng://igniteui-angular/lib/grids/api.service.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.filtering.pipe.ts","ng://igniteui-angular/lib/services/exporter-common/base-export-service.ts","ng://igniteui-angular/lib/services/csv/char-separated-value-data.ts","ng://igniteui-angular/lib/services/exporter-common/exporter-options-base.ts","ng://igniteui-angular/lib/services/csv/csv-exporter-options.ts","ng://igniteui-angular/lib/services/csv/csv-exporter.ts","ng://igniteui-angular/lib/services/excel/excel-enums.ts","ng://igniteui-angular/lib/services/excel/excel-strings.ts","ng://igniteui-angular/lib/services/excel/excel-files.ts","ng://igniteui-angular/lib/services/excel/excel-folders.ts","ng://igniteui-angular/lib/services/excel/excel-elements-factory.ts","ng://igniteui-angular/lib/services/excel/worksheet-data-dictionary.ts","ng://igniteui-angular/lib/services/excel/worksheet-data.ts","ng://igniteui-angular/lib/services/excel/excel-exporter.ts","ng://igniteui-angular/lib/services/excel/excel-exporter-options.ts","ng://igniteui-angular/lib/services/overlay/utilities.ts","ng://igniteui-angular/lib/services/overlay/position/global-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/scroll-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/NoOpScrollStrategy.ts","ng://igniteui-angular/lib/core/deprecateDecorators.ts","ng://igniteui-angular/lib/services/overlay/overlay.ts","ng://igniteui-angular/lib/services/overlay/position/container-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/position/connected-positioning-strategy.ts","ng://igniteui-angular/lib/services/overlay/position/base-fit-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/position/auto-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/position/elastic-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/absolute-scroll-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/block-scroll-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/close-scroll-strategy.ts","ng://igniteui-angular/lib/services/transaction/base-transaction.ts","ng://igniteui-angular/lib/services/transaction/igx-transaction.ts","ng://igniteui-angular/lib/services/transaction/igx-hierarchical-transaction.ts","ng://igniteui-angular/lib/directives/toggle/toggle.directive.ts","ng://igniteui-angular/lib/drop-down/drop-down.common.ts","ng://igniteui-angular/lib/core/selection.ts","ng://igniteui-angular/lib/drop-down/drop-down-group.component.ts","ng://igniteui-angular/lib/drop-down/drop-down-item.base.ts","ng://igniteui-angular/lib/drop-down/drop-down-item.component.ts","ng://igniteui-angular/lib/core/displayDensity.ts","ng://igniteui-angular/lib/drop-down/drop-down.base.ts","ng://igniteui-angular/lib/directives/for-of/display.container.ts","ng://igniteui-angular/lib/directives/for-of/base.helper.component.ts","ng://igniteui-angular/lib/directives/for-of/horizontal.virtual.helper.component.ts","ng://igniteui-angular/lib/directives/for-of/virtual.helper.component.ts","ng://igniteui-angular/lib/directives/scroll-inertia/scroll_inertia.directive.ts","ng://igniteui-angular/lib/directives/for-of/for_of.sync.service.ts","ng://igniteui-angular/lib/directives/for-of/for_of.directive.ts","ng://igniteui-angular/lib/drop-down/drop-down.component.ts","ng://igniteui-angular/lib/drop-down/drop-down-navigation.directive.ts","ng://igniteui-angular/lib/drop-down/index.ts","ng://igniteui-angular/lib/directives/hint/hint.directive.ts","ng://igniteui-angular/lib/input-group/input-group.common.ts","ng://igniteui-angular/lib/directives/input/input.directive.ts","ng://igniteui-angular/lib/directives/label/label.directive.ts","ng://igniteui-angular/lib/directives/prefix/prefix.directive.ts","ng://igniteui-angular/lib/directives/suffix/suffix.directive.ts","ng://igniteui-angular/lib/input-group/input-group.component.ts","ng://igniteui-angular/lib/directives/autocomplete/autocomplete.directive.ts","ng://igniteui-angular/lib/directives/button/button.directive.ts","ng://igniteui-angular/lib/directives/divider/divider.directive.ts","ng://igniteui-angular/lib/directives/drag-drop/drag-drop.strategy.ts","ng://igniteui-angular/lib/directives/drag-drop/drag-handle.directive.ts","ng://igniteui-angular/lib/directives/drag-drop/drag-drop.directive.ts","ng://igniteui-angular/lib/directives/filter/filter.directive.ts","ng://igniteui-angular/lib/directives/focus/focus.directive.ts","ng://igniteui-angular/lib/directives/layout/layout.directive.ts","ng://igniteui-angular/lib/directives/mask/mask-helper.ts","ng://igniteui-angular/lib/directives/mask/mask.directive.ts","ng://igniteui-angular/lib/radio/radio.component.ts","ng://igniteui-angular/lib/directives/ripple/ripple.directive.ts","ng://igniteui-angular/lib/directives/radio/radio-group.directive.ts","ng://igniteui-angular/lib/directives/text-highlight/text-highlight.directive.ts","ng://igniteui-angular/lib/directives/text-selection/text-selection.directive.ts","ng://igniteui-angular/lib/directives/tooltip/tooltip.directive.ts","ng://igniteui-angular/lib/data-operations/filtering-condition.ts","ng://igniteui-angular/lib/data-operations/filtering-state.interface.ts","ng://igniteui-angular/lib/data-operations/groupby-record.interface.ts","ng://igniteui-angular/lib/icon/icon.service.ts","ng://igniteui-angular/lib/icon/icon.component.ts","ng://igniteui-angular/lib/icon/index.ts","ng://igniteui-angular/lib/avatar/avatar.component.ts","ng://igniteui-angular/lib/badge/badge.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel-body.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.common.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.directives.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel-header.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.module.ts","ng://igniteui-angular/lib/banner/banner.directives.ts","ng://igniteui-angular/lib/banner/banner.component.ts","ng://igniteui-angular/lib/buttonGroup/buttonGroup.component.ts","ng://igniteui-angular/lib/core/dates/dateRange.ts","ng://igniteui-angular/lib/calendar/calendar.ts","ng://igniteui-angular/lib/calendar/calendar.directives.ts","ng://igniteui-angular/lib/calendar/calendar-base.ts","ng://igniteui-angular/lib/calendar/month-picker-base.ts","ng://igniteui-angular/lib/calendar/months-view/months-view.component.ts","ng://igniteui-angular/lib/calendar/years-view/years-view.component.ts","ng://igniteui-angular/lib/calendar/days-view/day-item.component.ts","ng://igniteui-angular/lib/calendar/days-view/daysview-navigation.service.ts","ng://igniteui-angular/lib/calendar/days-view/days-view.component.ts","ng://igniteui-angular/lib/calendar/calendar.component.ts","ng://igniteui-angular/lib/calendar/month-picker/month-picker.component.ts","ng://igniteui-angular/lib/calendar/calendar.module.ts","ng://igniteui-angular/lib/card/card.component.ts","ng://igniteui-angular/lib/carousel/carousel.component.ts","ng://igniteui-angular/lib/checkbox/checkbox.component.ts","ng://igniteui-angular/lib/chips/chip.component.ts","ng://igniteui-angular/lib/chips/chips-area.component.ts","ng://igniteui-angular/lib/chips/chips.module.ts","ng://igniteui-angular/lib/combo/combo.directives.ts","ng://igniteui-angular/lib/combo/combo.api.ts","ng://igniteui-angular/lib/combo/combo-item.component.ts","ng://igniteui-angular/lib/combo/combo-add-item.component.ts","ng://igniteui-angular/lib/combo/combo-dropdown.component.ts","ng://igniteui-angular/lib/combo/combo.common.ts","ng://igniteui-angular/lib/combo/combo.pipes.ts","ng://igniteui-angular/lib/combo/combo.component.ts","ng://igniteui-angular/lib/date-picker/date-picker.utils.ts","ng://igniteui-angular/lib/date-picker/date-picker.pipes.ts","ng://igniteui-angular/lib/date-picker/date-picker.common.ts","ng://igniteui-angular/lib/date-picker/date-picker.directives.ts","ng://igniteui-angular/lib/core/enums.ts","ng://igniteui-angular/lib/date-picker/calendar-container.component.ts","ng://igniteui-angular/lib/date-picker/date-picker.component.ts","ng://igniteui-angular/lib/dialog/dialog.directives.ts","ng://igniteui-angular/lib/dialog/dialog.component.ts","ng://igniteui-angular/lib/core/grid-selection.ts","ng://igniteui-angular/lib/core/touch.ts","ng://igniteui-angular/lib/grids/common/enums.ts","ng://igniteui-angular/lib/grids/cell.component.ts","ng://igniteui-angular/lib/grids/row.component.ts","ng://igniteui-angular/lib/grids/watch-changes.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/row-island-api.service.ts","ng://igniteui-angular/lib/grids/summaries/grid-summary.ts","ng://igniteui-angular/lib/grids/common/templates.ts","ng://igniteui-angular/lib/grids/column.component.ts","ng://igniteui-angular/lib/grids/grid-column-resizing.service.ts","ng://igniteui-angular/lib/grids/grid.common.ts","ng://igniteui-angular/lib/grids/column-chooser-item-base.ts","ng://igniteui-angular/lib/grids/column-hiding-item.directive.ts","ng://igniteui-angular/lib/grids/column-chooser-base.ts","ng://igniteui-angular/lib/grids/column-hiding.component.ts","ng://igniteui-angular/lib/grids/column-pinning.component.ts","ng://igniteui-angular/lib/grids/grid-toolbar.component.ts","ng://igniteui-angular/lib/grids/grid.rowEdit.directive.ts","ng://igniteui-angular/lib/grids/grid/groupby-row.component.ts","ng://igniteui-angular/lib/grids/grid-navigation.service.ts","ng://igniteui-angular/lib/grids/filtering/svgIcons.ts","ng://igniteui-angular/lib/grids/filtering/grid-filtering.service.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-search.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-default-expression.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-date-expression.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-custom-dialog.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-sorting.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/grid.excel-style-filtering.component.ts","ng://igniteui-angular/lib/grids/grid-header.component.ts","ng://igniteui-angular/lib/grids/filtering/grid-filtering-cell.component.ts","ng://igniteui-angular/lib/grids/grid-header-group.component.ts","ng://igniteui-angular/lib/core/i18n/resources.ts","ng://igniteui-angular/lib/core/i18n/grid-resources.ts","ng://igniteui-angular/lib/core/i18n/time-picker-resources.ts","ng://igniteui-angular/lib/core/i18n/paginator-resources.ts","ng://igniteui-angular/lib/grids/summaries/grid-summary.service.ts","ng://igniteui-angular/lib/grids/summaries/summary-cell.component.ts","ng://igniteui-angular/lib/grids/summaries/summary-row.component.ts","ng://igniteui-angular/lib/grids/drag-select.directive.ts","ng://igniteui-angular/lib/directives/template-outlet/template_outlet.directive.ts","ng://igniteui-angular/lib/grids/grid-column-resizer.component.ts","ng://igniteui-angular/lib/grids/filtering/grid-filtering-row.component.ts","ng://igniteui-angular/lib/select/select-item.component.ts","ng://igniteui-angular/lib/select/select-positioning-strategy.ts","ng://igniteui-angular/lib/select/select.component.ts","ng://igniteui-angular/lib/grids/filtering/advanced-filtering/advanced-filtering-dialog.component.ts","ng://igniteui-angular/lib/grids/igx-row-selectors.module.ts","ng://igniteui-angular/lib/grids/grid/grid.directives.ts","ng://igniteui-angular/lib/grids/row-drag.directive.ts","ng://igniteui-angular/lib/grids/grid-base.component.ts","ng://igniteui-angular/lib/grids/grid-footer/grid-footer.component.ts","ng://igniteui-angular/lib/grids/summaries/grid-root-summary.pipe.ts","ng://igniteui-angular/lib/progressbar/progressbar.common.ts","ng://igniteui-angular/lib/progressbar/progressbar.component.ts","ng://igniteui-angular/lib/select/select-group.component.ts","ng://igniteui-angular/lib/select/select-navigation.directive.ts","ng://igniteui-angular/lib/select/select.module.ts","ng://igniteui-angular/lib/paginator/paginator.component.ts","ng://igniteui-angular/lib/grids/grid-common.pipes.ts","ng://igniteui-angular/lib/grids/grid-pipes.module.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-column-moving.component.ts","ng://igniteui-angular/lib/list/list.common.ts","ng://igniteui-angular/lib/list/list-item.component.ts","ng://igniteui-angular/lib/list/list.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-search.pipe.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/grid.excel-style-filtering.module.ts","ng://igniteui-angular/lib/grids/grid-common.module.ts","ng://igniteui-angular/lib/grids/grid/grid-api.service.ts","ng://igniteui-angular/lib/grids/grid-mrl-navigation.service.ts","ng://igniteui-angular/lib/grids/grid/grid.component.ts","ng://igniteui-angular/lib/grids/grid/grid.pipes.ts","ng://igniteui-angular/lib/grids/grid/grid-row.component.ts","ng://igniteui-angular/lib/grids/grid/grid.summary.pipe.ts","ng://igniteui-angular/lib/grids/grid/grid.module.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid-api.service.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid-navigation.service.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.directives.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.component.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid-row.component.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.pipes.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-cell.component.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.summary.pipe.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.module.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid-navigation.service.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid-base.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid-api.service.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/row-island.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/child-grid-row.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-cell.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-row.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid.pipes.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid.module.ts","ng://igniteui-angular/lib/navbar/navbar.component.ts","ng://igniteui-angular/lib/navigation-drawer/navigation-drawer.directives.ts","ng://igniteui-angular/lib/navigation-drawer/navigation-drawer.component.ts","ng://igniteui-angular/lib/navigation-drawer/navigation-drawer.module.ts","ng://igniteui-angular/lib/slider/slider.common.ts","ng://igniteui-angular/lib/slider/thumb/thumb-slider.component.ts","ng://igniteui-angular/lib/slider/label/thumb-label.component.ts","ng://igniteui-angular/lib/slider/slider.component.ts","ng://igniteui-angular/lib/snackbar/snackbar.component.ts","ng://igniteui-angular/lib/switch/switch.component.ts","ng://igniteui-angular/lib/tabbar/tabbar.component.ts","ng://igniteui-angular/lib/tabs/tabs.common.ts","ng://igniteui-angular/lib/tabs/tabs.directives.ts","ng://igniteui-angular/lib/tabs/tabs-group.component.ts","ng://igniteui-angular/lib/tabs/tab-item.component.ts","ng://igniteui-angular/lib/tabs/tabs.component.ts","ng://igniteui-angular/lib/time-picker/time-picker.directives.ts","ng://igniteui-angular/lib/time-picker/time-picker.common.ts","ng://igniteui-angular/lib/time-picker/time-picker.pipes.ts","ng://igniteui-angular/lib/time-picker/time-picker.component.ts","ng://igniteui-angular/lib/toast/toast.component.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__values","o","m","Symbol","iterator","next","value","done","__read","e","ar","push","error","__spread","concat","quad","cubic","quart","quint","sine","expo","circ","back","base","style","opacity","animate","baseParams","delay","duration","easing","EaseOut","endOpacity","startOpacity","fadeIn","animation","params","fadeOut","baseRecipe","backfaceVisibility","transformStyle","keyframes","offset","transform","endAngle","endDistance","rotateX","rotateY","rotateZ","startAngle","startDistance","flipTop","flipBottom","flipLeft","flipRight","flipHorFwd","flipHorBck","flipVerFwd","flipVerBck","transformOrigin","baseInParams","xPos","yPos","baseOutParams","EaseIn","rotateInCenter","rotateOutCenter","rotateInTop","rotateOutTop","rotateInRight","rotateOutRight","rotateInBottom","rotateOutBottom","rotateInLeft","rotateOutLeft","rotateInTr","rotateOutTr","rotateInBr","rotateOutBr","rotateInBl","rotateOutBl","rotateInTl","rotateOutTl","rotateInDiagonal1","rotateOutDiagonal1","rotateInDiagonal2","rotateOutDiagonal2","rotateInHor","rotateOutHor","rotateInVer","rotateOutVer","direction","shakeHor","shakeVer","shakeTop","shakeBottom","shakeRight","shakeLeft","shakeCenter","shakeTr","shakeBr","shakeBl","shakeTl","heartbeatBase","animationTimingFunction","pulsateBase","pulsateParams","fromScale","toScale","blinkBase","pulsateFwd","pulsateBck","heartbeat","blink","midScale","scaleInCenter","scaleInBl","scaleInVerCenter","scaleInTop","scaleInLeft","scaleInVerTop","scaleInTr","scaleInTl","scaleInVerBottom","scaleInRight","scaleInHorCenter","scaleInBr","scaleInHorLeft","scaleInBottom","scaleInHorRight","scaleOutCenter","scaleOutBl","scaleOutBr","scaleOutVerCenter","scaleOutVerTop","scaleOutVerBottom","scaleOutTop","scaleOutLeft","scaleOutTr","scaleOutTl","scaleOutRight","scaleOutBottom","scaleOutHorCenter","scaleOutHorLeft","scaleOutHorRight","fromPosition","toPosition","slideInTop","slideInLeft","slideInRight","slideInBottom","slideInTr","slideInTl","slideInBr","slideInBl","slideOutTop","slideOutRight","slideOutBottom","slideOutLeft","slideOutTr","slideOutBr","slideOutBl","slideOutTl","swingBase","swingParams","swingOutParams","swingInTopFwd","swingInRightFwd","swingInBottomFwd","swingInLeftFwd","swingInTopBck","swingInRightBck","swingInBottomBck","swingInLeftBck","swingOutTopFwd","swingOutRightFwd","swingOutBottomFwd","swingOutLefttFwd","swingOutTopBck","swingOutRightBck","swingOutBottomBck","swingOutLeftBck","height","startHeight","endHeight","growVerIn","growVerOut","IgxNavigationService","navs","add","id","navItem","remove","get","toggle","args","_i","_a","open","close","IgxNavigationToggleDirective","nav","state","toggleNavigationDrawer","Directive","selector","Input","HostListener","IgxNavigationCloseDirective","closeNavigationDrawer","IgxNavigationModule","NgModule","declarations","exports","providers","cloneArray","array","deep","arr","cloneValue","mergeObjects","obj1","obj2","isObject","Error","_b","tslib_1.__values","keys","_c","isDate","Date","getTime","isArray","Map","Set","result","toString","isEqual","getNodeSizeViaRange","range","node","overflow","isFirefox","selectNodeContents","width","getBoundingClientRect","isIE","navigator","appVersion","indexOf","isEdge","test","userAgent","PlatformUtil","platformId","isBrowser","isPlatformBrowser","isIOS","window","Injectable","providedIn","type","Inject","PLATFORM_ID","isLeftClick","event","button","flatten","forEach","el","children","toArray","NAVIGATION_KEYS","ROW_EXPAND_KEYS","split","ROW_COLLAPSE_KEYS","SUPPORTED_KEYS","from","None","Asc","Desc","isHierarchyMatch","h1","h2","every","level","index","fieldName","getHierarchy","gRow","hierarchy","undefined","expression","groupParent","unshift","DefaultSortingStrategy","instance","_instance","sort","data","dir","ignoreCase","valueResolver","_this","reverse","SortingDirection","arraySort","compareObjects","compareValues","a","an","bn","toLowerCase","compareFn","IgxSorting","expressions","sortDataRecursive","groupedRecordsByExpression","groupval","res","len","getFieldValue","comparer","groupingComparer","expressionIndex","j","expr","gbData","gbDataLen","exprsLen","dataLen","strategy","groupDataRecursive","parent","grid","groupsRecords","fullResult","expansion","group","this_1","groupRow","records","groups","renderedRowHeight","expandState","find","expanded","defaultExpanded","recursiveResult","group_1","group_1_1","groupItem","slice","obj","IgxDataRecordSorting","tslib_1.__extends","IgxGrouping","groupBy","IncorrectPageIndex","IncorrectRecordsPerPage","And","Or","Regular","Advanced","FilteringExpressionsTree","operator","filteringOperands","empty","expressionTree","findIndex","isFilteringExpressionsTreeForColumn","expressionsTree","BaseFilteringStrategy","findMatchByExpression","rec","cond","condition","val","logic","searchVal","matchRecord","matchOperand","operand","FilteringLogic","FilteringStrategy","_super","_instace","filter","advancedExpressionsTree","ADD","DELETE","UPDATE","String","Number","Boolean","DataUtil","sorting","treeGridSort","hierarchicalData","hr","cloneTreeGridRecord","hierarchicalRecord","rowID","isFilteredOutParent","grouping","splice","page","recordsPerPage","countPages","countRecords","PagingError","isNaN","Math","ceil","correctPagingState","maxPage","mergeTransactions","transactions","primaryKey","deleteRows","item","rowId","transaction","TransactionType","newValue","map","mergeHierarchicalTransactions","childDataKey","path","parent_1","findParentFromPath","collection","updateIndex","x","deleteIndex","transactions_1","transactions_1_1","path_1","path_1_1","ExportUtilities","getKeysFromData","dataEntry","dataEntryMiddle","floor","dataEntryLast","keys1","keys2","keys3","isSpecialData","saveBlobToFile","blob","fileName","document","createElement","msSaveOrOpenBlob","url","URL","createObjectURL","download","href","body","appendChild","click","removeChild","revokeObjectURL","stringToArrayBuffer","buf","ArrayBuffer","view","Uint8Array","charCodeAt","hasValue","isNullOrWhitespaces","trim","GridBaseAPIService","editCellState","editRowState","destroyMap","get_column_by_name","name","columnList","col","field","get_summary_data","filteredData","enabled","getAggregatedChanges","getTransactionLog","getRowData","get_all_data","get_row_index_in_data","escape_editMode","crudService","end","get_cell_inEditMode","cell","record","get_row_by_key","rowSelector","dataRowList","row","rowData","get_row_by_index","rowIndex","rowList","get_cell_by_key","cells","column","get_cell_by_index","columnIndex","get_cell_by_visible_index","visibleColumnIndex","submit_value","update_cell","editValue","cancel","createEditEventArgs","onCellEdit","emit","castToNumber","oldValue","summaryService","clearSummaryCache","updateData","selectionService","isRowSelected","deselectRow","selectRowById","hasSummarizedColumns","removeSummaries","rowEditable","_pipeTrigger","rowValueInDataSource","rowCurrentValue","rowNewValue","_update_row","rowInEditMode","newData","getAggregatedValue","transactionState","getState","update_row","selected","hasSummarized","onRowEdit","hasChanges","endPending","newId","update_row_in_array","remove_grouping_expression","sortingState","sortingExpressions","prepare_sorting_expression","sort_multiple","expressions_1","expressions_1_1","each","term","conditionOrExpressionsTree","filteringTree","filteringExpressionsTree","endEdit","paging","fieldFilterIndex","prepare_filtering_expression","filter_global","columns","filteringIgnoreCase","clear_filter","filteringState","clear_sort","insertAtIndex","newExpressionsTree","oldExpressionsTreeIndex","newExpression","stateCollections","maxCollection","maxExpr","myExpr","clear_groupby","should_apply_number_style","dataType","DataType","get_data","includeTransactions","dataWithAddedInTransactionRows","get_filtered_data","getSortStrategyPerColumn","sortStrategy","addRowToData","deleteRowFromData","recordRef","deleteRowById","hasRowInNonDeletedState","onRowDeleted","clearHeaderCBState","notifyChanges","dataAfterDelete","refreshSearch","perPage","get_row_id","row_deleted_transaction","atInexistingPage","totalPages","TreeGridFilteringStrategy","filterImpl","filteredChildren","IgxTreeGridFilteringPipe","gridAPI","hierarchyData","filterStrategy","advancedFilteringExpressionsTree","pipeTrigger","resetFilteredOutProperty","expandAllRecursive","expansionStates","expandedStates","updateNonProcessedRecord","set","Pipe","pure","IgxBaseExporter","flatRecords","_isTreeGrid","_indexOfLastPinnedColumn","_sort","onRowExport","EventEmitter","onColumnExport","export","options","_columnList","hiddenColumns","lastVisbleColumnIndex","columnHeader","header","exportColumn","hidden","ignoreColumnsVisibility","ignoreColumnsOrder","visibleIndex","columnInfo","skip","formatter","skipFormatter","max","pinned","hiddenColumn","prepareData","exportData","k","skippedPinnedColumnsCount","columnsWithoutHeaderCount","columnExportArgs","dataToExport","exportRow","exportDataImplementation","resetDefaults","rowArgs","reduce","rawValue","originalRowData","rootRecords","prepareHierarchicalData","ignoreFiltering","filteringLogic","ignoreSorting","Output","CharSeparatedValueData","_data","valueDelimiter","_headerRecord","_dataRecords","_eor","_escapeCharacters","_delimiterLength","_isSpecialData","setDelimiter","_delimiter","processHeaderRecord","processDataRecords","processField","escapeChars","safeValue","some","v","includes","recordData","keys_1","keys_1_1","keyName","processRecord","keys_2","keys_2_1","currentData","dataRecords","currentData_1","currentData_1_1","IgxExporterOptionsBase","_fileExtension","setFileName","_fileName","endsWith","IgxCsvExporterOptions","fileType","getExtensionFromFileType","setFileType","fType","extension","CsvFileTypes","CSV","TSV","TAB","_valueDelimiter","_fileType","oldExt","pop","newName","replace","IgxCsvExporterService","onExportEnded","csvData","_stringData","saveFile","exportFile","Blob","RootExcelFolder","RootRelsExcelFolder","DocPropsExcelFolder","XLExcelFolder","XLRelsExcelFolder","ThemeExcelFolder","WorksheetsExcelFolder","WorksheetsRelsExcelFolder","TablesExcelFolder","RootRelsFile","AppFile","CoreFile","WorkbookRelsFile","ThemeFile","WorksheetFile","StyleFile","WorkbookFile","ContentTypesFile","SharedStringsFile","WorksheetRelsFile","TablesFile","ExcelStrings","getRels","XML_STRING","getApp","getCore","getTheme","getStyles","hasNonStringValues","cellXFCount","getWorkbook","getWorksheetRels","getWorkbookRels","hasSharedStrings","retVal","SHARED_STRING_RELATIONSHIP","getSheetXML","dimension","freezePane","cols","sheetData","hasTable","hasGroupedRows","outlineLevel","tableParts","sheetOutlineProp","sOutlineLevel","getSharedStringXML","count","uniqueCount","table","getContentTypesXML","contentTypes","getTablesXML","tableColumns","getExcelColumn","returnString","char","fromCharCode","writeElement","folder","worksheetData","file","isEmpty","dictionary","dataDictionary","maxOutlineLevel","rowHeight","columnCount","saveValue","rowCount","isTreeGridData","sCollapsed","sHidden","hasCollapsedParent","rowOutlineLevel","cellData","getCellData","columnWidths","widthInTwips","columnWidth","MIN_WIDTH","indexOfLastPinnedColumn","ignorePinning","frozenColumnCount","exportAsTable","join","columnName","cellValue","savedValue","isSavedAsString","dict","sortedValues","getKeys","sharedStrings","sortedValues_1","sortedValues_1_1","getSanitizedValue","stringsCount","lastColumn","values","sortString","sortingExpression","sc","childFiles","ExcelFileTypes","childFolders","ExcelFolderTypes","ExcelElementsFactory","getExcelFolder","getExcelFile","WorksheetDataDictionary","_dictionary","_widthsDictionary","_counter","dirtyKeyCollections","_calculateColumnWidth","_columnWidths","_columnTypeInfo","fill","isHeader","sanitizedValue","sanitizeValue","getTextWidth","maxWidth","getValue","_keysAreValid","_keys","metrics","getContext","measureText","TEXT_PADDING","_context","canvas","font","DEFAULT_FONT","WorksheetData","initializeData","_columnCount","_rowCount","_dataDictionary","actualData","IgxExcelExporterService","populateFolder","zip","_d","childFolder","folderIntance","zipFolder","folderName","_e","_f","childFile","maxLevel_1","_xlsx","JSZip","rootFolder","generateAsync","ZIP_OPTIONS","then","xlsx","atob","compression","IgxExcelExporterOptions","_columnWidth","_rowHeight","Left","Center","Right","Top","Middle","Bottom","Point","y","Util","getTargetRect","settings","targetRect","bottom","left","right","top","HTMLElement","targetPoint","getViewportRect","documentElement","clientWidth","clientHeight","scrollPosition","getViewportScrollPosition","documentRect","horizontalScrollPosition","scrollLeft","scrollX","verticalScrollPosition","scrollTop","scrollY","cloneInstance","object","clonedObj","getPrototypeOf","GlobalPositionStrategy","_defaultSettings","horizontalDirection","HorizontalAlignment","verticalDirection","VerticalAlignment","horizontalStartPoint","verticalStartPoint","openAnimation","closeAnimation","minSize","position","contentElement","size","initialCall","classList","parentElement","setPosition","justifyContent","alignItems","clone","scrollContainer","NoOpScrollStrategy","initialize","overlayService","attach","detach","ScrollStrategy","DeprecateMethod","message","isMessageShown","descriptor","originalMethod_1","targetName","showMessage","DeprecateProperty","getter_1","setter_1","messageToDisplay","originalDescriptor","newKey","generateUniqueKey","configurable","enumerable","isDevMode","console","warn","warningShown","IgxOverlayService","_factoryResolver","_appRef","_injector","builder","_zone","_componentId","_overlayInfos","destroy$","Subject","positionStrategy","scrollStrategy","modal","closeOnOutsideClick","onOpening","onOpened","onClosing","onClosed","onAnimation","documentClicked","ev","info","elementRef","nativeElement","contains","positionTarget","clickOnPositionTarget","excludePositionTarget","closeAnimationPlayer","hasStarted","_hide","repositionAll","reposition","_document","component","moduleRef","getOverlayInfo","show","compOrId","getOverlayById","_show","hide","hideAll","overlayInfo","contentElementRect","eventArgs","componentRef","detachView","hostView","destroy","elementRect","initialSize","hook","placeElementHook","moveElementToOverlay","changeDetectorRef","detectChanges","updateSize","addOutsideClickListener","addResizeHandler","setupModalWrapper","playOpenAnimation","visibility","removeOutsideClickListener","removeResizeHandler","child","parentNode","applyAnimationParams","playCloseAnimation","onCloseDone","ngZone","ElementRef","dynamicFactory","factoryResolver","componentFactoryResolver","resolveComponentFactory","injector","dynamicComponent","attachView","element","location","insertBefore","wrapperElement","getWrapperElement","getContentElement","getOverlayElement","elementScrollTop","wrapper","content","addEventListener","stopPropagation","outlet","_overlayElement","fromEvent","pipe","takeUntil","subscribe","cleanUp","openAnimationPlayer","animationBuilder","build","innerRenderer","_renderer","openAnimationInnerPlayer","engine","players","onDone","reset","closeAnimationInnerPlayer","getPosition","init","animationPlayer","animationType","play","animationOptions","transitionDuration","transitionTimingFunction","shouldRemoveClickEventListener_1","removeEventListener","closingOverlaysCount","defaultView","ngOnDestroy","complete","ComponentFactoryResolver","ApplicationRef","Injector","AnimationBuilder","DOCUMENT","NgZone","ContainerPositionStrategy","ConnectedPositioningStrategy","setStyle","startPoint","wrapperRect","round","BaseFitPositionStrategy","connectedFit","_initialSettings","viewPortRect","updateViewPortFit","fitHorizontal","fitVertical","fitInViewport","calculateLeft","calculateTop","AutoPositionStrategy","transformString","canFlipHorizontal","flipHorizontal","horizontalPush","canFlipVertical","flipVertical","verticalPush","flippedStartPoint","flippedDirection","leftBorder","rightBorder","topBorder","bottomBorder","leftExtend","rightExtend","abs","min","topExtend","bottomExtend","ElasticPositionStrategy","maxReduction","reduction","translation","AbsoluteScrollStrategy","_initialized","onScroll","_overlayService","_scrollContainer","_id","runOutsideAngular","addScrollEventListener","BlockScrollStrategy","preventDefault","_sourceElement","_initialScrollTop","_initialScrollLeft","CloseScrollStrategy","cumulativeScrollTop","cumulativeScrollLeft","initialScrollTop","_threshold","initialScrollLeft","scrollHeight","IgxBaseTransactionService","_isPending","_pendingTransactions","_pendingStates","onStateUpdate","updateState","undo","redo","mergeChanges","updateValue","commit","clear","startPending","states","mergeValues","first","second","IgxTransactionService","_transactions","_redoStack","_undoStack","_states","verifyAddedTransaction","addTransaction","pending","pendingState","pendingChange","change","aggregatedValue","originalValue","actions","updateRecord","delete","lastActions","currentActions","currentActions_1","currentActions_1_1","actions_1","actions_1_1","action","cleanState","JSON","stringify","IgxHierarchicalTransactionService","clearArraysFromObject","currentState","prop","IgxToggleDirective","cdr","navigationService","_overlaySubFilter","_overlayId","_collapsed","overlayClosed","unsubscribe","collapsed","overlaySettings","hasOpenAnimation","hasCloseAnimation","openEventArgs","_overlayOpenedSub","_overlayClosingSub","clearSubscription","_overlayClosedSub","isClosing","ngOnInit","subscription","closed","exportAs","ChangeDetectorRef","Optional","HostBinding","IgxToggleActionDirective","_target","_overlayDefaults","onClick","clonedSettings","updateOverlaySettings","positionStrategyClone","IgxOverlayOutletDirective","IgxToggleModule","Up","Down","IgxSelectionAPIService","selection","componentID","newSelection","get_empty","sel","add_item","itemID","add_items","itemIDs","clearSelection","select_item","select_items","delete_item","delete_items","deselectedItem","deselect_item","deselect_items","is_item_selected","has","first_item","are_all_selected","dataCount","are_none_selected","get_all_ids","NEXT_ID","IgxDropDownGroupComponent","role","groupClass","disabled","labelId","Component","template","IgxDropDownItemBase","dropDown","_focused","_selected","_index","_disabled","selectedChange","itemIndex","displayDensity","focused","items","clicked","ngDoCheck","dropDownSelectedItem","selectedItem","hasIndex","selectItem","tslib_1.__decorate","IgxDropDownItemComponent","focusedState","focusedItem","focusedIndex","allowItemsFocus","focus","preventScroll","mousedownHandler","comfortable","cosy","compact","DisplayDensityToken","InjectionToken","DisplayDensityBase","displayDensityOptions","onDensityChanged","oldDisplayDensityOptions","DisplayDensity","_displayDensity","currentDisplayDensity","densityChangedArgs","oldDensity","newDensity","initialDensity","getComponentDensityClass","baseStyleClass","IgxDropDownBase","_displayDensityOptions","_focusedItem","onSelection","maxHeight","cssClass","headers","onItemActionKey","DropDownActionKey","oldSelection","navigate","currentIndex","newIndex","getNearestSiblingFocusableItemIndex","navigateItem","startIndex","oldItem","newItem","scrollToHiddenItem","navigateFirst","Navigate","navigateLast","navigateNext","navigatePrev","parentRect","DisplayContainerComponent","_viewContainer","notVirtual","ViewContainerRef","ViewChild","read","static","VirtualHelperBaseDirective","scrollAmount","_size","destroyed","HVirtualHelperComponent","cssClasses","VirtualHelperComponent","IgxScrollInertiaDirective","wheelStep","inertiaStep","swipeToleranceX","inertiaDeltaY","inertiaDeltaX","inertiaDuration","_savedSpeedsX","setPointerCaptureFName","Element","releasePointerCaptureFName","targetElem","evt","onWheel","onTouchStart","onTouchMove","onTouchEnd","onPointerDown","onPointerUp","onMSGestureStart","onMSGestureChange","IgxScrollInertiaScrollContainer","scrollDeltaX","scrollDeltaY","scrollStep","minWheelStep","_startX","_startY","wheelDeltaX","sign","deltaX","calcAxisCoords","wheelDeltaY","deltaY","IgxScrollInertiaDirection","_scrollToX","curScrollLeft","maxScrollLeft","parseInt","_scrollToY","preventParentScroll","curScrollTop","maxScrollTop","offsetHeight","MSGesture","cancelAnimationFrame","_touchInertiaAnimID","touch","touches","_touchStartX","pageX","_touchStartY","pageY","_lastTouchEnd","_lastTouchX","_lastTouchY","_savedSpeedsY","_totalMovedX","_offsetRecorded","_offsetDirection","_touchPrevented","scrolledXY","destX","destY","timeFromLastTouch","speedX","speedY","shift","_lastMovedX","_lastMovedY","_scrollTo","_inertiaInit","pointerType","_pointer","pointerId","_gestureObject","addPointer","screenX","screenY","touchPos","dest","stepModifer","_nextX","_nextY","requestAnimationFrame","IgxScrollInertiaModule","imports","CommonModule","IgxForOfSyncService","_master","isMaster","directive","igxForScrollOrientation","setMaster","forced","orientation","resetMaster","sizesCache","chunkSize","IgxForOfScrollSyncService","_masterScroll","setScrollMaster","scroll","getScrollMaster","IgxForOfContext","$implicit","even","IgxForOfDirective","_template","_differs","resolver","syncScrollService","totalItemCount","onChunkLoad","onContentSizeChange","onDataChanged","onBeforeViewDestroyed","onChunkPreload","_sizesCache","_differ","heightCache","MAX_PERF_SCROLL_DIFF","_virtHeight","_virtHeightRatio","_virtScrollTop","_bScrollInternal","_embeddedViews","contentResizeNotify","dc","scrollComponent","getScroll","igxForContainerSize","igxForOf","removeScrollEventListeners","func","verticalScrollHandler","isScrollable","totalSize","vc","igxForScrollContainer","igxForSizePropName","dcFactory","createComponent","scrollDirection","touchAction","initSizesCache","_calculateChunkSize","getIndexAt","input","embeddedView","_vcr","createEmbeddedView","getContextIndex","factory","_maxHeight","_calcMaxBrowserHeight","_calcHeight","bind","destructor","throttleTime","runTask","updateSizes","onHScroll","hvFactory","_updateHScrollOffset","ngAfterViewInit","contentObserver","ResizeObserver","observe","disconnect","ngOnChanges","changes","currentValue","igxForTrackBy","getTypeNameForDebugging","firstChange","_applyChanges","_recalcOnContainerChange","diff","_updateSizeCache","run","markForCheck","_updateScrollOffset","addScrollTop","addTop","originalVirtScrollTop","containerSize","maxVirtScrollTop","scrollOffset","fixedUpdateAllElements","maxRealScrollTop","scrollTo","isRemote","isPrevItem","nextScroll","_adjustToIndex","scrollNext","scr","endIndex","scrollPrev","scrollNextPage","scrollPrevPage","getColumnScrollLeft","colIndex","getItemCountInView","getSizeAt","getScrollForIndex","realPercentScrolled","prevStartIndex","recalcUpdateSizes","diffs","totalDiff","l","rNodes","rootNodes","nodeType","Node","ELEMENT_NODE","nextElementSibling","rNode","h","igxForItemSize","oldVal","newVal","currDiff","totalWidth","reducer","acc","scrToBottom","_isScrolledToBottom","hSum","_isAtBottomIndex","updatesToIndex","sumDiffs","currOffset","inScrollTop","newStart","prevStart","moveApplyScrollNext","moveApplyScrollPrev","fixedApplyScroll","prevIndex","start","embView","cntx","context","insert","_trackByFn","fn","prevChunkSize","applyChunkSizeChange","_recalcScrollBarSize","embeddedViewCopy","div","_calcMaxChunkSize","getElement","viewref","nodeName","elem","getElementsByTagName","_getItemSize","maxLength","sum","availableSize","accumulator","currentItem","curItem","prevItem","prevSize","midIdx","cmp","removeLastElem","oldElem","addLastElem","elemIndex","_updateVScrollOffset","dim","TemplateRef","IterableDiffers","IgxGridForOfDirective","syncService","onDataChanging","getItemSize","summaries","masterSizesCache","itemsDimension","oldHeight","handleCacheChanges","identityChanges","newHeightCache","newSizesCache","newHeight","numRemovedItems","forEachRemovedItem","forEachIdentityChange","previousIndex","forEachItem","assumeMaster","onStable","_updateViews","IgxForOfModule","entryComponents","IgxDropDownComponent","virtDir","toggleDirective","updateScrollPosition","setSelectedItem","collectionLength","direction_1","subRequired","isIndexOutOfBounds","take","skipHeader","virtState","currentPosition","itemPosition","indexOutOfChunk","scrollNeeded","targetScroll","onToggleOpening","scrollToItem","_scrollPosition","onToggleOpened","onToggleClosing","onToggleClosed","calculateScrollPosition","setTimeout","scrollDelta","elementHeight","isSelectionValid","provide","useExisting","ContentChild","ContentChildren","forwardRef","descendants","IgxDropDownItemNavigationDirective","dropdown","handleKeyDown","onArrowUpKeyDown","onArrowDownKeyDown","onHomeKeyDown","onEndKeyDown","Self","IgxDropDownModule","START","END","IgxHintDirective","_element","_position","IgxHintPosition","isPositionStart","isPositionEnd","toUpperCase","_applyPosition","nativeValidationAttributes","INITIAL","VALID","INVALID","IgxInputDirective","inputGroup","ngModel","formControl","_valid","IgxInputState","isInput","isTextArea","checkValidity","hasAttribute","required","isRequired","onFocus","isFocused","onBlur","ngControl","valid","_hasValidators","onInput","hasPlaceholder","control","validator","validation","tagName","_statusChanges$","statusChanges","onStatusChanged","asyncValidator","touched","dirty","placeholder","nativeValidationAttributes_1","nativeValidationAttributes_1_1","nativeValidationAttribute","IgxInputGroupBase","NgModel","FormControlName","IgxLabelDirective","defaultClass","IgxPrefixDirective","IgxPrefixModule","IgxSuffixDirective","IgxSuffixModule","LINE","BOX","BORDER","FLUENT","SEARCH","FLUENT_SEARCH","IgxInputGroupComponent","_type","IgxInputGroupType","_filled","_supressInputAutofocus","isBox","isBorder","isSearch","isFluentSearch","isFluent","hasWarning","hints","IgxInputGroupModule","IgxAutocompleteDirective","defaultSettings","dropDownOpened$","onItemSelected","autofill","select","model","setValue","highlightFirstItem","autocompleteSettings","listId","onArrowDown","onTab","IgxAutocompleteModule","IgxButtonDirective","_defaultType","_cssClassPrefix","buttonClick","removeClass","addClass","_color","color","_backgroundColor","_label","setAttribute","Renderer2","IgxButtonModule","DEFAULT","DASHED","IgxDividerDirective","_inset","IgxDividerType","middle","vertical","baseMargin","IgxDividerModule","IgxDefaultDropStrategy","dropAction","drag","drop","atIndex","IgxAppendDropStrategy","dragElement","dropAreaElement","IgxPrependDropStrategy","IgxInsertDropStrategy","IgxDragHandleDirective","baseClass","VERTICALLY","HORIZONTALLY","NONE","_pageX","_pageY","parseFloat","IgxDragDirective","viewContainer","zone","renderer","ghostContext","dragTolerance","ghost","ghostClass","hideBaseOnDrag","animateOnRelease","dragStart","dragMove","dragEnd","dragClick","ghostCreate","ghostDestroy","transitioned","_visibility","selectDisabled","defaultReturnDuration","animInProgress","_baseMarginLeft","_baseMarginTop","_lastX","_lastY","_dragStarted","_ghostHostX","_ghostHostY","_pointerDownId","_clicked","_lastDropArea","_destroy","_removeOnDestroy","_offsetX","_defaultOffsetX","_offsetY","_defaultOffsetY","bVisible","IgxDragLocation","baseOriginLeft","baseOriginTop","PointerEvent","ghostElement","ghostLeft","baseLeft","ghostTop","baseTop","getTransformX","getTransformY","ghostMarginLeft","getComputedStyle","ghostMarginTop","ngAfterContentInit","dragHandles","pointerEventsEnabled","throttle","interval","animationFrameScheduler","onPointerMove","onPointerLost","touchEventsEnabled","onTransitionEnd","_baseOriginX","_baseOriginY","_ghostStartX","_ghostStartY","setLocation","newLocation","offsetHostX","ghostHost","ghostHostOffsetLeft","offsetHostY","ghostHostOffsetTop","getWindowScrollLeft","getWindowScrollTop","transformX","transformY","setTransformXY","transitionToOrigin","customAnimArgs","startLocation","createGhost","transitionProperty","timingFunction","transitionDelay","transitionTo","movedElem","targetRects","handleFound","handle","currentTarget","targetElement","setPointerCapture","ghostOffsetX","ghostOffsetY","totalMovedX","totalMovedY","dragStartArgs_1","originalEvent","owner","startX","startY","moveArgs","nextPageX","nextPageY","setPageX","setPageY","updatedMovedX","updatedMovedY","lastMovedX","lastMovedY","translateX","translateY","dispatchDragEvents","dispatchDropEvent","dynamicGhostRef","ghostTemplate","cloneNode","createEventArgs","visible","topDropArea","customEventArgs","elementsFromPoint","getElementsAtPoint","getAttribute","dispatchEvent","updateDragRelativePos","newPosX","newPosY","totalDraggedX","totalDraggedY","diffStartX","diffStartY","dropFinished","ghostDestroyArgs","viewPortX","pageXOffset","viewPortY","pageYOffset","elements","eventName","dragLeaveEvent","createEvent","initCustomEvent","posX","matrix","match","posY","ghostPosition","getPropertyValue","offsetParent","IgxDropDirective","enter","over","leave","dropped","droppable","dragover","_dropStrategy","classRef","onDragEnter","onDragLeave","onDragOver","elementPosX","elementPosY","offsetX","detail","offsetY","dragData","isDragLinked","onDragDrop","elementsAtPoint","insertIndex","getInsertIndexAt","dragLinkArray","dragChannel","dropLinkArray","dropChannel","dropLinks","dragLinks","draggedDir","dropChildren","childUnder","draggedElemIndex","IgxDragDropModule","IgxFilterOptions","inputValue","get_value","textContent","valueToTest","matchFn","metConditionFn","overdueConditionFn","IgxFilterDirective","filtering","filtered","filterOptions","previousValue","IgxFilterPipe","filteredItems","IgxFilterModule","IgxFocusDirective","comp","focusState","trigger","getEditElement","NG_VALUE_ACCESSOR","IgxFocusModule","IgxLayoutDirective","wrap","justify","itemAlign","display","IgxFlexDirective","grow","shrink","flex","order","basis","IgxLayoutModule","MASK_FLAGS","KEYS","MaskHelper","_cursor","parseValueByMask","maskOptions","cursor","mask","format","literals","getMaskLiterals","literalKeys","nonLiteralIndeces","getNonLiteralIndeces","parseValueByMaskOnInit","insertCharAt","promptChar","isCharValid","validateCharOnPostion","replaceCharAt","parseMask","outputVal","mask_1","mask_1_1","inputVal","literalValues","mask_2","mask_2_1","nonLiteralValues","getNonLiteralValues","pos","nonLiteralValues_1","nonLiteralValues_1_1","restoreValueFromMask","value_1","value_1_1","parseValueByMaskUponSelection","isMarked","parseValueByMaskUponCopyPaste","clipboardData","selectionEnd","clipboardData_1","clipboardData_1_1","inputChar","isValid","charAt","RegExp","strValue","substring","nonLiteralsIndeces","value_2","value_2_1","noop","IgxMaskDirective","onValueChange","_maskOptions","_onTouchedCallback","_onChangeCallback","maskHelper","_placeholder","selectionStart","onKeydown","keyCode","charCode","_stopPropagation","_ctrlDown","_key","_selection","onKeyup","onPaste","_paste","_valOnPaste","_cursorOnPaste","getCursorPosition","onInputChanged","setCursorPosition","currentCursorPos","rawVal","dataValue","includeLiterals","formattedValue","focusedValuePipe","displayValuePipe","setSelectionRange","writeValue","registerOnChange","registerOnTouched","multi","IgxMaskModule","BEFORE","AFTER","nextId","IgxRadioComponent","labelPosition","tabindex","disableRipple","ariaLabelledBy","ariaLabel","checked","inputId","_value","_onRadioChange","_onRadioClick","nativeRadio","blur","_onLabelClick","radio","RadioLabelPosition","IgxRippleDirective","rippleTarget","rippleDuration","rippleDisabled","rippleElementClass","rippleHostClass","_centered","animationQueue","centered","onMouseDown","_ripple","setStyles","rippleElement","styleParams","radius","rippleColor","querySelector","rectBounds","clientX","clientY","dimensions","IgxRippleModule","IgxRadioGroupDirective","_name","_isInitialized","_labelPosition","_required","_selectRadioButton","_setRadioButtonNames","_setRadioButtonsRequired","_disableRadioButtons","_setRadioButtonLabelPosition","_initRadioButtons","radioButtons","props_1","_selectedRadioButtonChanged","IgxRadioModule","IgxTextHighlightDirective","_div","_observer","_nodeWasRemoved","_forceEvaluation","_activeElementIndex","_defaultCssClass","_defaultActiveCssClass","groupName","onActiveElementChanged","deactivate","activateIfNecessary","_lastSearchInfo","setActiveHighlight","highlight","highlightGroupsMap","clearActiveHighlight","clearHighlight","_valueChanged","searchedText","matchCount","caseSensitive","exactMatch","_container","firstElementChild","ngAfterViewChecked","text","caseSensitiveResolved","exactMatchResolved","searchNeedsEvaluation","clearChildElements","getHighlightedText","activate","MutationObserver","mutationList","mutation","removedNodes","addedNodes","childList","spans","querySelectorAll","elementToActivate","activeCssClass","elementToDeactivate","originalContentHidden","setProperty","searchText","appendDiv","stringValue","contentStringResolved","searchTextResolved","appendSpan","appendText","foundIndex","previousMatchEnd","textElement","createText","outerHTML","span","containerClass","IgxTextHighlightModule","IgxTextSelectionDirective","selectionState","IgxTextSelectionModule","IgxTooltipTargetDirective","_navigationService","showDelay","hideDelay","tooltipDisabled","onTooltipShow","onTooltipHide","positionSettings","useAnimation","checkOutletAndOutsideClick","preMouseEnterCheck","toBeShown","clearTimeout","timeoutId","toBeHidden","hidingArgs","tooltip","forceClose","mergedOverlaySettings","preMouseLeaveCheck","onKeydownEscape","onMouseEnter","showingArgs","onMouseLeave","showTooltip","onDocumentTouchStart","hideTooltip","IgxTooltipDirective","forceOpen","finish","IgxTooltipModule","IgxFilteringOperand","operations","isUnary","iconName","findValueInSet","conditionList","f","append","operation","IgxBooleanFilteringOperand","IgxDateFilteringOperand","validateInputData","targetp","getDateParts","searchp","year","month","day","now","td","setDate","getDate","yesterday","date","dateFormat","hours","milliseconds","minutes","seconds","getFullYear","getMonth","getHours","getMinutes","getSeconds","getMilliseconds","toISOString","IgxNumberFilteringOperand","IgxStringFilteringOperand","search","applyIgnoreCase","startsWith","filteringStateDefaults","GroupedRecords","IgxIconService","_sanitizer","_fontSet","_fontSetAliases","_cachedSvgIcons","className","registerFontSetAlias","alias","fontSetClassName","addSvgIcon","fontSet","safeUrl","bypassSecurityTrustResourceUrl","sanitize","SecurityContext","RESOURCE_URL","fetchSvg","addSvgIconFromText","iconText","cacheSvgIcon","isSvgIconCached","iconKey","getSvgIconKey","httpRequest","XMLHttpRequest","responseType","onload","request","status","statusText","responseText","onerror","send","ensureSvgContainerCreated","innerHTML","svg","oldChild","_svgContainer","DomSanitizer","IgxIconComponent","_el","iconService","ariaHidden","active","defaultFontSet","updateIconClass","iconColor","svgImage","noLigature","explicitLigature","IgxIconModule","forRoot","ngModule","INITIALS","IMAGE","ICON","IgxAvatarComponent","roundShape","src","AvatarType","icon","initials","imageTemplate","initialsTemplate","iconTemplate","defaultTemplate","roleDescription","getRole","getSrcUrl","IgxAvatarModule","INFO","SUCCESS","WARNING","ERROR","IgxBadgeComponent","label","setClasses","classes","Type","IgxBadgeModule","IgxExpansionPanelBodyComponent","panel","_labelledBy","IgxExpansionPanelTitleDirective","IgxExpansionPanelDescriptionDirective","IgxExpansionPanelIconDirective","LEFT","RIGHT","IgxExpansionPanelHeaderComponent","_iconTemplate","lv","iconPosition","ICON_POSITION","onInteraction","onAction","openPanel","altKey","expand","closePanel","collapse","Host","IgxExpansionPanelComponent","animationSettings","collapsedChange","onCollapsed","onExpanded","Promise","resolve","labelledBy","headerId","cb","IgxExpansionPanelModule","IgxBannerActionsDirective","IgxBannerComponent","_bannerActionTemplate","_animationSettings","_expansionPanel","_bannerEvent","banner","openingArgs","closingArgs","onExpansionPanelOpen","onExpansionPanelClose","IgxBannerModule","horizontal","IgxButtonGroupComponent","_cdr","buttonClickNotifier$","queryListNotifier$","zIndex","multiSelection","selectedIndexes","onSelect","onUnselect","viewButtons","templateButtons","_itemContentCssClass","buttons","_isVertical","ButtonGroupAlignment","selectButton","buttonElement","indexInViewButtons","deselectButton","initButtons","_clickHandler","ViewChildren","IgxButtonGroupModule","After","Before","Between","Specific","Weekdays","Weekends","MDAYS","FEBRUARY","stop","step","cur","isLeap","weekDay","getDay","monthRange","nDays","isDateInRanges","ranges","dateInMs","ranges_1","ranges_1_1","dRanges","dateRange","DateRangeType","dRange","datesInMs","datesInMs_1","datesInMs_1_1","SUNDAY","MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","Calendar","firstWeekDay","WEEKDAYS","_firstWeekDay","weekdays","monthdates","extraWeek","days","timedelta","generateICalendarDate","monthdatescalendar","dates","units","ret","checkRollover","setFullYear","setMonth","setTime","formatToParts","locale","parts","Intl","DateTimeFormat","full","formattedParts_1","toType","partType","literal","combined","parts_1","parts_1_1","parts_2","parts_2_1","isCurrentMonth","isNextMonth","isPrevMonth","isPreviousMonth","IgxCalendarYearDirective","onYearSelection","isCurrentYear","IgxCalendarMonthDirective","onMonthSelection","IgxCalendarHeaderTemplateDirective","IgxCalendarSubheaderTemplateDirective","IgxCalendarScrollMonthDirective","debounce","stopScroll","tap","startScroll","onMouseUp","SINGLE","MULTI","RANGE","PREV","NEXT","IgxCalendarBase","hideOutsideDays","CalendarSelection","rangeStarted","_locale","_disabledDates","_specialDates","_formatOptions","weekday","_formatViews","monthScrollDirection","ScrollMonth","scrollMonth$","stopMonthScroll$","startMonthScroll$","calendarModel","viewDate","weekStart","initFormatters","formatOptions","formatViews","selectedDates","selectDate","_viewDate","getDateOnly","getDateOnlyInMs","generateDateRange","selectSingle","selectMultiple","newDates","selDates","valueDateOnly_1","isDateDisabled","valueOf","selectRange","excludeDisabledDates","deselectSingle","deselectMultiple","selectedDatesCount","datesInMsToDeselect","deselectMultipleInMonth","valueDateOnly","deselectRange","valueStart","valueEnd","selectedDatesStart","selectedDatesEnd","formatterDay","formatterWeekday","formatterMonth","formatterYear","formatterMonthday","disabledDates","deselectDate","selectDateFromClient","YEAR","DECADE","IgxMonthPickerBase","_activeView","CalendarView","changeYear","yearsBtn","activeViewDecade","activeViewDecadeKB","formattedYear","IgxMonthsViewComponent","formatView","styleClass","_monthFormat","initMonthFormatter","_calendarModel","formattedMonth","_formatterMonth","selectMonth","monthTracker","monthFormat","onKeydownArrowUp","months","nodeRect","nextNodeRect","onKeydownArrowDown","onKeydownArrowRight","onKeydownArrowLeft","onKeydownHome","onKeydownEnd","onKeydownEnter","CalendarHammerConfig","overrides","pan","Hammer","DIRECTION_VERTICAL","threshold","HammerGestureConfig","IgxYearsViewComponent","_yearFormat","initYearFormatter","_formatterYear","selectYear","delta","generateYearRange","yearTracker","yearFormat","currentYear","HAMMER_GESTURE_CONFIG","useClass","IgxDayItemComponent","isLastInRange","isFirstInRange","isWithinRange","onDateSelection","isDisabled","isInactive","today","outOfRangeDates","isHidden","isOutOfRange","isSingleSelection","specialDates","isWeekend","IgxDaysViewNavigationService","focusNextDate","nextView","childElementCount","nextDate","monthView","Direction","isFocusable","dayIsNextMonth","nextMonthView","prevMonthView","navService","changeDaysView","monthAction","onViewChanging","focusHomeDate","focusFirstDay","focusEndDate","focusLastDay","IgxDaysViewComponent","disableOutOfRangeDates","formattedDate","generateWeekHeader","dayNames","rv","rv_1","rv_1_1","rowTracker","dateTracker","isSelected","checkForRange","focusActiveDate","isToday","selectDay","getFirstMonthView","getLastMonthView","onKeydownArrow","IgxCalendarComponent","hasHeader","animationAction","isKeydownTrigger","_monthsViewNumber","defaultDayView","dayViews","startPrevMonthScroll","previousMonth","startNextMonthScroll","nextMonth","stopMonthScroll","daysView","prevMonthBtn","nextMonthBtn","nextMonthDate","activeView","headerTemplateDirective","subheaderTemplateDirective","headerDate","generateContext","setSiblingMonths","monthViews","_monthViewsChanges$","switchMap","skipLast","dacadeView","getFormattedDate","monthday","childClicked","deselectDateInMonthViews","viewChanging","callback","changeMonth","monthsBtn","activeViewYear","monthsView","focusMonth","attributes","activeViewYearKB","getViewDate","animationDone","toState","onKeydownPageDown","activeDate","isPageDown","activeElement","dayItem","onKeydownShiftPageUp","yearView","getMonthView","animations","transition","IgxMonthPickerComponent","yearAction","nextYear","previousYear","nextYearKB","previousYearKB","onKeydownPageUp","IgxCalendarModule","FormsModule","IgxCardMediaDirective","IgxCardHeaderComponent","IgxCardThumbnailDirective","IgxCardHeaderTitleDirective","IgxCardHeaderSubtitleDirective","IgxCardContentDirective","IgxCardFooterDirective","OUTLINED","IgxCardComponent","IgxCardType","JUSTIFY","IgxCardActionsComponent","card","isVerticalSet","layout","IgxCardActionsLayout","IgxCardModule","IgxCarouselComponent","loop","pause","navigation","onSlideChanged","onSlideAdded","onSlideRemoved","onCarouselPaused","onCarouselPlaying","slides","_total","_interval","_restartInterval","_destroyed","_lastInterval","clearInterval","setAriaLabel","slide","total","_currentSlide","_playing","carousel","current","_moveTo","prev","_resetInterval","setInterval","tick","IgxSlideComponent","activeChange","_active","IgxCarouselModule","IgxCheckboxComponent","LabelPosition","indeterminate","readonly","disableTransitions","checkbox","_onCheckboxChange","_onCheckboxClick","nativeCheckbox","preserveWhitespaces","IGX_CHECKBOX_REQUIRED_VALIDATOR","NG_VALIDATORS","IgxCheckboxRequiredDirective","CheckboxRequiredValidator","IgxCheckboxModule","CHIP_ID","IgxChipComponent","draggable","removable","selectable","class","onMoveStart","onMoveEnd","onRemove","onSelectionDone","onKeyDown","_selectedItemClass","_movedWhileRemoving","changeSelection","chipArea","backgroundColor","newColor","removeIcon","defaultRemoveIcon","selectIcon","defaultSelectIcon","selectClass","SELECT_CLASS","srcEvent","onSelectArgs","onSelectTransitionDone","propertyName","onChipKeyDown","keyDownArgs","onRemoveBtnKeyDown","onRemoveMouseDown","onRemoveClick","onRemoveTouchMove","onRemoveTouchEnd","onChipDragStart","onChipDragEnd","dragDirective","onChipMoveEnd","onChipDragClicked","clickEventArgs","onChipDragEnterHandler","chip","dragChip","onChipDrop","IgxChipsAreaComponent","_iterableDiffers","onReorder","chipsList","selectedChips","forEachAddedItem","addedChip","onChipMoveStart","onChipDragEnter","onChipSelectionChange","modifiedChipsArray","chipsArray","dragChipIndex","shiftKey","positionChipAtIndex","dropChipIndex","chipIndex","targetIndex","shiftRestLeft","eventData","IgxChipsModule","IgxComboHeaderDirective","IgxComboFooterDirective","IgxComboItemDirective","IgxComboEmptyDirective","IgxComboHeaderItemDirective","IgxComboAddItemDirective","IgxComboToggleIconDirective","IgxComboClearIconDirective","IgxComboAPIService","register","combo","valueKey","add_custom_item","addItemToCollection","set_selected_item","isItemSelected","deselectItems","selectItems","IgxComboItemComponent","comboAPI","itemHeight","comboID","isVisible","rect","parentDiv","disableCheck","IgxComboAddItemComponent","IgxComboDropDownComponent","scrollHandler","itemsMaxHeight","focusSearchInput","lastIndex","focusAddItemButton","isAddButtonVisible","sortedChildren","sortedChildren_1","sortedChildren_1_1","handleEnter","handleSpace","isAddItemFocused","IgxComboFilteringPipe","SimpleFilteringStrategy","filteringExpressions","IgxComboSortingPipe","IgxComboGroupingPipe","groupKey","inserts","currentHeader","insertFlag","IgxComboFilterConditionPipe","ItemHeights","diffInSets","set1","set2","results","entry","IgxComboComponent","customValueFlag","defaultFallbackGroup","stringFilters","booleanFilters","_filteringLogic","_filteringExpressions","_sortingExpressions","_groupKey","_prevInputValue","_dataType","_filteredData","_itemHeight","_itemsMaxHeight","_remoteSelection","_overlaySettings","IgxComboState","searchInput","itemTemplate","headerTemplate","footerTemplate","headerItemTemplate","addItemTemplate","emptyTemplate","toggleIconTemplate","clearIconTemplate","dropdownContainer","onSelectionChange","onAddition","onSearchInput","onDataPreLoad","allowCustomValues","searchPlaceholder","filterable","searchValue","manageRequiredAsterisk","_displayKey","clearSorting","comboInput","onInputClick","checkMatch","handleKeyUp","displayKey","itemMatch","handleInputChange","cdrFlag","vContainer","DataTypes","registerRemoteEntries","ids","getValueDisplayPairs","selection_1","selection_1_1","ids_1","ids_1_1","triggerCheck","handleSelectAll","selectAllItems","deselectAllItems","addedItem","oldCollection","newCollection","opening","displaySearchInput","newArray","expression2","headerExpression","searchVale","NgControl","dataLoading","setDisabledState","complexTemplate","primitiveTemplate","handleClearItems","selectedItems","newItems","clearCurrentSelection","setSelection","ignoreFilter","allVisible","removed","added","removedItems","addedItems","convertKeysToItems","handleOpening","handleOpened","handleClosing","handleClosed","IgxComboModule","ReactiveFormsModule","DatePickerUtil","parseDateFormat","maskValue","DEFAULT_LOCALE","dateStruct","SHORT_DATE_MASK","maskArray","monthInitPosition","dayInitPosition","yearInitPosition","initialPosition","formatType","getYearFormatType","getMonthFormatType","getDayFormatType","isDateChar","SEPARATOR","fillDatePartsPositions","getDefaultLocaleMask","getInputMask","inputMask","getMask","parseDateArray","dateFormatParts","prevDateValue","yearPrefix","dayStr","getDayValueFromInput","monthStr","getMonthValueFromInput","yearStr","getYearValueFromInput","getDateFormatPart","originalYear","fullYear","NaN","daysInMonth","maskToPromptChars","PROMPT_CHAR","trimUnderlines","getModifiedDateInput","isSpinLoop","maxValue","minValue","datePart","getDatePartOnPosition","datePartType","datePartFormatType","datePartValue","getDateValueFromInput","minMax","getMinMaxValue","tempValue","startIdx","endIdx","prefix","getNumericFormatPrefix","addPromptCharsEditMode","dateArray","checkForCompleteDateInput","dayValue","monthValue","yearValue","isFullInput","isFullYearInput","formatterOptions","resolvedOptions","NUMBER_OF_MONTHS","getFullYearFromString","partPosition","yearPart","currentPos","DatePickerDisplayValuePipe","_datePicker","rawDateString","DatePickerInputValuePipe","invalidDate","IgxDatePickerTemplateDirective","IgxDatePickerActionsDirective","DropDown","Dialog","IgxCalendarContainerComponent","mode","InteractionMode","onClose","onTodaySelection","onEscape","closeCalendar","triggerTodaySelection","ShortDate","MediumDate","LongDate","FullDate","IgxDatePickerComponent","_moduleRef","labelVisibility","monthsViewNumber","valueChange","onDisabledDate","onValidationFailed","inputValuePipe","spinDelta","defaultLocale","_destroy$","_onOpen","_onClose","_format","PredefinedFormatOptions","_modalOverlay","_dropDownOverlaySettings","_defaultDropDownOverlaySettings","_customFormatChecker","_transformedDate","_getEditorDate","_getDisplayDate","datePickerTemplateDirective","readOnlyDatePickerTemplate","editableDatePickerTemplate","displayData","openDialog","onSpaceClick","getInputGroupElement","inputElement","editableInput","readonlyInput","_positionSettings","_modalOverlaySettings","overlay","_componentID","_onOpening","_onOpened","_onClosed","handleSelection","emitValueChangeEvent","calendar","modalOverlay","modalOverlaySettings","dropDownOverlaySettings","_setCursorPosition","setHours","setMinutes","setSeconds","setMilliseconds","_isInEditMode","calculateDate","spinValue","targetValue","cursorPosition","_getCursorPosition","checkInput","inputType","dateString","invokedByEvent","newDateArray","datePicker","prevValue","eventType","modifiedInputValue","_initializeCalendarContainer","_focusCalendarDate","componentInstance","isVertical","subheaderTemplate","cancelButtonLabel","todayButtonLabel","datePickerActions","datePickerActionsDirective","_setLocaleToDate","toLocaleDateString","formatDate","changedValue","NgModuleRef","IgxDatePickerModule","IgxDialogTitleDirective","defaultStyle","IgxDialogActionsDirective","DIALOG_ID","IgxDialogComponent","title","leftButtonLabel","leftButtonType","leftButtonColor","leftButtonBackgroundColor","leftButtonRipple","rightButtonLabel","rightButtonType","rightButtonColor","rightButtonBackgroundColor","rightButtonRipple","onOpen","onLeftButtonSelect","onRightButtonSelect","_closeOnOutsideSelect","_isModal","_titleId","_overlayDefaultSettings","isModal","closeOnOutsideSelect","isOpen","toggleRef","emitCloseFromDialog","dialog","onDialogSelected","DIALOG_CLASS","onInternalLeftButtonSelect","onInternalRightButtonSelect","IgxDialogModule","IgxRow","IgxCell","inlineEditorTemplate","isFinite","cellID","IgxGridCRUDService","createCell","createRow","sameRow","sameCell","columnID","beginRowEdit","onRowEditEnter","endRowEdit","openRowOverlay","begin","newCell","onCellEditEnter","rowEditing","isInEditMode","IgxGridSelectionService","dragMode","keyboardState","pointerState","temp","_ranges","rowSelection","initPointerState","initKeyboardState","addKeyboardRange","parse","isCellSelectable","generateRange","primaryButton","ctrl","addToRange","isActiveNode","isInMap","isActive","hasColumnLayouts","isActiveLayout","columnVisibleIndex","addRangeMeta","removeRangeMeta","rowStart","rowEnd","columnStart","columnEnd","keyboardStateOnKeydown","shiftTab","keyboardStateOnFocus","emitter","dom","kbState","isChromium","_moveSelectionChrome","dragSelect","pointerDown","pointerDownShiftKey","clearTextSelection","mergeMap","source","entries","pair","newValue_1","pointerEnter","pointerUp","restoreTextSelection","clearAcriveEl","getSelection","rangeCount","_selectionRange","getRangeAt","removeAllRanges","addRange","createRange","Range","selectNode","getSelectedRows","clearRowSelection","removedRec","isFilteringApplied","getRowIDs","allData","rID","emitRowSelectionEvent","selectAllRows","addedRows","clearPrevSelection","isRowSelectable","isRowDeleted","isMultiRowSelectionEnabled","selectRowsWithNoEvent","rowIDs","allRowsSelected","deselectRowsWithNoEvent","selectMultipleRows","gridData","lastRowID","currIndex","getRowDataById","rows","areAllRowSelected","dataItemsID","hasSomeRowSelected","currSelection","areEqualCollections","onRowSelectionChange","clearAllSelectedRows","filteredSortedData","rData","vendor","HammerGesturesManager","doc","platformUtil","hammerOptions","_hammerManagers","platformBrowser","inputClass","TouchInput","recognizers","Pan","Swipe","DIRECTION_HORIZONTAL","Tap","taps","supports","eventHandler","mc","getManagerForElement","addManagerForElement","handler","eventObj","on","off","addGlobalEventListener","getGlobalEventTarget","getDOM","setManagerOption","manager","removeManagerForElement","quickFilter","excelStyleFilter","rootLevelOnly","childLevelsOnly","rootAndChildLevels","dataCell","summaryCell","hierarchicalRow","none","single","multiple","IgxGridCellComponent","touchManager","_vIndex","highlightClass","activeHighlightClass","lastPinned","editMode","isInCompositionMode","_cellSelection","GridSelectionMode","pointerdown","selectionNode","ctrlKey","pointerenter","pointerup","setStartNavigationCell","colStart","onRangeSelection","_updateCRUDStatus","onDoubleClick","editable","deleted","cellTemplate","defaultCellTemplate","gridID","columnLayoutChild","setEditMode","addPointerListeners","removePointerListeners","gridRowSpan","gridColumnSpan","colEnd","rowTransaction","rowCurrentState","inEditMode","_highlight","lastSearchInfo","cellSelectionMode","compositionStartHandler","compositionEndHandler","cssProps","crud","editableCell","isCellSelected","update","onCellClick","onContextMenu","shouldEmitSelection","handleAlt","isToggleKey","trigger_row_expansion_toggle","treeRow","handleTab","performShiftTabKey","performTab","handleEnd","goToLastCell","handleHome","goToFirstCell","keydownArgs","targetType","onGridKeydown","navigateTop","navigateUp","navigateBottom","navigateDown","onKeydownEnterEditMode","onKeydownExitEditMode","onCellEditCancel","highlightText","searchable","calculateSizeToFit","changeDetection","ChangeDetectionStrategy","OnPush","IgxRowComponent","dragging","defaultCssClass","_rowData","resolveClasses","visibleColumns","groupingExpressions","pinnedColumns","unpinnedColumns","showRowSelectors","rowDraggable","onRowSelectorClick","indexClass","evenRowCSS","oddRowCSS","selectedClass","editClass","dirtyClass","deletedClass","mrlClass","dragClass","defaultDragIndicatorCssClass","rowDragging","WatchChanges","propDesc","privateKey","originalSetter","_init","SimpleChange","WatchColumnChanges","rowIslandAPI","rowIsland","updateColumnList","repaint","_","IgxRowIslandAPIService","childRowIslands","childGrids","unset","oldId","registerChildRowIsland","unsetChildRowIsland","getChildRowIsland","rowIslandKey","registerChildGrid","parentRowID","getChildGrids","inDepth","allChildren","getChildGridByID","IgxSummaryOperand","operate","summaryResult","IgxNumberSummaryOperand","average","IgxDateSummaryOperand","latest","earliest","IgxFilterCellTemplateDirective","IgxCellTemplateDirective","IgxCellHeaderTemplateDirective","IgxCellFooterTemplateDirective","IgxCellEditorTemplateDirective","IgxColumnComponent","sortable","groupable","resizable","hiddenChange","disableHiding","disablePinning","movable","widthChange","_calcWidth","headerClasses","headerGroupClasses","cellStyles","sortingIgnoreCase","pinnedChange","_pinned","_summaries","_filters","_sortStrategy","_hidden","_disablePinning","_defaultMinWidth","_hasSummary","hasTransactions","isPrimaryColumn","_editable","resetSummaryHeight","filteringService","refreshExpressions","widthSetByUser","_width","defaultWidth","calcPixelWidth","cacheCalcWidth","getCalcWidth","defaultMinWidth","minVal","pin","unpin","removeSummariesCachePerColumn","_summaryPipeTrigger","_groupingComparer","funcRef","_bodyTemplate","_headerTemplate","_inlineEditorTemplate","_filterCellTemplate","columnGroup","vIndex","childrenVisibleIndexes","indexInCollection","columnLayout","ptr","lvl","resetCaches","headTemplate","editorTemplate","filterCellTemplateDirective","filters","getGridTemplate","isRow","rowsCount","multiRowLayoutRowSize","getColumnSizesString","getInitialChildColumnSizes","columnSizes","newWidthSet","newSpanSmaller","colSpan","bothWidthsSet","bothWidthsNotSet","ref","columnWidthSetByUser","calcWidth","getFilledChildColumnSizes","getPossibleColumnWidth","getResizableColUnderEnd","spanUsed","columnSized","targets","targetsSquashed","topLevelParent","pinnable","_unpinnedIndex","_unpinnedColumns","_pinnedColumns","targetColumn","isPinned","onColumnPinning","_moveColumns","reinitPinStates","populateVisibleIndexes","headerCellList","filterCellList","filterCell","headerGroupsList","headerGroup","autosize","getLargestCellWidth","reflow","largest","cellsContentWidths_1","cellStyle","cellPadding","paddingLeft","paddingRight","borderRightWidth","headerCell","headerStyle","headerPadding","largestCell","getCellWidth","colWidth","isPercentageWidth","cellWidth","featureColumnsWidth","gridUnpinnedWidth","getUnpinnedWidth","elementWidth","unpinnedAreaMinWidth","IgxColumnGroupComponent","QueryList","isChildrenWidthInPercent","IgxColumnLayoutComponent","borderWidth","hasLastPinnedChildColumn","headerStyles","isLastPinned","orderedCols","rs","IgxColumnResizingService","resizeCursor","showResizer","getVisibleContentHeight","columnHeightMultiplier","actualMinWidth","minWidth","actualWidth","pinnedMaxWidth","calcPinnedContainerMaxWidth","getPinnedWidth","MAX_SAFE_INTEGER","autosizeColumnOnDblClick","currentColWidth","onColumnResized","prevWidth","newWidth","resizeColumn","startResizePos","colMinWidth","getColMinWidth","colMaxWidth","getColMaxWidth","resizeColumnLayoutFor","isColumnResizing","relativeColumns","combinedSpan","pinnedWidth","maxPinnedWidth","columnsToResize","updatedDiff","updatedCombinedSpan","setMinMaxCols","newCombinedSpan","newColsToResize","currentResizeWidth","resizeScaled","IgxResizeHandleDirective","colResizingService","_dblClick","debounceTime","_onResizeAreaMouseDown","resizeLine","resizer","onMousedown","onMouseOver","IgxColumnResizerDirective","restrictHResizeMin","MIN_SAFE_INTEGER","restrictHResizeMax","resizeEnd","resizeStart","resize","_left","onMousemove","onMouseup","IgxColumnMovingService","_column","_icon","BeforeDropTarget","AfterDropTarget","IgxColumnMovingDragDirective","cms","_ghostClass","ghostImgIconClass","ghostImgIconGroupClass","_unsubscribe","cancelDrop","isColumnMoving","onColumnMovingStart","subscription$","draggedColumn","onColumnMoving","flexBasis","createTextNode","childNodes","IgxColumnMovingDropDirective","_dropIndicator","_lastDropIndicator","_dragLeave","_dropIndicatorClass","_hVirtDir","hasMovableColumns","isDropTarget","clientRect","_dropPos","DropPosition","lastElementChild","innerText","horizontalScroll","wheelHandler","nextPinnedWidth","onColumnMovingEnd","moveColumn","IgxGridBodyDirective","IgxDatePipeComponent","LOCALE_ID","DatePipe","IgxDecimalPipeComponent","DecimalPipe","RowEditPositionStrategy","isTop","isTopInitialPosition","container","ItemPropertyValueChanged","propName","valueChanged","_propName","_object","onValueChanged","ColumnChooserItemBase","indentation","IgxColumnHidingItemDirective","Alphabetical","DisplayOrder","CustomFilteringStrategy","ColumnChooserBase","disableFilter","columnsAreaMaxHeight","_currentColumns","_gridColumns","_rawColumns","_columnDisplayOrder","ColumnDisplayOrder","_filterCriteria","_filterColumnsPrompt","_title","createColumnItems","filterCriteria","clearFiltering","orderColumns","createColumnItem","localeCompare","createFilteringExpression","IgxColumnHidingComponent","showAllText","hideAllText","onColumnVisibilityChanged","columnItems","hiddenColumnsCount","hidableColumns","onVisibilityChanged","showAllColumns","collection_1","collection_1_1","hideAllColumns","collection_2","collection_2_1","IgxColumnHidingModule","IgxColumnPinningItemDirective","IgxColumnPinningComponent","checkboxValueChange","columnItem","IgxColumnPinningModule","IgxGridToolbarComponent","excelExporter","csvExporter","gridHeight","calcHeight","exportExcel","exportCsv","getTitle","toolbarTitle","getExportText","exportText","getExportExcelText","exportExcelText","getExportCsvText","exportCsvText","exportClicked","exportButton","outletDirective","exportDropdown","exportToExcelClicked","performExport","exportToCsvClicked","exp","exportType","exporter","onToolbarExporting","toggleColumnHidingUI","columnHidingButton","columnHidingDropdown","toggleColumnPinningUI","columnPinningButton","columnPinningDropdown","showAdvancedFilteringUI","openAdvancedFilteringDialog","toolbar","toolbarCustomContentTemplate","IgxGridToolbarCustomContentDirective","IgxRowEditTemplateDirective","IgxRowEditTextDirective","IgxRowEditActionsDirective","IgxRowEditTabStopDirective","api","activateCell","currentCellIndex","rowEditTabs","last","move","handleEscape","activeNode","getCellElementByVisibleIndex","lastEditableColumnIndex","firstEditableColumnIndex","isColumnFullyVisible","performHorizontalScrollToCell","IgxGridGroupByRowComponent","gridSelection","paddingIndentationCssClass","isExpandedGroup","grRowExpr","isVirtualized","verticalScrollContainer","groupRowIndex","toggleGroup","rowExpandedIndicatorTemplate","defaultGroupByExpandedTemplate","rowCollapsedIndicatorTemplate","defaultGroupByCollapsedTemplate","isKeySupportedInGroupRow","handleTabKey","getColumnByName","dataView","rootSummariesEnabled","orderedColumns","gridOrderedColumns","lastCol","alt","IgxGridNavigationService","parentVirtDir","offsetWidth","headerContainer","rowComp","summariesRowList","virtDirRow","getColumnUnpinnedIndex","isColumnRightEdgeVisible","isColumnLeftEdgeVisible","forOfDir","isColumnPinned","displayContainerWidth","displayContainerScrollLeft","tslib_1.__spread","isRowInEditMode","findNextEditable","gridColumns","MoveDirection","isSummary","cellSelector","getCellSelector","selectedNode","isSummaryRow","getFocusableGrid","previousElementSibling","movePreviousEditable","currentColumnVisibleIndex","prevEditableColumnIndex","focusEditableTarget","moveNextEditable","nextEditableColumnIndex","rowElement","firstCell","allCells","verticalScroll","currentRowIndex","containerTopOffset","verticalDisplayContainerElement","offsetTop","tag","getRowSelector","getRowByIndex","focusPreviousElement","currentRowEl","focusElem","containerHeight","targetEndTopOffset","nextIndex_1","getNextRowByIndex","focusNextElement","getAllRows","goToLastBodyElement","rowEl","moveFocusToFilterCell","toStart","isFilterRowVisible","focusFilterRowCloseButton","unpinnedFilterableColumns","focusFilterCellChip","scrollToFilterCell","navigatePrevFilterCell","prevFilterableIndex","firstFiltarableCol","getFirstPinnedFilterableColumn","prevColumn","prevVisibleIndex","navigateFirstCellIfPossible","navigateNextFilterCell","nextFilterableIndex","nextColumn","nextVisibleIndex","getLastPinnedFilterableColumn","pinnedFilterableColums","allowFiltering","filterMode","FilterMode","shouldPerformVerticalScroll","targetRowIndex","targetRow","performVerticalScrollToCell","visibleColIndex","unpinnedIndex","cellElement","nextIndex","tbody","icons","IgxFilteringService","columnsWithComplexFilter","areEventsSubscribed","isFiltering","columnToExpressionsMap","columnStartIndex","_filterIconsRegistered","filteredColumn","selectedExpression","columnToFocus","shouldFocusNext","columnToMoreIconHidden","_datePipe","subscribeToEvents","updateFilteringCell","updateFilterCellArea","filteringRow","filterInternal","createSimpleFilteringTree","clearFilter","conditionOrExpressionTree","expressionsTreeForColumn","expressionForColumn","onFilteringDone","getExpressions","filterGlobal","registerSVGIcons","icons_1","icons_1_1","columnId","expressionUIs","generateExpressionsList","isFilteringTreeComplex","removeExpression","indexToRemove","expressionsList","beforeOperator","afterOperator","expressionUIList","currAndBranch","currExpressionUI","isFilterComplex","isComplex","getOperatorAsString","resourceStrings","igx_grid_filter_operator_and","igx_grid_filter_operator_or","getChipLabel","datePipe","focusFirst","focusChip","closeButton","currentColumnRight","currentColumnLeft","getChildAndOperatorsCount","expressionsUIs","generateExpressionsListRecursive","exprUI","ExpressionUI","prevExprUI","isFilteringExpressionsTreeEmpty","exprTree","IgxExcelStyleLoadingValuesTemplateDirective","IgxExcelStyleSearchComponent","_isLoading","excelStyleLoadingValuesTemplateDirective","defaultExcelStyleLoadingValuesTemplate","refreshSize","clearInput","onCheckboxChange","itemSize","IgxExcelStyleDefaultExpressionComponent","onExpressionRemoved","onLogicOperatorChanged","inputValuesDirective","expressionUI","inputGroupConditions","inputValuesElement","isConditionSelected","conditionName","getConditionName","translateCondition","getInputWidth","getCondition","getIconName","conditions","toggleCustomDialogDropDown","dropdownConditions","onConditionsChanged","onValuesInput","transformValue","onLogicOperatorButtonClicked","buttonIndex","logicOperatorButtonGroup","selectedButtons","onLogicOperatorKeyDown","onRemoveButtonClick","onInputConditionsKeyDown","IgxExcelStyleDateExpressionComponent","IgxExcelStyleCustomDialogComponent","_customDialogPositionSettings","_customDialogOverlaySettings","dateExpressionTemplate","defaultExpressionTemplate","onCustomDialogOpening","selectedOperator","createInitialExpressionUIElement","onCustomDialogOpened","expressionComponents","rootGrid","onClearButtonClick","closeDialog","overlayComponentId","onApplyButtonClick","onAddButtonClick","markChildrenForCheck","scrollToBottom","onApplyButtonKeyDown","createCondition","expressionDateComponents","firstExprUI","secondExprUI","expressionsContainer","IgxExcelStyleSortingComponent","onSortButtonClicked","sortDirection","sortButtonGroup","isColumnGrouped","clearSort","isSpecial","IgxExcelStyleSortingTemplateDirective","IgxExcelStyleMovingTemplateDirective","IgxExcelStyleHidingTemplateDirective","IgxExcelStylePinningTemplateDirective","IgxGridExcelStyleFilteringComponent","shouldOpenSubMenu","containsNullOrEmpty","selectAllSelected","selectAllIndeterminate","filterValues","columnMoving","Subscription","listData","uniqueValues","_subMenuPositionSettings","_subMenuOverlaySettings","igx_grid_excel_boolean_filter","igx_grid_excel_number_filter","igx_grid_excel_date_filter","igx_grid_excel_text_filter","isColumnPinnable","customDialog","populateColumnData","excelStyleSorting","se","excelStyleSearch","clearFilterClass","pinClass","closeDropdown","onPin","onHide","onTextFilterClick","gridRect","dropdownRect","mainDropdown","x1","subMenu","onTextFilterKeyDown","onSubMenuClosed","onSubMenuSelection","areExpressionsSelectable","areExpressionsValuesInTheList","firstValue","uniqueColumnValuesStrategy","renderColumnValuesRemotely","renderColumnValuesFromData","isLoading","getColumnFilterExpressionsTree","colVals","columnValues","toDateString","renderValues","columnField","generateUniqueValues","generateFilterValues","generateListData","isDateColumn","shouldUpdateSelection","addBooleanItems","addItems","sortData","addBlanksItem","addSelectAllItem","gridExpressionsTree","filterListItem","FilterListItem","selectAll","igx_grid_excel_select_all","blanks","igx_grid_excel_blanks","valueA","valueB","selectAllFilterItems","excelStyleSortingTemplateDirective","defaultExcelStyleSortingTemplate","excelStyleMovingTemplateDirective","defaultExcelStyleMovingTemplate","excelStylePinningTemplateDirective","defaultExcelStylePinningTemplate","excelStyleHidingTemplateDirective","defaultExcelStyleHidingTemplate","applyFilter","filterTree","filterOptimizationThreshold","blanksItemIndex","blanksItem","onClearFilterKeyDown","showCustomFilterItem","IgxGridHeaderComponent","_filteringService","hostRole","defaultClasses","igx-grid__th","asc","ascending","descending","igx-grid__th--number","igx-grid__th--sortable","igx-grid__th--filtrable","igx-grid__th--sorted","sorted","klass","hasColumnGroups","maxLevelHeaderDepth","defaultRowHeight","_baseFontSize","initFilteringSettings","getSortDirection","_componentOverlayId","triggerSort","onFilteringIconClick","toggleFilterDropdown","onSortingIconClick","sortDir","filterIconTarget","filterIconClassName","_filterMenuOverlaySettings","_filterMenuPositionSettings","onOverlayOpening","onOverlayClosed","IgxGridFilteringCellComponent","currentTemplate","moreFiltersCount","onTabKeyDown","isLastElementFocused","onShiftTabKeyDown","isFirstElementFocused","isChipVisible","updateVisibleFilters","filterCellTemplate","complexFilter","defaultFilter","emptyFilter","onChipClicked","isColumnRightVisible","isColumnLeftVisible","onChipRemoved","filteringIndicatorClass","isMoreIconHidden","focusFirstElement","focusElement","ghostChip","complexChip","ex","moreIcon","chipsArea","areaWidth","viewWidth","chipsAreaElements","visibleChipsCount","moreIconWidth","areAllColumnsInView","IgxGridHeaderGroupComponent","getHeaderGroupWidth","igx-grid__th--pinned","igx-grid__th--pinned-last","igx-grid__drag-col-header","isHeaderDragged","igx-grid__th--filtering","isFiltered","CurrentResourceStrings","GridResStrings","igx_grid_groupByArea_message","igx_grid_emptyFilteredGrid_message","igx_grid_emptyGrid_message","igx_grid_filter","igx_grid_filter_row_close","igx_grid_filter_row_reset","igx_grid_filter_row_placeholder","igx_grid_filter_row_boolean_placeholder","igx_grid_filter_row_date_placeholder","igx_grid_complex_filter","igx_grid_filter_contains","igx_grid_filter_doesNotContain","igx_grid_filter_startsWith","igx_grid_filter_endsWith","igx_grid_filter_equals","igx_grid_filter_doesNotEqual","igx_grid_filter_empty","igx_grid_filter_notEmpty","igx_grid_filter_null","igx_grid_filter_notNull","igx_grid_filter_before","igx_grid_filter_after","igx_grid_filter_today","igx_grid_filter_yesterday","igx_grid_filter_thisMonth","igx_grid_filter_lastMonth","igx_grid_filter_nextMonth","igx_grid_filter_thisYear","igx_grid_filter_lastYear","igx_grid_filter_nextYear","igx_grid_filter_greaterThan","igx_grid_filter_lessThan","igx_grid_filter_greaterThanOrEqualTo","igx_grid_filter_lessThanOrEqualTo","igx_grid_filter_true","igx_grid_filter_false","igx_grid_filter_all","igx_grid_filter_condition_placeholder","igx_grid_summary_count","igx_grid_summary_min","igx_grid_summary_max","igx_grid_summary_sum","igx_grid_summary_average","igx_grid_summary_earliest","igx_grid_summary_latest","igx_grid_excel_filter_moving_left","igx_grid_excel_filter_moving_left_short","igx_grid_excel_filter_moving_right","igx_grid_excel_filter_moving_right_short","igx_grid_excel_filter_moving_header","igx_grid_excel_filter_sorting_asc","igx_grid_excel_filter_sorting_asc_short","igx_grid_excel_filter_sorting_desc","igx_grid_excel_filter_sorting_desc_short","igx_grid_excel_filter_sorting_header","igx_grid_excel_filter_clear","igx_grid_excel_custom_dialog_add","igx_grid_excel_custom_dialog_clear","igx_grid_excel_custom_dialog_header","igx_grid_excel_cancel","igx_grid_excel_apply","igx_grid_excel_search_placeholder","igx_grid_excel_hide","igx_grid_excel_pin","igx_grid_excel_unpin","igx_grid_excel_custom_filter","igx_grid_advanced_filter_title","igx_grid_advanced_filter_and_group","igx_grid_advanced_filter_or_group","igx_grid_advanced_filter_end_group","igx_grid_advanced_filter_create_and_group","igx_grid_advanced_filter_create_or_group","igx_grid_advanced_filter_and_label","igx_grid_advanced_filter_or_label","igx_grid_advanced_filter_add_condition","igx_grid_advanced_filter_ungroup","igx_grid_advanced_filter_delete","igx_grid_advanced_filter_delete_filters","igx_grid_advanced_filter_initial_text","igx_grid_advanced_filter_column_placeholder","igx_grid_advanced_filter_value_placeholder","TimePickerResStrings","igx_time_picker_ok","igx_time_picker_cancel","PaginatorResStrings","igx_paginator_label","updateResourceStrings","currentStrings","newStrings","IgxGridSummaryService","summaryCacheMap","rootSummaryID","summaryHeight","maxSummariesLenght","retriggerRootPipe","deleteOperation","recalculateSummaries","isGroupedColumn","deleteSummaryCache","isTreeGrid","removeAllTreeGridSummaries","isHierarchicalGrid","getSummaryID","cache","calcMaxSummaryHeight","maxSummaryLength","hasSummary","getCurrentSummaryColumn","defaultSummaryHeight","calculateSummaries","rowSummaries","updateSummaryCache","groupingArgs","compareGroupingExpressions","filteringApplied","summaryIDs","removeChildRowSummaries","newExpressions","removedCols","ungroupedColumns","newExpr","colName","IgxSummaryCellComponent","firstCellIndentation","isKeySupportedInCell","getRowElementByIndex","sr","dataRowIndex","translateSummary","summary","IgxSummaryRowComponent","getColumnSummaries","TOP","BOTTOM","TOPLEFT","TOPRIGHT","BOTTOMLEFT","BOTTOMRIGHT","IgxGridDragSelectDirective","onDragStop","onDragScroll","end$","lastDirection","DragScrollDirection","startDragSelection","activeDrag","_measureDimensions","_sub","_interval$","stopDragSelection","_activeDrag","trunc","IgxTemplateOutletDirective","_viewContainerRef","_embeddedViewsMap","onViewCreated","onViewMoved","onCachedViewLoaded","_getActionType","TemplateOutletAction","CreateView","_recreateView","MoveView","_moveView","UseCachedView","_useCachedView","UpdateViewContext","_updateExistingContext","igxTemplateOutletContext","cleanCache","cleanView","tmplID","_viewRef","igxTemplateOutlet","cachedView","oldContext","_cloneContext","_shouldRecreateView","ctxChange","_hasContextShapeChanged","prevCtxKeys","currCtxKeys","currCtxKeys_1","currCtxKeys_1_1","ctx","movedView","shouldRecreate","IgxTemplateOutletModule","IgxGridColumnResizerComponent","IgxGridFilteringRowComponent","_conditionsOverlaySettings","_operatorsOverlaySettings","chipAreaScrollOffset","isKeyPressed","isComposing","_cancelChipClick","resetExpression","addExpression","showHideArrowButtons","onTabKeydown","onEscKeydown","defaultDateUI","defaultFilterUI","onPrefixKeyDown","dropDownConditions","toggleConditionsDropDown","inputGroupPrefix","stopImmediatePropagation","onInputKeyDown","commitInput","onInputKeyUp","onCompositionStart","onCompositionEnd","datePickerClose","indexToDeselect","scrollChipsWhenAddingExpression","onClearKeyDown","onClearClick","onCommitKeyDown","onCommitClick","onInputGroupFocusout","focusedElement","onDateSelected","toggleOperatorsDropDown","dropDownOperators","unaryConditionChangedCallback","conditionChangedCallback","onChipPointerdown","onChipClick","toggleChip","onLeftArrowKeyDown","scrollChipsOnRemove","scrollChipsOnArrowPress","arrowPosition","chipAraeChildren","containerRect","containerWidth","chipsAreaWidth","showArrows","isColumnFiltered","containerRectRight","lastChipRectRight","resetChipsArea","dif","IgxSelectItemComponent","_text","SelectPositioningStrategy","_selectDefaultSettings","defaultWindowToListOffset","viewPort","positionAndScrollBottom","outBoundsAmount","listContainerBoundRect","positionNoScroll","CURRENT_POSITION_Y","itemTextToInputTextDiff","positionAndScrollTop","getItemsOutOfView","currentScroll","remainingScroll","listOutOfBounds","elementContainer","returnVals","Amount","inputRect","LIST_HEIGHT","itemTextPadding","itemTextIndent","point","itemElement","X","Y","getFirstItemElement","inputHeight","itemBoundRect","itemTopListOffset","inputFontSize","fontSize","numericInputFontSize","itemFontSize","inputTextToInputTop","itemTextToItemTop","CURRENT_BOTTOM_Y","OUT_OF_BOUNDS","itemLeftPadding","textIndent","numericLeftPadding","numericTextIndent","selectItemPaddingHorizontal","IgxSelectToggleIconDirective","IgxSelectComponent","itemText","notifyOnChanges","ExpressionGroupItem","ExpressionItem","ExpressionOperandItem","IgxAdvancedFilteringDialogComponent","selectedExpressions","selectedGroups","columnSelectOverlaySettings","conditionSelectOverlaySettings","_dblClickDelay","_preventChipClick","_editingInputsContainer","scrollElementIntoView","_addModeContainer","_currentGroupButtonsContainer","addRootAndGroupButton","addConditionButton","overlayOutlet","contextMenuToggle","contextualGroup","_selectedColumn","selectedCondition","dragArgs","calculateContextMenuTarget","addCondition","afterExpression","cancelOperandAdd","operandItem","enterExpressionEdit","addAndGroup","addGroup","addOrGroup","endGroup","currentGroup","commitOperandEdit","editedExpression","selectedColumn","addModeExpression","inAddMode","cancelOperandEdit","deleteItem","operandCanBeCommitted","exitOperandEdit","isExpressionGroup","rootGroup","createExpressionGroupItem","filteringExpr","exprCopy","createExpressionsTreeFromGroupItem","subTree","onChipRemove","expressionItem","_clickTimer","onToggleExpression","onChipDblClick","hovered","columnSelect","conditionSelect","searchValueInput","toggleContextMenu","enterExpressionAdd","toggleExpression","deselectParentRecursive","findSingleSelectedGroup","filteringLogics","op","isInsideGroup","createAndGroup","createGroup","createOrGroup","chips","minIndex","MAX_VALUE","firstExpression","deleteFilters","onGroupClick","toggleGroupRecursive","operandExpression","minTop","maxRight","targetOffset","ungroup","selectedGroup","deleteGroup","selectFilteringLogic","getConditionFriendlyName","onExpressionsScrolled","invokeClick","onOutletPointerDown","getConditionList","applyChanges","onChipSelectionEnd","IgxRowSelectorDirective","templateRef","IgxHeadSelectorDirective","IgxRowSelectorsModule","IgxGroupByRowTemplateDirective","IgxRowExpandedIndicatorDirective","IgxRowCollapsedIndicatorDirective","IgxHeaderExpandIndicatorDirective","IgxHeaderCollapseIndicatorDirective","IgxGroupAreaDropDirective","columnBelongsToGrid","isGrouped","column_1","closestParentByAttr","attr","closestGridID","IgxRowDragDirective","_rowDragStarted","transitionEndEvent","endDragging","onRowDragStart","onRowDragEnd","dropArea","rowRect","ghostCells","getElementsByClassName","IgxDragIndicatorIconDirective","IgxRowDragGhostDirective","IgxRowDragModule","IgxGridTransaction","IgxGridBaseComponent","differs","viewRef","_cdrRequests","_cdrRequestRepaint","_resourceStrings","_emptyGridMessage","_emptyFilteredGridMessage","overlayIDs","_advancedFilteringPositionSettings","_advancedFilteringOverlaySettings","autoGenerate","filteringExpressionsTreeChange","pageChange","perPageChange","columnHidingTitle","columnPinningTitle","onRowEditCancel","onColumnInit","onSortingDone","onPagingDone","onRowAdded","onGridCopy","tmpOutlets","headerExpandIndicatorTemplate","headerCollapseIndicatorTemplate","sortingExpressionsChange","columnsWithNoSetWidths","_showToolbar","_exportExcel","_exportCsv","_toolbarTitle","_exportText","_exportExcelText","_exportCsvText","_rowEditable","_filteredSortedData","toolbarHtml","clipboardOptions","copyHeaders","copyFormatters","separator","chipsGoupingExpressions","activeMatchIndex","matchInfoCache","_perPage","_page","_paging","_hideRowSelectors","_rowDrag","_columns","_filteringExpressionsTree","_maxLevelHeaderDepth","_columnHiding","_columnPinning","_allowFiltering","_allowAdvancedFiltering","_filterMode","observer","resizeNotify","_hiddenColumnsText","_pinnedColumnsText","_height","_horizontalForOfs","_multiRowLayoutRowSize","_totalWidth","_pinnedVisible","_unpinnedVisible","_pinnedWidth","_unpinnedWidth","_visibleColumns","_columnGroups","_defaultTargetRecordNumber","_summaryPosition","GridSummaryPosition","_summaryCalculationMode","GridSummaryCalculationMode","_cellSelectionMode","_rowSelectionMode","rowEditPositioningStrategy","rowEditSettings","rowOutletDirective","changeRowEditingOverlayStateOnScroll","hideOverlays","horizontalScrollHandler","vfor","keydownHandler","isNavigationKey","isScroll","compareDocumentPosition","DOCUMENT_POSITION_CONTAINS","tfoot","rowEditingWheelHandler","_scrollWidth","filteringExpressionTreeClone","FilteringExpressionsTreeType","_advancedFilteringExpressionsTree","previous","hasVisibleColumns","refreshGridState","_hostWidth","evaluateLoadingState","calcGridHeadRow","_filteringStrategy","headerGroups","_summaryRowList","sumList","_rowList","rList","_dataRowList","toolbarCustomContentTemplates","headSelectorsTemplates","rowSelectorsTemplates","_outletDirective","rowEditingOutletDirective","rowEditCustom","defaultRowEditTemplate","rowEditTabsCUSTOM","rowEditTabsDEFAULT","_currentRowState","getExportExcel","getExportCsv","selectionMode","overlayID","_setupServices","_setupListeners","_advancedFilteringOverlayId","ind","$event","calculateGridHeight","calculateGridSizes","columnListDiffer","shouldGenerate","getScrollWidth","setupColumns","autogenerateColumns","initColumns","onColumnsChanged","resetColumnsCaches","resetForOfCache","firstVirtRow","resetColumnCollections","resetCachedWidths","_setupRowObservers","elementFilter","isDefined","extractForOfs","rowListObserver","summaryRowObserver","combineLatest","_zoneBegoneListeners","initPinning","reattach","vertScrDC","displayContainer","resetNotifyChanges","getDragGhostCustomTemplate","dragGhostCustomTemplates","tmplOutlet","toggleColumnVisibility","paginatorClassName","unpinnedWidth","getFeatureColumnsWidth","defaultHeaderGroupMinWidth","getRowByKey","keyValue","getCellByColumn","getCellByKey","pagingState","nextPage","isLastPage","previousPage","isFirstPage","hideRowSelectors","to","list","fromIndex","toIndex","newList","_resetColumnList","_reorderPinnedColumns","dropIndex","_moveChildColumns","buffer","dropTarget","fi","ti","paginate","addRow","deleteRow","updateCell","updateRow","enableSummaries","rest","_multipleSummaries","disableSummaries","_disableMultipleSummaries","pinColumn","unpinColumn","findNext","findPrev","updateActiveInfo","rebuildMatchCache","activeInfo_1","clearSearch","summaryCalculationMode","_hasVisibleColumns","dataLength","_derivePossibleWidth","MINIMUM_COLUMN_WIDTH","columnWidthCombined","allItems","theadRow","minHeight","summariesHeight","_calculateGridBodyHeight","getGroupAreaHeight","getToolbarHeight","toolbarHeight","showToolbar","getPagingHeight","pagingHeight","footer","getFilterCellHeight","headerGroupNativeEl","filterCellNativeEl","actualTheadRow","footerHeight","renderedHeight","computed","isPercentHeight","_shouldAutoSize","bodyHeight","getDataBasedBodyHeight","defaultTargetBodyHeight","checkContainerSizeChange","origHeight","hasVerticalSroll","scrollWidth","baseWidth","computedWidth","showDragIcons","headerDragContainer","visibleChildColumns","visibleCols","colsPerBlock","block","combinedBlocksSize","blockCols","columnsWithSetWidths","columnsToSize","sumExistingWidths","curr","widthValue","calculateGridWidth","isPercentWidth","getColumnWidthSum","colSum","added_1","removed_1","hasScroll","repositionRowEditingOverlay","isStable","_applyWidthHostBinding","currentWidth","headerSelectorContainer","takeHidden","fc","fc_1","fc_1_1","hostWidth","summaryOperand","customSummary","resolveDataTypes","fields","generateDataFields","onlyTopLevel","layoutSize","columnLayoutColumns","onHeaderSelectorClick","selectedRows","selectRows","deselectRows","onlyFilterData","deselectAllRows","clearCellSelection","dragScroll","arg","columnToVisibleIndex","startNode","endNode","getSelectedRanges","extractDataFromSelection","formatters","selectedData","activeEl","selectionMap","tuple","cellSelection","temp_1","temp_1_1","getSelectableColumnsAt","selectionMap_1","selectionMap_1_1","colLayout","getSelectedData","copyHandlerIE","copyHandler","ie11","setData","navigateTo","childGridsData","shouldScrollVertically","shouldScrollHorizontally","executeCallback","getNextCell","currRowIndex","curVisibleColIndex","isValidPosition","colIndexes","editCol","nextCellIndex","getNextDataRowIndex","getPreviousCell","prevCellIndex","getPrevDataRowIndex","GridKeydownTargetType","summaryCells","prevRow","nextRow","trackColumnChanges","increment","rebuildCache","matchInfo","currentPinnedWidth","newUnpinnedCols","inCollection","delayScrolling","scrollDirective","scrollToHorizontally","scrollRow","goal","c1","c2","numberPipe","dataRow","occurenceIndex","searchIndex","_group","rowEditingOverlay","toggleRowEditingOverlay","shouldOverlayLoading","loadingOutlet","_loadingId","loadingOverlay","configureRowEditingOverlay","closeRowEditingOverlay","rowStyle","useOuter","parentRowOutletDirective","rowChanges","writeToData","endRowTransaction","activeCell","hasHorizontalScroll","_restoreVirtState","rowForOf","gridScrLeft","cachedViewLoaded","tmplId","templateID","index_1","summaryRow","closeAdvancedFilteringDialog","advancedFilteringDialog","IgxGridFooterComponent","IgxSummaryDataPipe","IgxProcessBarTextTemplateDirective","MIN_VALUE","CENTER","DANGER","BaseProgress","requestAnimationId","_valueInPercent","_max","_animate","runAnimation","updateProgressSmoothly","passedValue","convertInPercentage","progressValue","valueInPercent","updateProgress","isInLimitRange","updateProgressDirectly","directionFlow","comparator","isExceedingUpperLimit","isExceedingLowerLimit","NEXT_LINEAR_ID","NEXT_CIRCULAR_ID","IgxLinearProgressBarComponent","valueMin","striped","textAlign","IgxTextAlign","textVisibility","textTop","onProgressChanged","maxNum","_step","valueInRange","getValueInProperRange","changedValues","IgxProgressType","IgxCircularProgressBarComponent","STROKE_OPACITY_DVIDER","STROKE_OPACITY_ADDITION","_circleRadius","_circumference","PI","valueInProperRange","FRAMES","strokeDashoffset","getProgress","strokeOpacity","_svgCircle","percentage","IgxProgressBarModule","IgxSelectGroupComponent","IgxSelectItemNavigationDirective","inputStream","clearStream$","EMPTY","captureKey","timer","activateItemByText","activeItemIndex","nextItem","IgxSelectModule","IgxPaginatorComponent","defaultSelectValues","pagerEnabled","pagerHidden","dropdownEnabled","dropdownHidden","selectLabel","_selectOptions","sortUniqueOptions","totalRecords","_totalRecords","newOption","paginatorSelectDisplayDensity","IgxPaginatorModule","IgxGridCellStyleClassesPipe","callbackOrValue","IgxGridCellStylesPipe","styles","css","IgxGridNotGroupedPipe","IgxGridTopLevelColumns","IgxGridFilterConditionPipe","IgxGridTransactionPipe","IgxGridPaginatorOptionsPipe","IgxHasVisibleColumnsPipe","IgxGridPipesModule","IgxExcelStyleColumnMovingComponent","findColumn","onMoveButtonClicked","moveDirection","IgxListBase","IgxEmptyListTemplateDirective","IgxDataLoadingTemplateDirective","IgxListItemLeftPanningTemplateDirective","IgxListItemRightPanningTemplateDirective","IgxListItemComponent","_panState","IgxListPanState","panOffset","lastPanDir","onItemClicked","panStart","isTrue","allowLeftPanning","allowRightPanning","panMove","isPanningToLeft","showLeftPanTemplate","setContentElementLeft","maxLeft","showRightPanTemplate","panEnd","relativeOffset","widthTriggeringGrip","panEndTriggeringThreshold","oldPanState","hideLeftAndRightPanTemplates","keepItem","onLeftPan","onRightPan","args2","oldState","newState","onPanStateChange","setLeftAndRightTemplatesVisibility","leftVisibility","rightVisibility","leftPanningTemplateElement","rightPanningTemplateElement","candidates","IgxListThumbnailDirective","IgxListActionDirective","IgxListLineDirective","IgxListLineTitleDirective","IgxListLineSubTitleDirective","IgxListComponent","isListEmpty","dataLoadingTemplate","defaultDataLoadingTemplate","emptyListTemplate","defaultEmptyListTemplate","IgxListModule","IgxExcelStyleSearchFilterPipe","esf","it","finalResult","IgxGridExcelStyleFilteringModule","IgxGridCommonModule","IgxGridAPIService","groupingState","arrange_sorting_expressions","groupBy_multiple","names_1","groupedCols","newSortingExpr","grExprIndex","grpExpandState","groupingExpansionState","grExpr","sortExprIndex","groupingState_1","groupingState_1_1","groupBy_get_expanded_for_group","grState","groupBy_is_row_in_group","rowInGroup","groupBy_toggle_group","expansionState","groupsExpanded","groupBy_fully_expand_group","groupExprA","groupExprB","get_groupBy_record_id","recordId","hierrarchy","groupByKey","IgxGridMRLNavigationService","startNavigationCell","applyNavigationCell","navDirection","oppositeDir","NavigationDirection","focusCellUpFromLayout","focusCellDownFromLayout","isParentColumnFullyVisible","scrollPos","getChildColumnScrollPositions","rightScroll","leftScroll","focusNextCellFromLayout","focusPrevCellFromLayout","nextElementColumn","_moveFocusToCell","nextCell_1","currCell","_focusCell","lastVisibleIndex_1","prevElementColumn","movePrev","isGroupRow","currentRowStart","currentColStart","parentIndex","upperElementColumn","layoutRowEnd_1","moveNext","currentRowEnd","currentColEnd","nextElement","layoutSize_1","prevElement","cellRowStart","layouts","lastLayout","lastLayoutChildren","indexInLayout","allBlocks","getColumnLayoutSelector","firstLayout","targetCol","getColunmByVisibleIndex","parentVIndex","childSizes","_isGroupRecordAt","getVerticalScrollPositions","topOffset","verticalDCTopOffset","rowBottom","isPrevious","rowTop","hScroll","cellElem","gridBoundingClientRect","diffTop","diffBottom","IgxGridComponent","_groupingExpressions","_groupingExpandState","_hideGroupedColumns","_dropAreaMessage","groupingExpressionsChange","groupingExpansionStateChange","onGroupingDone","dragIndicatorIconTemplate","oldExpressions","_gridAPI","_applyGrouping","groupedCols_1","ungroupedCols_1","groupingDoneArgs","groupedColumns","groupingDiffer","_setGroupColsVisibility","_groupsRowList","_groupRowTemplate","_groupAreaTemplate","checkIfNoColumnField","clearGrouping","_getStateForGroupRow","_toggleGroup","fullyExpandGroup","_fullyExpandGroup","isGroupByRecord","toggleAllGroupRows","emptyGridTemplate","emptyFilteredGridTemplate","emptyGridDefaultTemplate","loadingGridTemplate","loadingGridDefaultTemplate","chipsOrderChanged","newGrouping","KeyboardEvent","chipsMovingEnded","columnExpr","groupArea","headerGroupContainer","groupingResult","groupByRecord","groupingMetadata","groupingFlatResult","dropAreaTemplate","defaultDropAreaTemplate","getGroupByChipTitle","defaultExpandedTemplate","defaultCollapsedTemplate","getColumnGroupable","groupTemplate","hideGroupedColumns","_setupNavigationService","source_1","expression_1","expression_1_1","IgxGridSortingPipe","IgxGridGroupingPipe","IgxGridPagingPipe","IgxGridFilteringPipe","IgxGridRowComponent","IgxGridSummaryPipe","summaryPosition","summaryPipeTrigger","addSummaryRows","gridId","recordsWithSummary","lastChildMap","maxSummaryHeight","g","skipAdd","groupRecords","groupRecord","groupRecordId","removeDeletedRecord","summaryRecord","lastChild","lastChildId","IgxGridModule","IgxTreeGridAPIService","flatData","processedRootRecords","expand_row","collapse_row","toggle_row_expansion","treeRecord","isExpanded","get_row_expansion_state","loadChildrenOnDemand","hasChildrenKey","onRowToggle","expand_path_to_record","expansionDepth","foreignKey","childData","treeGrid","flatDataWithCascadeOnDeleteAndTransactions","cascadeOnDelete","selectedChildren","get_selected_children","generateRowPath","selectedRowIDs","row_deleted_parent","IgxTreeGridNavigationService","IgxRowLoadingIndicatorTemplateDirective","IgxTreeGridComponent","processedRecords","_expansionDepth","Infinity","_expansionStates","expansionStatesChange","loadingRows","cloneMap","_rowLoadingIndicatorTemplate","loadChildrenOnRowExpansion","rowLoadingTemplate","parentID_1","addChildRows","parentID","children_1","children_1_1","parentData","pid","mapIn","mapCloned","mapObj","expandRow","collapseRow","toggleRow","expandAll","collapseAll","parentRecord","childKey","processedExpandedFlatData","nonColumnLayoutColumns","IgxTreeGridRowComponent","_treeRow","IgxTreeGridHierarchizingPipe","hierarchicalRecords","treeGridRecordsMap","hierarchizeFlatData","hierarchizeRecursive","getRowID","missingParentRecords","setIndentationLevels","indentationLevel","IgxTreeGridFlatteningPipe","expandedLevels","getFlatDataRecursive","parentExpanded","updateNonProcessedRecordExpansion","IgxTreeGridSortingPipe","flattenTreeGridRecords","records_1","records_1_1","IgxTreeGridPagingPipe","IgxTreeGridTransactionPipe","aggregatedChanges","flatDataClone","hierarchicalDataClone","cloneHierarchicalArray","array_1","array_1_1","clonedItem","IgxTreeGridCellComponent","showIndicator","treeGridAPI","onIndicatorFocus","onLoadingDblClick","indicatorWidth","indicator","indicatorStyle","indicatorMargin","marginRight","leftPadding","indentationDiv","indentationStyle","IgxTreeGridSummaryPipe","cellIndentation","childRecord","deletedRows","lenght","IgxTreeGridModule","IgxHierarchicalGridNavigationService","parentGrid","getClosestElemByTag","getChildContainer","getChildGridRowContainer","getChildGrid","childGridID","hgridAPI","getIsChildAtIndex","isChildGridRecord","prevElem","focusPrevChild","_navigateUpInChild","scrollGrid","focusPrev","nextElem","focusNextChild","_navigateDownInChild","focusNext","topIsVisible","scrollable","getNextScrollable","targetIndex_1","scrTopPosition","verticalScrollTop","cellSelector_1","endIsVisible","getNextScrollableDown","targetIndex_2","rowIsVisible","gridTop","_getMaxTop","scrGrid","topGrid","summaryRows","hasSummaries","isLastDataRow","nextIsDataRow","isLastColumn","isLastSummaryRow","virt","isNextChild","_navigateToNextParentRow","focusNextRow","childContainer","focusNextChildDOMElem","parentHasSummary","parentRowIndex","isLastRowInParent","nextIsSiblingChild","parentSummary","childGrid","targetGrid","prevSiblingChild","gridElem","dataRows","hasRows","performShiftTabIntoChild","selNode","getLastGridElem","lastRowIndex_1","closestChild","trContainer","focusPrevRow","prevChild","getSibling","prevChildRow","childRow","lastCellIndex","grids","gridElems","childLevel","childLayoutList","hg","parentRow","isScrolledToBottom","lastRowInChild","currGrid","parentContainer","childRowContainer","prevIsSiblingChild","getNextParentInfo","nonScrollable","parentInfo","nextParentGrid","nextParentElem","parentState","atLastChunk","_getMinBottom","cell_1","closestScrollableGrid","gridBottom","inView","canScroll","inChild","cellSelector_2","cell_2","rIndex_1","scrTop","horizontalScrollGridToIndex","callBackFunc","containerTop","sourceElem","targetTag","IgxHierarchicalTransactionServiceFactory","useFactory","hierarchicalTransactionServiceFactory","IgxHierarchicalGridBaseComponent","transactionFactory","showExpandAll","_expandChildren","createColumnsList","_createColumn","_createColGroupComponent","_createColComponent","factoryGroup","inputs","newChildren_1","newCol","factoryColumn","getGridsForIsland","rowIslandID","getChildGridsForRowIsland","IgxHierarchicalGridAPIService","currPath","pathElem","childrenForLayout","layoutMap","getParentRowId","IgxRowIslandComponent","childColumns","onLayoutChange","onGridCreated","initialChanges","layout_id","isInit","expandChildren","updateOnRender","pId","parentId","parentIsland","updateChildren","onRowIslandChange","nestedColumns","colsArray","topCols","cleanGridState","childGridTemplates","tmpl","IgxChildGridRowComponent","ch","_handleLayoutChanges","hGrid","setupEventEmitters","inputNames","outputs","matchingInputPropName","output","IgxHierarchicalGridComponent","hierarchicalStateChange","childLayoutKeys","highlightedRowID","_hierarchicalState","h_id","hierarchicalState","hg_verticalScrollHandler","hg_horizontalScrollHandler","cachedData","recalcColSizes","allLayoutList","colLength","_clearSeletionHighlights","hasExpandableChildren","headerHierarchyExpander","getDefaultExpanderWidth","isRowHighlighted","isHierarchicalRecord","trackChanges","moveView","rootHeight","topDiff","toggleAll","viewCreatedHandler","viewMovedHandler","relatedGrid","vScr","hScr","inDeph","onContainerScroll","IgxHierarchicalGridCellComponent","helement","_rootGrid","_getRootGrid","_clearAllHighlights","currentElement","persistFocusedCell","IgxHierarchicalRowComponent","deselect","expanderClick","expandable","defaultEmptyTemplate","IgxGridHierarchicalPipe","childKeys","addHierarchy","IgxGridHierarchicalPagingPipe","IgxHierarchicalGridModule","IgxActionIconDirective","IgxNavbarComponent","titleId","actionIconTemplate","actionButtonIcon","_triggerAction","IgxNavbarModule","IgxNavDrawerItemDirective","activeClass","IgxNavDrawerTemplateDirective","IgxNavDrawerMiniTemplateDirective","IgxNavigationDrawerComponent","_state","_touchManager","_isOpen","enableGestures","isOpenChange","pinThreshold","miniWidth","pinChange","opened","closing","_gesturesAttached","_widthCache","windowWidth","drawer","mini","styleDummy","_panning","_maxEdgeZone","checkPinThreshold","getWindowWidth","swipe","startPosition","center","distance","maxEdgeZone","panstart","_panStartWidth","getExpectedWidth","_panLimit","setElementClass","visibleWidth","newX","percent","hasAnimateWidth","setXSize","toPrecision","resetPan","toggleOpenedEvent","toggleClosedEvent","miniTemplate","contentTemplate","_miniTemplate","setDrawerWidth","_drawer","_overlay","_styleDummy","updateEdgeZone","ensureEvents","_resizeObserver","set_maxEdgeZone","innerWidth","screen","setElementStyle","getDrawerWidth","Renderer","IgxNavigationDrawerModule","IgxThumbFromTemplateDirective","IgxThumbToTemplateDirective","SLIDER","FROM","TO","IgxSliderThumbComponent","_elementRef","_isActive","_isPressed","onThumbValueChange","onChange","onHoverChange","thumbBounderies","thumbCenter","SliderHandle","onPan","mouseX","updateThumbValue","onPinterEnter","onPointerLeave","onFocusListener","showThumbIndicators","toggleThumbIndicators","hideThumbIndicators","calculateTrackUpdate","scaleX","thumbPositionX","stepDistanceCenter","stepDistance","stepToProceed","stepDist","continuous","IgxThumbLabelComponent","IgxSliderComponent","_pMin","_pMax","_hasViewInit","_minValue","_maxValue","_continuous","_labels","SliderType","_destroyer$","_indicatorsDestroyer$","thumbs","labelRefs","slierClass","thumbLabelVisibilityDuration","thumb","lowerValue","labelsViewEnabled","upperValue","labels","updateTrack","calculateStepDistance","positionHandlesAndUpdateTrack","setTickInterval","normalizeByStep","disable","changeThumbFocusableState","lowerBound","updateLowerBoundAndMinTravelZone","upperBound","updateUpperBoundAndMaxTravelZone","_lowerBound","valueToFraction","_upperBound","isRange","lower","upper","validateInitialValue","findClosestThumb","thumbTo","thumbFrom","showSliderIndicators","releasePointerCapture","hideSliderIndicators","toggleSliderIndicators","onPanListener","onPanStart","onPanEnd","_lowerValue","_upperValue","sliderSetup","subscribeTo","thumbChanged","labelFrom","positionHandle","ngAfterContentChecked","thumbType","swapThumb","hasValueChanged","emitValueChanged","onThumbChange","toggleThumb","closestHandle","generateTickMarks","thumbHandle","labelHandle","positionLeft","labelTo","fromOffset","offsetLeft","toOffset","xPointer","closestTo","trackRange","renderCallbackExecution","ticks","_indicatorsTimer","positions","pMin","pMax","positionGap","trackLeftIndention","track","unsubscriber","merge","isSliderWithDifferentValue","isRangeWithOneDifferentValue","IgxSliderModule","IgxSnackbarComponent","autoHide","displayTime","animationStarted","triggerAction","snackbarAnimationStarted","fromState","snackbarAnimationDone","toOpacity","IgxSnackbarModule","IgxSwitchComponent","switch","_onSwitchChange","_onSwitchClick","SwitchLabelPosition","IGX_SWITCH_REQUIRED_VALIDATOR","IgxSwitchRequiredDirective","IgxSwitchModule","IgxTabTemplateDirective","IgxBottomNavComponent","onTabSelected","onTabDeselected","selectedIndex","_itemStyle","hasContentTabs","contentTabs","viewTabs","tabs","panels","_selectedPanelHandler","tab","_deselectTab","_deselectPanel","selectedTab","aTab","IgxTabComponent","IgxTabPanelComponent","_tabBar","_isSelected","relatedTab","changesCount","_tabTemplate","tabTemplate","ariaDisabled","ariaSelected","ariaControls","_changesCount","relatedPanel","customTabTemplate","customTabTemplateDir","defaultTabTemplate","IgxBottomNavModule","IgxTabsBase","scrollElement","scrollRight","performSelectionChange","newTab","transformContentAnimation","transformIndicatorAnimation","IgxTabItemBase","setSelectedInternal","IgxTabsGroupBase","IgxRightButtonStyleDirective","getRightButtonStyle","ButtonStyle","viewPortWidth","itemsContainerChildrenCount","itemsContainer","itemsContainerWidth","lastTab","headerContainerWidth","IgxLeftButtonStyleDirective","getLeftButtonStyle","IgxTabItemTemplateDirective","IgxTabsGroupComponent","_tabs","IgxTabItemComponent","_ngZone","_nativeTabItem","relatedGroup","isLeftArrow","tabsArray","FIXED","CONTENTFIT","IgxTabsComponent","selectedIndexChange","tabsType","onTabItemDeselected","onTabItemSelected","_selectedIndex","iconLabelFoundInGroups","iconLabelFoundInTabs","TabsType","performSelection","hideIndicator","_groupChanges$","resetSelectionOnCollectionChanged","tabsContainer","currentTab","tabsArray_1","tabsArray_1_1","nativeTabItem","oldTab","selectedTabItem","performDeselection","oldTabRelatedGroup","newTabRelatedGroup","bringNewTabIntoView","tabNativeElement","viewPortOffsetWidth","contentOffset","contentsContainer","selectedIndicator","IgxTabsModule","IgxItemListDirective","timePicker","nextHour","nextMinute","nextAmPm","prevHour","prevMinute","prevAmPm","listName","minuteList","ampmList","hourList","okButtonClick","cancelButtonClick","onHover","onPanMove","IgxHourItemDirective","itemList","isSelectedHour","selectedHour","scrollHourIntoView","IgxMinuteItemDirective","isSelectedMinute","selectedMinute","scrollMinuteIntoView","IgxAmPmItemDirective","isSelectedAmPm","selectedAmPm","scrollAmPmIntoView","IgxTimePickerTemplateDirective","IgxTimePickerActionsDirective","TimeDisplayFormatPipe","hour","amPM","maskAmPM","sections","showHoursList","showMinutesList","showAmPmList","prompt","regExp","hourVal","minutesVal","TimeInputFormatPipe","cleared","leadZeroHour","leadZeroMinutes","HOURS_POS","MINUTES_POS","AMPM_POS","TimePickerHammerConfig","IgxTimePickerComponent","itemsDelta","_hourItems","_minuteItems","_ampmItems","isNotEmpty","displayFormat","inputFormat","_okButtonLabel","_cancelButtonLabel","_isHourListLoop","_isMinuteListLoop","_hourView","_minuteView","_ampmView","_isValueValid","dispVal","_formatTime","_displayValue","displayValue","setThroughUI","formatValue","_dialogOverlaySettings","_mask","minuteEntries","hourEntries","timePickerTemplateDirective","defaultTimePickerTemplate","dropdownInputTemplate","_generateHours","_generateMinutes","_generateAmPm","spinOnEdit","_input","_onDropDownClosed","onKeydownSpace","onAltArrowDown","_scrollItemIntoView","isListLoop","viewType","itemIntoView","_itemToString","_nextItem","_prevItem","_viewToString","leadZeroMinute","itemsCount","formattedMinute","formattedHour","minute","_updateHourView","_updateMinuteView","_updateAmPmView","_addEmptyItems","hourItemsCount","minuteItemsCount","_getSelectedTime","_convertMinMaxValue","_dateFromModel","_isEntryValid","validH","validM","re","validHourEntries","validMinuteEntries","_updateEditableInput","_spinHours","currentVal","maxVal","hDelta","_spinMinutes","mDelta","_initializeContainer","_prevSelectedHour","_prevSelectedMinute","_prevSelectedAmPm","hourIntoView","minuteIntoView","ampmIntoView","time","hoursInView","minutesInView","ampmInView","ampm","preserveAmPm","maskWithAmPm","pureMask","displayVal","IgxTimePickerModule","IgxToastComponent","_isVisible","CSS_CLASSES","IGX_TOAST_BOTTOM","IGX_TOAST_MIDDLE","IGX_TOAST_TOP","onShowing","onShown","onHiding","onHidden","isVisibleChange","IgxToastPosition","mapPositionToClassName","IgxToastModule","SMALL","MEDIUM","LARGE"],"mappings":"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,EApDA,GCuCAC,GAAA,WAAA,SAAAA,KA2ImC,2BA3IlC/6J,EAAAA,SAAQhB,KAAA,CAAC,CACNiB,aAAc,CACVopG,GACA0I,GACAwH,GACAG,GACA8hB,GACA7X,GACAoC,GACAlU,GACAD,GACAE,GACAH,GACAqU,GACAE,GACAD,GACAE,GACApJ,GACAT,GACAwB,GACAe,GACAkB,GACAyd,GACAuO,GACAylB,GACAhyB,GACA4I,GACAR,GACAgB,GACAkD,GACAp6B,GACA6/C,GACA7e,IAEJ73F,gBAAiB,CACbk3D,GACAwH,GACAG,GACAg5B,IAEJxyI,QAAS,CACLmpG,GACA0I,GACAwH,GACAG,GACA8hB,GACA7X,GACAoC,GACAlU,GACAD,GACAE,GACAH,GACAqU,GACAE,GACAD,GACAE,GACApJ,GACAe,GACAe,GACAkB,GACAyxC,GACAztG,GACA25C,GACAt1B,GACA5M,GACApZ,GACA3hB,GACAma,GACAixF,GACAn5E,GACA0N,GACAG,GACAklB,GACAxb,GACAyf,GACAv4B,GACAkyD,GACA7lE,GACA6wB,GACAq1C,GACAkxC,GACAp3B,GACAuO,GACAvM,GACA4I,GACAR,GACAgB,GACAkD,GACA35E,GACA8kG,GACA6D,GACAppD,GACAooC,GACAuc,GACA9E,GACA7e,GACA2F,IAEJ/qG,QAAS,CACLC,EAAAA,aACAk0C,EAAAA,YACA19B,GACA25C,GACAt1B,GACA5M,GACApZ,GACA3hB,GACAma,GACAixF,GACAn5E,GACA0N,GACAG,GACAklB,GACAxb,GACAyf,GACAv4B,GACAkyD,GACA7lE,GACA6wB,GACAq1C,GACAkxC,GACAziG,GACA8kG,GACA6D,GACAhhB,GACAyb,GACAc,GACAhe,IAEJl4I,UAAW,CACP8gG,GACArgE,GACA68E,GACA8K,GACAtO,GACA0rB,GACA,CAAEjpF,QAASq9F,GAAoBv/D,SAAU/+C,SAGds/H,EA3InC,kBCpEA,SAAAC,mDAqJA,OArJuChyJ,EAAAA,EAAAA,GAE5BgyJ,EAAA9pK,UAAAgY,QAAP,SAAejE,OACLg2J,EAAgB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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","enum EaseIn {\n    quad = `cubic-bezier(0.550, 0.085, 0.680, 0.530)` as any,\n    cubic = `cubic-bezier(0.550, 0.055, 0.675, 0.190)` as any,\n    quart = `cubic-bezier(0.895, 0.030, 0.685, 0.220)` as any,\n    quint = `cubic-bezier(0.755, 0.050, 0.855, 0.060)` as any,\n    sine = `cubic-bezier(0.470, 0.000, 0.745, 0.715)` as any,\n    expo = `cubic-bezier(0.950, 0.050, 0.795, 0.035)` as any,\n    circ = `cubic-bezier(0.600, 0.040, 0.980, 0.335)` as any,\n    back = `cubic-bezier(0.600, -0.280, 0.735, 0.045)` as any\n}\n\nenum EaseOut {\n    quad = `cubic-bezier(0.250, 0.460, 0.450, 0.940)` as any,\n    cubic = `cubic-bezier(0.215, 0.610, 0.355, 1.000)` as any,\n    quart = `cubic-bezier(0.165, 0.840, 0.440, 1.000)` as any,\n    quint = `cubic-bezier(0.230, 1.000, 0.320, 1.000)` as any,\n    sine = `cubic-bezier(0.390, 0.575, 0.565, 1.000)` as any,\n    expo = `cubic-bezier(0.190, 1.000, 0.220, 1.000)` as any,\n    circ = `cubic-bezier(0.075, 0.820, 0.165, 1.000)` as any,\n    back = `cubic-bezier(0.175, 0.885, 0.320, 1.275)` as any\n}\n\nenum EaseInOut {\n    quad = `cubic-bezier(0.455, 0.030, 0.515, 0.955)` as any,\n    cubic = `cubic-bezier(0.645, 0.045, 0.355, 1.000)` as any,\n    quart = `cubic-bezier(0.770, 0.000, 0.175, 1.000)` as any,\n    quint = `cubic-bezier(0.860, 0.000, 0.070, 1.000)` as any,\n    sine = `cubic-bezier(0.445, 0.050, 0.550, 0.950)` as any,\n    expo = `cubic-bezier(1.000, 0.000, 0.000, 1.000)` as any,\n    circ = `cubic-bezier(0.785, 0.135, 0.150, 0.860)` as any,\n    back = `cubic-bezier(0.680, -0.550, 0.265, 1.550)` as any\n}\n\nexport { EaseIn, EaseOut, EaseInOut };\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`\n        })\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseOut.sine,\n    endOpacity: 1,\n    startOpacity: 0\n};\n\nconst fadeIn: AnimationReferenceMetadata = animation(base, {\n    params: baseParams\n});\n\nconst fadeOut: AnimationReferenceMetadata = animation(base, {\n    params: {\n        delay: '0s',\n        duration: '350ms',\n        easing: EaseOut.sine,\n        endOpacity: 0,\n        startOpacity: 1\n    }\n});\n\nexport { fadeIn, fadeOut };\n","import {\n    animate,\n    animation,\n    AnimationMetadata,\n    AnimationReferenceMetadata,\n    keyframes,\n    style\n} from '@angular/animations';\nimport { EaseOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst baseRecipe: AnimationMetadata[] = [\n    style({\n        backfaceVisibility: 'hidden',\n        transformStyle: 'preserve-3d'\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                transform: `translateZ({{startDistance}})\n                rotate3d({{rotateX}}, {{rotateY}}, {{rotateZ}}, {{startAngle}}deg)`\n            }),\n            style({\n                offset: 1,\n                transform: `translateZ({{endDistance}})\n                rotate3d({{rotateX}}, {{rotateY}}, {{rotateZ}}, {{endAngle}}deg)`\n            })\n        ])\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    duration: '600ms',\n    easing: EaseOut.quad,\n    endAngle: 180,\n    endDistance: '0px',\n    rotateX: 1,\n    rotateY: 0,\n    rotateZ: 0,\n    startAngle: 0,\n    startDistance: '0px'\n};\n\nconst flipTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams\n    }\n});\n\nconst flipBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endAngle: -180\n    }\n});\n\nconst flipLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nconst flipRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endAngle: -180,\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nconst flipHorFwd: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '170px'\n    }\n});\n\nconst flipHorBck: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '-170px'\n    }\n});\n\nconst flipVerFwd: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '170px',\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nconst flipVerBck: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '-170px',\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nexport {\n    flipTop,\n    flipRight,\n    flipBottom,\n    flipLeft,\n    flipHorFwd,\n    flipHorBck,\n    flipVerFwd,\n    flipVerBck\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst baseRecipe: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `rotate3d({{rotateX}},{{rotateY}},{{rotateZ}},{{startAngle}}deg)`,\n        transformOrigin: `{{xPos}} {{yPos}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            offset: 0,\n            opacity: `{{endOpacity}}`,\n            transform: `rotate3d({{rotateX}},{{rotateY}},{{rotateZ}},{{endAngle}}deg)`,\n            transformOrigin: `{{xPos}} {{yPos}}`\n        })\n    )\n];\n\nconst baseInParams: IAnimationParams = {\n    delay: '0s',\n    duration: '600ms',\n    easing: EaseOut.quad,\n    endAngle: 0,\n    endOpacity: 1,\n    rotateX: 0,\n    rotateY: 0,\n    rotateZ: 1,\n    startAngle: -360,\n    startOpacity: 0,\n    xPos: 'center',\n    yPos: 'center'\n};\n\nconst baseOutParams: IAnimationParams = {\n    ...baseInParams,\n    easing: EaseIn.quad,\n    endOpacity: 0,\n    startOpacity: 1\n};\n\nconst rotateInCenter: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: { ...baseInParams }\n});\n\nconst rotateOutCenter: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: { ...baseOutParams }\n});\n\nconst rotateInTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'top'\n    }\n});\n\nconst rotateOutTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'top'\n    }\n});\n\nconst rotateInRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'right'\n    }\n});\n\nconst rotateOutRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'right'\n    }\n});\n\nconst rotateInBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'bottom'\n    }\n});\n\nconst rotateOutBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'bottom'\n    }\n});\n\nconst rotateInLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'left'\n    }\n});\n\nconst rotateOutLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'left'\n    }\n});\n\nconst rotateInTr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'right',\n        yPos: 'top'\n    }\n});\n\nconst rotateOutTr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'right',\n        yPos: 'top'\n    }\n});\n\nconst rotateInBr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'right',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateOutBr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'right',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateInBl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'left',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateOutBl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'left',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateInTl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'left',\n        yPos: 'top'\n    }\n});\n\nconst rotateOutTl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'left',\n        yPos: 'top'\n    }\n});\n\nconst rotateInDiagonal1: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: 1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutDiagonal1: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: 1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateInDiagonal2: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: -1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutDiagonal2: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: -1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateInHor: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: 0,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutHor: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: 0,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateInVer: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: 1,\n        rotateY: 0,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutVer: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: 1,\n        rotateY: 0,\n        rotateZ: 0\n    }\n});\n\nexport {\n    rotateInCenter,\n    rotateInTop,\n    rotateInRight,\n    rotateInLeft,\n    rotateInBottom,\n    rotateInTr,\n    rotateInBr,\n    rotateInBl,\n    rotateInTl,\n    rotateInDiagonal1,\n    rotateInDiagonal2,\n    rotateInHor,\n    rotateInVer,\n    rotateOutCenter,\n    rotateOutTop,\n    rotateOutRight,\n    rotateOutLeft,\n    rotateOutBottom,\n    rotateOutTr,\n    rotateOutBr,\n    rotateOutBl,\n    rotateOutTl,\n    rotateOutDiagonal1,\n    rotateOutDiagonal2,\n    rotateOutHor,\n    rotateOutVer\n};\n","import {\n    animate,\n    animation,\n    AnimationMetadata,\n    AnimationReferenceMetadata,\n    keyframes,\n    style\n} from '@angular/animations';\nimport { EaseInOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst baseRecipe: AnimationMetadata[] = [\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                transform: `rotate(0deg) translate{{direction}}(0)`,\n                transformOrigin: `{{xPos}} {{yPos}}`\n            }),\n            style({\n                offset: 0.1,\n                transform: `rotate({{endAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.2,\n                transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`\n            }),\n            style({\n                offset: 0.3,\n                transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.4,\n                transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`\n\n            }),\n            style({\n                offset: 0.5,\n                transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.6,\n                transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`\n\n            }),\n            style({\n                offset: 0.7,\n                transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.8,\n                transform: `rotate(-{{endAngle}}deg) translate{{direction}}({{endDistance}})`\n\n            }),\n            style({\n                offset: 0.9,\n                transform: `rotate({{endAngle}}deg) translate{{direction}}(-{{endDistance}})`\n\n            }),\n            style({\n                offset: 1,\n                transform: `rotate(0deg) translate{{direction}}(0)`,\n                transformOrigin: `{{xPos}} {{yPos}}`\n            })\n        ])\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    direction: 'X',\n    duration: '800ms',\n    easing: EaseInOut.quad,\n    endAngle: 0,\n    endDistance: '8px',\n    startAngle: 0,\n    startDistance: '10px',\n    xPos: 'center',\n    yPos: 'center'\n};\n\nconst shakeHor: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'X'\n    }\n});\n\nconst shakeVer: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y'\n    }\n});\n\nconst shakeTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        yPos: 'top'\n    }\n});\n\nconst shakeBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        yPos: 'bottom'\n    }\n});\n\nconst shakeRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'right',\n        yPos: 'center'\n    }\n});\n\nconst shakeLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'left',\n        yPos: 'center'\n    }\n});\n\nconst shakeCenter: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 8,\n        endDistance: '0',\n        startAngle: 10,\n        startDistance: '0',\n        xPos: 'center',\n        yPos: 'center'\n    }\n});\n\nconst shakeTr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'right',\n        yPos: 'top'\n    }\n});\n\nconst shakeBr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'right',\n        yPos: 'bottom'\n    }\n});\n\nconst shakeBl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'left',\n        yPos: 'bottom'\n    }\n});\n\nconst shakeTl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'left',\n        yPos: 'top'\n    }\n});\n\nexport {\n    shakeHor,\n    shakeVer,\n    shakeTop,\n    shakeBottom,\n    shakeRight,\n    shakeLeft,\n    shakeCenter,\n    shakeTr,\n    shakeBr,\n    shakeBl,\n    shakeTl\n};\n","import {\n    animate,\n    animation,\n    AnimationMetadata,\n    keyframes,\n    style\n} from '@angular/animations';\nimport { IAnimationParams } from '../interface';\n\nconst heartbeatBase: AnimationMetadata[] = [\n    style({\n        animationTimingFunction: `ease-out`,\n        transform: `scale(1)`,\n        transformOrigin: `center center`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                animationTimingFunction: `ease-in`,\n                offset: 0.1,\n                transform: `scale(0.91)`\n            }),\n            style({\n                animationTimingFunction: `ease-out`,\n                offset: 0.17,\n                transform: `scale(0.98)`\n            }),\n            style({\n                animationTimingFunction: `ease-in`,\n                offset: 0.33,\n                transform: `scale(0.87)`\n            }),\n            style({\n                animationTimingFunction: `ease-out`,\n                offset: 0.45,\n                transform: `scale(1)`\n            })\n        ])\n    )\n];\n\nconst heartbeatParams: IAnimationParams = {\n    delay: '0s',\n    duration: '1.5s',\n    easing: 'ease-in-out'\n};\n\nconst pulsateBase: AnimationMetadata[] = [\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                transform: `scale({{fromScale}})`\n            }),\n            style({\n                offset: 0.5,\n                transform: `scale({{toScale}})`\n            }),\n            style({\n                offset: 1,\n                transform: `scale({{fromScale}})`\n            })\n        ])\n    )\n];\n\nconst pulsateParams: IAnimationParams = {\n    delay: '0s',\n    duration: '.5s',\n    easing: 'ease-in-out',\n    fromScale: 1,\n    toScale: 1.1\n};\n\nconst blinkBase: AnimationMetadata[] = [\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                opacity: .8,\n                transform: `scale({{fromScale}})`\n            }),\n            style({\n                offset: 0.8,\n                opacity: 0,\n                transform: `scale({{midScale}})`\n            }),\n            style({\n                offset: 1,\n                opacity: 0,\n                transform: `scale({{toScale}})`\n            })\n        ])\n    )\n];\n\nconst blinkParams: IAnimationParams = {\n    delay: '0s',\n    duration: '.8s',\n    easing: 'ease-in-out',\n    fromScale: .2,\n    midScale: 1.2,\n    toScale: 2.2\n};\n\nconst pulsateFwd = animation(pulsateBase, {\n    params: {\n        ...pulsateParams\n    }\n});\n\nconst pulsateBck = animation(pulsateBase, {\n    params: {\n        ...pulsateParams,\n        toScale: .9\n    }\n});\n\nconst heartbeat = animation(heartbeatBase, {\n    params: {\n        ...heartbeatParams\n    }\n});\n\nconst blink = animation(blinkBase, {\n    params: {\n        ...blinkParams\n    }\n});\n\nexport {\n    heartbeat,\n    pulsateFwd,\n    pulsateBck,\n    blink\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `scale{{direction}}({{fromScale}})`,\n        transformOrigin: `{{xPos}} {{yPos}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`,\n            transform: `scale{{direction}}({{toScale}})`,\n            transformOrigin: `{{xPos}} {{yPos}}`\n        })\n    )\n];\n\nconst baseInParams: IAnimationParams = {\n    delay: '0s',\n    direction: '',\n    duration: '350ms',\n    easing: EaseOut.quad,\n    endOpacity: 1,\n    fromScale: .5,\n    startOpacity: 0,\n    toScale: 1,\n    xPos: '50%',\n    yPos: '50%'\n};\n\nconst baseOutParams: IAnimationParams = {\n    ...baseInParams,\n    easing: EaseOut.sine,\n    endOpacity: 0,\n    fromScale: 1,\n    startOpacity: 1,\n    toScale: .5\n};\n\nconst scaleInCenter: AnimationReferenceMetadata = animation(base, { params: baseInParams });\n\nconst scaleInBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInVerCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'Y',\n            fromScale: .4\n        }\n    }\n);\n\nconst scaleInTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '50%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '0',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleInVerTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'Y',\n            fromScale: .4,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInTr = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInVerBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'Y',\n            fromScale: .4,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '100%',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleInHorCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'X',\n            fromScale: .4\n        }\n    }\n);\n\nconst scaleInBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInHorLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'X',\n            fromScale: .4,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '50%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInHorRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'X',\n            fromScale: .4,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutCenter: AnimationReferenceMetadata = animation(base, { params: baseOutParams });\n\nconst scaleOutBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutVerCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'Y',\n            toScale: .3\n        }\n    }\n);\n\nconst scaleOutVerTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'Y',\n            toScale: .3,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutVerBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'Y',\n            toScale: .3,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '50%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '0',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleOutTr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '100%',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleOutBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '50%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutHorCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'X',\n            toScale: .3\n        }\n    }\n);\n\nconst scaleOutHorLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'X',\n            toScale: .3,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutHorRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'X',\n            toScale: .3,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nexport {\n    scaleInTop,\n    scaleInRight,\n    scaleInBottom,\n    scaleInLeft,\n    scaleInCenter,\n    scaleInTr,\n    scaleInBr,\n    scaleInBl,\n    scaleInTl,\n    scaleInVerTop,\n    scaleInVerBottom,\n    scaleInVerCenter,\n    scaleInHorCenter,\n    scaleInHorLeft,\n    scaleInHorRight,\n    scaleOutTop,\n    scaleOutRight,\n    scaleOutBottom,\n    scaleOutLeft,\n    scaleOutCenter,\n    scaleOutTr,\n    scaleOutBr,\n    scaleOutBl,\n    scaleOutTl,\n    scaleOutVerTop,\n    scaleOutVerBottom,\n    scaleOutVerCenter,\n    scaleOutHorCenter,\n    scaleOutHorLeft,\n    scaleOutHorRight\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `{{fromPosition}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`,\n            transform: `{{toPosition}}`\n        })\n    )\n];\n\nconst baseInParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseOut.quad,\n    endOpacity: 1,\n    fromPosition: 'translateY(-500px)',\n    startOpacity: 0,\n    toPosition: 'translateY(0)'\n};\n\nconst baseOutParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseIn.quad,\n    endOpacity: 0,\n    fromPosition: 'translateY(0)',\n    startOpacity: 1,\n    toPosition: 'translateY(-500px)'\n};\n\nconst slideInTop: AnimationReferenceMetadata = animation(base, { params: baseInParams });\n\nconst slideInLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseOut.quad,\n            endOpacity: 1,\n            fromPosition: 'translateX(-500px)',\n            startOpacity: 0,\n            toPosition: 'translateY(0)'\n        }\n    }\n);\n\nconst slideInRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseOut.quad,\n            endOpacity: 1,\n            fromPosition: 'translateX(500px)',\n            startOpacity: 0,\n            toPosition: 'translateY(0)'\n        }\n    }\n);\n\nconst slideInBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseOut.quad,\n            endOpacity: 1,\n            fromPosition: 'translateY(500px)',\n            startOpacity: 0,\n            toPosition: 'translateY(0)'\n        }\n    }\n);\n\nconst slideInTr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(-500px) translateX(500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideInTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(-500px) translateX(-500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideInBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(500px) translateX(500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideInBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(500px) translateX(-500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideOutTop: AnimationReferenceMetadata = animation(base, { params: baseOutParams });\n\nconst slideOutRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            toPosition: 'translateX(500px)'\n        }\n    }\n);\n\nconst slideOutBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseIn.quad,\n            endOpacity: 0,\n            fromPosition: 'translateY(0)',\n            startOpacity: 1,\n            toPosition: 'translateY(500px)'\n        }\n    }\n);\n\nconst slideOutLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            toPosition: 'translateX(-500px)'\n        }\n    }\n);\n\nconst slideOutTr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(-500px) translateX(500px)'\n        }\n    }\n);\n\nconst slideOutBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(500px) translateX(500px)'\n        }\n    }\n);\n\nconst slideOutBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(500px) translateX(-500px)'\n        }\n    }\n);\n\nconst slideOutTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(-500px) translateX(-500px)'\n        }\n    }\n);\n\nexport {\n    slideInTop,\n    slideInRight,\n    slideInBottom,\n    slideInLeft,\n    slideInTr,\n    slideInBr,\n    slideInBl,\n    slideInTl,\n    slideOutTop,\n    slideOutBottom,\n    slideOutRight,\n    slideOutLeft,\n    slideOutTr,\n    slideOutBr,\n    slideOutBl,\n    slideOutTl\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst swingBase: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `rotate{{direction}}({{startAngle}}deg)`,\n        transformOrigin: `{{xPos}} {{yPos}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`,\n            transform: `rotate{{direction}}({{endAngle}}deg)`,\n            transformOrigin: `{{xPos}} {{yPos}}`\n        })\n    )\n];\n\nconst swingParams: IAnimationParams = {\n    delay: '0s',\n    direction: 'X',\n    duration: '.5s',\n    easing: EaseOut.back,\n    endAngle: 0,\n    endOpacity: 1,\n    startAngle: -100,\n    startOpacity: 0,\n    xPos: 'top',\n    yPos: 'center'\n};\n\nconst swingOutParams: IAnimationParams = {\n    ...swingParams,\n    duration: '.55s',\n    easing: EaseIn.back,\n    endAngle: 70,\n    endOpacity: 0,\n    startAngle: 0,\n    startOpacity: 1\n};\n\nconst swingInTopFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams\n    }\n});\n\nconst swingInRightFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingInBottomFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        startAngle: 100,\n        xPos: 'bottom'\n    }\n});\n\nconst swingInLeftFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        startAngle: 100,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nconst swingInTopBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        duration: '.6s',\n        startAngle: 70\n    }\n});\n\nconst swingInRightBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        duration: '.6s',\n        startAngle: 70,\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingInBottomBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        duration: '.6s',\n        startAngle: -70,\n        xPos: 'bottom'\n    }\n});\n\nconst swingInLeftBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        duration: '.6s',\n        startAngle: -70,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nconst swingOutTopFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams\n    }\n});\n\nconst swingOutRightFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingOutBottomFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        endAngle: -70,\n        xPos: 'bottom'\n    }\n});\n\nconst swingOutLefttFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        endAngle: -70,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nconst swingOutTopBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        duration: '.45s',\n        endAngle: -100\n    }\n});\n\nconst swingOutRightBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        duration: '.45s',\n        endAngle: -100,\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingOutBottomBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        duration: '.45s',\n        endAngle: 100,\n        xPos: 'bottom'\n    }\n});\n\nconst swingOutLeftBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        duration: '.45s',\n        endAngle: 100,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nexport {\n    swingInTopFwd,\n    swingInRightFwd,\n    swingInLeftFwd,\n    swingInBottomFwd,\n    swingInTopBck,\n    swingInRightBck,\n    swingInBottomBck,\n    swingInLeftBck,\n    swingOutTopFwd,\n    swingOutRightFwd,\n    swingOutBottomFwd,\n    swingOutLefttFwd,\n    swingOutTopBck,\n    swingOutRightBck,\n    swingOutBottomBck,\n    swingOutLeftBck\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseOut, EaseIn } from '../easings';\nimport { IAnimationParams } from '../interface';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{ startOpacity }}`,\n        height: `{{ startHeight }}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{ endOpacity }}`,\n            height: `{{ endHeight }}`\n        })\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseIn.quad,\n    startOpacity: 0,\n    endOpacity: 1,\n    startHeight: '',\n    endHeight: ''\n};\n\nconst growVerIn: AnimationReferenceMetadata = animation(base, {\n    params: {\n        ...baseParams,\n        easing: EaseOut.quad,\n        startOpacity: 0,\n        endOpacity: 1,\n        startHeight: '0px',\n        endHeight: '*'\n    }\n});\n\nconst growVerOut: AnimationReferenceMetadata = animation(base, {\n    params: {\n        ...baseParams,\n        easing: EaseOut.quad,\n        startOpacity: 1,\n        endOpacity: 0,\n        startHeight: '*',\n        endHeight: '0px'\n    }\n});\n\nexport { growVerIn, growVerOut };\n","import { IToggleView } from './IToggleView';\n\n/**\n * Common service to be injected between components where those implementing common\n * ToggleView interface can register and toggle directives can call their methods.\n * TODO: Track currently active? Events?\n */\nexport class IgxNavigationService {\n    private navs: { [id: string]: IToggleView; };\n\n    constructor() {\n        this.navs = {};\n    }\n\n    public add(id: string, navItem: IToggleView) {\n        this.navs[id] = navItem;\n    }\n\n    public remove(id: string) {\n        delete this.navs[id];\n    }\n\n    public get(id: string): IToggleView {\n        if (id) {\n            return this.navs[id];\n        }\n    }\n\n    public toggle(id: string, ...args) {\n        if (this.navs[id]) {\n            return this.navs[id].toggle(...args);\n        }\n    }\n    public open(id: string, ...args) {\n        if (this.navs[id]) {\n            return this.navs[id].open(...args);\n        }\n    }\n    public close(id: string, ...args) {\n        if (this.navs[id]) {\n            return this.navs[id].close(...args);\n        }\n    }\n}\n","import { Directive, HostListener, Input, NgModule } from '@angular/core';\nimport {IgxNavigationService} from './nav.service';\n\n/**\n * Directive that can toggle targets through provided NavigationService.\n *\n * Usage:\n * ```\n * <button igxNavToggle=\"ID\"> Toggle </button>\n * ```\n * Where the `ID` matches the ID of compatible `IToggleView` component.\n */\n@Directive({ selector: '[igxNavToggle]' })\nexport class IgxNavigationToggleDirective {\n    public state: IgxNavigationService;\n\n    @Input('igxNavToggle') private target;\n\n    constructor(nav: IgxNavigationService) {\n        this.state = nav;\n    }\n\n    @HostListener('click')\n    public toggleNavigationDrawer() {\n        this.state.toggle(this.target, true);\n    }\n}\n\n/**\n * Directive that can close targets through provided NavigationService.\n *\n * Usage:\n * ```\n * <button igxNavClose=\"ID\"> Close </button>\n * ```\n * Where the `ID` matches the ID of compatible `IToggleView` component.\n */\n@Directive({ selector: '[igxNavClose]' })\nexport class IgxNavigationCloseDirective {\n    public state: IgxNavigationService;\n\n    @Input('igxNavClose') private target;\n\n    constructor(nav: IgxNavigationService) {\n        this.state = nav;\n    }\n\n    @HostListener('click')\n    public closeNavigationDrawer() {\n        this.state.close(this.target, true);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxNavigationCloseDirective, IgxNavigationToggleDirective],\n    exports: [IgxNavigationCloseDirective, IgxNavigationToggleDirective],\n    providers: [IgxNavigationService]\n})\nexport class IgxNavigationModule {}\n","import { Injectable, PLATFORM_ID, Inject } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n/**\n *@hidden\n */\nexport function cloneArray(array: any[], deep?: boolean) {\n    const arr = [];\n    if (!array) {\n        return arr;\n    }\n    let i = array.length;\n    while (i--) {\n        arr[i] = deep ? cloneValue(array[i]) : array[i];\n    }\n    return arr;\n}\n\n/**\n * Doesn't clone leaf items\n * @hidden\n */\nexport function cloneHierarchicalArray(array: any[], childDataKey: any): any[] {\n    const result: any[] = [];\n    if (!array) {\n        return result;\n    }\n\n    for (const item of array) {\n        const clonedItem = cloneValue(item);\n        if (Array.isArray(item[childDataKey])) {\n            clonedItem[childDataKey] = cloneHierarchicalArray(clonedItem[childDataKey], childDataKey);\n        }\n        result.push(clonedItem);\n    }\n    return result;\n}\n\n/**\n * Deep clones all first level keys of Obj2 and merges them to Obj1\n * @param obj1 Object to merge into\n * @param obj2 Object to merge from\n * @returns Obj1 with merged cloned keys from Obj2\n * @hidden\n */\nexport function mergeObjects(obj1: {}, obj2: {}): any {\n    if (!isObject(obj1)) {\n        throw new Error(`Cannot merge into ${obj1}. First param must be an object.`);\n    }\n\n    if (!isObject(obj2)) {\n        return obj1;\n    }\n\n    for (const key of Object.keys(obj2)) {\n        obj1[key] = cloneValue(obj2[key]);\n    }\n\n    return obj1;\n}\n\n/**\n * Creates deep clone of provided value.\n * Supports primitive values, dates and objects.\n * If passed value is array returns shallow copy of the array.\n * @param value value to clone\n * @returns Deep copy of provided value\n *@hidden\n */\nexport function cloneValue(value: any): any {\n    if (isDate(value)) {\n        return new Date(value.getTime());\n    }\n    if (Array.isArray(value)) {\n        return [...value];\n    }\n\n    if (value instanceof Map || value instanceof Set) {\n        return value;\n    }\n\n    if (isObject(value)) {\n        const result = {};\n\n        for (const key of Object.keys(value)) {\n            result[key] = cloneValue(value[key]);\n        }\n        return result;\n    }\n    return value;\n}\n\n/**\n * Checks if provided variable is Object\n * @param value Value to check\n * @returns true if provided variable is Object\n *@hidden\n */\nexport function isObject(value: any): boolean {\n    return value && value.toString() === '[object Object]';\n}\n\n/**\n * Checks if provided variable is Date\n * @param value Value to check\n * @returns true if provided variable is Date\n *@hidden\n */\nexport function isDate(value: any) {\n    return Object.prototype.toString.call(value) === '[object Date]';\n}\n\n/**\n * Checks if the two passed arguments are equal\n * Currently supports date objects\n * @param obj1\n * @param obj2\n * @returns: `boolean`\n * @hidden\n */\nexport function isEqual(obj1, obj2): boolean {\n    if (isDate(obj1) && isDate(obj2)) {\n        return obj1.getTime() === obj2.getTime();\n    }\n    return obj1 === obj2;\n}\n\n/**\n *@hidden\n */\nexport const enum KEYCODES {\n    ENTER = 13,\n    SPACE = 32,\n    ESCAPE = 27,\n    LEFT_ARROW = 37,\n    UP_ARROW = 38,\n    RIGHT_ARROW = 39,\n    DOWN_ARROW = 40,\n    F2 = 113,\n    TAB = 9\n}\n\n/**\n *@hidden\n */\nexport const enum KEYS {\n    ENTER = 'Enter',\n    SPACE = ' ',\n    SPACE_IE = 'Spacebar',\n    ESCAPE = 'Escape',\n    ESCAPE_IE = 'Esc',\n    LEFT_ARROW = 'ArrowLeft',\n    LEFT_ARROW_IE = 'Left',\n    UP_ARROW = 'ArrowUp',\n    UP_ARROW_IE = 'Up',\n    RIGHT_ARROW = 'ArrowRight',\n    RIGHT_ARROW_IE = 'Right',\n    DOWN_ARROW = 'ArrowDown',\n    DOWN_ARROW_IE = 'Down',\n    F2 = 'F2',\n    TAB = 'Tab'\n}\n\n/**\n *@hidden\n* Returns the actual size of the node content, using Range\n* ```typescript\n* let range = document.createRange();\n* let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n*\n* let size = getNodeSizeViaRange(range, column.cells[0].nativeElement);\n* ```\n */\nexport function getNodeSizeViaRange(range: Range, node: any): number {\n    let overflow = null;\n    if (!isFirefox()) {\n        overflow = node.style.overflow;\n        // we need that hack - otherwise content won't be measured correctly in IE/Edge\n        node.style.overflow = 'visible';\n    }\n\n    range.selectNodeContents(node);\n    const width = range.getBoundingClientRect().width;\n\n    if (!isFirefox()) {\n        // we need that hack - otherwise content won't be measured correctly in IE/Edge\n        node.style.overflow = overflow;\n    }\n\n    return width;\n}\n/**\n *@hidden\n* Returns the actual size of the node content, using Canvas\n* ```typescript\n* let ctx = document.createElement('canvas').getContext('2d');\n* let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n*\n* let size = valToPxlsUsingCanvas(ctx, column.cells[0].nativeElement);\n* ```\n */\nexport function getNodeSizeViaCanvas(canvas2dCtx: any, node: any): number {\n    const s = this.grid.document.defaultView.getComputedStyle(node);\n\n    // need to set the font to get correct width\n    canvas2dCtx.font = s.fontSize + ' ' + s.fontFamily;\n\n    return canvas2dCtx.measureText(node.textContent).width;\n}\n/**\n *@hidden\n */\nexport function isIE(): boolean {\n    return navigator.appVersion.indexOf('Trident/') > 0;\n}\n/**\n *@hidden\n */\nexport function isEdge(): boolean {\n    const edgeBrowser = /Edge[\\/\\s](\\d+\\.\\d+)/.test(navigator.userAgent);\n    return edgeBrowser;\n}\n\n/**\n *@hidden\n */\nexport function isFirefox(): boolean {\n    const firefoxBrowser = /Firefox[\\/\\s](\\d+\\.\\d+)/.test(navigator.userAgent);\n    return firefoxBrowser;\n}\n\n/**\n * @hidden\n */\n@Injectable({ providedIn: 'root' })\nexport class PlatformUtil {\n    public isBrowser: boolean = isPlatformBrowser(this.platformId);\n\n    public isIOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !('MSStream' in window);\n\n    constructor(@Inject(PLATFORM_ID) private platformId: Object) {\n    }\n}\n\n/**\n * @hidden\n */\nexport function isLeftClick(event: PointerEvent) {\n    return event.button === 0;\n}\n\n/** @hidden */\nexport function isNavigationKey(key: string): boolean {\n    return [\n        'down',\n        'up',\n        'left',\n        'right',\n        'arrowdown',\n        'arrowup',\n        'arrowleft',\n        'arrowright',\n        'home',\n        'end',\n        'space',\n        'spacebar',\n        ' '\n    ].indexOf(key) !== -1;\n}\n\n/**\n *@hidden\n */\nexport function flatten(arr: any[]) {\n    let result = [];\n\n    arr.forEach(el => {\n        result.push(el);\n        if (el.children) {\n            const children = Array.isArray(el.children) ? el.children : el.children.toArray();\n            result = result.concat(flatten(children));\n        }\n    });\n    return result;\n}\n\nexport interface CancelableEventArgs {\n    /**\n     * Provides the ability to cancel the event.\n     */\n    cancel: boolean;\n}\n\nexport interface IBaseEventArgs {\n    /**\n     * Provides reference to the owner component.\n     */\n    owner?: any;\n}\n\nexport interface CancelableBrowserEventArgs extends CancelableEventArgs {\n    /** Browser event */\n    event?: Event;\n}\n\nexport const NAVIGATION_KEYS = new Set([\n    'down',\n    'up',\n    'left',\n    'right',\n    'arrowdown',\n    'arrowup',\n    'arrowleft',\n    'arrowright',\n    'home',\n    'end',\n    'space',\n    'spacebar',\n    ' '\n]);\nexport const ROW_EXPAND_KEYS = new Set('right down arrowright arrowdown'.split(' '));\nexport const ROW_COLLAPSE_KEYS = new Set('left up arrowleft arrowup'.split(' '));\nexport const SUPPORTED_KEYS = new Set([...Array.from(NAVIGATION_KEYS), 'tab', 'enter', 'f2', 'escape', 'esc']);\n","import { ISortingStrategy } from './sorting-strategy';\nimport { IBaseEventArgs } from '../core/utils';\n\n/**\n * Represents sorting expressions.\n */\nexport enum SortingDirection {\n    None = 0,\n    Asc = 1,\n    Desc = 2\n}\n\nexport interface ISortingExpression extends IBaseEventArgs {\n   fieldName: string;\n   dir: SortingDirection;\n   ignoreCase?: boolean;\n   strategy?: ISortingStrategy;\n}\n","import { IGroupByKey } from './groupby-expand-state.interface';\nimport { IGroupByRecord } from './groupby-record.interface';\n\nexport function isHierarchyMatch(h1: Array<IGroupByKey>, h2: Array<IGroupByKey>): boolean {\n    if (h1.length !== h2.length) {\n        return false;\n    }\n    return h1.every((level, index): boolean => {\n        return level.fieldName === h2[index].fieldName && level.value === h2[index].value;\n    });\n}\n\nexport function getHierarchy(gRow: IGroupByRecord): Array<IGroupByKey> {\n    const hierarchy: Array<IGroupByKey> = [];\n    if (gRow !== undefined && gRow.expression) {\n        hierarchy.push({ fieldName: gRow.expression.fieldName, value: gRow.value });\n        while (gRow.groupParent) {\n            gRow = gRow.groupParent;\n            hierarchy.unshift({ fieldName: gRow.expression.fieldName, value: gRow.value });\n        }\n    }\n    return hierarchy;\n}\n","import { cloneArray } from '../core/utils';\nimport { IGroupByRecord } from './groupby-record.interface';\nimport { ISortingExpression, SortingDirection } from './sorting-expression.interface';\nimport { IGroupingExpression } from './grouping-expression.interface';\nimport { IGroupingState } from './groupby-state.interface';\nimport { IGroupByExpandState } from './groupby-expand-state.interface';\nimport { IGroupByResult } from './grouping-result.interface';\nimport { getHierarchy, isHierarchyMatch } from './operations';\n\nexport interface ISortingStrategy {\n    sort: (data: any[],\n           fieldName: string,\n           dir: SortingDirection,\n           ignoreCase: boolean,\n           valueResolver: (obj: any, key: string) => any) => any[];\n}\n\nexport class DefaultSortingStrategy implements ISortingStrategy {\n    private static _instance: DefaultSortingStrategy = null;\n\n    protected constructor() {}\n\n    public static instance(): DefaultSortingStrategy {\n        return this._instance || (this._instance = new this());\n    }\n\n    public sort(data: any[],\n                fieldName: string,\n                dir: SortingDirection,\n                ignoreCase: boolean,\n                valueResolver: (obj: any, key: string) => any) {\n        const key = fieldName;\n        const reverse = (dir === SortingDirection.Desc ? -1 : 1);\n        const cmpFunc = (obj1, obj2) => {\n            return this.compareObjects(obj1, obj2, key, reverse, ignoreCase, valueResolver);\n        };\n        return this.arraySort(data, cmpFunc);\n    }\n\n    public compareValues(a: any, b: any) {\n        const an = (a === null || a === undefined);\n        const bn = (b === null || b === undefined);\n        if (an) {\n            if (bn) {\n                return 0;\n            }\n            return -1;\n        } else if (bn) {\n            return 1;\n        }\n        return a > b ? 1 : a < b ? -1 : 0;\n    }\n\n    protected compareObjects(obj1: object,\n                             obj2: object,\n                             key: string,\n                             reverse: number,\n                             ignoreCase: boolean,\n                             valueResolver: (obj: any, key: string) => any) {\n        let a = valueResolver(obj1, key);\n        let b = valueResolver(obj2, key);\n        if (ignoreCase) {\n            a = a && a.toLowerCase ? a.toLowerCase() : a;\n            b = b && b.toLowerCase ? b.toLowerCase() : b;\n        }\n        return reverse * this.compareValues(a, b);\n    }\n\n    protected arraySort(data: any[], compareFn?): any[] {\n        return data.sort(compareFn);\n    }\n}\n\nexport class IgxSorting {\n    public sort(data: any[], expressions: ISortingExpression[]): any[] {\n        return this.sortDataRecursive(data, expressions);\n    }\n\n    private groupedRecordsByExpression(data: any[],\n            index: number,\n            expression: IGroupingExpression): any[] {\n        let i;\n        let groupval;\n        const res = [];\n        const key = expression.fieldName;\n        const len = data.length;\n        res.push(data[index]);\n        groupval = this.getFieldValue(data[index], key);\n        index++;\n        const comparer = expression.groupingComparer || DefaultSortingStrategy.instance().compareValues;\n        for (i = index; i < len; i++) {\n            if (comparer(this.getFieldValue(data[i], key), groupval) === 0) {\n                res.push(data[i]);\n            } else {\n                break;\n            }\n        }\n        return res;\n    }\n    private sortDataRecursive<T>(data: T[],\n                                 expressions: ISortingExpression[],\n                                 expressionIndex: number = 0): T[] {\n        let i;\n        let j;\n        let expr: ISortingExpression;\n        let gbData;\n        let gbDataLen;\n        const exprsLen = expressions.length;\n        const dataLen = data.length;\n        expressionIndex = expressionIndex || 0;\n        if (expressionIndex >= exprsLen || dataLen <= 1) {\n            return data;\n        }\n        expr = expressions[expressionIndex];\n        if (!expr.strategy) {\n            expr.strategy = DefaultSortingStrategy.instance();\n        }\n        data = expr.strategy.sort(data, expr.fieldName, expr.dir, expr.ignoreCase, this.getFieldValue);\n        if (expressionIndex === exprsLen - 1) {\n            return data;\n        }\n        // in case of multiple sorting\n        for (i = 0; i < dataLen; i++) {\n            gbData = this.groupedRecordsByExpression(data, i, expr);\n            gbDataLen = gbData.length;\n            if (gbDataLen > 1) {\n                gbData = this.sortDataRecursive(gbData, expressions, expressionIndex + 1);\n            }\n            for (j = 0; j < gbDataLen; j++) {\n                data[i + j] = gbData[j];\n            }\n            i += gbDataLen - 1;\n        }\n        return data;\n    }\n    protected groupDataRecursive<T>(data: T[], state: IGroupingState, level: number,\n        parent: IGroupByRecord, metadata: IGroupByRecord[], grid: any = null,\n        groupsRecords: any[] = [], fullResult: IGroupByResult = { data: [], metadata: [] }): T[] {\n        const expressions = state.expressions;\n        const expansion = state.expansion;\n        let i = 0;\n        let result = [];\n        while (i < data.length) {\n            const group = this.groupedRecordsByExpression(data, i, expressions[level]);\n            const groupRow: IGroupByRecord = {\n                expression: expressions[level],\n                level,\n                records: cloneArray(group),\n                value: group[0][expressions[level].fieldName],\n                groupParent: parent,\n                groups: [],\n                height: grid ? grid.renderedRowHeight : null\n            };\n            if (parent) {\n                parent.groups.push(groupRow);\n            } else {\n                groupsRecords.push(groupRow);\n            }\n            const hierarchy = getHierarchy(groupRow);\n            const expandState: IGroupByExpandState = expansion.find((s) =>\n                isHierarchyMatch(s.hierarchy || [{ fieldName: groupRow.expression.fieldName, value: groupRow.value }], hierarchy));\n            const expanded = expandState ? expandState.expanded : state.defaultExpanded;\n            let recursiveResult;\n            result.push(groupRow);\n            metadata.push(null);\n            fullResult.data.push(groupRow);\n            fullResult.metadata.push(null);\n            if (level < expressions.length - 1) {\n                recursiveResult = this.groupDataRecursive(group, state, level + 1, groupRow,\n                    expanded ? metadata : [], grid, groupsRecords, fullResult);\n                if (expanded) {\n                    result = result.concat(recursiveResult);\n                }\n            } else {\n                for (const groupItem of group) {\n                    fullResult.metadata.push(groupRow);\n                    fullResult.data.push(groupItem);\n                }\n                if (expanded) {\n                    metadata.push(...fullResult.metadata.slice(fullResult.metadata.length - group.length));\n                    result.push(...fullResult.data.slice(fullResult.data.length - group.length));\n                }\n            }\n            i += group.length;\n        }\n        return result;\n    }\n    protected getFieldValue(obj: any, key: string): any {\n        return obj[key];\n    }\n}\n\nexport class IgxDataRecordSorting extends IgxSorting {\n    protected getFieldValue(obj: any, key: string): any {\n        return obj.data[key];\n    }\n}\n","import { IGroupByRecord } from './groupby-record.interface';\nimport { IgxSorting } from './sorting-strategy';\nimport { IGroupingState } from './groupby-state.interface';\nimport { IGroupByResult } from './grouping-result.interface';\n\nexport class IgxGrouping extends IgxSorting {\n    public groupBy(data: any[], state: IGroupingState, grid?: any,\n        groupsRecords?: any[], fullResult: IGroupByResult = { data: [], metadata: [] }): IGroupByResult {\n        const metadata: IGroupByRecord[] = [];\n        const grouping = this.groupDataRecursive(data, state, 0, null, metadata, grid, groupsRecords, fullResult);\n        return {\n            data: grouping,\n            metadata: metadata\n        };\n    }\n}\n\n","export enum PagingError {\n    None,\n    IncorrectPageIndex,\n    IncorrectRecordsPerPage\n}\n\nexport declare interface IPagingState {\n    index: number;\n    recordsPerPage: number;\n    metadata?: {\n        countPages: number;\n        error: PagingError;\n        countRecords: number;\n    };\n}\n","import { IFilteringOperation } from './filtering-condition';\n\nexport enum FilteringLogic {\n    And,\n    Or\n}\n\n/**\n * Represents filtering expressions.\n */\nexport declare interface IFilteringExpression {\n    fieldName: string;\n    condition: IFilteringOperation;\n    searchVal?: any;\n    ignoreCase?: boolean;\n}\n","import { IFilteringExpression, FilteringLogic } from './filtering-expression.interface';\nimport { IBaseEventArgs } from '../core/utils';\n\nexport enum FilteringExpressionsTreeType {\n    Regular,\n    Advanced\n}\n\nexport declare interface IFilteringExpressionsTree extends IBaseEventArgs {\n    filteringOperands: (IFilteringExpressionsTree | IFilteringExpression)[];\n    operator: FilteringLogic;\n    fieldName?: string;\n    type?: FilteringExpressionsTreeType;\n\n    find(fieldName: string): IFilteringExpressionsTree | IFilteringExpression;\n    findIndex(fieldName: string): number;\n}\n\nexport class FilteringExpressionsTree implements IFilteringExpressionsTree {\n\n    /**\n     * Sets/gets the filtering operands.\n     * ```typescript\n     * const gridExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And);\n     * const expression = [\n     * {\n     *   condition: IgxStringFilteringOperand.instance().condition('contains'),\n     *   fieldName: 'Column Field',\n     *   searchVal: 'Value',\n     *   ignoreCase: false\n     * }];\n     * gridExpressionsTree.filteringOperands.push(expression);\n     * this.grid.filteringExpressionsTree = gridExpressionsTree;\n     * ```\n     * ```typescript\n     * let filteringOperands = gridExpressionsTree.filteringOperands;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    filteringOperands: (IFilteringExpressionsTree | IFilteringExpression)[] = [];\n\n    /**\n     * Sets/gets the operator.\n     * ```typescript\n     * gridExpressionsTree.operator = FilteringLogic.And;\n     * ```\n     * ```typescript\n     * let operator = gridExpressionsTree.operator;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    operator: FilteringLogic;\n\n    /**\n     * Sets/gets the field name of the column where the filtering expression is placed.\n     * ```typescript\n     *  gridExpressionTree.fieldName = 'Column Field';\n     * ```\n     * ```typescript\n     * let columnField = expressionTree.fieldName;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    fieldName?: string;\n\n    /**\n     * Sets/gets the type of the filtering expressions tree.\n     * ```typescript\n     *  gridExpressionTree.type = FilteringExpressionsTree.Advanced;\n     * ```\n     * ```typescript\n     * let type = expressionTree.type;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    type?: FilteringExpressionsTreeType;\n\n    constructor(operator: FilteringLogic, fieldName?: string) {\n        this.operator = operator;\n        this.fieldName = fieldName;\n    }\n\n\n    /**\n     * Checks if filtering expressions tree is empty.\n     * @param expressionTree filtering expressions tree.\n     */\n    public static empty(expressionTree: IFilteringExpressionsTree): boolean {\n        return !expressionTree || !expressionTree.filteringOperands || !expressionTree.filteringOperands.length;\n    }\n\n    /**\n     * Returns the filtering expression for a column with the provided fieldName.\n     * ```typescript\n     * let filteringExpression = gridExpressionTree.find('Column Field');\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    public find(fieldName: string): IFilteringExpressionsTree | IFilteringExpression {\n        const index = this.findIndex(fieldName);\n\n        if (index > -1) {\n            return this.filteringOperands[index];\n        }\n\n        return null;\n    }\n\n    /**\n     * Returns the index of the filtering expression for a column with the provided fieldName.\n     * ```typescript\n     * let filteringExpressionIndex = gridExpressionTree.findIndex('Column Field');\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    public findIndex(fieldName: string): number {\n        let expr;\n        for (let i = 0; i < this.filteringOperands.length; i++) {\n            expr = this.filteringOperands[i];\n            if (expr instanceof FilteringExpressionsTree) {\n                if (this.isFilteringExpressionsTreeForColumn(expr, fieldName)) {\n                    return i;\n                }\n            } else {\n                if ((expr as IFilteringExpression).fieldName === fieldName) {\n                    return i;\n                }\n            }\n        }\n\n        return -1;\n    }\n\n    protected isFilteringExpressionsTreeForColumn(expressionsTree: IFilteringExpressionsTree, fieldName: string): boolean {\n        if (expressionsTree.fieldName === fieldName) {\n            return true;\n        }\n\n        let expr;\n        for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n            expr = expressionsTree.filteringOperands[i];\n            if ((expr instanceof FilteringExpressionsTree)) {\n                return this.isFilteringExpressionsTreeForColumn(expr, fieldName);\n            } else {\n                return (expr as IFilteringExpression).fieldName === fieldName;\n            }\n        }\n\n        return false;\n    }\n}\n","import { FilteringLogic, IFilteringExpression } from './filtering-expression.interface';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from './filtering-expressions-tree';\n\nexport interface IFilteringStrategy {\n    filter(data: any[], expressionsTree: IFilteringExpressionsTree, advancedExpressionsTree?: IFilteringExpressionsTree): any[];\n}\n\nexport abstract class BaseFilteringStrategy implements IFilteringStrategy  {\n    public abstract filter(data: any[], expressionsTree: IFilteringExpressionsTree,\n        advancedExpressionsTree?: IFilteringExpressionsTree): any[];\n\n    protected abstract getFieldValue(rec: object, fieldName: string): any;\n\n    public findMatchByExpression(rec: object, expr: IFilteringExpression): boolean {\n        const cond = expr.condition;\n        const val = this.getFieldValue(rec, expr.fieldName);\n        return cond.logic(val, expr.searchVal, expr.ignoreCase);\n    }\n\n    public matchRecord(rec: object, expressions: IFilteringExpressionsTree | IFilteringExpression): boolean {\n        if (expressions) {\n            if (expressions instanceof FilteringExpressionsTree) {\n                const expressionsTree = expressions as IFilteringExpressionsTree;\n                const operator = expressionsTree.operator as FilteringLogic;\n                let matchOperand, operand;\n\n                if (expressionsTree.filteringOperands && expressionsTree.filteringOperands.length) {\n                    for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n                        operand = expressionsTree.filteringOperands[i];\n                        matchOperand = this.matchRecord(rec, operand);\n\n                        // Return false if at least one operand does not match and the filtering logic is And\n                        if (!matchOperand && operator === FilteringLogic.And) {\n                            return false;\n                        }\n\n                        // Return true if at least one operand matches and the filtering logic is Or\n                        if (matchOperand && operator === FilteringLogic.Or) {\n                            return true;\n                        }\n                    }\n\n                    return matchOperand;\n                }\n\n                return true;\n            } else {\n                const expression = expressions as IFilteringExpression;\n                return this.findMatchByExpression(rec, expression);\n            }\n        }\n\n        return true;\n    }\n}\n\nexport class FilteringStrategy extends BaseFilteringStrategy {\n    private static _instace: FilteringStrategy = null;\n\n    public constructor() { super(); }\n\n    public static instance() {\n        return this._instace || (this._instace = new this());\n    }\n\n    public filter<T>(data: T[], expressionsTree: IFilteringExpressionsTree, advancedExpressionsTree?: IFilteringExpressionsTree): T[] {\n        let i;\n        let rec;\n        const len = data.length;\n        const res: T[] = [];\n        if ((FilteringExpressionsTree.empty(expressionsTree) && FilteringExpressionsTree.empty(advancedExpressionsTree)) || !len) {\n            return data;\n        }\n        for (i = 0; i < len; i++) {\n            rec = data[i];\n            if (this.matchRecord(rec, expressionsTree) && this.matchRecord(rec, advancedExpressionsTree)) {\n                res.push(rec);\n            }\n        }\n        return res;\n    }\n\n    protected getFieldValue(rec: object, fieldName: string): any {\n        return rec[fieldName];\n    }\n}\n","import { EventEmitter } from '@angular/core';\n\nexport enum TransactionType {\n    ADD = 'add',\n    DELETE = 'delete',\n    UPDATE = 'update'\n}\n\nexport interface Transaction {\n    id: any;\n    type: TransactionType;\n    newValue: any;\n}\n\n/**\n * @experimental\n * @hidden\n */\nexport interface HierarchicalTransaction extends Transaction {\n    path: any[];\n}\n\nexport interface State {\n    value: any;\n    recordRef: any;\n    type: TransactionType;\n}\n\n/**\n * @experimental\n * @hidden\n */\nexport interface HierarchicalState extends State {\n    path: any[];\n}\n\nexport interface TransactionService<T extends Transaction, S extends State> {\n    /**\n     * Returns whether transaction is enabled for this service\n     */\n    readonly enabled: boolean;\n\n    /**\n     * Event fired when transaction state has changed - add transaction, commit all transactions, undo and redo\n     */\n    onStateUpdate?: EventEmitter<void>;\n\n    /**\n     * @returns if there are any transactions in the Undo stack\n     */\n    canUndo: boolean;\n\n    /**\n     * @returns if there are any transactions in the Redo stack\n     */\n    canRedo: boolean;\n\n    /**\n     * Adds provided  transaction with recordRef if any\n     * @param transaction Transaction to be added\n     * @param recordRef Reference to the value of the record in the data source related to the changed item\n     */\n    add(transaction: T, recordRef?: any): void;\n\n    /**\n     * Returns all recorded transactions in chronological order\n     * @param id Optional record id to get transactions for\n     * @returns All transaction in the service or for the specified record\n     */\n    getTransactionLog(id?: any): T[];\n\n    /**\n     * Remove the last transaction if any\n     */\n    undo(): void;\n\n    /**\n     * Applies the last undone transaction if any\n     */\n    redo(): void;\n\n    /**\n     * Returns aggregated changes from all transactions\n     * @param mergeChanges If set to true will merge each state's value over relate recordRef\n     * and will record resulting value in the related transaction\n     * @returns Collection of aggregated transactions for each changed record\n     */\n    getAggregatedChanges(mergeChanges: boolean): T[];\n\n    /**\n     * Returns the state of the record with provided id\n     * @param id The id of the record\n     * @param pending Should get pending state\n     * @returns State of the record if any\n     */\n    getState(id: any, pending?: boolean): S;\n\n    /**\n     * Returns value of the required id including all uncommitted changes\n     * @param id The id of the record to return value for\n     * @param mergeChanges If set to true will merge state's value over relate recordRef\n     * and will return merged value\n     * @returns Value with changes or **null**\n     */\n    getAggregatedValue(id: any, mergeChanges: boolean): any;\n\n    /**\n     * Applies all transactions over the provided data\n     * @param data Data source to update\n     * @param id Optional record id to commit transactions for\n     */\n    commit(data: any[], id?: any): void;\n\n    /**\n     * Clears all transactions\n     * @param id Optional record id to clear transactions for\n     */\n    clear(id?: any): void;\n\n    /**\n     * Starts pending transactions. All transactions passed after call to startPending\n     * will not be added to transaction log\n     */\n    startPending(): void;\n\n    /**\n     * Clears all pending transactions and aggregated pending state. If commit is set to true\n     * commits pending states as single transaction\n     * @param commit Should commit the pending states\n     */\n    endPending(commit: boolean): void;\n}\n","import { IFilteringState } from './filtering-state.interface';\n\nimport { IgxSorting, IgxDataRecordSorting } from './sorting-strategy';\nimport { IgxGrouping } from './grouping-strategy';\nimport { IGroupByResult } from './grouping-result.interface';\n\nimport { IPagingState, PagingError } from './paging-state.interface';\n\nimport { IGroupByKey } from './groupby-expand-state.interface';\nimport { IGroupByRecord } from './groupby-record.interface';\nimport { IGroupingState } from './groupby-state.interface';\nimport { ISortingExpression } from './sorting-expression.interface';\nimport { FilteringStrategy } from './filtering-strategy';\nimport { ITreeGridRecord } from '../grids/tree-grid';\nimport { cloneValue, mergeObjects } from '../core/utils';\nimport { Transaction, TransactionType, HierarchicalTransaction } from '../services/transaction/transaction';\nimport { getHierarchy, isHierarchyMatch } from './operations';\n\n/**\n * @hidden\n */\nexport enum DataType {\n    String = 'string',\n    Number = 'number',\n    Boolean = 'boolean',\n    Date = 'date'\n}\n\n/**\n * @hidden\n */\nexport class DataUtil {\n    public static sort<T>(data: T[], expressions: ISortingExpression[], sorting: IgxSorting = new IgxSorting()): T[] {\n        return sorting.sort(data, expressions);\n    }\n\n    public static treeGridSort(hierarchicalData: ITreeGridRecord[],\n        expressions: ISortingExpression[],\n        parent?: ITreeGridRecord): ITreeGridRecord[] {\n        let res: ITreeGridRecord[] = [];\n        hierarchicalData.forEach((hr: ITreeGridRecord) => {\n            const rec: ITreeGridRecord = DataUtil.cloneTreeGridRecord(hr);\n            rec.parent = parent;\n            if (rec.children) {\n                rec.children = DataUtil.treeGridSort(rec.children, expressions, rec);\n            }\n            res.push(rec);\n        });\n\n        res = DataUtil.sort(res, expressions, new IgxDataRecordSorting());\n\n        return res;\n    }\n\n    public static cloneTreeGridRecord(hierarchicalRecord: ITreeGridRecord) {\n        const rec: ITreeGridRecord = {\n            rowID: hierarchicalRecord.rowID,\n            data: hierarchicalRecord.data,\n            children: hierarchicalRecord.children,\n            isFilteredOutParent: hierarchicalRecord.isFilteredOutParent,\n            level: hierarchicalRecord.level,\n            expanded: hierarchicalRecord.expanded\n        };\n        return rec;\n    }\n\n    public static group<T>(data: T[], state: IGroupingState, grid: any = null,\n        groupsRecords: any[] = [], fullResult: IGroupByResult = { data: [], metadata: [] }): IGroupByResult {\n        const grouping = new IgxGrouping();\n        groupsRecords.splice(0, groupsRecords.length);\n        return grouping.groupBy(data, state, grid, groupsRecords, fullResult);\n    }\n\n    public static page<T>(data: T[], state: IPagingState): T[] {\n        if (!state) {\n            return data;\n        }\n        const len = data.length;\n        const index = state.index;\n        const res = [];\n        const recordsPerPage = state.recordsPerPage;\n        state.metadata = {\n            countPages: 0,\n            countRecords: data.length,\n            error: PagingError.None\n        };\n        if (index < 0 || isNaN(index)) {\n            state.metadata.error = PagingError.IncorrectPageIndex;\n            return res;\n        }\n        if (recordsPerPage <= 0 || isNaN(recordsPerPage)) {\n            state.metadata.error = PagingError.IncorrectRecordsPerPage;\n            return res;\n        }\n        state.metadata.countPages = Math.ceil(len / recordsPerPage);\n        if (!len) {\n            return data;\n        }\n        if (index >= state.metadata.countPages) {\n            state.metadata.error = PagingError.IncorrectPageIndex;\n            return res;\n        }\n        return data.slice(index * recordsPerPage, (index + 1) * recordsPerPage);\n    }\n\n    public static filter<T>(data: T[], state: IFilteringState): T[] {\n        if (!state.strategy) {\n            state.strategy = new FilteringStrategy();\n        }\n        return state.strategy.filter(data, state.expressionsTree, state.advancedExpressionsTree);\n    }\n\n    public static correctPagingState(state: IPagingState, length: number) {\n        const maxPage = Math.ceil(length / state.recordsPerPage) - 1;\n        if (!isNaN(maxPage) && state.index > maxPage) {\n            state.index = maxPage;\n        }\n    }\n\n    public static getHierarchy(gRow: IGroupByRecord): Array<IGroupByKey> {\n        return getHierarchy(gRow);\n    }\n\n    public static isHierarchyMatch(h1: Array<IGroupByKey>, h2: Array<IGroupByKey>): boolean {\n        return isHierarchyMatch(h1, h2);\n    }\n\n    /**\n     * Merges all changes from provided transactions into provided data collection\n     * @param data Collection to merge\n     * @param transactions Transactions to merge into data\n     * @param primaryKey Primary key of the collection, if any\n     * @param deleteRows Should delete rows with DELETE transaction type from data\n     * @returns Provided data collections updated with all provided transactions\n     */\n    public static mergeTransactions<T>(data: T[], transactions: Transaction[], primaryKey?: any, deleteRows: boolean = false): T[] {\n        data.forEach((item: any, index: number) => {\n            const rowId = primaryKey ? item[primaryKey] : item;\n            const transaction = transactions.find(t => t.id === rowId);\n            if (transaction && transaction.type === TransactionType.UPDATE) {\n                data[index] = transaction.newValue;\n            }\n        });\n\n        if (deleteRows) {\n            transactions\n                .filter(t => t.type === TransactionType.DELETE)\n                .forEach(t => {\n                    const index = primaryKey ? data.findIndex(d => d[primaryKey] === t.id) : data.findIndex(d => d === t.id);\n                    if (0 <= index && index < data.length) {\n                        data.splice(index, 1);\n                    }\n                });\n        }\n\n        data.push(...transactions\n            .filter(t => t.type === TransactionType.ADD)\n            .map(t => t.newValue));\n\n        return data;\n    }\n\n    /**\n     * Merges all changes from provided transactions into provided hierarchical data collection\n     * @param data Collection to merge\n     * @param transactions Transactions to merge into data\n     * @param childDataKey Data key of child collections\n     * @param primaryKey Primary key of the collection, if any\n     * @param deleteRows Should delete rows with DELETE transaction type from data\n     * @returns Provided data collections updated with all provided transactions\n     */\n    public static mergeHierarchicalTransactions(\n        data: any[],\n        transactions: HierarchicalTransaction[],\n        childDataKey: any,\n        primaryKey?: any,\n        deleteRows: boolean = false): any[] {\n        for (const transaction of transactions) {\n            if (transaction.path) {\n                const parent = this.findParentFromPath(data, primaryKey, childDataKey, transaction.path);\n                let collection: any[] = parent ? parent[childDataKey] : data;\n                switch (transaction.type) {\n                    case TransactionType.ADD:\n                        //  if there is no parent this is ADD row at root level\n                        if (parent && !parent[childDataKey]) {\n                            parent[childDataKey] = collection = [];\n                        }\n                        collection.push(transaction.newValue);\n                        break;\n                    case TransactionType.UPDATE:\n                        const updateIndex = collection.findIndex(x => x[primaryKey] === transaction.id);\n                        if (updateIndex !== -1) {\n                            collection[updateIndex] = mergeObjects(cloneValue(collection[updateIndex]), transaction.newValue);\n                        }\n                        break;\n                    case TransactionType.DELETE:\n                        if (deleteRows) {\n                            const deleteIndex = collection.findIndex(r => r[primaryKey] === transaction.id);\n                            if (deleteIndex !== -1) {\n                                collection.splice(deleteIndex, 1);\n                            }\n                        }\n                        break;\n                }\n            } else {\n                //  if there is no path this is ADD row in root. Push the newValue to data\n                data.push(transaction.newValue);\n            }\n        }\n        return data;\n    }\n\n    private static findParentFromPath(data: any[], primaryKey: any, childDataKey: any, path: any[]): any {\n        let collection: any[] = data;\n        let result: any;\n\n        for (const id of path) {\n            result = collection && collection.find(x => x[primaryKey] === id);\n            if (!result) {\n                break;\n            }\n\n            collection = result[childDataKey];\n        }\n\n        return result;\n    }\n}\n","\n/**\n * @hidden\n */\nexport class ExportUtilities {\n    public static getKeysFromData(data: any[]) {\n        const length = data.length;\n        if (length === 0) {\n            return [];\n        }\n\n        const dataEntry = data[0];\n        const dataEntryMiddle = data[Math.floor(length / 2)];\n        const dataEntryLast = data[length - 1];\n\n        const keys1 = Object.keys(dataEntry);\n        const keys2 = Object.keys(dataEntryMiddle);\n        const keys3 = Object.keys(dataEntryLast);\n\n        const keys = new Set(keys1.concat(keys2).concat(keys3));\n\n        return !ExportUtilities.isSpecialData(data) ? Array.from(keys) : [ 'Column 1' ];\n    }\n\n    public static saveBlobToFile(blob: Blob, fileName) {\n        const a = document.createElement('a');\n        if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n            window.navigator.msSaveOrOpenBlob(blob, fileName);\n        } else {\n            const url = window.URL.createObjectURL(blob);\n            a.download = fileName;\n\n            a.href = url;\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            window.URL.revokeObjectURL(url);\n        }\n    }\n\n    public static stringToArrayBuffer(s: string): ArrayBuffer {\n        const buf = new ArrayBuffer(s.length);\n        const view = new Uint8Array(buf);\n        for (let i = 0; i !== s.length; ++i) {\n            /* tslint:disable no-bitwise */\n            view[i] = s.charCodeAt(i) & 0xFF;\n            /* tslint:enable no-bitwise */\n        }\n        return buf;\n    }\n\n    public static isSpecialData(data: any[]): boolean {\n        const dataEntry = data[0];\n        return (typeof dataEntry === 'string' ||\n                typeof dataEntry === 'number' ||\n                dataEntry instanceof Date);\n    }\n\n    public static hasValue(value: any): boolean {\n        return value !== undefined && value !== null;\n    }\n\n    public static isNullOrWhitespaces(value: string): boolean {\n        return value === undefined || value === null || !value.trim();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { cloneArray, isEqual, mergeObjects } from '../core/utils';\nimport { DataUtil, DataType } from '../data-operations/data-util';\nimport { IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { ISortingExpression, SortingDirection } from '../data-operations/sorting-expression.interface';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxRowComponent } from './row.component';\nimport { IFilteringOperation } from '../data-operations/filtering-condition';\nimport { IFilteringExpressionsTree, FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { Transaction, TransactionType, State } from '../services/transaction/transaction';\nimport { IgxCell, IgxRow } from '../core/grid-selection';\n/**\n *@hidden\n */\n@Injectable()\nexport class GridBaseAPIService <T extends IgxGridBaseComponent & IGridDataBindable> {\n\n    grid: T;\n    protected editCellState: Map<string, any> = new Map<string, any>();\n    protected editRowState: Map<string, { rowID: any, rowIndex: number }> = new Map();\n    protected destroyMap: Map<string, Subject<boolean>> = new Map<string, Subject<boolean>>();\n\n    public get_column_by_name(name: string): IgxColumnComponent {\n        return this.grid.columnList.find((col) => col.field === name);\n    }\n\n    public get_summary_data() {\n        const grid = this.grid;\n        let data = grid.filteredData;\n        if (!data) {\n            if (grid.transactions.enabled) {\n                data = DataUtil.mergeTransactions(\n                    cloneArray(grid.data),\n                    grid.transactions.getAggregatedChanges(true),\n                    grid.primaryKey\n                );\n                const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === TransactionType.DELETE).map(t => t.id);\n                deletedRows.forEach(rowID => {\n                    const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n                    const index = tempData.indexOf(rowID);\n                    if (index !== -1) {\n                       data.splice(index, 1);\n                    }\n                });\n            } else {\n                data = grid.data;\n            }\n        }\n        return data;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public getRowData(rowID: any) {\n        const data = this.get_all_data(this.grid.transactions.enabled);\n        const index = this.get_row_index_in_data(rowID);\n        return data[index];\n    }\n\n    // TODO: Refactor\n    public escape_editMode() {\n        this.grid.crudService.end();\n    }\n\n    // TODO: Refactor\n    public get_cell_inEditMode(): IgxCell {\n        return this.grid.crudService.cell;\n    }\n\n    public get_row_index_in_data(rowID: any): number {\n        const grid = this.grid as IgxGridBaseComponent;\n        if (!grid) {\n            return -1;\n        }\n        const data = this.get_all_data(grid.transactions.enabled);\n        return grid.primaryKey ? data.findIndex(record => record[grid.primaryKey] === rowID) : data.indexOf(rowID);\n    }\n\n    public get_row_by_key(rowSelector: any): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        const primaryKey = this.grid.primaryKey;\n        if (primaryKey !== undefined && primaryKey !== null) {\n            return this.grid.dataRowList.find((row) => row.rowData[primaryKey] === rowSelector);\n        } else {\n            return this.grid.dataRowList.find((row) => row.rowData === rowSelector);\n        }\n    }\n\n    public get_row_by_index(rowIndex: number): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        return this.grid.rowList.find((row) => row.index === rowIndex);\n    }\n\n    public get_cell_by_key(rowSelector: any, field: string): IgxGridCellComponent {\n        const row = this.get_row_by_key(rowSelector);\n        if (row && row.cells) {\n            return row.cells.find((cell) => cell.column.field === field);\n        }\n    }\n\n    public get_cell_by_index(rowIndex: number, columnIndex: number): IgxGridCellComponent {\n        const row = this.get_row_by_index(rowIndex);\n        if (row && row.cells) {\n            return row.cells.find((cell) => cell.columnIndex === columnIndex);\n        }\n    }\n\n    public get_cell_by_visible_index(rowIndex: number, columnIndex: number): IgxGridCellComponent {\n        const row = this.get_row_by_index(rowIndex);\n        if (row && row.cells) {\n            return row.cells.find((cell) => cell.visibleColumnIndex === columnIndex);\n        }\n    }\n\n    public submit_value() {\n        const cell = this.grid.crudService.cell;\n        if (cell ) {\n            const args = this.update_cell(cell, cell.editValue);\n            if (args.cancel) {\n                return;\n            }\n            this.escape_editMode();\n        }\n    }\n\n    update_cell(cell: IgxCell, value: any) {\n        const data = this.get_all_data(this.grid.transactions.enabled);\n        const index = this.get_row_index_in_data(cell.id.rowID);\n\n        cell.editValue = value;\n\n        const args = cell.createEditEventArgs();\n\n        this.grid.onCellEdit.emit(args);\n        if (args.cancel) {\n            return args;\n        }\n\n        // Cast to number after emit\n        // TODO: Clean up this\n        args.newValue = cell.castToNumber(args.newValue);\n\n        if (isEqual(args.oldValue, args.newValue)) {\n            return args;\n        }\n\n        this.grid.summaryService.clearSummaryCache(args);\n        this.updateData(this.grid, cell.id.rowID, data[index], cell.rowData, { [cell.column.field ]: args.newValue });\n        if (this.grid.primaryKey === cell.column.field) {\n             if (this.grid.selectionService.isRowSelected(cell.id.rowID)) {\n                this.grid.selectionService.deselectRow(cell.id.rowID);\n                this.grid.selectionService.selectRowById(args.newValue);\n            }\n            if (this.grid.hasSummarizedColumns) {\n                this.grid.summaryService.removeSummaries(cell.id.rowID);\n            }\n        }\n        if (!this.grid.rowEditable || !this.grid.crudService.row ||\n                this.grid.crudService.row.id !== cell.id.rowID || !this.grid.transactions.enabled) {\n            this.grid.summaryService.clearSummaryCache(args);\n            (this.grid as any)._pipeTrigger++;\n        }\n\n        return args;\n    }\n\n    /**\n     * Updates related row of provided grid's data source with provided new row value\n     * @param grid Grid to update data for\n     * @param rowID ID of the row to update\n     * @param rowValueInDataSource Initial value of the row as it is in data source\n     * @param rowCurrentValue Current value of the row as it is with applied previous transactions\n     * @param rowNewValue New value of the row\n     */\n    protected updateData(grid, rowID, rowValueInDataSource: any, rowCurrentValue: any, rowNewValue: {[x: string]: any}) {\n        if (grid.transactions.enabled) {\n            const transaction: Transaction = {\n                id: rowID,\n                type: TransactionType.UPDATE,\n                newValue: rowNewValue\n            };\n            grid.transactions.add(transaction, rowCurrentValue);\n        } else {\n            mergeObjects(rowValueInDataSource, rowNewValue);\n        }\n    }\n\n    _update_row(row: IgxRow, value?: any) {\n        const grid = this.grid;\n\n        const rowInEditMode = grid.crudService.row;\n        row.newData = value ? value : grid.transactions.getAggregatedValue(row.id, true);\n\n\n        if (rowInEditMode && row.id === rowInEditMode.id) {\n            row.data = { ...row.data, ...rowInEditMode.transactionState };\n        // TODO: Workaround for updating a row in edit mode through the API\n        } else if (this.grid.transactions.enabled) {\n            const state = grid.transactions.getState(row.id);\n            row.data = state ? Object.assign({}, row.data, state.value) : row.data;\n        }\n    }\n\n    update_row(row: IgxRow, value: any) {\n        const grid = this.grid;\n        const selected = grid.selectionService.isRowSelected(row.id);\n        const rowInEditMode = grid.crudService.row;\n        const data = this.get_all_data(grid.transactions.enabled);\n        const index = this.get_row_index_in_data(row.id);\n        const hasSummarized = grid.hasSummarizedColumns;\n\n        this._update_row(row, value);\n\n        const args = row.createEditEventArgs();\n\n        // If no valid row is found\n        if (index === -1) {\n            return args;\n        }\n\n        grid.onRowEdit.emit(args);\n\n        if (args.cancel) {\n            return args;\n        }\n\n        if (rowInEditMode) {\n            const hasChanges = grid.transactions.getState(args.rowID, true);\n            grid.transactions.endPending(false);\n            if (!hasChanges) {\n                return args;\n            }\n        }\n\n        if (!args.newValue) {\n            return args;\n        }\n\n        if (hasSummarized) {\n            grid.summaryService.removeSummaries(args.rowID);\n        }\n\n        this.updateData(grid, row.id, data[index], args.oldValue, args.newValue);\n        const newId = grid.primaryKey ? args.newValue[grid.primaryKey] : args.newValue;\n        if (selected) {\n            grid.selectionService.deselectRow(row.id);\n            grid.selectionService.selectRowById(newId);\n        }\n        if (hasSummarized) {\n            grid.summaryService.removeSummaries(newId);\n        }\n        (grid as any)._pipeTrigger++;\n\n        return args;\n    }\n\n\n\n    protected update_row_in_array(value: any, rowID: any, index: number) {\n        const grid = this.grid;\n        grid.data[index] = value;\n    }\n\n    public sort(expression: ISortingExpression): void {\n        if (expression.dir === SortingDirection.None) {\n            this.remove_grouping_expression(expression.fieldName);\n        }\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n        this.prepare_sorting_expression([sortingState], expression);\n        this.grid.sortingExpressions = sortingState;\n    }\n\n    public sort_multiple(expressions: ISortingExpression[]): void {\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n\n        for (const each of expressions) {\n            if (each.dir === SortingDirection.None) {\n                this.remove_grouping_expression(each.fieldName);\n            }\n            this.prepare_sorting_expression([sortingState], each);\n        }\n\n        this.grid.sortingExpressions = sortingState;\n    }\n\n    public filter(fieldName: string, term, conditionOrExpressionsTree: IFilteringOperation | IFilteringExpressionsTree,\n        ignoreCase: boolean) {\n        const grid = this.grid;\n        const filteringTree = grid.filteringExpressionsTree;\n        grid.endEdit(false);\n\n        if (grid.paging) {\n            grid.page = 0;\n        }\n\n        const fieldFilterIndex = filteringTree.findIndex(fieldName);\n        if (fieldFilterIndex > -1) {\n            filteringTree.filteringOperands.splice(fieldFilterIndex, 1);\n        }\n\n        this.prepare_filtering_expression(filteringTree, fieldName, term, conditionOrExpressionsTree, ignoreCase, fieldFilterIndex);\n        grid.filteringExpressionsTree = filteringTree;\n    }\n\n    public filter_global(term, condition, ignoreCase) {\n        if (!condition) {\n            return;\n        }\n\n        const grid = this.grid;\n        const filteringTree = grid.filteringExpressionsTree;\n        grid.endEdit(false);\n        if (grid.paging) {\n            grid.page = 0;\n        }\n\n        filteringTree.filteringOperands = [];\n        for (const column of grid.columns) {\n            this.prepare_filtering_expression(filteringTree, column.field, term,\n                condition, ignoreCase || column.filteringIgnoreCase);\n        }\n\n        grid.filteringExpressionsTree = filteringTree;\n    }\n\n    public clear_filter(fieldName: string) {\n        const grid = this.grid;\n        grid.endEdit(false);\n        const filteringState = grid.filteringExpressionsTree;\n        const index = filteringState.findIndex(fieldName);\n\n        if (index > -1) {\n            filteringState.filteringOperands.splice(index, 1);\n        } else if (!fieldName) {\n            filteringState.filteringOperands = [];\n        }\n\n        grid.filteringExpressionsTree = filteringState;\n    }\n\n    public clear_sort(fieldName: string) {\n        const sortingState = this.grid.sortingExpressions;\n        const index = sortingState.findIndex((expr) => expr.fieldName === fieldName);\n        if (index > -1) {\n            sortingState.splice(index, 1);\n            this.grid.sortingExpressions = sortingState;\n        }\n    }\n\n    protected prepare_filtering_expression(filteringState: IFilteringExpressionsTree, fieldName: string, searchVal,\n        conditionOrExpressionsTree: IFilteringOperation | IFilteringExpressionsTree, ignoreCase: boolean, insertAtIndex = -1) {\n\n        let newExpressionsTree;\n        const oldExpressionsTreeIndex = filteringState.findIndex(fieldName);\n        const expressionsTree = conditionOrExpressionsTree instanceof FilteringExpressionsTree ?\n            conditionOrExpressionsTree as IFilteringExpressionsTree : null;\n        const condition = conditionOrExpressionsTree instanceof FilteringExpressionsTree ?\n            null : conditionOrExpressionsTree as IFilteringOperation;\n        const newExpression: IFilteringExpression = { fieldName, searchVal, condition, ignoreCase };\n\n        if (oldExpressionsTreeIndex === -1) {\n            // no expressions tree found for this field\n            if (expressionsTree) {\n                if (insertAtIndex > -1) {\n                    filteringState.filteringOperands.splice(insertAtIndex, 0, expressionsTree);\n                } else {\n                    filteringState.filteringOperands.push(expressionsTree);\n                }\n            } else if (condition) {\n                // create expressions tree for this field and add the new expression to it\n                newExpressionsTree = new FilteringExpressionsTree(filteringState.operator, fieldName);\n                newExpressionsTree.filteringOperands.push(newExpression);\n                filteringState.filteringOperands.push(newExpressionsTree);\n            }\n        }\n    }\n\n    protected prepare_sorting_expression(stateCollections: Array<Array<any>>, expression: ISortingExpression) {\n        if (expression.dir === SortingDirection.None) {\n            stateCollections.forEach(state => {\n                state.splice(state.findIndex((expr) => expr.fieldName === expression.fieldName), 1);\n            });\n            return;\n        }\n\n        /**\n         * We need to make sure the states in each collection with same fields point to the same object reference.\n         * If the different state collections provided have different sizes we need to get the largest one.\n         * That way we can get the state reference from the largest one that has the same fieldName as the expression to prepare.\n         */\n        let maxCollection = stateCollections[0];\n        for (let i = 1; i < stateCollections.length; i++) {\n            if (maxCollection.length < stateCollections[i].length) {\n                maxCollection = stateCollections[i];\n            }\n        }\n        const maxExpr = maxCollection.find((expr) => expr.fieldName === expression.fieldName);\n\n        stateCollections.forEach(collection => {\n            const myExpr = collection.find((expr) => expr.fieldName === expression.fieldName);\n            if (!myExpr && !maxExpr) {\n                // Expression with this fieldName is missing from the current and the max collection.\n                collection.push(expression);\n            } else if (!myExpr && maxExpr) {\n                // Expression with this fieldName is missing from the current and but the max collection has.\n                collection.push(maxExpr);\n                Object.assign(maxExpr, expression);\n            } else {\n                // The current collection has the expression so just update it.\n                Object.assign(myExpr, expression);\n            }\n        });\n    }\n\n    protected remove_grouping_expression(fieldName) {\n    }\n\n    public clear_groupby(name?: string | Array<string>) {\n    }\n\n    public should_apply_number_style(column: IgxColumnComponent): boolean {\n        return column.dataType === DataType.Number;\n    }\n\n    public get_data(): any[] {\n        const grid = this.grid;\n        const data = grid.data ? grid.data : [];\n        return data;\n    }\n\n    public get_all_data(includeTransactions = false): any[] {\n        const grid = this.grid;\n        let data = grid.data ? grid.data : [];\n        data = includeTransactions ? grid.dataWithAddedInTransactionRows : data;\n        return data;\n    }\n\n    public get_filtered_data(): any[] {\n        return this.grid.filteredData;\n    }\n\n    protected getSortStrategyPerColumn(fieldName: string) {\n        return this.get_column_by_name(fieldName) ?\n            this.get_column_by_name(fieldName).sortStrategy : undefined;\n    }\n\n    public addRowToData(rowData: any) {\n        // Add row goes to transactions and if rowEditable is properly implemented, added rows will go to pending transactions\n        // If there is a row in edit - > commit and close\n        const grid = this.grid;\n        if (grid.transactions.enabled) {\n            const transactionId = grid.primaryKey ? rowData[grid.primaryKey] : rowData;\n            const transaction: Transaction = { id: transactionId, type: TransactionType.ADD, newValue: rowData };\n            grid.transactions.add(transaction);\n        } else {\n            grid.data.push(rowData);\n        }\n    }\n\n    public deleteRowFromData(rowID: any, index: number) {\n        //  if there is a row (index !== 0) delete it\n        //  if there is a row in ADD or UPDATE state change it's state to DELETE\n        const grid = this.grid;\n        if (index !== -1) {\n            if (grid.transactions.enabled) {\n                const transaction: Transaction = { id: rowID, type: TransactionType.DELETE, newValue: null };\n                grid.transactions.add(transaction, grid.data[index]);\n            } else {\n                grid.data.splice(index, 1);\n            }\n        } else {\n            const state: State = grid.transactions.getState(rowID);\n            grid.transactions.add({ id: rowID, type: TransactionType.DELETE, newValue: null }, state && state.recordRef);\n        }\n    }\n\n    public deleteRowById(rowId: any) {\n        let index: number;\n        const grid = this.grid;\n        const data = this.get_all_data();\n        if (grid.primaryKey) {\n            index = data.map((record) => record[grid.primaryKey]).indexOf(rowId);\n        } else {\n            index = data.indexOf(rowId);\n        }\n        const state: State = grid.transactions.getState(rowId);\n        const hasRowInNonDeletedState = state && state.type !== TransactionType.DELETE;\n\n        //  if there is a row (index !== -1) and the we have cell in edit mode on same row exit edit mode\n        //  if there is no row (index === -1), but there is a row in ADD or UPDATE state do as above\n        //  Otherwise just exit - there is nothing to delete\n        if (index !== -1 || hasRowInNonDeletedState) {\n            // Always exit edit when row is deleted\n            grid.endEdit(true);\n        } else {\n            return;\n        }\n\n        //  TODO: should we emit this when cascadeOnDelete is true for each row?!?!\n        grid.onRowDeleted.emit({ data: data[index] });\n\n        this.deleteRowFromData(rowId, index);\n\n        grid.selectionService.isRowSelected(rowId) ? grid.selectionService.deselectRow(rowId) : grid.selectionService.clearHeaderCBState();\n        (grid as any)._pipeTrigger++;\n        grid.notifyChanges();\n        // Data needs to be recalculated if transactions are in place\n        // If no transactions, `data` will be a reference to the grid getter, otherwise it will be stale\n        const dataAfterDelete = grid.transactions.enabled ? grid.dataWithAddedInTransactionRows : data;\n        grid.refreshSearch();\n        if (dataAfterDelete.length % grid.perPage === 0 && dataAfterDelete.length / grid.perPage - 1 < grid.page && grid.page !== 0) {\n            grid.page--;\n        }\n    }\n\n    public get_row_id(rowData) {\n        return this.grid.primaryKey ? rowData[this.grid.primaryKey] : rowData;\n    }\n\n    public row_deleted_transaction(rowID: any): boolean {\n        const grid = this.grid;\n        if (!grid) {\n            return false;\n        }\n        if (!grid.transactions.enabled) {\n            return false;\n        }\n        const state = grid.transactions.getState(rowID);\n        if (state) {\n            return state.type === TransactionType.DELETE;\n        }\n\n        return false;\n    }\n\n    public atInexistingPage(): Boolean {\n        return this.grid.totalPages - 1 > this.grid.page;\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { BaseFilteringStrategy, IFilteringStrategy } from '../../data-operations/filtering-strategy';\nimport { IFilteringExpressionsTree, FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { IFilteringState } from '../../data-operations/filtering-state.interface';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid';\n\n/** @hidden */\nexport class TreeGridFilteringStrategy extends BaseFilteringStrategy {\n    public filter(data: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree,\n        advancedExpressionsTree?: IFilteringExpressionsTree): ITreeGridRecord[] {\n        return this.filterImpl(data, expressionsTree, advancedExpressionsTree, undefined);\n    }\n\n    private filterImpl(data: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree,\n        advancedExpressionsTree: IFilteringExpressionsTree, parent: ITreeGridRecord): ITreeGridRecord[] {\n        let i: number;\n        let rec: ITreeGridRecord;\n        const len = data.length;\n        const res: ITreeGridRecord[] = [];\n        if ((FilteringExpressionsTree.empty(expressionsTree) && FilteringExpressionsTree.empty(advancedExpressionsTree)) || !len) {\n            return data;\n        }\n        for (i = 0; i < len; i++) {\n            rec = DataUtil.cloneTreeGridRecord(data[i]);\n            rec.parent = parent;\n            if (rec.children) {\n                const filteredChildren = this.filterImpl(rec.children, expressionsTree, advancedExpressionsTree, rec);\n                rec.children = filteredChildren.length > 0 ? filteredChildren : null;\n            }\n\n            if (this.matchRecord(rec, expressionsTree) && this.matchRecord(rec, advancedExpressionsTree)) {\n                res.push(rec);\n            } else if (rec.children && rec.children.length > 0) {\n                rec.isFilteredOutParent = true;\n                res.push(rec);\n            }\n        }\n        return res;\n    }\n\n    protected getFieldValue(rec: object, fieldName: string): any {\n        const hierarchicalRecord = <ITreeGridRecord>rec;\n        return hierarchicalRecord.data[fieldName];\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridFiltering',\n    pure: true\n})\nexport class IgxTreeGridFilteringPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n     }\n\n    public transform(hierarchyData: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree,\n        filterStrategy: IFilteringStrategy,\n        advancedFilteringExpressionsTree: IFilteringExpressionsTree, id: string, pipeTrigger: number): ITreeGridRecord[] {\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n        const state: IFilteringState = {\n            expressionsTree: expressionsTree,\n            advancedExpressionsTree: advancedFilteringExpressionsTree,\n            strategy: new TreeGridFilteringStrategy()\n        };\n\n        if (filterStrategy) {\n            state.strategy = filterStrategy;\n        }\n\n        this.resetFilteredOutProperty(grid.records);\n\n        if (FilteringExpressionsTree.empty(state.expressionsTree) && FilteringExpressionsTree.empty(state.advancedExpressionsTree)) {\n            grid.filteredData = null;\n            return hierarchyData;\n        }\n\n        const result = this.filter(hierarchyData, state);\n        const filteredData: any[] = [];\n        this.expandAllRecursive(grid, result, grid.expansionStates, filteredData);\n        grid.filteredData = filteredData;\n\n        return result;\n    }\n\n    private resetFilteredOutProperty(map: Map<any, ITreeGridRecord>) {\n        const keys = Array.from(map.keys());\n        for (let i = 0; i < keys.length; i++) {\n            map.get(keys[i]).isFilteredOutParent = undefined;\n        }\n    }\n\n    private expandAllRecursive(grid: IgxTreeGridComponent, data: ITreeGridRecord[],\n        expandedStates: Map<any, boolean>, filteredData: any[]) {\n        for (let i = 0; i < data.length; i++) {\n            const rec = data[i];\n            filteredData.push(rec.data);\n            this.updateNonProcessedRecord(grid, rec);\n\n            if (rec.children && rec.children.length > 0) {\n                expandedStates.set(rec.rowID, true);\n                this.expandAllRecursive(grid, rec.children, expandedStates, filteredData);\n            }\n        }\n    }\n\n    private updateNonProcessedRecord(grid: IgxTreeGridComponent, record: ITreeGridRecord) {\n        const rec = grid.records.get(record.rowID);\n        rec.isFilteredOutParent = record.isFilteredOutParent;\n    }\n\n    private filter(data: ITreeGridRecord[], state: IFilteringState): ITreeGridRecord[] {\n        return state.strategy.filter(data, state.expressionsTree, state.advancedExpressionsTree);\n    }\n}\n","import {\n    EventEmitter,\n    Output\n} from '@angular/core';\n\nimport { cloneValue, IBaseEventArgs } from '../../core/utils';\nimport { DataUtil } from '../../data-operations/data-util';\n\nimport { ExportUtilities } from './export-utilities';\nimport { IgxExporterOptionsBase } from './exporter-options-base';\nimport { ITreeGridRecord } from '../../grids/tree-grid/tree-grid.interfaces';\nimport { TreeGridFilteringStrategy } from '../../grids/tree-grid/tree-grid.filtering.pipe';\n\n/**\n * onRowExport event arguments\n * this.exporterService.onRowExport.subscribe((args: IRowExportingEventArgs) => {\n * // set args properties here\n * })\n */\nexport interface IRowExportingEventArgs extends IBaseEventArgs {\n    /**\n     * Contains the exporting row data\n     */\n    rowData: any;\n\n    /**\n     * Contains the exporting row index\n     */\n    rowIndex: number;\n\n    /**\n     * Skip the exporting row when set to true\n     */\n    cancel: boolean;\n}\n\n/**\n    * onColumnExport event arguments\n    * ```typescript\n    * this.exporterService.onColumnExport.subscribe((args: IColumnExportingEventArgs) => {\n    * // set args properties here\n    * });\n    * ```\n    */\nexport interface IColumnExportingEventArgs extends IBaseEventArgs {\n    /**\n     * Contains the exporting column header\n     */\n    header: string;\n\n    /**\n     * Contains the exporting column field name\n     */\n    field: string;\n\n    /**\n     * Contains the exporting column index\n     */\n    columnIndex: number;\n\n    /**\n     * Skip the exporting column when set to true\n     */\n    cancel: boolean;\n\n    /**\n     * Export the column's data without applying its formatter, when set to true\n     */\n    skipFormatter: boolean;\n}\n\nexport abstract class IgxBaseExporter {\n    private _columnList: any[];\n    private flatRecords = [];\n\n    protected _isTreeGrid = false;\n    protected _indexOfLastPinnedColumn = -1;\n    protected _sort = null;\n\n    /**\n     * This event is emitted when a row is exported.\n     * ```typescript\n     * this.exporterService.onRowExport.subscribe((args: IRowExportingEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    @Output()\n    public onRowExport = new EventEmitter<IRowExportingEventArgs>();\n\n    /**\n     * This event is emitted when a column is exported.\n     * ```typescript\n     * this.exporterService.onColumnExport.subscribe((args: IColumnExportingEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    @Output()\n    public onColumnExport = new EventEmitter<IColumnExportingEventArgs>();\n\n    /**\n     * Method for exporting IgxGrid component's data.\n     * ```typescript\n     * this.exporterService.export(this.igxGridForExport, this.exportOptions);\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    public export(grid: any, options: IgxExporterOptionsBase): void {\n        if (options === undefined || options === null) {\n            throw Error('No options provided!');\n        }\n\n        const columns = grid.columnList.toArray();\n        this._columnList = new Array<any>(columns.length);\n\n        const hiddenColumns = [];\n        let lastVisbleColumnIndex = -1;\n\n        columns.forEach((column) => {\n            const columnHeader = column.header !== '' ? column.header : column.field;\n            const exportColumn = !column.hidden || options.ignoreColumnsVisibility;\n            const index = options.ignoreColumnsOrder ? column.index : column.visibleIndex;\n\n            const columnInfo = {\n                header: columnHeader,\n                field: column.field,\n                skip: !exportColumn,\n                formatter: column.formatter,\n                skipFormatter: false\n            };\n\n            if (index !== -1) {\n                this._columnList[index] = columnInfo;\n                lastVisbleColumnIndex = Math.max(lastVisbleColumnIndex, index);\n            } else {\n                hiddenColumns.push(columnInfo);\n            }\n\n            if (column.pinned && exportColumn) {\n                this._indexOfLastPinnedColumn = index;\n            }\n        });\n\n        // Append the hidden columns to the end of the list\n        hiddenColumns.forEach((hiddenColumn) => {\n            this._columnList[++lastVisbleColumnIndex] = hiddenColumn;\n        });\n\n        const data = this.prepareData(grid, options);\n        this.exportData(data, options);\n    }\n\n    /**\n     * Method for exporting any kind of array data.\n     * ```typescript\n     * this.exporterService.exportData(this.arrayForExport, this.exportOptions);\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    public exportData(data: any[], options: IgxExporterOptionsBase): void {\n        if (options === undefined || options === null) {\n            throw Error('No options provided!');\n        }\n\n        if (!this._columnList || this._columnList.length === 0) {\n            const keys = ExportUtilities.getKeysFromData(data);\n            this._columnList = keys.map((k) => ({ header: k, field: k, skip: false }));\n        }\n\n        let skippedPinnedColumnsCount = 0;\n        let columnsWithoutHeaderCount = 1;\n        this._columnList.forEach((column, index) => {\n            if (!column.skip) {\n                const columnExportArgs = {\n                    header: ExportUtilities.isNullOrWhitespaces(column.header) ?\n                        'Column' + columnsWithoutHeaderCount++ : column.header,\n                    field: column.field,\n                    columnIndex: index,\n                    cancel: false,\n                    skipFormatter: false\n                };\n                this.onColumnExport.emit(columnExportArgs);\n\n                column.header = columnExportArgs.header;\n                column.skip = columnExportArgs.cancel;\n                column.skipFormatter = columnExportArgs.skipFormatter;\n\n                if (column.skip && index <= this._indexOfLastPinnedColumn) {\n                    skippedPinnedColumnsCount++;\n                }\n\n                if (this._sort && this._sort.fieldName === column.field) {\n                    if (column.skip) {\n                        this._sort = null;\n                    } else {\n                        this._sort.fieldName = column.header;\n                    }\n                }\n            }\n        });\n\n        this._indexOfLastPinnedColumn -= skippedPinnedColumnsCount;\n\n        const dataToExport = new Array<any>();\n        const isSpecialData = ExportUtilities.isSpecialData(data);\n\n        data.forEach((row, index) => {\n            this.exportRow(dataToExport, row, index, isSpecialData);\n        });\n\n        this.exportDataImplementation(dataToExport, options);\n        this.resetDefaults();\n    }\n\n    protected abstract exportDataImplementation(data: any[], options: IgxExporterOptionsBase): void;\n\n    private exportRow(data: any[], rowData: any, index: number, isSpecialData: boolean) {\n        let row;\n\n        if (!isSpecialData) {\n            row = this._columnList.reduce((a, e) => {\n                if (!e.skip) {\n                    const rawValue = this._isTreeGrid ? rowData.data[e.field] : rowData[e.field];\n                    a[e.header] = e.formatter && !e.skipFormatter ? e.formatter(rawValue) : rawValue;\n                }\n                return a;\n            }, {});\n        } else {\n            row = this._isTreeGrid ? rowData.data : rowData;\n        }\n\n        const rowArgs = {\n            rowData: row,\n            rowIndex: index,\n            cancel: false\n        };\n        this.onRowExport.emit(rowArgs);\n\n        if (!rowArgs.cancel) {\n            data.push({ rowData: rowArgs.rowData, originalRowData: rowData });\n        }\n    }\n\n    private prepareData(grid: any, options: IgxExporterOptionsBase): any[] {\n        this.flatRecords = [];\n        let rootRecords = grid.rootRecords;\n        this._isTreeGrid = rootRecords !== undefined;\n\n        if (this._isTreeGrid) {\n            this.prepareHierarchicalData(rootRecords);\n        }\n\n        let data = this._isTreeGrid ? this.flatRecords : grid.data;\n\n        if (grid.filteringExpressionsTree &&\n            grid.filteringExpressionsTree.filteringOperands.length > 0 &&\n            !options.ignoreFiltering) {\n            const filteringState: any = {\n                expressionsTree: grid.filteringExpressionsTree,\n                advancedExpressionsTree: grid.advancedExpressionsTree,\n                logic: grid.filteringLogic\n            };\n\n            if (this._isTreeGrid) {\n                this.flatRecords = [];\n                filteringState.strategy = new TreeGridFilteringStrategy();\n                rootRecords = filteringState.strategy.filter(rootRecords,\n                    filteringState.expressionsTree, filteringState.advancedExpressionsTree);\n                this.prepareHierarchicalData(rootRecords);\n                data = this.flatRecords;\n            } else {\n                data = DataUtil.filter(data, filteringState);\n            }\n        }\n\n        if (grid.sortingExpressions &&\n            grid.sortingExpressions.length > 0 &&\n            !options.ignoreSorting) {\n            this._sort = cloneValue(grid.sortingExpressions[0]);\n\n            if (this._isTreeGrid) {\n                this.flatRecords = [];\n                rootRecords = DataUtil.treeGridSort(rootRecords, grid.sortingExpressions);\n                this.prepareHierarchicalData(rootRecords);\n                data = this.flatRecords;\n            } else {\n                data = DataUtil.sort(data, grid.sortingExpressions);\n            }\n        }\n\n        return data;\n    }\n\n    private prepareHierarchicalData(records: ITreeGridRecord[]) {\n        if (!records) {\n            return;\n        }\n        for (let i = 0; i < records.length; i++) {\n            const hierarchicalRecord = records[i];\n\n            this.flatRecords.push(hierarchicalRecord);\n            this.prepareHierarchicalData(hierarchicalRecord.children);\n        }\n    }\n\n    private resetDefaults() {\n        this._columnList = [];\n        this._indexOfLastPinnedColumn = -1;\n        this._sort = null;\n        this.flatRecords = [];\n    }\n}\n","import { ExportUtilities } from '../exporter-common/export-utilities';\n\n/**\n * @hidden\n */\nexport class CharSeparatedValueData {\n    private _headerRecord = '';\n    private _dataRecords = '';\n    private _eor = '\\r\\n';\n    private _delimiter;\n    private _escapeCharacters = ['\\r', '\\n', '\\r\\n'];\n    private _delimiterLength = 1;\n    private _isSpecialData = false;\n\n    constructor(private _data: any[], valueDelimiter: string)  {\n        this.setDelimiter(valueDelimiter);\n    }\n\n    public prepareData() {\n        if (!this._data || this._data.length === 0) {\n            return '';\n        }\n\n        const keys = ExportUtilities.getKeysFromData(this._data);\n\n        if (keys.length === 0) {\n            return '';\n        }\n\n        this._isSpecialData = ExportUtilities.isSpecialData(this._data);\n        this._escapeCharacters.push(this._delimiter);\n\n        this._headerRecord = this.processHeaderRecord(keys, this._escapeCharacters);\n        this._dataRecords = this.processDataRecords(this._data, keys, this._escapeCharacters);\n\n        return this._headerRecord + this._dataRecords;\n    }\n\n    private processField(value, escapeChars): string {\n        let safeValue = ExportUtilities.hasValue(value) ? String(value) : '';\n        if (escapeChars.some((v) => safeValue.includes(v))) {\n            safeValue = `\"${safeValue}\"`;\n        }\n        return safeValue + this._delimiter;\n    }\n\n    private processHeaderRecord(keys, escapeChars): string {\n        let recordData = '';\n        for (const keyName of keys) {\n            recordData += this.processField(keyName, this._escapeCharacters);\n        }\n\n        return recordData.slice(0, -this._delimiterLength) + this._eor;\n    }\n\n    private processRecord(record, keys, escapeChars): string {\n        let recordData = '';\n        for (const keyName of keys) {\n\n            const value = (record[keyName] !== undefined) ? record[keyName] : this._isSpecialData ? record : '';\n            recordData += this.processField(value, this._escapeCharacters);\n        }\n\n        return recordData.slice(0, -this._delimiterLength) + this._eor;\n    }\n\n    private processDataRecords(currentData, keys, escapeChars) {\n        let dataRecords = '';\n        for (const row of currentData) {\n            dataRecords += this.processRecord(row, keys, escapeChars);\n        }\n\n        return dataRecords;\n    }\n\n    private setDelimiter(value) {\n        this._delimiter = value;\n        this._delimiterLength = value.length;\n    }\n}\n","export abstract class IgxExporterOptionsBase {\n    private _fileName: string;\n\n    /**\n     * Specifies whether hidden columns should be exported.\n     * ```typescript\n     * let ignoreColumnsVisibility = this.exportOptions.ignoreColumnsVisibility;\n     * this.exportOptions.ignoreColumnsVisibility = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreColumnsVisibility = false;\n\n    /**\n     * Specifies whether filtered out rows should be exported.\n     * ```typescript\n     * let ignoreFiltering = this.exportOptions.ignoreFiltering;\n     * this.exportOptions.ignoreFiltering = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreFiltering = false;\n\n    /**\n     * Specifies if the exporter should ignore the current column order in the IgxGrid.\n     * ```typescript\n     * let ignoreColumnsOrder = this.exportOptions.ignoreColumnsOrder;\n     * this.exportOptions.ignoreColumnsOrder = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreColumnsOrder = false;\n\n    /**\n     * Specifies whether the exported data should be sorted as in the provided IgxGrid.\n     * ```typescript\n     * let ignoreSorting = this.exportOptions.ignoreSorting;\n     * this.exportOptions.ignoreSorting = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreSorting = false;\n\n    constructor(fileName: string, protected _fileExtension: string) {\n        this.setFileName(fileName);\n    }\n\n    private setFileName(fileName: string): void {\n        this._fileName = fileName + (fileName.endsWith(this._fileExtension) === false ? this._fileExtension : '');\n    }\n\n    /**\n     * Gets the file name which will be used for the exporting operation.\n     * ```typescript\n     * let fileName = this.exportOptions.fileName;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    get fileName() {\n        return this._fileName;\n    }\n\n    /**\n     * Sets the file name which will be used for the exporting operation.\n     * ```typescript\n     * this.exportOptions.fileName = 'exportedData01';\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    set fileName(value) {\n        this.setFileName(value);\n    }\n\n}\n","import { IgxExporterOptionsBase } from '../exporter-common/exporter-options-base';\n\n/**\n * Objects of this class are used to configure the CSV exporting process.\n */\nexport class IgxCsvExporterOptions extends IgxExporterOptionsBase {\n\n    private _valueDelimiter;\n    private _fileType;\n\n    constructor(fileName: string, fileType: CsvFileTypes) {\n        super(fileName, IgxCsvExporterOptions.getExtensionFromFileType(fileType));\n        this.setFileType(fileType);\n        this.setDelimiter();\n    }\n\n    private static getExtensionFromFileType(fType: CsvFileTypes) {\n        let extension = '';\n        switch (fType) {\n            case CsvFileTypes.CSV:\n                extension = '.csv';\n                break;\n            case CsvFileTypes.TSV:\n                extension = '.tsv';\n                break;\n            case CsvFileTypes.TAB:\n                extension = '.tab';\n                break;\n            default:\n                throw Error('Unsupported CSV file type!');\n        }\n        return extension;\n    }\n\n    /**\n     * Gets the value delimiter which will be used for the exporting operation.\n     * ```typescript\n     * let delimiter = this.exportOptions.valueDelimiter;\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    get valueDelimiter() {\n        return this._valueDelimiter;\n    }\n\n    /**\n     * Sets a value delimiter which will overwrite the default delimiter of the selected export format.\n     * ```typescript\n     * this.exportOptions.valueDelimiter = '|';\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    set valueDelimiter(value) {\n        this.setDelimiter(value);\n    }\n\n    /**\n     * Gets the CSV export format.\n     * ```typescript\n     * let filetype = this.exportOptions.fileType;\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    get fileType() {\n        return this._fileType;\n    }\n\n    /**\n     * Sets the CSV export format.\n     * ```typescript\n     * this.exportOptions.fileType = CsvFileTypes.TAB;\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    set fileType(value) {\n        this.setFileType(value);\n    }\n\n    private setFileType(value) {\n        if (value !== undefined && value !== null && value !== this._fileType) {\n            this._fileType = value;\n            const extension = IgxCsvExporterOptions.getExtensionFromFileType(value);\n            if (!this.fileName.endsWith(extension)) {\n                const oldExt = '.' + this.fileName.split('.').pop();\n                const newName = this.fileName.replace(oldExt, extension);\n                this._fileExtension = extension;\n                this.fileName = newName;\n            }\n        }\n    }\n\n    private setDelimiter(value?) {\n        if (value !== undefined && value !== '' && value !== null) {\n            this._valueDelimiter = value;\n        } else {\n            switch (this.fileType) {\n                case CsvFileTypes.CSV:\n                    this._valueDelimiter = ',';\n                    break;\n                case CsvFileTypes.TSV:\n                case CsvFileTypes.TAB:\n                    this._valueDelimiter = '\\t';\n                    break;\n            }\n        }\n    }\n}\n\n/**\n * This enumeration is used to configure the default value separator\n * as well as the default file extension used when performing CSV exporting.\n */\nexport enum CsvFileTypes {\n    /**\n     * Character Separated Values, default separator is \"comma\", default file extension is .csv\n     */\n    CSV,\n    /**\n     * Tab Separated Values, default separator is tab, default file extension is .tsv\n     */\n    TSV,\n    /**\n     * Tab Separated Values, default separator is tab, default file extension is .tab\n     */\n    TAB\n}\n","import { EventEmitter, Injectable, Output } from '@angular/core';\nimport { IgxBaseExporter } from '../exporter-common/base-export-service';\nimport { ExportUtilities } from '../exporter-common/export-utilities';\nimport { CharSeparatedValueData } from './char-separated-value-data';\nimport { CsvFileTypes, IgxCsvExporterOptions } from './csv-exporter-options';\nimport { IBaseEventArgs } from '../../core/utils';\n\nexport interface ICsvExportEndedEventArgs extends IBaseEventArgs {\n    csvData: string;\n}\n\n/**\n * **Ignite UI for Angular CSV Exporter Service** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/exporter_csv.html)\n *\n * The Ignite UI for Angular CSV Exporter service can export data in a Character Separated Values format from\n * both raw data (array) or from an `IgxGrid`.\n *\n * Example:\n * ```typescript\n * public localData = [\n *   { Name: \"Eric Ridley\", Age: \"26\" },\n *   { Name: \"Alanis Brook\", Age: \"22\" },\n *   { Name: \"Jonathan Morris\", Age: \"23\" }\n * ];\n *\n * constructor(private csvExportService: IgxCsvExporterService) {\n * }\n *\n * const opt: IgxCsvExporterOptions = new IgxCsvExporterOptions(\"FileName\", CsvFileTypes.CSV);\n * this.csvExportService.exportData(this.localData, opt);\n * ```\n */\n@Injectable()\nexport class IgxCsvExporterService extends IgxBaseExporter {\n    private _stringData: string;\n\n    /**\n     * This event is emitted when the export process finishes.\n     * ```typescript\n     * this.exporterService.onExportEnded.subscribe((args: ICsvExportEndedEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxCsvExporterService\n     */\n    @Output()\n    public onExportEnded = new EventEmitter<ICsvExportEndedEventArgs>();\n\n    protected exportDataImplementation(data: any[], options: IgxCsvExporterOptions) {\n        data = data.map((item) => item.rowData);\n        const csvData = new CharSeparatedValueData(data, options.valueDelimiter);\n        this._stringData = csvData.prepareData();\n\n        this.saveFile(options);\n        this.onExportEnded.emit({ csvData: this._stringData });\n    }\n\n    private saveFile(options: IgxCsvExporterOptions) {\n        switch (options.fileType) {\n            case CsvFileTypes.CSV:\n                this.exportFile(this._stringData, options.fileName, 'text/csv;charset=utf-8;');\n                break;\n            case CsvFileTypes.TSV:\n            case CsvFileTypes.TAB:\n                this.exportFile(this._stringData, options.fileName, 'text/tab-separated-values;charset=utf-8;');\n                break;\n        }\n    }\n\n    private exportFile(data: string, fileName: string, fileType: string): void {\n        const blob = new Blob(['\\ufeff', data], { type: fileType });\n        ExportUtilities.saveBlobToFile(blob, fileName);\n    }\n}\n","/**\n * @hidden\n */\nexport enum ExcelFolderTypes {\n    RootExcelFolder,\n    RootRelsExcelFolder,\n    DocPropsExcelFolder,\n    XLExcelFolder,\n    XLRelsExcelFolder,\n    ThemeExcelFolder,\n    WorksheetsExcelFolder,\n    WorksheetsRelsExcelFolder,\n    TablesExcelFolder\n}\n/**\n * @hidden\n */\nexport enum ExcelFileTypes {\n    RootRelsFile,\n    AppFile,\n    CoreFile,\n    WorkbookRelsFile,\n    ThemeFile,\n    WorksheetFile,\n    StyleFile,\n    WorkbookFile,\n    ContentTypesFile,\n    SharedStringsFile,\n    WorksheetRelsFile,\n    TablesFile\n}\n","/** @hidden */\nexport class ExcelStrings {\n    /* tslint:disable max-line-length */\n    private static XML_STRING = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\r\\n';\n    private static SHARED_STRING_RELATIONSHIP = '<Relationship Id=\"rId4\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings\" Target=\"sharedStrings.xml\" />';\n\n    public static getRels(): string {\n        return ExcelStrings.XML_STRING + '<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\" Target=\"docProps/app.xml\"/><Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\" Target=\"docProps/core.xml\"/><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\" Target=\"xl/workbook.xml\"/></Relationships>';\n    }\n\n    public static getApp(): string {\n        return ExcelStrings.XML_STRING + '<Properties xmlns=\"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties\" xmlns:vt=\"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes\"><Application>Microsoft Excel</Application><DocSecurity>0</DocSecurity><ScaleCrop>false</ScaleCrop><HeadingPairs><vt:vector size=\"2\" baseType=\"variant\"><vt:variant><vt:lpstr>Worksheets</vt:lpstr></vt:variant><vt:variant><vt:i4>1</vt:i4></vt:variant></vt:vector></HeadingPairs><TitlesOfParts><vt:vector size=\"1\" baseType=\"lpstr\"><vt:lpstr>Sheet1</vt:lpstr></vt:vector></TitlesOfParts><Company></Company><LinksUpToDate>false</LinksUpToDate><SharedDoc>false</SharedDoc><HyperlinksChanged>false</HyperlinksChanged><AppVersion>16.0300</AppVersion></Properties>';\n    }\n\n    public static getCore(): string {\n        return ExcelStrings.XML_STRING + '<cp:coreProperties xmlns:cp=\"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:dcterms=\"http://purl.org/dc/terms/\" xmlns:dcmitype=\"http://purl.org/dc/dcmitype/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><dc:creator></dc:creator><cp:lastModifiedBy></cp:lastModifiedBy><dcterms:created xsi:type=\"dcterms:W3CDTF\">2015-06-05T18:17:20Z</dcterms:created><dcterms:modified xsi:type=\"dcterms:W3CDTF\">2015-06-05T18:17:26Z</dcterms:modified></cp:coreProperties>';\n    }\n\n    public static getTheme(): string {\n        return ExcelStrings.XML_STRING + '<a:theme xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\" name=\"Office Theme\"><a:themeElements><a:clrScheme name=\"Office\"><a:dk1><a:sysClr val=\"windowText\" lastClr=\"000000\"/></a:dk1><a:lt1><a:sysClr val=\"window\" lastClr=\"FFFFFF\"/></a:lt1><a:dk2><a:srgbClr val=\"44546A\"/></a:dk2><a:lt2><a:srgbClr val=\"E7E6E6\"/></a:lt2><a:accent1><a:srgbClr val=\"5B9BD5\"/></a:accent1><a:accent2><a:srgbClr val=\"ED7D31\"/></a:accent2><a:accent3><a:srgbClr val=\"A5A5A5\"/></a:accent3><a:accent4><a:srgbClr val=\"FFC000\"/></a:accent4><a:accent5><a:srgbClr val=\"4472C4\"/></a:accent5><a:accent6><a:srgbClr val=\"70AD47\"/></a:accent6><a:hlink><a:srgbClr val=\"0563C1\"/></a:hlink><a:folHlink><a:srgbClr val=\"954F72\"/></a:folHlink></a:clrScheme><a:fontScheme name=\"Office\"><a:majorFont><a:latin typeface=\"Calibri Light\" panose=\"020F0302020204030204\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"æ¸¸ã´ã·ãã¯ Light\"/><a:font script=\"Hang\" typeface=\"ë§ì ê³ ë\"/><a:font script=\"Hans\" typeface=\"ç­çº¿ Light\"/><a:font script=\"Hant\" typeface=\"æ°ç´°æé«\"/><a:font script=\"Arab\" typeface=\"Times New Roman\"/><a:font script=\"Hebr\" typeface=\"Times New Roman\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"MoolBoran\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Times New Roman\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:majorFont><a:minorFont><a:latin typeface=\"Calibri\" panose=\"020F0502020204030204\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"æ¸¸ã´ã·ãã¯\"/><a:font script=\"Hang\" typeface=\"ë§ì ê³ ë\"/><a:font script=\"Hans\" typeface=\"ç­çº¿\"/><a:font script=\"Hant\" typeface=\"æ°ç´°æé«\"/><a:font script=\"Arab\" typeface=\"Arial\"/><a:font script=\"Hebr\" typeface=\"Arial\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"DaunPenh\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Arial\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:minorFont></a:fontScheme><a:fmtScheme name=\"Office\"><a:fillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"110000\"/><a:satMod val=\"105000\"/><a:tint val=\"67000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"105000\"/><a:satMod val=\"103000\"/><a:tint val=\"73000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"105000\"/><a:satMod val=\"109000\"/><a:tint val=\"81000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:satMod val=\"103000\"/><a:lumMod val=\"102000\"/><a:tint val=\"94000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:satMod val=\"110000\"/><a:lumMod val=\"100000\"/><a:shade val=\"100000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"99000\"/><a:satMod val=\"120000\"/><a:shade val=\"78000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill></a:fillStyleLst><a:lnStyleLst><a:ln w=\"6350\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln><a:ln w=\"12700\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln><a:ln w=\"19050\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln></a:lnStyleLst><a:effectStyleLst><a:effectStyle><a:effectLst/></a:effectStyle><a:effectStyle><a:effectLst/></a:effectStyle><a:effectStyle><a:effectLst><a:outerShdw blurRad=\"57150\" dist=\"19050\" dir=\"5400000\" algn=\"ctr\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"63000\"/></a:srgbClr></a:outerShdw></a:effectLst></a:effectStyle></a:effectStyleLst><a:bgFillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:solidFill><a:schemeClr val=\"phClr\"><a:tint val=\"95000\"/><a:satMod val=\"170000\"/></a:schemeClr></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"93000\"/><a:satMod val=\"150000\"/><a:shade val=\"98000\"/><a:lumMod val=\"102000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:tint val=\"98000\"/><a:satMod val=\"130000\"/><a:shade val=\"90000\"/><a:lumMod val=\"103000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:shade val=\"63000\"/><a:satMod val=\"120000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill></a:bgFillStyleLst></a:fmtScheme></a:themeElements><a:objectDefaults/><a:extraClrSchemeLst/><a:extLst><a:ext uri=\"{05A4C25C-085E-4340-85A3-A5531E510DB2}\"><thm15:themeFamily xmlns:thm15=\"http://schemas.microsoft.com/office/thememl/2012/main\" name=\"Office Theme\" id=\"{62F939B6-93AF-4DB8-9C6B-D6C7DFDC589F}\" vid=\"{4A3C46E8-61CC-4603-A589-7422A47A8E4A}\"/></a:ext></a:extLst></a:theme>';\n    }\n\n    public static getStyles(hasNonStringValues: boolean): string {\n        const additionalCellXF = '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" xfId=\"0\" applyNumberFormat=\"1\"/>';\n        const cellXFCount = hasNonStringValues ? 2 : 1;\n        return ExcelStrings.XML_STRING + '<styleSheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac x16r2\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\" xmlns:x16r2=\"http://schemas.microsoft.com/office/spreadsheetml/2015/02/main\"><fonts count=\"1\" x14ac:knownFonts=\"1\"><font><sz val=\"11\"/><color theme=\"1\"/><name val=\"Calibri\"/><family val=\"2\"/><scheme val=\"minor\"/></font></fonts><fills count=\"2\"><fill><patternFill patternType=\"none\"/></fill><fill><patternFill patternType=\"gray125\"/></fill></fills><borders count=\"1\"><border><left/><right/><top/><bottom/><diagonal/></border></borders><cellStyleXfs count=\"1\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\"/></cellStyleXfs><cellXfs count=\"' + cellXFCount + '\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" xfId=\"0\"/>' + additionalCellXF + '</cellXfs><cellStyles count=\"1\"><cellStyle name=\"Normal\" xfId=\"0\" builtinId=\"0\"/></cellStyles><dxfs count=\"0\"/><tableStyles count=\"0\" defaultTableStyle=\"TableStyleMedium2\" defaultPivotStyle=\"PivotStyleLight16\"/><extLst><ext uri=\"{EB79DEF2-80B8-43e5-95BD-54CBDDF9020C}\" xmlns:x14=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/main\"><x14:slicerStyles defaultSlicerStyle=\"SlicerStyleLight1\"/></ext><ext uri=\"{9260A510-F301-46a8-8635-F512D64BE5F5}\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><x15:timelineStyles defaultTimelineStyle=\"TimeSlicerStyleLight1\"/></ext></extLst></styleSheet>';\n    }\n\n    public static getWorkbook(): string {\n        return ExcelStrings.XML_STRING + '<workbook xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x15\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><fileVersion appName=\"xl\" lastEdited=\"6\" lowestEdited=\"6\" rupBuild=\"14420\"/><workbookPr filterPrivacy=\"1\" defaultThemeVersion=\"164011\"/><bookViews><workbookView xWindow=\"0\" yWindow=\"0\" windowWidth=\"22260\" windowHeight=\"12645\"/></bookViews><sheets><sheet name=\"Sheet1\" sheetId=\"1\" r:id=\"rId1\"/></sheets><calcPr calcId=\"162913\"/><extLst><ext uri=\"{140A7094-0E35-4892-8432-C4D2E57EDEB5}\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><x15:workbookPr chartTrackingRefBase=\"1\"/></ext></extLst></workbook>';\n    }\n\n    public static getWorksheetRels(): string {\n        return ExcelStrings.XML_STRING + `<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/table\" Target=\"../tables/table1.xml\"/></Relationships>`;\n    }\n\n    public static getWorkbookRels(hasSharedStrings): string {\n        let retVal = ExcelStrings.XML_STRING + '<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\" Target=\"styles.xml\"/><Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\" Target=\"theme/theme1.xml\"/><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\" Target=\"worksheets/sheet1.xml\"/>';\n\n        if (hasSharedStrings) {\n            retVal += ExcelStrings.SHARED_STRING_RELATIONSHIP;\n        }\n\n        retVal += '</Relationships>';\n\n        return retVal;\n    }\n\n    public static getSheetXML(dimension: string, freezePane: string, cols: string, sheetData: string, hasTable: boolean, hasGroupedRows = false, outlineLevel = 0): string {\n        const tableParts = hasTable ? '<tableParts count=\"1\"><tablePart r:id=\"rId1\"/></tableParts>' : '';\n        const sheetOutlineProp = hasGroupedRows ? '<sheetPr><outlinePr summaryBelow=\"0\"/></sheetPr>' : '';\n        const sOutlineLevel = outlineLevel > 0 ? `outlineLevelRow=\"${outlineLevel}\"` : '';\n        // return ExcelStrings.XML_STRING +\n        //     '<worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\"><dimension ref=\"' + dimension + '\"/><sheetViews><sheetView tabSelected=\"1\" workbookViewId=\"0\">' + freezePane + '</sheetView></sheetViews><sheetFormatPr defaultRowHeight=\"15\" x14ac:dyDescent=\"0.25\"/>' + cols + sheetData + '<pageMargins left=\"0.7\" right=\"0.7\" top=\"0.75\" bottom=\"0.75\" header=\"0.3\" footer=\"0.3\"/>' + tableParts + '</worksheet>';\n\n        return `${ExcelStrings.XML_STRING}\n<worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\">\n${sheetOutlineProp}\n<dimension ref=\"${dimension}\"/>\n<sheetViews><sheetView tabSelected=\"1\" workbookViewId=\"0\">${freezePane}</sheetView></sheetViews>\n<sheetFormatPr defaultRowHeight=\"15\" ${sOutlineLevel} x14ac:dyDescent=\"0.25\"/>\n${cols}\n${sheetData}\n<pageMargins left=\"0.7\" right=\"0.7\" top=\"0.75\" bottom=\"0.75\" header=\"0.3\" footer=\"0.3\"/>\n${tableParts}</worksheet>`;\n\n    }\n\n    public static getSharedStringXML(count: number, uniqueCount: number, table: string): string {\n        return ExcelStrings.XML_STRING + '<sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" count=\"' + count + '\" uniqueCount=\"' + uniqueCount + '\">' + table + '</sst>';\n    }\n\n    public static getContentTypesXML(hasSharedStrings: boolean, hasTable: boolean): string {\n        let contentTypes = ExcelStrings.XML_STRING +\n        `<Types xmlns=\"http://schemas.openxmlformats.org/package/2006/content-types\\\">\n            <Default Extension=\"rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\"/>\n            <Default Extension=\"xml\" ContentType=\"application/xml\"/>\n            <Override PartName=\"/xl/workbook.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\"/>\n            <Override PartName=\"/xl/worksheets/sheet1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\"/>\n            <Override PartName=\"/xl/theme/theme1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.theme+xml\"/>\n            <Override PartName=\"/xl/styles.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\"/>\n            <Override PartName=\"/docProps/core.xml\" ContentType=\"application/vnd.openxmlformats-package.core-properties+xml\"/>\n            <Override PartName=\"/docProps/app.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.extended-properties+xml\"/>`;\n\n        contentTypes += hasSharedStrings ?\n        `\t<Override PartName=\"/xl/sharedStrings.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml\"/>` : '';\n\n        contentTypes += hasTable ?\n            `<Override PartName=\"/xl/tables/table1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml\"/>` : '';\n        contentTypes += `</Types>`;\n\n        return contentTypes;\n    }\n\n    public static getTablesXML(dimension: string, tableColumns: string, sort: string): string {\n        return `${ExcelStrings.XML_STRING}<table xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" id=\"1\" name=\"Table1\" displayName=\"Table1\" ref=\"${dimension}\" totalsRowShown=\"0\">\n    <autoFilter ref=\"${dimension}\"/>${sort}${tableColumns}<tableStyleInfo name=\"TableStyleMedium2\" showFirstColumn=\"0\" showLastColumn=\"0\" showRowStripes=\"1\" showColumnStripes=\"0\"/>\n</table>`;\n    }\n    /* tslint:enable max-line-length */\n\n    public static getExcelColumn(index: number): string {\n        // Returns the excel column name for given 0-based index\n        // For example 27 should return \"AB\"\n        let returnString = '';\n        while (index >= 0) {\n            const char = index % 26;\n            returnString = String.fromCharCode(65 + char) + returnString;\n            index = Math.floor(index / 26) - 1;\n        }\n        return returnString;\n    }\n}\n","import { IExcelFile } from './excel-interfaces';\nimport { ExcelStrings } from './excel-strings';\nimport { WorksheetData } from './worksheet-data';\n\nimport * as JSZip from 'jszip/dist/jszip';\n\n/**\n * @hidden\n */\nexport class RootRelsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('.rels', ExcelStrings.getRels());\n    }\n}\n\n/**\n * @hidden\n */\nexport class AppFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('app.xml', ExcelStrings.getApp());\n    }\n}\n\n/**\n * @hidden\n */\nexport class CoreFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('core.xml', ExcelStrings.getCore());\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorkbookRelsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const hasSharedStrings = worksheetData.isEmpty === false;\n        folder.file('workbook.xml.rels', ExcelStrings.getWorkbookRels(hasSharedStrings));\n    }\n}\n\n/**\n * @hidden\n */\nexport class ThemeFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('theme1.xml', ExcelStrings.getTheme());\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorksheetFile implements IExcelFile {\n    private static MIN_WIDTH = 8.34;\n\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const sheetData = [];\n        const cols = [];\n        let dimension: string;\n        const dictionary = worksheetData.dataDictionary;\n        let freezePane = '';\n        let maxOutlineLevel = 0;\n\n        if (worksheetData.isEmpty) {\n            sheetData.push('<sheetData/>');\n            dimension = 'A1';\n        } else {\n            sheetData.push('<sheetData>');\n            const height =  worksheetData.options.rowHeight;\n            const rowHeight = height ? ' ht=\"' + height + '\" customHeight=\"1\"' : '';\n\n            sheetData.push(`<row r=\"1\"${rowHeight}>`);\n            for (let i = 0; i < worksheetData.columnCount; i++) {\n                const column = ExcelStrings.getExcelColumn(i) + 1;\n                const value = dictionary.saveValue(worksheetData.keys[i], i, true);\n                sheetData.push(`<c r=\"${column}\" t=\"s\"><v>${value}</v></c>`);\n            }\n            sheetData.push('</row>');\n\n            for (let i = 1; i < worksheetData.rowCount; i++) {\n                if (!worksheetData.isTreeGridData) {\n                    sheetData.push(`<row r=\"${(i + 1)}\"${rowHeight}>`);\n                } else {\n                    const rowData = worksheetData.data[i - 1].originalRowData;\n                    const sCollapsed = (!rowData.expanded) ? '' : (rowData.expanded === true) ? '' : ` collapsed=\"1\"`;\n                    const sHidden = (rowData.parent && this.hasCollapsedParent(rowData)) ? ` hidden=\"1\"` : '';\n                    const rowOutlineLevel = rowData.level ? rowData.level : 0;\n                    const sOutlineLevel = rowOutlineLevel > 0 ? ` outlineLevel=\"${rowOutlineLevel}\"` : '';\n                    maxOutlineLevel = maxOutlineLevel < rowOutlineLevel ? rowOutlineLevel : maxOutlineLevel;\n\n                    sheetData.push(`<row r=\"${(i + 1)}\"${rowHeight}${sOutlineLevel}${sCollapsed}${sHidden}>`);\n                }\n                for (let j = 0; j < worksheetData.columnCount; j++) {\n                    const cellData = WorksheetFile.getCellData(worksheetData, i, j);\n                    sheetData.push(cellData);\n                }\n                sheetData.push('</row>');\n            }\n            sheetData.push('</sheetData>');\n            dimension = 'A1:' + ExcelStrings.getExcelColumn(worksheetData.columnCount - 1) + worksheetData.rowCount;\n\n            cols.push('<cols>');\n\n            for (let i = 0; i < worksheetData.columnCount; i++) {\n                const width = dictionary.columnWidths[i];\n                // Use the width provided in the options if it exists\n                const widthInTwips = worksheetData.options.columnWidth ?\n                                    worksheetData.options.columnWidth :\n                                    Math.max(((width / 96) * 14.4), WorksheetFile.MIN_WIDTH);\n\n                cols.push(`<col min=\"${(i + 1)}\" max=\"${(i + 1)}\" width=\"${widthInTwips}\" customWidth=\"1\"/>`);\n            }\n\n            cols.push('</cols>');\n\n            if (worksheetData.indexOfLastPinnedColumn !== -1 &&\n                !worksheetData.options.ignorePinning &&\n                !worksheetData.options.ignoreColumnsOrder) {\n                const frozenColumnCount = worksheetData.indexOfLastPinnedColumn + 1;\n                const firstCell = ExcelStrings.getExcelColumn(frozenColumnCount) + '1';\n                freezePane = `<pane xSplit=\"${frozenColumnCount}\" topLeftCell=\"${firstCell}\" activePane=\"topRight\" state=\"frozen\"/>`;\n            }\n        }\n        const hasTable = !worksheetData.isEmpty && worksheetData.options.exportAsTable;\n\n        folder.file('sheet1.xml',\n                    ExcelStrings.getSheetXML(dimension, freezePane, cols.join(''), sheetData.join(''), hasTable,\n                    worksheetData.isTreeGridData, maxOutlineLevel));\n    }\n\n    private hasCollapsedParent(rowData) {\n        let result = !rowData.parent.expanded;\n        while (rowData.parent) {\n            result = result || !rowData.parent.expanded;\n            rowData = rowData.parent;\n        }\n\n        return result;\n    }\n    /* tslint:disable member-ordering */\n    private static getCellData(worksheetData: WorksheetData, row: number, column: number): string {\n        const dictionary = worksheetData.dataDictionary;\n        const columnName = ExcelStrings.getExcelColumn(column) + (row + 1);\n        const columnHeader = worksheetData.keys[column];\n\n        const rowData = worksheetData.data[row - 1].rowData;\n\n        const cellValue = worksheetData.isSpecialData ? rowData : rowData[columnHeader];\n\n        if (cellValue === undefined || cellValue === null) {\n            return `<c r=\"${columnName}\" s=\"1\"/>`;\n        } else {\n            const savedValue = dictionary.saveValue(cellValue, column, false);\n            const isSavedAsString = savedValue !== -1;\n\n            const value = isSavedAsString ? savedValue : cellValue;\n            const type = isSavedAsString ? ` t=\"s\"` : '';\n            const format = isSavedAsString ? '' : ` s=\"1\"`;\n\n            return `<c r=\"${columnName}\"${type}${format}><v>${value}</v></c>`;\n        }\n    }\n    /* tslint:enable member-ordering */\n}\n\n/**\n * @hidden\n */\nexport class StyleFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('styles.xml', ExcelStrings.getStyles(worksheetData.dataDictionary && worksheetData.dataDictionary.hasNonStringValues));\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorkbookFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('workbook.xml', ExcelStrings.getWorkbook());\n    }\n}\n\n/**\n * @hidden\n */\nexport class ContentTypesFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('[Content_Types].xml', ExcelStrings.getContentTypesXML(!worksheetData.isEmpty, worksheetData.options.exportAsTable));\n    }\n}\n\n/**\n * @hidden\n */\nexport class SharedStringsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const dict = worksheetData.dataDictionary;\n        const sortedValues = dict.getKeys();\n        const sharedStrings = new Array<string>(sortedValues.length);\n\n        for (const value of sortedValues) {\n            sharedStrings[dict.getSanitizedValue(value)] = '<si><t>' + value + '</t></si>';\n        }\n\n        folder.file('sharedStrings.xml', ExcelStrings.getSharedStringXML(\n                        dict.stringsCount,\n                        sortedValues.length,\n                        sharedStrings.join(''))\n                    );\n    }\n}\n\n/**\n * @hidden\n */\nexport class TablesFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const columnCount = worksheetData.columnCount;\n        const lastColumn = ExcelStrings.getExcelColumn(columnCount - 1) + worksheetData.rowCount;\n        const dimension = 'A1:' + lastColumn;\n        const values = worksheetData.keys;\n        let sortString = '';\n\n        let tableColumns = '<tableColumns count=\"' + columnCount + '\">';\n        for (let i = 0; i < columnCount; i++) {\n            const value =  values[i];\n            tableColumns += '<tableColumn id=\"' + (i + 1) + '\" name=\"' + value + '\"/>';\n        }\n\n        tableColumns += '</tableColumns>';\n\n        if (worksheetData.sort) {\n            const sortingExpression = worksheetData.sort;\n            const sc = ExcelStrings.getExcelColumn(values.indexOf(sortingExpression.fieldName));\n            const dir = sortingExpression.dir - 1;\n            sortString = `<sortState ref=\"A2:${lastColumn}\"><sortCondition descending=\"${dir}\" ref=\"${sc}1:${sc}15\"/></sortState>`;\n        }\n\n        folder.file('table1.xml', ExcelStrings.getTablesXML(dimension, tableColumns, sortString));\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorksheetRelsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('sheet1.xml.rels', ExcelStrings.getWorksheetRels());\n    }\n}\n","import {\n    ExcelFileTypes,\n    ExcelFolderTypes\n} from './excel-enums';\n\nimport { IExcelFolder } from './excel-interfaces';\nimport { WorksheetData } from './worksheet-data';\n\n/** @hidden */\nexport class RootExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  '';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.ContentTypesFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [\n            ExcelFolderTypes.RootRelsExcelFolder,\n            ExcelFolderTypes.DocPropsExcelFolder,\n            ExcelFolderTypes.XLExcelFolder\n        ];\n    }\n}\n\n/** @hidden */\nexport class RootRelsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  '_rels';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.RootRelsFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class DocPropsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'docProps';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [\n            ExcelFileTypes.AppFile,\n            ExcelFileTypes.CoreFile\n        ];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class XLExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'xl';\n    }\n\n    childFiles(data: WorksheetData) {\n        const retVal = [\n            ExcelFileTypes.StyleFile,\n            ExcelFileTypes.WorkbookFile\n        ];\n\n        if (!data.isEmpty) {\n            retVal.push(ExcelFileTypes.SharedStringsFile);\n        }\n\n        return retVal;\n    }\n\n    childFolders(data: WorksheetData) {\n        const retVal = [\n            ExcelFolderTypes.XLRelsExcelFolder,\n            ExcelFolderTypes.ThemeExcelFolder,\n            ExcelFolderTypes.WorksheetsExcelFolder\n        ];\n\n        if (!data.isEmpty && data.options.exportAsTable) {\n            retVal.push(ExcelFolderTypes.TablesExcelFolder);\n        }\n\n        return retVal;\n    }\n}\n\n/** @hidden */\nexport class XLRelsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  '_rels';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.WorkbookRelsFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class ThemeExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'theme';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.ThemeFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class WorksheetsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'worksheets';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.WorksheetFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return data.isEmpty || !data.options.exportAsTable ? [] : [ExcelFolderTypes.WorksheetsRelsExcelFolder];\n    }\n}\n\n/** @hidden */\nexport class TablesExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return 'tables';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.TablesFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class WorksheetsRelsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return '_rels';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.WorksheetRelsFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n","import {\n    ExcelFileTypes,\n    ExcelFolderTypes\n} from './excel-enums';\n\nimport {\n    AppFile,\n    ContentTypesFile,\n    CoreFile,\n    RootRelsFile,\n    SharedStringsFile,\n    StyleFile,\n    TablesFile,\n    ThemeFile,\n    WorkbookFile,\n    WorkbookRelsFile,\n    WorksheetFile,\n    WorksheetRelsFile\n} from './excel-files';\n\nimport {\n    DocPropsExcelFolder,\n    RootExcelFolder,\n    RootRelsExcelFolder,\n    TablesExcelFolder,\n    ThemeExcelFolder,\n    WorksheetsExcelFolder,\n    WorksheetsRelsExcelFolder,\n    XLExcelFolder,\n    XLRelsExcelFolder\n} from './excel-folders';\n\nimport {\n    IExcelFile,\n    IExcelFolder\n} from './excel-interfaces';\n\n/** @hidden */\nexport class ExcelElementsFactory {\n\n    public static getExcelFolder(type: ExcelFolderTypes): IExcelFolder {\n        switch (type) {\n            case ExcelFolderTypes.RootExcelFolder:\n                return new RootExcelFolder();\n            case ExcelFolderTypes.RootRelsExcelFolder:\n                return new RootRelsExcelFolder();\n            case ExcelFolderTypes.DocPropsExcelFolder:\n                return new DocPropsExcelFolder();\n            case ExcelFolderTypes.XLExcelFolder:\n                return new XLExcelFolder();\n            case ExcelFolderTypes.XLRelsExcelFolder:\n                return new XLRelsExcelFolder();\n            case ExcelFolderTypes.ThemeExcelFolder:\n                return new ThemeExcelFolder();\n            case ExcelFolderTypes.WorksheetsExcelFolder:\n                return  new WorksheetsExcelFolder();\n            case ExcelFolderTypes.WorksheetsRelsExcelFolder:\n                return new WorksheetsRelsExcelFolder();\n            case ExcelFolderTypes.TablesExcelFolder:\n                return new TablesExcelFolder();\n            default:\n                throw new Error('Unknown excel folder type!');\n        }\n    }\n\n    public static getExcelFile(type: ExcelFileTypes): IExcelFile {\n        switch (type) {\n            case ExcelFileTypes.RootRelsFile:\n                return  new RootRelsFile();\n            case ExcelFileTypes.AppFile:\n                return  new AppFile();\n            case ExcelFileTypes.CoreFile:\n                return new CoreFile();\n            case ExcelFileTypes.WorkbookRelsFile:\n                return new WorkbookRelsFile();\n            case ExcelFileTypes.ThemeFile:\n                return new ThemeFile();\n            case ExcelFileTypes.WorksheetFile:\n                return new WorksheetFile();\n            case ExcelFileTypes.StyleFile:\n                return new StyleFile();\n            case ExcelFileTypes.WorkbookFile:\n                return new WorkbookFile();\n            case ExcelFileTypes.ContentTypesFile:\n                return new ContentTypesFile();\n            case ExcelFileTypes.SharedStringsFile:\n                return new SharedStringsFile();\n            case ExcelFileTypes.WorksheetRelsFile:\n                return new WorksheetRelsFile();\n            case ExcelFileTypes.TablesFile:\n                return new TablesFile();\n            default:\n                throw Error('Unknown excel file type!');\n        }\n    }\n}\n","import { ExportUtilities } from '../exporter-common/export-utilities';\n\n/** @hidden */\nexport class WorksheetDataDictionary {\n    private static DEFAULT_FONT = '11pt Calibri';\n    private static TEXT_PADDING = 5;\n\n    private _dictionary: any;\n    private _widthsDictionary: any;\n\n    private _sortedKeysByValue: string[];\n    private _sortedKeysByValueAreValid: boolean;\n\n    private _keys: string[];\n    private _keysAreValid: boolean;\n\n    private _counter: number;\n    private _calculateColumnWidth: boolean;\n    private _columnWidths: number[];\n    private _context: any;\n\n    private _columnTypeInfo: boolean[];\n    public hasNonStringValues = false;\n\n    public stringsCount: number;\n\n    constructor(columnCount: number, columnWidth: number) {\n        this._dictionary = {};\n        this._widthsDictionary = {};\n        this._counter = 0;\n        this.dirtyKeyCollections();\n\n        this._calculateColumnWidth = !columnWidth;\n        this._columnWidths = new Array<number>(columnCount);\n        this._columnTypeInfo = new Array<boolean>(columnCount);\n\n        if (!this._calculateColumnWidth) {\n            this._columnWidths.fill(columnWidth);\n        }\n\n        this.stringsCount = 0;\n    }\n\n    public get columnWidths() {\n        return this._columnWidths;\n    }\n\n    public saveValue(value: any, column: number, isHeader: boolean): number {\n        if (this._columnTypeInfo[column] === undefined && isHeader === false) {\n            this._columnTypeInfo[column] = typeof value === 'string' ||\n                                            typeof value === 'boolean' ||\n                                            value instanceof Date;\n        }\n\n        let sanitizedValue = '';\n        const isSavedAsString = this._columnTypeInfo[column] || isHeader;\n\n        if (isSavedAsString) {\n            sanitizedValue = this.sanitizeValue(value);\n\n            if (this._dictionary[sanitizedValue] === undefined) {\n                this._dictionary[sanitizedValue] = this._counter++;\n                this.dirtyKeyCollections();\n            }\n\n            this.stringsCount ++;\n        } else {\n            this.hasNonStringValues = true;\n        }\n\n        if (this._calculateColumnWidth) {\n            const width = this.getTextWidth(value);\n            const maxWidth = Math.max(this._columnWidths[column] || 0, width);\n            this._columnWidths[column] = maxWidth;\n        }\n\n        return isSavedAsString ? this.getSanitizedValue(sanitizedValue) : -1;\n    }\n\n    public getValue(value: string): number {\n        return this.getSanitizedValue(this.sanitizeValue(value));\n    }\n\n    public getSanitizedValue(sanitizedValue: string): number {\n        return this._dictionary[sanitizedValue];\n    }\n\n    public getKeys(): string[] {\n        if (!this._keysAreValid) {\n            this._keys = Object.keys(this._dictionary);\n            this._keysAreValid = true;\n        }\n\n        return this._keys;\n    }\n\n    private getTextWidth(value: any): number {\n        if (this._widthsDictionary[value] === undefined) {\n            const context = this.getContext();\n            const metrics = context.measureText(value);\n            this._widthsDictionary[value] = metrics.width + WorksheetDataDictionary.TEXT_PADDING;\n        }\n\n        return this._widthsDictionary[value];\n    }\n\n    private getContext(): any {\n        if (!this._context) {\n            const canvas = document.createElement('canvas');\n            this._context = canvas.getContext('2d');\n            this._context.font = WorksheetDataDictionary.DEFAULT_FONT;\n        }\n\n        return this._context;\n    }\n\n    private sanitizeValue(value: any): string {\n        if (ExportUtilities.hasValue(value) === false) {\n            return '';\n        } else {\n            const stringValue = String(value);\n            return stringValue.replace(/&/g, '&amp;')\n                            .replace(/</g, '&lt;')\n                            .replace(/>/g, '&gt;')\n                            .replace(/\"/g, '&quot;')\n                            .replace(/'/g, '&apos;');\n        }\n    }\n\n    private dirtyKeyCollections(): void {\n        this._keysAreValid = false;\n    }\n}\n","import { ExportUtilities } from '../exporter-common/export-utilities';\nimport { IgxExcelExporterOptions } from './excel-exporter-options';\nimport { WorksheetDataDictionary } from './worksheet-data-dictionary';\n\n/** @hidden */\nexport class WorksheetData {\n    private _columnCount: number;\n    private _rowCount: number;\n    private _dataDictionary: WorksheetDataDictionary;\n    private _keys: string[];\n    private _isSpecialData: boolean;\n\n    constructor(private _data: any[], public options: IgxExcelExporterOptions, public indexOfLastPinnedColumn,\n                public sort: any, public isTreeGridData = false) {\n        this.initializeData();\n    }\n\n    public get data() {\n        return this._data;\n    }\n\n    public get columnCount(): number {\n        return this._columnCount;\n    }\n\n    public get rowCount(): number {\n        return this._rowCount;\n    }\n\n    public get isEmpty() {\n        return !this.rowCount || !this._columnCount;\n    }\n\n    public get keys(): string[] {\n        return this._keys;\n    }\n\n    public get isSpecialData(): boolean {\n        return this._isSpecialData;\n    }\n\n    public get dataDictionary() {\n        return this._dataDictionary;\n    }\n\n    private initializeData() {\n        if (!this._data || this._data.length === 0) {\n            return;\n        }\n\n        const actualData = this._data.map((item) => item.rowData);\n\n        this._keys = ExportUtilities.getKeysFromData(actualData);\n        if (this._keys.length === 0) {\n            return;\n        }\n\n        this._isSpecialData = ExportUtilities.isSpecialData(actualData);\n\n        this._columnCount = this._keys.length;\n        this._rowCount = this._data.length + 1;\n\n        this._dataDictionary = new WorksheetDataDictionary(this._columnCount, this.options.columnWidth);\n    }\n}\n","import * as JSZip from 'jszip/dist/jszip';\n\nimport { EventEmitter, Injectable, Output } from '@angular/core';\nimport { ExcelElementsFactory } from './excel-elements-factory';\nimport { ExcelFolderTypes } from './excel-enums';\nimport { IgxExcelExporterOptions } from './excel-exporter-options';\nimport { IExcelFolder } from './excel-interfaces';\nimport { IgxBaseExporter } from '../exporter-common/base-export-service';\nimport { ExportUtilities } from '../exporter-common/export-utilities';\nimport { WorksheetData } from './worksheet-data';\nimport { IBaseEventArgs } from '../../core/utils';\n\nexport interface IExcelExportEndedEventArgs extends IBaseEventArgs {\n    xlsx: JSZip;\n}\n\n/**\n * **Ignite UI for Angular Excel Exporter Service** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/exporter_excel.html)\n *\n * The Ignite UI for Angular Excel Exporter service can export data in MicrosoftÂ® ExcelÂ® format from both raw data\n * (array) or from an `IgxGrid`.\n *\n * Example:\n * ```typescript\n * public localData = [\n *   { Name: \"Eric Ridley\", Age: \"26\" },\n *   { Name: \"Alanis Brook\", Age: \"22\" },\n *   { Name: \"Jonathan Morris\", Age: \"23\" }\n * ];\n *\n * constructor(private excelExportService: IgxExcelExporterService) {\n * }\n *\n * this.excelExportService.exportData(this.localData, new IgxExcelExporterOptions(\"FileName\"));\n * ```\n */\n@Injectable()\nexport class IgxExcelExporterService extends IgxBaseExporter {\n\n    private static ZIP_OPTIONS = { compression: 'DEFLATE', type: 'base64' };\n    private _xlsx: JSZip;\n\n    /**\n     * This event is emitted when the export process finishes.\n     * ```typescript\n     * this.exporterService.onExportEnded.subscribe((args: IExcelExportEndedEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxExcelExporterService\n     */\n    @Output()\n    public onExportEnded = new EventEmitter<IExcelExportEndedEventArgs>();\n\n    private static populateFolder(folder: IExcelFolder, zip: JSZip, worksheetData: WorksheetData): any {\n        for (const childFolder of folder.childFolders(worksheetData)) {\n            const folderIntance = ExcelElementsFactory.getExcelFolder(childFolder);\n            const zipFolder = zip.folder(folderIntance.folderName);\n            IgxExcelExporterService.populateFolder(folderIntance, zipFolder, worksheetData);\n        }\n\n        for (const childFile of folder.childFiles(worksheetData)) {\n            const fileInstance = ExcelElementsFactory.getExcelFile(childFile);\n            fileInstance.writeElement(zip, worksheetData);\n        }\n    }\n\n    protected exportDataImplementation(data: any[], options: IgxExcelExporterOptions): void {\n        if (this._isTreeGrid) {\n            let maxLevel = 0;\n            data.forEach((r) => {\n                maxLevel = Math.max(maxLevel, r.originalRowData.level);\n            });\n            if (maxLevel > 7) {\n                throw Error('Can create an outline of up to eight levels!');\n            }\n        }\n\n        const worksheetData = new WorksheetData(data, options, this._indexOfLastPinnedColumn, this._sort, this._isTreeGrid);\n        this._xlsx = new JSZip();\n\n        const rootFolder = ExcelElementsFactory.getExcelFolder(ExcelFolderTypes.RootExcelFolder);\n        IgxExcelExporterService.populateFolder(rootFolder, this._xlsx, worksheetData);\n\n        this._xlsx.generateAsync(IgxExcelExporterService.ZIP_OPTIONS).then((result) => {\n            this.saveFile(result, options.fileName);\n\n            this.onExportEnded.emit({ xlsx: this._xlsx });\n        });\n    }\n\n    private saveFile(data: string, fileName: string): void {\n        const blob = new Blob([ExportUtilities.stringToArrayBuffer(atob(data))], {\n            type: ''\n        });\n\n        ExportUtilities.saveBlobToFile(blob, fileName);\n    }\n}\n","import { IgxExporterOptionsBase } from '../exporter-common/exporter-options-base';\n\n/**\n * Objects of this class are used to configure the Excel exporting process.\n */\nexport class IgxExcelExporterOptions extends IgxExporterOptionsBase {\n    private _columnWidth: number;\n    private _rowHeight: number;\n\n    /**\n     * Specifies if column pinning should be ignored. If ignoreColumnsOrder is set to true,\n     * this option will always be considered as set to true.\n     * ```typescript\n     * let ignorePinning = this.exportOptions.ignorePinning;\n     * this.exportOptions.ignorePinning = true;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public ignorePinning = false;\n\n    /**\n     * Specifies whether the exported data should be formatted as Excel table. (True by default)\n     * ```typescript\n     * let exportAsTable = this.exportOptions.exportAsTable;\n     * this.exportOptions.exportAsTable = false;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public exportAsTable = true;\n\n    constructor(fileName: string) {\n        super(fileName, '.xlsx');\n    }\n\n    /**\n     * Gets the width of the columns in the exported excel file.\n     * ```typescript\n     * let width = this.exportOptions.columnWidth;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public get columnWidth(): number {\n        return this._columnWidth;\n    }\n\n    /**\n     * Sets the width of the columns in the exported excel file. If left unspecified or 0,\n     * the width of the largest string in the column will be used.\n     * ```typescript\n     * this.exportOptions.columnWidth = 55;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public set columnWidth(value: number) {\n        if (value < 0) {\n            throw Error('Invalid value for column width!');\n        }\n\n        this._columnWidth = value;\n    }\n\n    /**\n     * Gets the height of the rows in the exported excel file.\n     * ```typescript\n     * let height = this.exportOptions.rowHeight;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public get rowHeight(): number {\n        return this._rowHeight;\n    }\n\n    /**\n     * Sets the height of the rows in the exported excel file. If left unspecified or 0,\n     * the default height of the excel rows will be used.\n     * ```typescript\n     * this.exportOptions.rowHeight = 25;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public set rowHeight(value: number) {\n        if (value < 0) {\n            throw Error('Invalid value for row height!');\n        }\n\n        this._rowHeight = value;\n    }\n}\n","import { IPositionStrategy } from './position/IPositionStrategy';\n\nimport { IScrollStrategy } from './scroll';\nimport { AnimationReferenceMetadata, AnimationPlayer } from '@angular/animations';\nimport { ComponentRef, ElementRef, NgZone } from '@angular/core';\nimport { IgxOverlayOutletDirective } from '../../directives/toggle/toggle.directive';\nimport { CancelableEventArgs, CancelableBrowserEventArgs, cloneValue, IBaseEventArgs } from '../../core/utils';\n\nexport enum HorizontalAlignment {\n    Left = -1,\n    Center = -0.5,\n    Right = 0\n}\n\nexport enum VerticalAlignment {\n    Top = -1,\n    Middle = -0.5,\n    Bottom = 0\n}\n\nexport class Point {\n    constructor(public x: number, public y: number) { }\n}\n\nexport interface PositionSettings {\n    /** Attaching target for the component to show */\n    target?: Point | HTMLElement;\n    /** Direction in which the component should show */\n    horizontalDirection?: HorizontalAlignment;\n    /** Direction in which the component should show */\n    verticalDirection?: VerticalAlignment;\n    /** Target's starting point */\n    horizontalStartPoint?: HorizontalAlignment;\n    /** Target's starting point */\n    verticalStartPoint?: VerticalAlignment;\n    /** Animation applied while overlay opens */\n    openAnimation?: AnimationReferenceMetadata;\n    /** Animation applied while overlay closes */\n    closeAnimation?: AnimationReferenceMetadata;\n    /** The size up to which element may shrink when shown in elastic position strategy */\n    minSize?: Size;\n}\n\nexport interface OverlaySettings {\n    /** Position strategy to use with this settings */\n    positionStrategy?: IPositionStrategy;\n    /** Scroll strategy to use with this settings */\n    scrollStrategy?: IScrollStrategy;\n    /** Set if the overlay should be in modal mode */\n    modal?: boolean;\n    /** Set if the overlay should closed on outside click */\n    closeOnOutsideClick?: boolean;\n    /** Set the outlet container to attach the overlay to */\n    outlet?: IgxOverlayOutletDirective | ElementRef;\n    /**\n     * @hidden @internal\n     * Exclude the position strategy target for outside clicks\n     */\n    excludePositionTarget?: boolean;\n}\n\nexport interface OverlayEventArgs extends IBaseEventArgs {\n    /** Id of the overlay generated with `attach()` method */\n    id: string;\n    /** Available when `Type<T>` is provided to the `attach()` method and allows access to the created Component instance */\n    componentRef?: ComponentRef<{}>;\n}\n\nexport interface OverlayCancelableEventArgs extends OverlayEventArgs, CancelableEventArgs {\n}\n\nexport interface OverlayClosingEventArgs extends OverlayEventArgs, CancelableBrowserEventArgs {\n}\n\nexport interface OverlayAnimationEventArgs extends IBaseEventArgs {\n    /** Id of the overlay generated with `attach()` method */\n    id: string;\n    /** Animation player that will play the animation */\n    animationPlayer: AnimationPlayer;\n    /** Type of animation to be played. It should be either 'open' or 'close' */\n    animationType: 'open' | 'close';\n}\n\nexport interface Size {\n    /** Gets or sets the horizontal component of Size */\n    width: number;\n\n    /** Gets or sets the vertical component of Size */\n    height: number;\n}\n\n/** @hidden */\nexport interface OverlayInfo {\n    id?: string;\n    elementRef?: ElementRef;\n    componentRef?: ComponentRef<{}>;\n    settings?: OverlaySettings;\n    initialSize?: Size;\n    hook?: HTMLElement;\n    openAnimationPlayer?: AnimationPlayer;\n    closeAnimationPlayer?: AnimationPlayer;\n    openAnimationInnerPlayer?: any;\n    closeAnimationInnerPlayer?: any;\n    ngZone: NgZone;\n}\n\n/** @hidden */\nexport class Util {\n    /**\n     * @hidden\n     * Calculates the rectangle of target for provided overlay settings. Defaults to 0,0,0,0,0,0 rectangle\n     * if no target is provided\n     * @param settings Overlay settings for which to calculate target rectangle\n     */\n    static getTargetRect(settings: PositionSettings): ClientRect {\n        let targetRect: ClientRect = {\n            bottom: 0,\n            height: 0,\n            left: 0,\n            right: 0,\n            top: 0,\n            width: 0\n        };\n\n        if (settings.target instanceof HTMLElement) {\n            targetRect = (settings.target as HTMLElement).getBoundingClientRect();\n        } else if (settings.target instanceof Point) {\n            const targetPoint = settings.target as Point;\n            targetRect = {\n                bottom: targetPoint.y,\n                height: 0,\n                left: targetPoint.x,\n                right: targetPoint.x,\n                top: targetPoint.y,\n                width: 0\n            };\n        }\n\n        return targetRect;\n    }\n\n    /** @hidden @internal */\n    static getViewportRect(document: Document): ClientRect {\n        const width = document.documentElement.clientWidth;\n        const height = document.documentElement.clientHeight;\n        const scrollPosition = Util.getViewportScrollPosition(document);\n\n        return {\n            top: scrollPosition.y,\n            left: scrollPosition.x,\n            right: scrollPosition.x + width,\n            bottom: scrollPosition.y + height,\n            width: width,\n            height: height,\n        };\n    }\n\n    /** @hidden @internal */\n    static getViewportScrollPosition(document: Document): Point {\n        const documentElement = document.documentElement;\n        const documentRect = documentElement.getBoundingClientRect();\n\n        const horizontalScrollPosition =\n            -documentRect.left || document.body.scrollLeft || window.scrollX || documentElement.scrollLeft || 0;\n        const verticalScrollPosition = -documentRect.top || document.body.scrollTop || window.scrollY || documentElement.scrollTop || 0;\n\n        return new Point(horizontalScrollPosition, verticalScrollPosition);\n    }\n\n    /** @hidden @internal*/\n    static cloneInstance(object) {\n        const clonedObj = Object.assign(Object.create(Object.getPrototypeOf(object)), object);\n        clonedObj.settings = cloneValue(clonedObj.settings);\n        return clonedObj;\n    }\n}\n","import { IPositionStrategy } from './IPositionStrategy';\nimport { PositionSettings, HorizontalAlignment, VerticalAlignment, Size, Util, OverlaySettings } from './../utilities';\nimport { fadeIn, fadeOut } from '../../../animations/main';\n\n/**\n * Positions the element based on the directions passed in trough PositionSettings.\n * These are Top/Middle/Bottom for verticalDirection and Left/Center/Right for horizontalDirection\n */\nexport class GlobalPositionStrategy implements IPositionStrategy {\n    protected _defaultSettings: PositionSettings = {\n        horizontalDirection: HorizontalAlignment.Center,\n        verticalDirection: VerticalAlignment.Middle,\n        horizontalStartPoint: HorizontalAlignment.Center,\n        verticalStartPoint: VerticalAlignment.Middle,\n        openAnimation: fadeIn,\n        closeAnimation: fadeOut,\n        minSize: { width: 0, height: 0 }\n    };\n\n    /** @inheritdoc */\n    public settings: PositionSettings;\n\n    constructor(settings?: PositionSettings) {\n        this.settings = Object.assign({}, this._defaultSettings, settings);\n    }\n\n    /** @inheritdoc */\n    position(contentElement: HTMLElement, size?: Size, document?: Document, initialCall?: boolean): void {\n        contentElement.classList.add('igx-overlay__content--relative');\n        contentElement.parentElement.classList.add('igx-overlay__wrapper--flex');\n        this.setPosition(contentElement, this.settings);\n    }\n\n    protected setPosition(contentElement: HTMLElement, settings: PositionSettings) {\n        switch (this.settings.horizontalDirection) {\n            case HorizontalAlignment.Left:\n                contentElement.parentElement.style.justifyContent = 'flex-start';\n                break;\n            case HorizontalAlignment.Center:\n                contentElement.parentElement.style.justifyContent = 'center';\n                break;\n            case HorizontalAlignment.Right:\n                contentElement.parentElement.style.justifyContent = 'flex-end';\n                break;\n            default:\n                break;\n        }\n\n        switch (this.settings.verticalDirection) {\n            case VerticalAlignment.Top:\n                contentElement.parentElement.style.alignItems = 'flex-start';\n                break;\n            case VerticalAlignment.Middle:\n                contentElement.parentElement.style.alignItems = 'center';\n                break;\n            case VerticalAlignment.Bottom:\n                contentElement.parentElement.style.alignItems = 'flex-end';\n                break;\n            default:\n                break;\n        }\n    }\n\n    /** @inheritdoc */\n    clone(): IPositionStrategy {\n        return Util.cloneInstance(this);\n    }\n}\n\n","import { IScrollStrategy } from './IScrollStrategy';\nimport { IgxOverlayService } from '../overlay';\n\nexport abstract class ScrollStrategy implements IScrollStrategy {\n    constructor(scrollContainer?: HTMLElement) { }\n    /** @inheritdoc */\n    abstract initialize(document: Document, overlayService: IgxOverlayService, id: string);\n\n    /** @inheritdoc */\n    abstract attach(): void;\n\n    /** @inheritdoc */\n    abstract detach(): void;\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\n\n/**\n * Empty scroll strategy. Does nothing.\n */\nexport class NoOpScrollStrategy extends ScrollStrategy {\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n    }\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) { }\n\n    /** @inheritdoc */\n    attach(): void { }\n\n    /** @inheritdoc */\n    detach(): void { }\n}\n","import { isDevMode } from '@angular/core';\n\n/**\n * @hidden\n */\nexport function DeprecateMethod(message: string): MethodDecorator {\n    let isMessageShown = false;\n\n    return function (target: any, key: string, descriptor: PropertyDescriptor) {\n        if (descriptor && descriptor.value) {\n            const originalMethod = descriptor.value;\n\n            descriptor.value = function () {\n                const targetName = typeof target === 'function' ? target.name : target.constructor.name;\n                isMessageShown = showMessage(`${targetName}.${key}: ${message}`, isMessageShown);\n\n                return originalMethod.call(this, arguments);\n            };\n\n            return descriptor;\n        }\n    };\n}\n\n/**\n * @hidden\n */\nexport function DeprecateProperty(message: string): PropertyDecorator {\n    return function(target: any, key: string) {\n        let isMessageShown = false;\n        const messageToDisplay = `${target.constructor.name}.${key}: ${message}`;\n\n        // if the target already has the property defined\n        const originalDescriptor = Object.getOwnPropertyDescriptor(target, key);\n        if (originalDescriptor) {\n            let getter, setter;\n            getter = originalDescriptor.get;\n            setter = originalDescriptor.set;\n\n            if (getter) {\n                originalDescriptor.get = function() {\n                    isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                    return getter.call(this);\n                };\n            }\n\n            if (setter) {\n                originalDescriptor.set = function (value) {\n                    isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                    setter.call(this, value);\n                };\n            }\n\n            return originalDescriptor;\n        }\n\n        // the target doesn't contain a descriptor for that property, so create one\n        // use backing field to set/get the value of the property to ensure there won't be infinite recursive calls\n        const newKey = generateUniqueKey(target, key);\n        Object.defineProperty(target, key, {\n            configurable: true,\n            enumerable: true,\n            set: function(value) {\n                isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                this[newKey] = value;\n            },\n            get: function() {\n                isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                return this[newKey];\n            }\n        });\n    };\n}\n\n/**\n * @hidden\n */\nfunction generateUniqueKey(target: any, key: string): string {\n    let newKey = '_' + key;\n    while (target.hasOwnProperty(newKey)) {\n        newKey = '_' + newKey;\n    }\n\n    return newKey;\n}\n\n/**\n * @hidden\n */\nexport function showMessage(message: string, isMessageShown: boolean): boolean {\n    if (!isMessageShown && isDevMode()) {\n        console.warn(message);\n    }\n\n    return true;\n}\n","import { DOCUMENT } from '@angular/common';\nimport { GlobalPositionStrategy } from './position/global-position-strategy';\nimport { NoOpScrollStrategy } from './scroll/NoOpScrollStrategy';\nimport {\n    OverlaySettings,\n    OverlayEventArgs,\n    OverlayInfo,\n    OverlayAnimationEventArgs,\n    OverlayCancelableEventArgs,\n    OverlayClosingEventArgs\n} from './utilities';\n\nimport {\n    ApplicationRef,\n    ComponentFactory,\n    ComponentFactoryResolver,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Injectable,\n    Injector,\n    Type,\n    OnDestroy,\n    NgModuleRef,\n    NgZone\n} from '@angular/core';\nimport { AnimationBuilder, AnimationReferenceMetadata, AnimationMetadataType, AnimationAnimateRefMetadata } from '@angular/animations';\nimport { fromEvent, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { IAnimationParams } from '../../animations/main';\nimport { showMessage } from '../../core/deprecateDecorators';\n\nlet warningShown = false;\n\n/**\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/overlay_main.html)\n * The overlay service allows users to show components on overlay div above all other elements in the page.\n */\n@Injectable({ providedIn: 'root' })\nexport class IgxOverlayService implements OnDestroy {\n    private _componentId = 0;\n    private _overlayInfos: OverlayInfo[] = [];\n    private _overlayElement: HTMLElement;\n    private _document: Document;\n    private destroy$ = new Subject<boolean>();\n\n    private _defaultSettings: OverlaySettings = {\n        positionStrategy: new GlobalPositionStrategy(),\n        scrollStrategy: new NoOpScrollStrategy(),\n        modal: true,\n        closeOnOutsideClick: true\n    };\n\n    /**\n     * Emitted before the component is opened.\n     * ```typescript\n     * onOpening(event: OverlayCancelableEventArgs){\n     *     const onOpening = event;\n     * }\n     * ```\n     */\n    public onOpening = new EventEmitter<OverlayCancelableEventArgs>();\n\n    /**\n     * Emitted after the component is opened and all animations are finished.\n     * ```typescript\n     * onOpened(event: OverlayEventArgs){\n     *     const onOpened = event;\n     * }\n     * ```\n     */\n    public onOpened = new EventEmitter<OverlayEventArgs>();\n\n    /**\n     * Emitted before the component is closed.\n     * ```typescript\n     * onClosing(event: OverlayCancelableEventArgs){\n     *     const onClosing = event;\n     * }\n     * ```\n     */\n    public onClosing = new EventEmitter<OverlayClosingEventArgs>();\n\n    /**\n     * Emitted after the component is closed and all animations are finished.\n     * ```typescript\n     * onClosed(event: OverlayEventArgs){\n     *     const onClosed = event;\n     * }\n     * ```\n     */\n    public onClosed = new EventEmitter<OverlayEventArgs>();\n\n    /**\n     * Emitted before animation is started\n     * ```typescript\n     * onAnimation(event: OverlayAnimationEventArgs){\n     *     const onAnimation = event;\n     * }\n     * ```\n     */\n    public onAnimation = new EventEmitter<OverlayAnimationEventArgs>();\n\n    constructor(\n        private _factoryResolver: ComponentFactoryResolver,\n        private _appRef: ApplicationRef,\n        private _injector: Injector,\n        private builder: AnimationBuilder,\n        @Inject(DOCUMENT) private document: any,\n        private _zone: NgZone) {\n        this._document = <Document>this.document;\n    }\n\n    /**\n     * Generates Id. Provide this Id when call `show(id, settings?)` method\n     * @param component ElementRef to show in overlay\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     * @returns Id of the created overlay. Valid until `onClosed` is emitted.\n     */\n    attach(element: ElementRef, settings?: OverlaySettings): string;\n    /**\n     * Generates Id. Provide this Id when call `show(id, settings?)` method\n     * @param component Component Type to show in overlay\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     * @param moduleRef Optional reference to an object containing Injector and ComponentFactoryResolver\n     * that can resolve the component's factory\n     * @returns Id of the created overlay. Valid until `onClosed` is emitted.\n     */\n    attach(component: Type<any>, settings?: OverlaySettings,\n        moduleRef?: Pick<NgModuleRef<any>, 'injector' | 'componentFactoryResolver'>): string;\n    attach(component: ElementRef | Type<any>, settings?: OverlaySettings,\n        moduleRef?: Pick<NgModuleRef<any>, 'injector' | 'componentFactoryResolver'>): string {\n        let info: OverlayInfo;\n        info = this.getOverlayInfo(component, moduleRef);\n\n        //  if there is no info most probably wrong type component was provided and we just go out\n        if (!info) {\n            return null;\n        }\n\n        info.id = (this._componentId++).toString();\n        settings = Object.assign({}, this._defaultSettings, settings);\n        info.settings = settings;\n        this._overlayInfos.push(info);\n        return info.id;\n    }\n\n    /**\n     * Shows the overlay for provided id.\n     * @param id Id to show overlay for\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     */\n    show(id: string, settings?: OverlaySettings): string;\n    /**\n     * Shows the provided component.\n     * @param component ElementRef or Component Type to show in overlay\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     * @returns Id of the created overlay. Valid until `onClosed` is emitted.\n     * ```typescript\n     * this.overlay.show(element, settings);\n     * ```\n     * @deprecated Use `attach(component)` to obtain an Id. Then `show(id, settings?)` with provided Id.\n     */\n    // tslint:disable-next-line:unified-signatures\n    show(component: ElementRef | Type<any>, settings?: OverlaySettings): string;\n    show(compOrId: string | ElementRef | Type<any>, settings?: OverlaySettings): string {\n        let info: OverlayInfo;\n        let id: string;\n        if (typeof compOrId === 'string') {\n            id = compOrId;\n            info = this.getOverlayById(compOrId);\n            if (!info) {\n                console.warn('igxOverlay.show was called with wrong id: ' + compOrId);\n                return null;\n            }\n        } else {\n            warningShown = showMessage(\n                '`show(component, settings?)` overload is deprecated. Use `attach(component)` to obtain an Id.' +\n                'Then `show(id, settings?)` with provided Id.',\n                warningShown);\n            id = (this._componentId++).toString();\n            info = this.getOverlayInfo(compOrId);\n\n            //  if there is no info most probably wrong type component was provided and we just go out\n            if (!info) {\n                return;\n            }\n\n            info.id = id;\n        }\n\n        settings = Object.assign({}, this._defaultSettings, info.settings, settings);\n        info.settings = settings;\n\n        this._show(info);\n        return id;\n    }\n\n    /**\n     * Hides the component with the ID provided as a parameter.\n     * ```typescript\n     * this.overlay.hide(id);\n     * ```\n     */\n    hide(id: string) {\n        this._hide(id);\n    }\n\n    /**\n     * Hides all the components and the overlay.\n     * ```typescript\n     * this.overlay.hideAll();\n     * ```\n     */\n    hideAll() {\n        // since overlays are removed on animation done, que all hides\n        for (let i = this._overlayInfos.length; i--;) {\n            this.hide(this._overlayInfos[i].id);\n        }\n    }\n\n    /**\n     * Repositions the component with ID provided as a parameter.\n     * ```typescript\n     * this.overlay.reposition(id);\n     * ```\n     */\n    reposition(id: string) {\n        const overlayInfo = this.getOverlayById(id);\n        if (!overlayInfo || !overlayInfo.settings) {\n            console.error('Wrong id provided in overlay.reposition method. Id: ' + id);\n            return;\n        }\n\n        const contentElement = overlayInfo.elementRef.nativeElement.parentElement;\n        const contentElementRect = contentElement.getBoundingClientRect();\n        overlayInfo.settings.positionStrategy.position(\n            contentElement,\n            {\n                width: contentElementRect.width,\n                height: contentElementRect.height\n            },\n            this._document,\n            false);\n    }\n\n    private _show(info: OverlayInfo) {\n        const eventArgs: OverlayCancelableEventArgs = { id: info.id, componentRef: info.componentRef, cancel: false };\n        this.onOpening.emit(eventArgs);\n        if (eventArgs.cancel) {\n            if (info.componentRef) {\n                this._appRef.detachView(info.componentRef.hostView);\n                info.componentRef.destroy();\n            }\n\n            return;\n        }\n\n        //  if there is no close animation player, or there is one but it is not started yet we are in clear\n        //  opening. Otherwise, if there is close animation player playing animation now we should not setup\n        //  overlay this is already done\n        if (!info.closeAnimationPlayer || (info.closeAnimationPlayer && !info.closeAnimationPlayer.hasStarted())) {\n            const elementRect = info.elementRef.nativeElement.getBoundingClientRect();\n            info.initialSize = { width: elementRect.width, height: elementRect.height };\n            info.hook = this.placeElementHook(info.elementRef.nativeElement);\n\n            this.moveElementToOverlay(info);\n            if (info.componentRef) {\n                info.componentRef.changeDetectorRef.detectChanges();\n            }\n            this.updateSize(info);\n            if (this._overlayInfos.indexOf(info) === -1) {\n                this._overlayInfos.push(info);\n            }\n\n            info.settings.positionStrategy.position(\n                info.elementRef.nativeElement.parentElement,\n                { width: info.initialSize.width, height: info.initialSize.height },\n                document,\n                true);\n            info.settings.scrollStrategy.initialize(this._document, this, info.id);\n            info.settings.scrollStrategy.attach();\n        }\n\n        this.addOutsideClickListener(info);\n        this.addResizeHandler(info.id);\n\n        if (info.settings.modal) {\n            this.setupModalWrapper(info);\n        }\n\n        if (info.settings.positionStrategy.settings.openAnimation) {\n            this.playOpenAnimation(info);\n        } else {\n            //  to eliminate flickering show the element just before onOpened fire\n            info.elementRef.nativeElement.parentElement.style.visibility = '';\n            this.onOpened.emit({ id: info.id, componentRef: info.componentRef });\n        }\n    }\n\n    private _hide(id: string, event?: Event) {\n        const info: OverlayInfo = this.getOverlayById(id);\n\n        if (!info) {\n            console.warn('igxOverlay.hide was called with wrong id: ' + id);\n            return;\n        }\n\n        const eventArgs = { id, componentRef: info.componentRef, cancel: false, event };\n        this.onClosing.emit(eventArgs);\n        if (eventArgs.cancel) {\n            return;\n        }\n\n        //  TODO: synchronize where these are added/attached and where removed/detached\n        info.settings.scrollStrategy.detach();\n        this.removeOutsideClickListener(info);\n        this.removeResizeHandler(info.id);\n\n        const child: HTMLElement = info.elementRef.nativeElement;\n        if (info.settings.modal) {\n            const parent = child.parentNode.parentNode as HTMLElement;\n            this.applyAnimationParams(parent, info.settings.positionStrategy.settings.closeAnimation);\n            parent.classList.remove('igx-overlay__wrapper--modal');\n            parent.classList.add('igx-overlay__wrapper');\n        }\n\n        if (info.settings.positionStrategy.settings.closeAnimation) {\n            this.playCloseAnimation(info);\n        } else {\n            this.onCloseDone(info);\n        }\n    }\n\n    private getOverlayInfo(component: any, moduleRef?: Pick<NgModuleRef<any>, 'injector' | 'componentFactoryResolver'>): OverlayInfo {\n        const info: OverlayInfo = { ngZone: this._zone };\n        if (component instanceof ElementRef) {\n            info.elementRef = <ElementRef>component;\n        } else {\n            let dynamicFactory: ComponentFactory<{}>;\n            const factoryResolver = moduleRef ? moduleRef.componentFactoryResolver : this._factoryResolver;\n            try {\n                dynamicFactory = factoryResolver.resolveComponentFactory(component);\n            } catch (error) {\n                console.error(error);\n                return null;\n            }\n\n            const injector = moduleRef ? moduleRef.injector : this._injector;\n            const dynamicComponent: ComponentRef<{}> = dynamicFactory.create(injector);\n            this._appRef.attachView(dynamicComponent.hostView);\n\n            // If the element is newly created from a Component, it is wrapped in 'ng-component' tag - we do not want that.\n            const element = dynamicComponent.location.nativeElement;\n            info.elementRef = <ElementRef>{ nativeElement: element };\n            info.componentRef = dynamicComponent;\n        }\n\n        return info;\n    }\n\n    private placeElementHook(element: HTMLElement): HTMLElement {\n        if (!element.parentElement) {\n            return null;\n        }\n\n        const hook = this._document.createElement('div');\n        element.parentElement.insertBefore(hook, element);\n        return hook;\n    }\n\n    private moveElementToOverlay(info: OverlayInfo) {\n        const wrapperElement = this.getWrapperElement();\n        const contentElement = this.getContentElement(wrapperElement, info.settings.modal);\n        this.getOverlayElement(info).appendChild(wrapperElement);\n        const elementScrollTop = info.elementRef.nativeElement.scrollTop;\n        contentElement.appendChild(info.elementRef.nativeElement);\n\n        if (elementScrollTop) {\n            info.elementRef.nativeElement.scrollTop = elementScrollTop;\n        }\n    }\n\n    private getWrapperElement(): HTMLElement {\n        const wrapper: HTMLElement = this._document.createElement('div');\n        wrapper.classList.add('igx-overlay__wrapper');\n        return wrapper;\n    }\n\n    private getContentElement(wrapperElement: HTMLElement, modal: boolean): HTMLElement {\n        const content: HTMLElement = this._document.createElement('div');\n        if (modal) {\n            content.classList.add('igx-overlay__content--modal');\n            content.addEventListener('click', (ev: Event) => {\n                ev.stopPropagation();\n            });\n        } else {\n            content.classList.add('igx-overlay__content');\n        }\n\n        content.addEventListener('scroll', (ev: Event) => {\n            ev.stopPropagation();\n        });\n\n        //  hide element to eliminate flickering. Show the element exactly before animation starts\n        content.style.visibility = 'hidden';\n\n        wrapperElement.appendChild(content);\n        return content;\n    }\n\n    private getOverlayElement(info: OverlayInfo): HTMLElement {\n        if (info.settings.outlet) {\n            return info.settings.outlet.nativeElement;\n        }\n        if (!this._overlayElement) {\n            this._overlayElement = this._document.createElement('div');\n            this._overlayElement.classList.add('igx-overlay');\n            this._document.body.appendChild(this._overlayElement);\n        }\n\n        return this._overlayElement;\n    }\n\n    private updateSize(info: OverlayInfo) {\n        if (info.componentRef) {\n            //  if we are positioning component this is first time it gets visible\n            //  and we can finally get its size\n            info.initialSize = info.elementRef.nativeElement.getBoundingClientRect();\n        }\n\n        // set content div width only if element to show has width\n        if (info.initialSize.width !== 0) {\n            info.elementRef.nativeElement.parentElement.style.width = info.initialSize.width + 'px';\n        }\n    }\n\n    private setupModalWrapper(info: OverlayInfo) {\n        const wrapperElement = info.elementRef.nativeElement.parentElement.parentElement;\n        fromEvent(wrapperElement, 'keydown').pipe(\n            filter((ev: KeyboardEvent) => ev.key === 'Escape' || ev.key === 'Esc'),\n            takeUntil(this.destroy$)\n        ).subscribe(() => this.hide(info.id));\n        wrapperElement.classList.remove('igx-overlay__wrapper');\n        this.applyAnimationParams(wrapperElement, info.settings.positionStrategy.settings.openAnimation);\n        wrapperElement.classList.add('igx-overlay__wrapper--modal');\n    }\n\n    private onCloseDone(info: OverlayInfo) {\n        this.cleanUp(info);\n        this.onClosed.emit({ id: info.id, componentRef: info.componentRef });\n    }\n\n    private cleanUp(info: OverlayInfo) {\n        const child: HTMLElement = info.elementRef.nativeElement;\n        const outlet = this.getOverlayElement(info);\n        if (!outlet.contains(child)) {\n            console.warn('Component with id:' + info.id + ' is already removed!');\n            return;\n        }\n\n        outlet.removeChild(child.parentNode.parentNode);\n        if (info.componentRef) {\n            this._appRef.detachView(info.componentRef.hostView);\n            info.componentRef.destroy();\n        }\n\n        if (info.hook) {\n            info.hook.parentElement.insertBefore(info.elementRef.nativeElement, info.hook);\n            info.hook.parentElement.removeChild(info.hook);\n        }\n\n        const index = this._overlayInfos.indexOf(info);\n        this._overlayInfos.splice(index, 1);\n\n        // this._overlayElement.parentElement check just for tests that manually delete the element\n        if (this._overlayInfos.length === 0 && this._overlayElement && this._overlayElement.parentElement) {\n            this._overlayElement.parentElement.removeChild(this._overlayElement);\n            this._overlayElement = null;\n        }\n    }\n\n    private playOpenAnimation(info: OverlayInfo) {\n        if (!info.openAnimationPlayer) {\n            const animationBuilder = this.builder.build(info.settings.positionStrategy.settings.openAnimation);\n            info.openAnimationPlayer = animationBuilder.create(info.elementRef.nativeElement);\n\n            //  AnimationPlayer.getPosition returns always 0. To workaround this we are getting inner WebAnimationPlayer\n            //  and then getting the positions from it.\n            //  This is logged in Angular here - https://github.com/angular/angular/issues/18891\n            //  As soon as this is resolved we can remove this hack\n            const innerRenderer = (<any>info.openAnimationPlayer)._renderer;\n            info.openAnimationInnerPlayer = innerRenderer.engine.players[innerRenderer.engine.players.length - 1];\n            info.openAnimationPlayer.onDone(() => {\n                this.onOpened.emit({ id: info.id, componentRef: info.componentRef });\n                if (info.openAnimationPlayer) {\n                    info.openAnimationPlayer.reset();\n                    info.openAnimationPlayer = null;\n                }\n\n                if (info.closeAnimationPlayer && info.closeAnimationPlayer.hasStarted()) {\n                    info.closeAnimationPlayer.reset();\n                }\n            });\n        }\n\n        //  if there is opening animation already started do nothing\n        if (info.openAnimationPlayer.hasStarted()) {\n            return;\n        }\n\n        //  if there is closing animation already started start open animation from where close one has reached\n        //  and remove close animation\n        if (info.closeAnimationPlayer && info.closeAnimationPlayer.hasStarted()) {\n            //  getPosition() returns what part of the animation is passed, e.g. 0.5 if half the animation\n            //  is done, 0.75 if 3/4 of the animation is done. As we need to start next animation from where\n            //  the previous has finished we need the amount up to 1, therefore we are subtracting what\n            //  getPosition() returns from one\n            const position = 1 - info.closeAnimationInnerPlayer.getPosition();\n            info.closeAnimationPlayer.reset();\n            info.closeAnimationPlayer = null;\n            info.openAnimationPlayer.init();\n            info.openAnimationPlayer.setPosition(position);\n        }\n\n        this.onAnimation.emit({ id: info.id, animationPlayer: info.openAnimationPlayer, animationType: 'open' });\n\n        //  to eliminate flickering show the element just before animation start\n        info.elementRef.nativeElement.parentElement.style.visibility = '';\n        info.openAnimationPlayer.play();\n    }\n\n    private playCloseAnimation(info: OverlayInfo) {\n        if (!info.closeAnimationPlayer) {\n            const animationBuilder = this.builder.build(info.settings.positionStrategy.settings.closeAnimation);\n            info.closeAnimationPlayer = animationBuilder.create(info.elementRef.nativeElement);\n\n            //  AnimationPlayer.getPosition returns always 0. To workaround this we are getting inner WebAnimationPlayer\n            //  and then getting the positions from it.\n            //  This is logged in Angular here - https://github.com/angular/angular/issues/18891\n            //  As soon as this is resolved we can remove this hack\n            const innerRenderer = (<any>info.closeAnimationPlayer)._renderer;\n            info.closeAnimationInnerPlayer = innerRenderer.engine.players[innerRenderer.engine.players.length - 1];\n\n            info.closeAnimationPlayer.onDone(() => {\n                if (info.closeAnimationPlayer) {\n                    info.closeAnimationPlayer.reset();\n                    info.closeAnimationPlayer = null;\n                }\n\n                if (info.openAnimationPlayer && info.openAnimationPlayer.hasStarted()) {\n                    info.openAnimationPlayer.reset();\n                }\n                this.onCloseDone(info);\n            });\n        }\n\n        //  if there is closing animation already started do nothing\n        if (info.closeAnimationPlayer.hasStarted()) {\n            return;\n        }\n\n        //  if there is opening animation already started start close animation from where open one has reached\n        //  and remove open animation\n        if (info.openAnimationPlayer && info.openAnimationPlayer.hasStarted()) {\n            //  getPosition() returns what part of the animation is passed, e.g. 0.5 if half the animation\n            //  is done, 0.75 if 3/4 of the animation is done. As we need to start next animation from where\n            //  the previous has finished we need the amount up to 1, therefore we are subtracting what\n            //  getPosition() returns from one\n            const position = 1 - info.openAnimationInnerPlayer.getPosition();\n            info.openAnimationPlayer.reset();\n            info.openAnimationPlayer = null;\n            info.closeAnimationPlayer.init();\n            info.closeAnimationPlayer.setPosition(position);\n        }\n\n        this.onAnimation.emit({ id: info.id, animationPlayer: info.closeAnimationPlayer, animationType: 'close' });\n        info.closeAnimationPlayer.play();\n    }\n\n    //  TODO: check if applyAnimationParams will work with complex animations\n    private applyAnimationParams(wrapperElement: HTMLElement, animationOptions: AnimationReferenceMetadata) {\n        if (!animationOptions) {\n            wrapperElement.style.transitionDuration = '0ms';\n            return;\n        }\n        if (animationOptions.type === AnimationMetadataType.AnimateRef) {\n            animationOptions = (animationOptions as AnimationAnimateRefMetadata).animation;\n        }\n        if (!animationOptions.options || !animationOptions.options.params) {\n            return;\n        }\n        const params = animationOptions.options.params as IAnimationParams;\n        if (params.duration) {\n            wrapperElement.style.transitionDuration = params.duration;\n        }\n        if (params.easing) {\n            wrapperElement.style.transitionTimingFunction = params.easing;\n        }\n    }\n\n    /** @hidden @internal */\n    public getOverlayById(id: string): OverlayInfo {\n        if (!id) {\n            return null;\n        }\n\n        const info = this._overlayInfos.find(e => e.id === id);\n        return info;\n    }\n\n    private documentClicked = (ev: MouseEvent) => {\n        //  if we get to modal overlay just return - we should not close anything under it\n        //  if we get to non-modal overlay do the next:\n        //   1. Check it has close on outside click. If not go on to next overlay;\n        //   2. If true check if click is on the element. If it is on the element we have closed\n        //  already all previous non-modal with close on outside click elements, so we return. If\n        //  not close the overlay and check next\n        for (let i = this._overlayInfos.length; i--;) {\n            const info = this._overlayInfos[i];\n            if (info.settings.modal) {\n                return;\n            }\n            if (info.settings.closeOnOutsideClick) {\n                const target = ev.target as any;\n                //  if the click is on the element do not close this overlay\n                if (!info.elementRef.nativeElement.contains(target)) {\n                    // if we should exclude position target check if the click is over it. If so do not close overlay\n                    const positionTarget = info.settings.positionStrategy.settings.target as HTMLElement;\n                    let clickOnPositionTarget = false;\n                    if (positionTarget) {\n                        clickOnPositionTarget = positionTarget.contains(target);\n                    }\n\n                    if (!(info.settings.excludePositionTarget && clickOnPositionTarget)) {\n                        //  if the click is outside click, but close animation has started do nothing\n                        if (!(info.closeAnimationPlayer && info.closeAnimationPlayer.hasStarted())) {\n                            this._hide(info.id, ev);\n                        }\n                    }\n                } else {\n                    //  TODO: should we return here, or continue with next overlays\n                    return;\n                }\n            }\n        }\n    }\n\n    private addOutsideClickListener(info: OverlayInfo) {\n        if (info.settings.closeOnOutsideClick) {\n            if (info.settings.modal) {\n                fromEvent(info.elementRef.nativeElement.parentElement.parentElement, 'click')\n                    .pipe(takeUntil(this.destroy$))\n                    .subscribe(() => this.hide(info.id));\n            } else if (\n                //  if all overlays minus closing overlays equals one add the handler\n                this._overlayInfos.filter(x => x.settings.closeOnOutsideClick && !x.settings.modal).length -\n                this._overlayInfos.filter(x => x.settings.closeOnOutsideClick && !x.settings.modal &&\n                    x.closeAnimationPlayer &&\n                    x.closeAnimationPlayer.hasStarted()).length === 1) {\n                this._document.addEventListener('click', this.documentClicked, true);\n            }\n        }\n    }\n\n    private removeOutsideClickListener(info: OverlayInfo) {\n        if (info.settings.modal === false) {\n            let shouldRemoveClickEventListener = true;\n            this._overlayInfos.forEach(o => {\n                if (o.settings.modal === false && o.id !== info.id) {\n                    shouldRemoveClickEventListener = false;\n                }\n            });\n\n            if (shouldRemoveClickEventListener) {\n                this._document.removeEventListener('click', this.documentClicked, true);\n            }\n        }\n    }\n\n    private addResizeHandler(id: string) {\n        const closingOverlaysCount =\n            this._overlayInfos\n                .filter(o => o.closeAnimationPlayer && o.closeAnimationPlayer.hasStarted())\n                .length;\n        if (this._overlayInfos.length - closingOverlaysCount === 1) {\n            this._document.defaultView.addEventListener('resize', this.repositionAll);\n        }\n    }\n\n    private removeResizeHandler(id: string) {\n        const closingOverlaysCount =\n            this._overlayInfos\n                .filter(o => o.closeAnimationPlayer && o.closeAnimationPlayer.hasStarted())\n                .length;\n        if (this._overlayInfos.length - closingOverlaysCount === 1) {\n            this._document.defaultView.removeEventListener('resize', this.repositionAll);\n        }\n    }\n\n    /** @hidden */\n    public repositionAll = () => {\n        for (let i = this._overlayInfos.length; i--;) {\n            this.reposition(this._overlayInfos[i].id);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n","import { PositionSettings, Size } from '../utilities';\nimport { GlobalPositionStrategy } from './global-position-strategy';\n\n/**\n * Positions the element inside the containing outlet based on the directions passed in trough PositionSettings.\n * These are Top/Middle/Bottom for verticalDirection and Left/Center/Right for horizontalDirection\n */\nexport class ContainerPositionStrategy extends GlobalPositionStrategy {\n    constructor(settings?: PositionSettings) {\n        super(settings);\n    }\n\n    /** @inheritdoc */\n    position(contentElement: HTMLElement, size?: Size, document?: Document, initialCall?: boolean): void {\n        contentElement.classList.add('igx-overlay__content--relative');\n        contentElement.parentElement.classList.add('igx-overlay__wrapper--flex-container');\n        this.setPosition(contentElement, this.settings);\n    }\n}\n\n","import { IPositionStrategy } from './IPositionStrategy';\nimport {\n  HorizontalAlignment,\n  Point,\n  PositionSettings,\n  Size,\n  Util,\n  VerticalAlignment\n} from './../utilities';\nimport { scaleInVerTop, scaleOutVerTop } from '../../../animations/main';\n\n/**\n * Positions the element based on the directions and start point passed in trough PositionSettings.\n * It is possible to either pass a start point or an HTMLElement as a positioning base.\n */\nexport class ConnectedPositioningStrategy implements IPositionStrategy {\n  private _defaultSettings: PositionSettings = {\n    // default Point(0, 0) in getPointFromPositionsSettings\n    target: null,\n    horizontalDirection: HorizontalAlignment.Right,\n    verticalDirection: VerticalAlignment.Bottom,\n    horizontalStartPoint: HorizontalAlignment.Left,\n    verticalStartPoint: VerticalAlignment.Bottom,\n    openAnimation: scaleInVerTop,\n    closeAnimation: scaleOutVerTop,\n    minSize: { width: 0, height: 0 }\n  };\n\n  /** @inheritdoc */\n  public settings: PositionSettings;\n\n  constructor(settings?: PositionSettings) {\n    this.settings = Object.assign({}, this._defaultSettings, settings);\n  }\n\n  /** @inheritdoc */\n  position(contentElement: HTMLElement, size: Size, document?: Document, initialCall?: boolean): void {\n    const targetRect = Util.getTargetRect(this.settings);\n    const contentElementRect = contentElement.getBoundingClientRect();\n    this.setStyle(contentElement, targetRect, contentElementRect);\n  }\n\n  /**\n   * @inheritdoc\n   * Creates clone of this position strategy\n   * @returns clone of this position strategy\n   */\n  clone(): IPositionStrategy {\n    return Util.cloneInstance(this);\n  }\n\n  /**\n   * Sets element's style which effectively positions provided element according\n   * to provided position settings\n   * @param element Element to position\n   * @param targetRect Bounding rectangle of strategy target\n   * @param elementRect Bounding rectangle of the element\n   */\n  protected setStyle(element: HTMLElement, targetRect: ClientRect, elementRect: ClientRect) {\n    const startPoint: Point = {\n      x: targetRect.right + targetRect.width * this.settings.horizontalStartPoint,\n      y: targetRect.bottom + targetRect.height * this.settings.verticalStartPoint,\n    };\n    const wrapperRect: ClientRect = element.parentElement.getBoundingClientRect();\n\n    //  clean up styles - if auto position strategy is chosen we may pass here several times\n    element.style.right = '';\n    element.style.left = '';\n    element.style.bottom = '';\n    element.style.top = '';\n\n    switch (this.settings.horizontalDirection) {\n      case HorizontalAlignment.Left:\n        element.style.right = `${Math.round(wrapperRect.right - startPoint.x)}px`;\n        break;\n      case HorizontalAlignment.Center:\n        element.style.left = `${Math.round(startPoint.x - wrapperRect.left - elementRect.width / 2)}px`;\n        break;\n      case HorizontalAlignment.Right:\n        element.style.left = `${Math.round(startPoint.x - wrapperRect.left)}px`;\n        break;\n    }\n\n    switch (this.settings.verticalDirection) {\n      case VerticalAlignment.Top:\n        element.style.bottom = `${Math.round(wrapperRect.bottom - startPoint.y)}px`;\n        break;\n      case VerticalAlignment.Middle:\n        element.style.top = `${Math.round(startPoint.y - wrapperRect.top - elementRect.height / 2)}px`;\n        break;\n      case VerticalAlignment.Bottom:\n        element.style.top = `${Math.round(startPoint.y - wrapperRect.top)}px`;\n        break;\n    }\n  }\n}\n","import { ConnectedPositioningStrategy } from './connected-positioning-strategy';\nimport { HorizontalAlignment, VerticalAlignment, PositionSettings, Size, Util } from '../utilities';\n\nexport abstract class BaseFitPositionStrategy extends ConnectedPositioningStrategy {\n    protected _initialSize: Size;\n    protected _initialSettings: PositionSettings;\n\n    /** @inheritdoc */\n    position(contentElement: HTMLElement, size: Size, document?: Document, initialCall?: boolean): void {\n        const targetRect = Util.getTargetRect(this.settings);\n        const contentElementRect = contentElement.getBoundingClientRect();\n        if (initialCall) {\n            const connectedFit: ConnectedFit = {};\n            connectedFit.targetRect = targetRect;\n            connectedFit.contentElementRect = contentElementRect;\n            this._initialSettings = this._initialSettings || Object.assign({}, this.settings);\n            this.settings = Object.assign({}, this._initialSettings);\n            connectedFit.viewPortRect = Util.getViewportRect(document);\n            this.updateViewPortFit(connectedFit);\n            if (!connectedFit.fitHorizontal || !connectedFit.fitVertical) {\n                this.fitInViewport(contentElement, connectedFit);\n            }\n        }\n        this.setStyle(contentElement, targetRect, contentElementRect);\n    }\n\n    /**\n     * Checks if element can fit in viewport and updates provided connectedFit\n     * with the result\n     * @param connectedFit connectedFit to update\n     */\n    protected updateViewPortFit(connectedFit: ConnectedFit) {\n        connectedFit.left = this.calculateLeft(\n            connectedFit.targetRect,\n            connectedFit.contentElementRect,\n            this.settings.horizontalStartPoint,\n            this.settings.horizontalDirection);\n        connectedFit.right = connectedFit.left + connectedFit.contentElementRect.width;\n        connectedFit.fitHorizontal =\n            connectedFit.viewPortRect.left < connectedFit.left && connectedFit.right < connectedFit.viewPortRect.right;\n\n        connectedFit.top = this.calculateTop(\n            connectedFit.targetRect,\n            connectedFit.contentElementRect,\n            this.settings.verticalStartPoint,\n            this.settings.verticalDirection);\n        connectedFit.bottom = connectedFit.top + connectedFit.contentElementRect.height;\n        connectedFit.fitVertical =\n            connectedFit.viewPortRect.top < connectedFit.top && connectedFit.bottom < connectedFit.viewPortRect.bottom;\n    }\n\n    /**\n     * Calculates the position of the left border of the element if it gets positioned\n     * with provided start point and direction\n     * @param targetRect Rectangle of the target where element is attached\n     * @param elementRect Rectangle of the element\n     * @param startPoint Start point of the target\n     * @param direction Direction in which to show the element\n     */\n    protected calculateLeft(\n        targetRect: ClientRect, elementRect: ClientRect, startPoint: HorizontalAlignment, direction: HorizontalAlignment): number {\n        return targetRect.right + targetRect.width * startPoint + elementRect.width * direction;\n    }\n\n    /**\n     * Calculates the position of the top border of the element if it gets positioned\n     * with provided position settings related to the target\n     * @param targetRect Rectangle of the target where element is attached\n     * @param elementRect Rectangle of the element\n     * @param startPoint Start point of the target\n     * @param direction Direction in which to show the element\n     */\n    protected calculateTop(\n        targetRect: ClientRect, elementRect: ClientRect, startPoint: VerticalAlignment, direction: VerticalAlignment): number {\n        return targetRect.bottom + targetRect.height * startPoint + elementRect.height * direction;\n    }\n\n    /**\n     * Fits the element into viewport according to the position settings\n     * @param element element to fit in viewport\n     * @param connectedFit connectedFit object containing all necessary parameters\n     */\n    protected abstract fitInViewport(\n        element: HTMLElement,\n        connectedFit: ConnectedFit);\n}\n\nexport interface ConnectedFit {\n    contentElementRect?: ClientRect;\n    targetRect?: ClientRect;\n    viewPortRect?: ClientRect;\n    fitHorizontal?: boolean;\n    fitVertical?: boolean;\n    left?: number;\n    right?: number;\n    top?: number;\n    bottom?: number;\n}\n","import { VerticalAlignment, HorizontalAlignment } from './../utilities';\nimport { BaseFitPositionStrategy, ConnectedFit } from './base-fit-position-strategy';\n\n/**\n * Positions the element as in **Connected** positioning strategy and re-positions the element in\n * the view port (calculating a different start point) in case the element is partially getting out of view\n */\nexport class AutoPositionStrategy extends BaseFitPositionStrategy {\n\n    /** @inheritdoc */\n    protected fitInViewport(element: HTMLElement, connectedFit: ConnectedFit) {\n        const transformString: string[] = [];\n        if (!connectedFit.fitHorizontal) {\n            if (this.canFlipHorizontal(connectedFit)) {\n                this.flipHorizontal();\n            } else {\n                const horizontalPush = this.horizontalPush(connectedFit);\n                transformString.push(`translateX(${horizontalPush}px)`);\n            }\n        }\n\n        if (!connectedFit.fitVertical) {\n            if (this.canFlipVertical(connectedFit)) {\n                this.flipVertical();\n            } else {\n                const verticalPush = this.verticalPush(connectedFit);\n                transformString.push(`translateY(${verticalPush}px)`);\n            }\n        }\n\n        element.style.transform = transformString.join(' ').trim();\n    }\n\n    /**\n     * Checks if element can be flipped without get off the viewport\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns true if element can be flipped and stain in viewport\n     */\n    private canFlipHorizontal(connectedFit: ConnectedFit): boolean {\n        //  HorizontalAlignment can be Left = -1; Center = -0.5 or Right = 0.\n        //  To virtually flip direction and start point (both are HorizontalAlignment) we can do this:\n        //  flippedAlignment = (-1) * (HorizontalAlignment + 1)\n        //  this way:\n        //  (-1) * (Left + 1) = 0 = Right\n        //  (-1) * (Center + 1) = -0.5 = Center\n        //  (-1) * (Right + 1) = -1 = Left\n        const flippedStartPoint = (-1) * (this.settings.horizontalStartPoint + 1);\n        const flippedDirection = (-1) * (this.settings.horizontalDirection + 1);\n\n        const leftBorder = this.calculateLeft(\n            connectedFit.targetRect, connectedFit.contentElementRect, flippedStartPoint, flippedDirection);\n        const rightBorder = leftBorder + connectedFit.contentElementRect.width;\n        return connectedFit.viewPortRect.left < leftBorder && rightBorder < connectedFit.viewPortRect.right;\n    }\n\n    /**\n     * Checks if element can be flipped without get off the viewport\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns true if element can be flipped and stain in viewport\n     */\n    private canFlipVertical(connectedFit: ConnectedFit): boolean {\n        const flippedStartPoint = (-1) * (this.settings.verticalStartPoint + 1);\n        const flippedDirection = (-1) * (this.settings.verticalDirection + 1);\n\n        const topBorder = this.calculateTop(\n            connectedFit.targetRect, connectedFit.contentElementRect, flippedStartPoint, flippedDirection);\n        const bottomBorder = topBorder + connectedFit.contentElementRect.height;\n        return connectedFit.viewPortRect.top < topBorder && bottomBorder < connectedFit.viewPortRect.bottom;\n    }\n\n    /**\n     * Flips direction and start point of the position settings\n     */\n    private flipHorizontal() {\n        switch (this.settings.horizontalDirection) {\n            case HorizontalAlignment.Left:\n                this.settings.horizontalDirection = HorizontalAlignment.Right;\n                break;\n            case HorizontalAlignment.Right:\n                this.settings.horizontalDirection = HorizontalAlignment.Left;\n                break;\n        }\n        switch (this.settings.horizontalStartPoint) {\n            case HorizontalAlignment.Left:\n                this.settings.horizontalStartPoint = HorizontalAlignment.Right;\n                break;\n            case HorizontalAlignment.Right:\n                this.settings.horizontalStartPoint = HorizontalAlignment.Left;\n                break;\n        }\n    }\n\n    /**\n     * Flips direction and start point of the position settings\n     */\n    private flipVertical() {\n        switch (this.settings.verticalDirection) {\n            case VerticalAlignment.Top:\n                this.settings.verticalDirection = VerticalAlignment.Bottom;\n                break;\n            case VerticalAlignment.Bottom:\n                this.settings.verticalDirection = VerticalAlignment.Top;\n                break;\n        }\n        switch (this.settings.verticalStartPoint) {\n            case VerticalAlignment.Top:\n                this.settings.verticalStartPoint = VerticalAlignment.Bottom;\n                break;\n            case VerticalAlignment.Bottom:\n                this.settings.verticalStartPoint = VerticalAlignment.Top;\n                break;\n        }\n    }\n\n    /**\n     * Calculates necessary horizontal push according to provided connectedFit\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns amount of necessary translation which will push the element into viewport\n     */\n    private horizontalPush(connectedFit: ConnectedFit): number {\n        const leftExtend = connectedFit.left;\n        const rightExtend = connectedFit.right - connectedFit.viewPortRect.right;\n        //  if leftExtend < 0 overlay goes beyond left end of the screen. We should push it back with exactly\n        //  as much as it is beyond the screen.\n        //  if rightExtend > 0 overlay goes beyond right end of the screen. We should push it back with the\n        //  extend but with amount not bigger than what left between left border of screen and left border of\n        //  overlay, e.g. leftExtend\n        if (leftExtend < 0) {\n            return Math.abs(leftExtend);\n        } else if (rightExtend > 0) {\n            return - Math.min(rightExtend, leftExtend);\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Calculates necessary vertical push according to provided connectedFit\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns amount of necessary translation which will push the element into viewport\n     */\n    private verticalPush(connectedFit: ConnectedFit): number {\n        const topExtend = connectedFit.top;\n        const bottomExtend = connectedFit.bottom - connectedFit.viewPortRect.bottom;\n        if (topExtend < 0) {\n            return Math.abs(topExtend);\n        } else if (bottomExtend > 0) {\n            return - Math.min(bottomExtend, topExtend);\n        } else {\n            return 0;\n        }\n    }\n}\n","import { BaseFitPositionStrategy, ConnectedFit } from './base-fit-position-strategy';\nimport { HorizontalAlignment, VerticalAlignment } from '../utilities';\n\n/**\n * Positions the element as in **Connected** positioning strategy and resize the element\n * to fit in the view port in case the element is partially getting out of view\n */\nexport class ElasticPositionStrategy extends BaseFitPositionStrategy {\n    /** @inheritdoc */\n    protected fitInViewport(element: HTMLElement, connectedFit: ConnectedFit) {\n        element.classList.add('igx-overlay__content--elastic');\n        const transformString: string[] = [];\n        if (!connectedFit.fitHorizontal) {\n            const maxReduction = Math.max(0, connectedFit.contentElementRect.width - this.settings.minSize.width);\n            const leftExtend = Math.max(0, connectedFit.viewPortRect.left - connectedFit.left);\n            const rightExtend = Math.max(0, connectedFit.right - connectedFit.viewPortRect.right);\n            const reduction = Math.min(maxReduction, leftExtend + rightExtend);\n            element.style.width = `${connectedFit.contentElementRect.width - reduction}px`;\n\n            //  if direction is center and element goes off the screen in left direction we should push the\n            //  element to the right. Prevents left still going out of view when normally positioned\n            if (this.settings.horizontalDirection === HorizontalAlignment.Center) {\n                //  the amount of translation depends on whether element goes off the screen to the left,\n                //  to the right or in both directions, as well as how much it goes of the screen and finally\n                //  on the minSize. The translation should be proportional between left and right extend\n                //  taken from the reduction\n                const translation = leftExtend * reduction / (leftExtend + rightExtend);\n                if (translation > 0) {\n                    transformString.push(`translateX(${translation}px)`);\n                }\n            }\n        }\n\n        if (!connectedFit.fitVertical) {\n            const maxReduction = Math.max(0, connectedFit.contentElementRect.height - this.settings.minSize.height);\n            const topExtend = Math.max(0, connectedFit.viewPortRect.top - connectedFit.top);\n            const bottomExtend = Math.max(0, connectedFit.bottom - connectedFit.viewPortRect.bottom);\n            const reduction = Math.min(maxReduction, topExtend + bottomExtend);\n            element.style.height = `${connectedFit.contentElementRect.height - reduction}px`;\n\n            //  if direction is middle and element goes off the screen in top direction we should push the\n            //  element to the bottom. Prevents top still going out of view when normally positioned\n            if (this.settings.verticalDirection === VerticalAlignment.Middle) {\n                //  the amount of translation depends on whether element goes off the screen to the top,\n                //  to the bottom or in both directions, as well as how much it goes of the screen and finally\n                //  on the minSize. The translation should be proportional between top and bottom extend\n                //  taken from the reduction\n                const translation = topExtend * reduction / (topExtend + bottomExtend);\n                if (translation > 0) {\n                    transformString.push(`translateY(${translation}px)`);\n                }\n            }\n        }\n        element.style.transform = transformString.join(' ').trim();\n    }\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\nimport { NgZone } from '@angular/core';\n\n/**\n * On scroll reposition the overlay content.\n */\nexport class AbsoluteScrollStrategy extends ScrollStrategy {\n    private _initialized = false;\n    private _document: Document;\n    private _overlayService: IgxOverlayService;\n    private _id: string;\n    private _scrollContainer: HTMLElement;\n    private _zone: NgZone;\n\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n        this._scrollContainer = scrollContainer;\n    }\n\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) {\n        if (this._initialized) {\n            return;\n        }\n        this._overlayService = overlayService;\n        this._id = id;\n        this._document = document;\n        this._zone = overlayService.getOverlayById(id).ngZone;\n        this._initialized = true;\n    }\n\n    /** @inheritdoc */\n    public attach(): void {\n        if (this._zone) {\n            this._zone.runOutsideAngular(() => {\n                this.addScrollEventListener();\n            });\n        } else {\n            this.addScrollEventListener();\n        }\n    }\n\n    /** @inheritdoc */\n    public detach(): void {\n        if (this._scrollContainer) {\n            this._scrollContainer.removeEventListener('scroll', this.onScroll, true);\n        } else {\n            this._document.removeEventListener('scroll', this.onScroll, true);\n        }\n\n        this._initialized = false;\n    }\n\n    private addScrollEventListener() {\n        if (this._scrollContainer) {\n            this._scrollContainer.addEventListener('scroll', this.onScroll, true);\n        } else {\n            this._document.addEventListener('scroll', this.onScroll, true);\n        }\n    }\n\n    private onScroll = () => {\n        this._overlayService.repositionAll();\n    }\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\n\n/**\n * Prevents scrolling while the overlay content is shown.\n */\nexport class BlockScrollStrategy extends ScrollStrategy {\n    private _initialized = false;\n    private _document: Document;\n    private _initialScrollTop: number;\n    private _initialScrollLeft: number;\n    private _sourceElement: Element;\n\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n    }\n\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) {\n        if (this._initialized) {\n            return;\n        }\n\n        this._document = document;\n        this._initialized = true;\n    }\n\n    /** @inheritdoc */\n    public attach(): void {\n        this._document.addEventListener('scroll', this.onScroll, true);\n    }\n\n    /** @inheritdoc */\n    public detach(): void {\n        this._document.removeEventListener('scroll', this.onScroll, true);\n        this._sourceElement = null;\n        this._initialScrollTop = 0;\n        this._initialScrollLeft = 0;\n        this._initialized = false;\n    }\n\n    private onScroll = (ev: Event) => {\n        ev.preventDefault();\n        if (!this._sourceElement || this._sourceElement !== ev.target) {\n            this._sourceElement = ev.target as Element;\n            this._initialScrollTop = this._sourceElement.scrollTop;\n            this._initialScrollLeft = this._sourceElement.scrollLeft;\n        }\n\n        this._sourceElement.scrollTop = this._initialScrollTop;\n        this._sourceElement.scrollLeft = this._initialScrollLeft;\n    }\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\n\n/**\n * Uses a tolerance and closes the shown component upon scrolling if the tolerance is exceeded\n */\nexport class CloseScrollStrategy extends ScrollStrategy {\n    private _document: Document;\n    private _overlayService: IgxOverlayService;\n    private _id: string;\n    private initialScrollTop: number;\n    private initialScrollLeft: number;\n    private cumulativeScrollTop: number;\n    private cumulativeScrollLeft: number;\n    private _threshold: number;\n    private _initialized = false;\n    private _sourceElement: Element;\n    private _scrollContainer: HTMLElement;\n\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n        this._scrollContainer = scrollContainer;\n        this._threshold = 10;\n        this.cumulativeScrollTop = 0;\n        this.cumulativeScrollLeft = 0;\n    }\n\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) {\n        if (this._initialized) {\n            return;\n        }\n        this._overlayService = overlayService;\n        this._id = id;\n        this._document = document;\n        this._initialized = true;\n    }\n\n    /** @inheritdoc */\n    public attach(): void {\n        if (this._scrollContainer) {\n            this._scrollContainer.addEventListener('scroll', this.onScroll);\n            this._sourceElement = this._scrollContainer;\n        } else {\n            this._document.addEventListener('scroll', this.onScroll);\n            if (document.documentElement.scrollHeight > document.documentElement.clientHeight) {\n                this._sourceElement = document.documentElement as Element;\n            } else if (document.body.scrollHeight > document.body.clientHeight) {\n                this._sourceElement = document.body as Element;\n            }\n        }\n\n        if (!this._sourceElement) {\n            return;\n        }\n\n        this.cumulativeScrollTop = 0;\n        this.cumulativeScrollLeft = 0;\n        this.initialScrollTop = this._sourceElement.scrollTop;\n        this.initialScrollLeft = this._sourceElement.scrollLeft;\n    }\n\n    /** @inheritdoc */\n    public detach(): void {\n        // TODO: check why event listener removes only on first call and remains on each next!!!\n        if (this._scrollContainer) {\n            this._scrollContainer.removeEventListener('scroll', this.onScroll);\n        } else {\n            this._document.removeEventListener('scroll', this.onScroll);\n        }\n        this._sourceElement = null;\n        this.cumulativeScrollTop = 0;\n        this.cumulativeScrollLeft = 0;\n        this.initialScrollTop = 0;\n        this.initialScrollLeft = 0;\n        this._initialized = false;\n    }\n\n    private onScroll = (ev: Event) => {\n        if (!this._sourceElement) {\n            return;\n        }\n\n        this.cumulativeScrollTop += this._sourceElement.scrollTop;\n        this.cumulativeScrollLeft += this._sourceElement.scrollLeft;\n\n        if (Math.abs(this.cumulativeScrollTop - this.initialScrollTop) > this._threshold ||\n            Math.abs(this.cumulativeScrollLeft - this.initialScrollLeft) > this._threshold) {\n            this._document.removeEventListener('scroll', this.onScroll, true);\n            this._overlayService.hide(this._id);\n        }\n    }\n}\n","import { TransactionService, Transaction, State } from './transaction';\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { isObject, mergeObjects, cloneValue } from '../../core/utils';\n\n@Injectable()\nexport class IgxBaseTransactionService<T extends Transaction, S extends State> implements TransactionService<T, S> {\n    protected _isPending = false;\n    protected _pendingTransactions: T[] = [];\n    protected _pendingStates: Map<any, S> = new Map();\n\n    /**\n     * @inheritdoc\n     */\n    public get canRedo(): boolean {\n        return false;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get canUndo(): boolean {\n        return false;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get enabled(): boolean {\n        return this._isPending;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public onStateUpdate = new EventEmitter<void>();\n\n    /**\n     * @inheritdoc\n     */\n    public add(transaction: T, recordRef?: any): void {\n        if (this._isPending) {\n            this.updateState(this._pendingStates, transaction, recordRef);\n            this._pendingTransactions.push(transaction);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getTransactionLog(id?: any): T[] { return []; }\n\n    /**\n     * @inheritdoc\n     */\n    undo(): void { }\n\n    /**\n     * @inheritdoc\n     */\n    redo(): void { }\n\n    /**\n     * @inheritdoc\n     */\n    getAggregatedChanges(mergeChanges: boolean): T[] {\n        const result: T[] = [];\n        this._pendingStates.forEach((state: S, key: any) => {\n            const value = mergeChanges ? this.getAggregatedValue(key, mergeChanges) : state.value;\n            result.push({ id: key, newValue: value, type: state.type } as T);\n        });\n        return result;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getState(id: any): S {\n        return this._pendingStates.get(id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getAggregatedValue(id: any, mergeChanges: boolean): any {\n        const state = this._pendingStates.get(id);\n        if (!state) {\n            return null;\n        }\n        if (mergeChanges) {\n            return this.updateValue(state);\n        }\n        return state.value;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    commit(data: any[], id?: any): void { }\n\n    /**\n     * @inheritdoc\n     */\n    clear(id?: any): void {\n        this._pendingStates.clear();\n        this._pendingTransactions = [];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public startPending(): void {\n        this._isPending = true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public endPending(commit: boolean): void {\n        this._isPending = false;\n        this._pendingStates.clear();\n        this._pendingTransactions = [];\n    }\n\n\n    /**\n     * Updates the provided states collection according to passed transaction and recordRef\n     * @param states States collection to apply the update to\n     * @param transaction Transaction to apply to the current state\n     * @param recordRef Reference to the value of the record in data source, if any, where transaction should be applied\n     */\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        let state = states.get(transaction.id);\n        if (state) {\n            if (isObject(state.value)) {\n                mergeObjects(state.value, transaction.newValue);\n            } else {\n                state.value = transaction.newValue;\n            }\n        } else {\n            state = { value: cloneValue(transaction.newValue), recordRef: recordRef, type: transaction.type } as S;\n            states.set(transaction.id, state);\n        }\n    }\n\n    /**\n     * Updates the recordRef of the provided state with all the changes in the state. Accepts primitive and object value types\n     * @param state State to update value for\n     * @returns updated value including all the changes in provided state\n     */\n    protected updateValue(state: S) {\n        return this.mergeValues(state.recordRef, state.value);\n    }\n\n    /**\n     * Merges second values in first value and the result in empty object. If values are primitive type\n     * returns second value if exists, or first value.\n     * @param first Value to merge into\n     * @param second Value to merge\n     */\n    protected mergeValues<U>(first: U, second: U): U {\n        let result: U;\n        if (isObject(first) || isObject(second)) {\n            result = mergeObjects(mergeObjects({}, first), second);\n        } else {\n            result = second ? second : first;\n        }\n        return result;\n    }\n}\n","import { Transaction, State, TransactionType } from './transaction';\nimport { IgxBaseTransactionService } from './base-transaction';\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { isObject, mergeObjects, cloneValue } from '../../core/utils';\n\n@Injectable()\nexport class IgxTransactionService<T extends Transaction, S extends State> extends IgxBaseTransactionService<T, S> {\n    protected _transactions: T[] = [];\n    protected _redoStack: { transaction: T, recordRef: any }[][] = [];\n    protected _undoStack: { transaction: T, recordRef: any }[][] = [];\n    protected _states: Map<any, S> = new Map();\n\n    /**\n     * @inheritdoc\n     */\n    get canUndo(): boolean {\n        return this._undoStack.length > 0;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get canRedo(): boolean {\n        return this._redoStack.length > 0;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public onStateUpdate = new EventEmitter<void>();\n\n    /**\n     * @inheritdoc\n     */\n    public add(transaction: T, recordRef?: any): void {\n        const states = this._isPending ? this._pendingStates : this._states;\n        this.verifyAddedTransaction(states, transaction, recordRef);\n        this.addTransaction(transaction, states, recordRef);\n    }\n\n    protected addTransaction(transaction: T, states: Map<any, S>, recordRef?: any) {\n        this.updateState(states, transaction, recordRef);\n\n        const transactions = this._isPending ? this._pendingTransactions : this._transactions;\n        transactions.push(transaction);\n\n        if (!this._isPending) {\n            this._undoStack.push([{ transaction, recordRef }]);\n            this._redoStack = [];\n            this.onStateUpdate.emit();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getTransactionLog(id?: any): T[] {\n        if (id !== undefined) {\n            return this._transactions.filter(t => t.id === id);\n        }\n        return [...this._transactions];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getAggregatedChanges(mergeChanges: boolean): T[] {\n        const result: T[] = [];\n        this._states.forEach((state: S, key: any) => {\n            const value = mergeChanges ? this.mergeValues(state.recordRef, state.value) : state.value;\n            result.push({ id: key, newValue: value, type: state.type } as T);\n        });\n        return result;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getState(id: any, pending: boolean = false): S {\n        return pending ? this._pendingStates.get(id) : this._states.get(id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get enabled(): boolean {\n        return true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getAggregatedValue(id: any, mergeChanges: boolean): any {\n        const state = this._states.get(id);\n        const pendingState = super.getState(id);\n\n        //  if there is no state and there is no pending state return null\n        if (!state && !pendingState) {\n            return null;\n        }\n\n        const pendingChange = super.getAggregatedValue(id, false);\n        const change = state && state.value;\n        let aggregatedValue = this.mergeValues(change, pendingChange);\n        if (mergeChanges) {\n            const originalValue = state ? state.recordRef : pendingState.recordRef;\n            aggregatedValue = this.mergeValues(originalValue, aggregatedValue);\n        }\n        return aggregatedValue;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public endPending(commit: boolean): void {\n        this._isPending = false;\n        if (commit) {\n            const actions: { transaction: T, recordRef: any }[] = [];\n            // don't use addTransaction due to custom undo handling\n            for (const transaction of this._pendingTransactions) {\n                const pendingState = this._pendingStates.get(transaction.id);\n                this._transactions.push(transaction);\n                this.updateState(this._states, transaction, pendingState.recordRef);\n                actions.push({ transaction, recordRef: pendingState.recordRef });\n            }\n\n            this._undoStack.push(actions);\n            this._redoStack = [];\n\n            this.onStateUpdate.emit();\n        }\n        super.endPending(commit);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public commit(data: any[], id?: any): void {\n        if (id !== undefined) {\n            const state = this.getState(id);\n            if (state) {\n                this.updateRecord(data, state);\n            }\n        } else {\n            this._states.forEach((s: S) => {\n                this.updateRecord(data, s);\n            });\n        }\n        this.clear(id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public clear(id?: any): void {\n        if (id !== undefined) {\n            this._transactions = this._transactions.filter(t => t.id !== id);\n            this._states.delete(id);\n            //  Undo stack is an array of actions. Each action is array of transaction like objects\n            //  We are going trough all the actions. For each action we are filtering out transactions\n            //  with provided id. Finally if any action ends up as empty array we are removing it from\n            //  undo stack\n            this._undoStack = this._undoStack.map(a => a.filter(t => t.transaction.id !== id)).filter(a => a.length > 0);\n        } else {\n            this._transactions = [];\n            this._states.clear();\n            this._undoStack = [];\n        }\n        this._redoStack = [];\n        this.onStateUpdate.emit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public undo(): void {\n        if (this._undoStack.length <= 0) {\n            return;\n        }\n\n        const lastActions: { transaction: T, recordRef: any }[] = this._undoStack.pop();\n        this._transactions.splice(this._transactions.length - lastActions.length);\n        this._redoStack.push(lastActions);\n\n        this._states.clear();\n        for (const currentActions of this._undoStack) {\n            for (const transaction of currentActions) {\n                this.updateState(this._states, transaction.transaction, transaction.recordRef);\n            }\n        }\n\n        this.onStateUpdate.emit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public redo(): void {\n        if (this._redoStack.length > 0) {\n            let actions: { transaction: T, recordRef: any, useInUndo?: boolean }[];\n            actions = this._redoStack.pop();\n            for (const action of actions) {\n                this.updateState(this._states, action.transaction, action.recordRef);\n                this._transactions.push(action.transaction);\n            }\n\n            this._undoStack.push(actions);\n            this.onStateUpdate.emit();\n        }\n    }\n\n    /**\n     * Verifies if the passed transaction is correct. If not throws an exception.\n     * @param transaction Transaction to be verified\n     */\n    protected verifyAddedTransaction(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        const state = states.get(transaction.id);\n        switch (transaction.type) {\n            case TransactionType.ADD:\n                if (state) {\n                    //  cannot add same item twice\n                    throw new Error(`Cannot add this transaction. Transaction with id: ${transaction.id} has been already added.`);\n                }\n                break;\n            case TransactionType.DELETE:\n            case TransactionType.UPDATE:\n                if (state && state.type === TransactionType.DELETE) {\n                    //  cannot delete or update deleted items\n                    throw new Error(`Cannot add this transaction. Transaction with id: ${transaction.id} has been already deleted.`);\n                }\n                if (!state && !recordRef && !this._isPending) {\n                    //  cannot initially add transaction or delete item with no recordRef\n                    throw new Error(`Cannot add this transaction. This is first transaction of type ${transaction.type} ` +\n                        `for id ${transaction.id}. For first transaction of this type recordRef is mandatory.`);\n                }\n                break;\n        }\n    }\n\n    /**\n     * Updates the provided states collection according to passed transaction and recordRef\n     * @param states States collection to apply the update to\n     * @param transaction Transaction to apply to the current state\n     * @param recordRef Reference to the value of the record in data source, if any, where transaction should be applied\n     */\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        let state = states.get(transaction.id);\n        //  if TransactionType is ADD simply add transaction to states;\n        //  if TransactionType is DELETE:\n        //    - if there is state with this id of type ADD remove it from the states;\n        //    - if there is state with this id of type UPDATE change its type to DELETE;\n        //    - if there is no state with this id add transaction to states;\n        //  if TransactionType is UPDATE:\n        //    - if there is state with this id of type ADD merge new value and state recordRef into state new value\n        //    - if there is state with this id of type UPDATE merge new value into state new value\n        //    - if there is state with this id and state type is DELETE change its type to UPDATE\n        //    - if there is no state with this id add transaction to states;\n        if (state) {\n            switch (transaction.type) {\n                case TransactionType.DELETE:\n                    if (state.type === TransactionType.ADD) {\n                        states.delete(transaction.id);\n                    } else if (state.type === TransactionType.UPDATE) {\n                        state.value = transaction.newValue;\n                        state.type = TransactionType.DELETE;\n                    }\n                    break;\n                case TransactionType.UPDATE:\n                    if (isObject(state.value)) {\n                        if (state.type === TransactionType.ADD) {\n                            state.value = this.mergeValues(state.value, transaction.newValue);\n                        }\n                        if (state.type === TransactionType.UPDATE) {\n                            mergeObjects(state.value, transaction.newValue);\n                        }\n                    } else {\n                        state.value = transaction.newValue;\n                    }\n            }\n        } else {\n            state = { value: cloneValue(transaction.newValue), recordRef: recordRef, type: transaction.type } as S;\n            states.set(transaction.id, state);\n        }\n\n        //  should not clean pending state. This will happen automatically on endPending call\n        if (!this._isPending) {\n            this.cleanState(transaction.id, states);\n        }\n    }\n\n    /**\n     * Compares the state with recordRef and clears all duplicated values. If any state ends as\n     * empty object removes it from states.\n     * @param state State to clean\n     */\n    protected cleanState(id: any, states: Map<any, S>): void {\n        const state = states.get(id);\n        //  do nothing if\n        //  there is no state, or\n        //  there is no state value (e.g. DELETED transaction), or\n        //  there is no recordRef (e.g. ADDED transaction)\n        if (state && state.value && state.recordRef) {\n            //  if state's value is object compare each key with the ones in recordRef\n            //  if values in any key are the same delete it from state's value\n            //  if state's value is not object, simply compare with recordRef and remove\n            //  the state if they are equal\n            if (isObject(state.recordRef)) {\n                for (const key of Object.keys(state.value)) {\n                    if (JSON.stringify(state.recordRef[key]) === JSON.stringify(state.value[key])) {\n                        delete state.value[key];\n                    }\n                }\n\n                //  if state's value is empty remove the state from the states, only if state is not DELETE type\n                if (state.type !== TransactionType.DELETE && Object.keys(state.value).length === 0) {\n                    states.delete(id);\n                }\n            } else {\n                if (state.recordRef === state.value) {\n                    states.delete(id);\n                }\n            }\n        }\n    }\n\n    /**\n     * Updates state related record in the provided data\n     * @param data Data source to update\n     * @param state State to update data from\n     */\n    protected updateRecord(data: any[], state: S) {\n        const index = data.findIndex(i => JSON.stringify(i) === JSON.stringify(state.recordRef || {}));\n        switch (state.type) {\n            case TransactionType.ADD:\n                data.push(state.value);\n                break;\n            case TransactionType.DELETE:\n                if (0 <= index && index < data.length) {\n                    data.splice(index, 1);\n                }\n                break;\n            case TransactionType.UPDATE:\n                if (0 <= index && index < data.length) {\n                    data[index] = this.updateValue(state);\n                }\n                break;\n        }\n    }\n}\n","import { HierarchicalTransaction, HierarchicalState, TransactionType } from './transaction';\nimport { Injectable } from '@angular/core';\nimport { IgxTransactionService } from './igx-transaction';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { cloneValue } from '../../core/utils';\n\n/** @experimental @hidden */\n@Injectable()\nexport class IgxHierarchicalTransactionService<T extends HierarchicalTransaction, S extends HierarchicalState>\n    extends IgxTransactionService<T, S> {\n\n    public getAggregatedChanges(mergeChanges: boolean): T[] {\n        const result: T[] = [];\n        this._states.forEach((state: S, key: any) => {\n            const value = mergeChanges ? this.mergeValues(state.recordRef, state.value) : cloneValue(state.value);\n            this.clearArraysFromObject(value);\n            result.push({ id: key, path: state.path, newValue: value, type: state.type } as T);\n        });\n        return result;\n    }\n\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        super.updateState(states, transaction, recordRef);\n\n        //  if transaction has no path, e.g. flat data source, get out\n        if (!transaction.path) {\n            return;\n        }\n\n        const currentState = states.get(transaction.id);\n        if (currentState) {\n            currentState.path = transaction.path;\n        }\n\n        //  if transaction has path, Hierarchical data source, and it is DELETE\n        //  type transaction for all child rows remove ADD states and update\n        //  transaction type and value of UPDATE states\n        if (transaction.type === TransactionType.DELETE) {\n            states.forEach((v: S, k: any) => {\n                if (v.path && v.path.indexOf(transaction.id) !== -1) {\n                    switch (v.type) {\n                        case TransactionType.ADD:\n                            states.delete(k);\n                            break;\n                        case TransactionType.UPDATE:\n                            states.get(k).type = TransactionType.DELETE;\n                            states.get(k).value = null;\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     * Applies all transactions over the provided data\n     * @param data Data source to update\n     * @param primaryKey Primary key of the hierarchical data\n     * @param childDataKey Kye of child data collection\n     * @param id Optional record id to commit transactions for\n     */\n    public commit(data: any[], primaryKey?: any, childDataKey?: any, id?: any): void {\n        if (childDataKey !== undefined) {\n            let transactions = this.getAggregatedChanges(true);\n            if (id !== undefined) {\n                transactions = transactions.filter(t => t.id === id);\n            }\n            DataUtil.mergeHierarchicalTransactions(data, transactions, childDataKey, primaryKey, true);\n        } else {\n            super.commit(data, id);\n        }\n        this.clear(id);\n    }\n\n    //  TODO: remove this method. Force cloning to strip child arrays when needed instead\n    private clearArraysFromObject(obj: {}) {\n        if (obj) {\n            for (const prop of Object.keys(obj)) {\n                if (Array.isArray(obj[prop])) {\n                    delete obj[prop];\n                }\n            }\n        }\n    }\n}\n\n","import {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    Inject\n} from '@angular/core';\nimport { IgxNavigationService, IToggleView } from '../../core/navigation';\nimport { IgxOverlayService } from '../../services/overlay/overlay';\nimport { OverlaySettings, OverlayEventArgs, ConnectedPositioningStrategy, AbsoluteScrollStrategy, IPositionStrategy } from '../../services';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subscription, Subject, MonoTypeOperatorFunction } from 'rxjs';\nimport { OverlayClosingEventArgs } from '../../services/overlay/utilities';\nimport { CancelableEventArgs, CancelableBrowserEventArgs, IBaseEventArgs } from '../../core/utils';\n\n@Directive({\n    exportAs: 'toggle',\n    selector: '[igxToggle]'\n})\nexport class IgxToggleDirective implements IToggleView, OnInit, OnDestroy {\n    protected _overlayId: string;\n    private destroy$ = new Subject<boolean>();\n    private _overlaySubFilter: [MonoTypeOperatorFunction<OverlayEventArgs>, MonoTypeOperatorFunction<OverlayEventArgs>] = [\n        filter(x => x.id === this._overlayId),\n        takeUntil(this.destroy$)\n    ];\n    private _overlayOpenedSub: Subscription;\n    private _overlayClosingSub: Subscription;\n    private _overlayClosedSub: Subscription;\n\n    /**\n     * Emits an event after the toggle container is opened.\n     *\n     * ```typescript\n     * onToggleOpened(event) {\n     *    alert(\"Toggle opened!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onOpened)='onToggleOpened($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter();\n\n    /**\n     * Emits an event before the toggle container is opened.\n     *\n     * ```typescript\n     * onToggleOpening(event) {\n     *  alert(\"Toggle opening!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onOpening)='onToggleOpening($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<CancelableEventArgs & IBaseEventArgs>();\n\n    /**\n     * Emits an event after the toggle container is closed.\n     *\n     * ```typescript\n     * onToggleClosed(event) {\n     *  alert(\"Toggle closed!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onClosed)='onToggleClosed($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter();\n\n    /**\n     * Emits an event before the toggle container is closed.\n     *\n     * ```typescript\n     * onToggleClosing(event) {\n     *  alert(\"Toggle closing!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *  igxToggle\n     *  (onClosing)='onToggleClosing($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs & IBaseEventArgs>();\n\n    private _collapsed = true;\n    /**\n     * @hidden\n     */\n    public get collapsed(): boolean {\n        return this._collapsed;\n    }\n\n    /**\n     * Identifier which is registered into `IgxNavigationService`\n     *\n     * ```typescript\n     * let myToggleId = this.toggle.id;\n     * ```\n     */\n    @Input()\n    public id: string;\n\n    /**\n     * @hidden\n     */\n    public get element(): HTMLElement {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-toggle--hidden')\n    @HostBinding('attr.aria-hidden')\n    public get hiddenClass() {\n        return this.collapsed;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-toggle')\n    public get defaultClass() {\n        return !this.collapsed;\n    }\n\n    /**\n     * @hidden\n     */\n    constructor(\n        private elementRef: ElementRef,\n        private cdr: ChangeDetectorRef,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        @Optional() private navigationService: IgxNavigationService) {\n    }\n\n    /**\n     * Opens the toggle.\n     *\n     * ```typescript\n     * this.myToggle.open();\n     * ```\n     */\n    public open(overlaySettings?: OverlaySettings) {\n        //  if there is open animation do nothing\n        //  if toggle is not collapsed and there is no close animation do nothing\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasOpenAnimation = info ? info.openAnimationPlayer : false;\n        const hasCloseAnimation = info ? info.closeAnimationPlayer : false;\n        if (hasOpenAnimation || !(this._collapsed || hasCloseAnimation)) {\n            return;\n        }\n\n        if (!info) {\n            this._overlayId = this.overlayService.attach(this.elementRef, overlaySettings);\n        }\n\n        this._collapsed = false;\n        this.cdr.detectChanges();\n\n        const openEventArgs: CancelableEventArgs = { cancel: false };\n        this.onOpening.emit(openEventArgs);\n        if (openEventArgs.cancel) {\n            this._collapsed = true;\n            this.cdr.detectChanges();\n            return;\n        }\n\n        this.overlayService.show(this._overlayId, overlaySettings);\n\n        this.unsubscribe();\n        this._overlayOpenedSub = this.overlayService.onOpened.pipe(...this._overlaySubFilter).subscribe(() => {\n            this.onOpened.emit();\n        });\n\n        this._overlayClosingSub = this.overlayService\n            .onClosing\n            .pipe(...this._overlaySubFilter)\n            .subscribe((e: OverlayClosingEventArgs) => {\n                const eventArgs: CancelableBrowserEventArgs = { cancel: false, event: e.event };\n                this.onClosing.emit(eventArgs);\n                e.cancel = eventArgs.cancel;\n\n                //  in case event is not canceled this will close the toggle and we need to unsubscribe.\n                //  Otherwise if for some reason, e.g. close on outside click, close() gets called before\n                //  onClosed was fired we will end with calling onClosing more than once\n                if (!e.cancel) {\n                    this.clearSubscription(this._overlayClosingSub);\n                }\n            });\n\n        this._overlayClosedSub = this.overlayService.onClosed\n            .pipe(...this._overlaySubFilter)\n            .subscribe(this.overlayClosed);\n    }\n\n    /**\n     * Closes the toggle.\n     *\n     * ```typescript\n     * this.myToggle.close();\n     * ```\n     */\n    public close() {\n        //  if toggle is collapsed do nothing\n        //  if there is close animation do nothing, toggle will close anyway\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasCloseAnimation = info ? info.closeAnimationPlayer : false;\n        if (this._collapsed || hasCloseAnimation) {\n            return;\n        }\n\n        this.overlayService.hide(this._overlayId);\n    }\n\n    /**\n     * Opens or closes the toggle, depending on its current state.\n     *\n     * ```typescript\n     * this.myToggle.toggle();\n     * ```\n     */\n    public toggle(overlaySettings?: OverlaySettings) {\n        //  if toggle is collapsed call open\n        //  if there is close animation call open\n        if (this.collapsed || this.isClosing) {\n            this.open(overlaySettings);\n        } else {\n            this.close();\n        }\n    }\n\n    /** @hidden @internal */\n    public get isClosing() {\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        return info ? info.closeAnimationPlayer : false;\n    }\n\n    /**\n     * Repositions the toggle.\n     * ```typescript\n     * this.myToggle.reposition();\n     * ```\n     */\n    public reposition() {\n        this.overlayService.reposition(this._overlayId);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        if (this.navigationService && this.id) {\n            this.navigationService.add(this.id, this);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        if (this.navigationService && this.id) {\n            this.navigationService.remove(this.id);\n        }\n        if (!this.collapsed && this._overlayId) {\n            this.overlayService.hide(this._overlayId);\n        }\n        this.unsubscribe();\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    private overlayClosed = () => {\n        this._collapsed = true;\n        this.cdr.detectChanges();\n        delete this._overlayId;\n        this.unsubscribe();\n        this.onClosed.emit();\n    }\n\n    private unsubscribe() {\n        this.clearSubscription(this._overlayOpenedSub);\n        this.clearSubscription(this._overlayClosingSub);\n        this.clearSubscription(this._overlayClosedSub);\n    }\n\n    private clearSubscription(subscription: Subscription) {\n        if (subscription && !subscription.closed) {\n            subscription.unsubscribe();\n        }\n    }\n}\n\n@Directive({\n    exportAs: 'toggle-action',\n    selector: '[igxToggleAction]'\n})\nexport class IgxToggleActionDirective implements OnInit {\n    protected _overlayDefaults: OverlaySettings;\n\n    /**\n     * Provide settings that control the toggle overlay positioning, interaction and scroll behavior.\n     * ```typescript\n     * const settings: OverlaySettings = {\n     *      closeOnOutsideClick: false,\n     *      modal: false\n     *  }\n     * ```\n     * ---\n     * ```html\n     * <!--set-->\n     * <div igxToggleAction [overlaySettings]=\"settings\"></div>\n     * ```\n     */\n    @Input()\n    public overlaySettings: OverlaySettings;\n\n    /**\n     * Determines where the toggle element overlay should be attached.\n     *\n     * ```html\n     * <!--set-->\n     * <div igxToggleAction [igxToggleOutlet]=\"outlet\"></div>\n     * ```\n     * Where `outlet` in an instance of `IgxOverlayOutletDirective` or an `ElementRef`\n     */\n    @Input('igxToggleOutlet')\n    public outlet: IgxOverlayOutletDirective | ElementRef;\n\n    /**\n     * @hidden\n     */\n    @Input('igxToggleAction')\n    set target(target: any) {\n        if (target !== null && target !== '') {\n            this._target = target;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get target(): any {\n        if (typeof this._target === 'string') {\n            return this.navigationService.get(this._target);\n        }\n        return this._target;\n    }\n\n    protected _target: IToggleView | string;\n\n    constructor(private element: ElementRef, @Optional() private navigationService: IgxNavigationService) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this._overlayDefaults = {\n            positionStrategy: new ConnectedPositioningStrategy({ target: this.element.nativeElement }),\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            closeOnOutsideClick: true,\n            modal: false,\n            excludePositionTarget: true\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click')\n    public onClick() {\n        if (this.outlet) {\n            this._overlayDefaults.outlet = this.outlet;\n        }\n\n        const clonedSettings = Object.assign({}, this._overlayDefaults, this.overlaySettings);\n        this.updateOverlaySettings(clonedSettings);\n        this.target.toggle(clonedSettings);\n    }\n\n    /**\n     * Updates provided overlay settings\n     * @param settings settings to update\n     * @returns returns updated copy of provided overlay settings\n     */\n    protected updateOverlaySettings(settings: OverlaySettings): OverlaySettings {\n        if (settings && settings.positionStrategy) {\n            const positionStrategyClone: IPositionStrategy = settings.positionStrategy.clone();\n            positionStrategyClone.settings.target = this.element.nativeElement;\n            settings.positionStrategy = positionStrategyClone;\n        }\n\n        return settings;\n    }\n}\n\n/**\n * Mark an element as an igxOverlay outlet container.\n * Directive instance is exported as `overlay-outlet` to be assigned to templates variables:\n * ```html\n * <div igxOverlayOutlet #outlet=\"overlay-outlet\"></div>\n * ```\n */\n@Directive({\n    exportAs: 'overlay-outlet',\n    selector: '[igxOverlayOutlet]'\n})\nexport class IgxOverlayOutletDirective {\n    constructor(public element: ElementRef) { }\n\n    /** @hidden */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxToggleDirective, IgxToggleActionDirective, IgxOverlayOutletDirective],\n    exports: [IgxToggleDirective, IgxToggleActionDirective, IgxOverlayOutletDirective],\n    providers: [IgxNavigationService]\n})\nexport class IgxToggleModule { }\n","import { CancelableEventArgs, CancelableBrowserEventArgs, IBaseEventArgs } from '../core/utils';\nimport { IgxDropDownItemBase } from './drop-down-item.base';\nimport { IToggleView } from '../core/navigation/IToggleView';\nimport { EventEmitter } from '@angular/core';\nimport { DisplayDensityBase } from '../core/density';\n\n/** @hidden */\nexport enum Navigate {\n    Up = -1,\n    Down = 1\n}\n\n/** Key actions that have designated handlers in IgxDropDownComponent */\nexport enum DropDownActionKey {\n    ESCAPE = 'escape',\n    ENTER = 'enter',\n    SPACE = 'space'\n}\n\n/**\n * Interface that encapsulates onSelection event arguments - old selection, new selection and cancel selection.\n * @export\n */\nexport interface ISelectionEventArgs extends CancelableEventArgs, IBaseEventArgs {\n    oldSelection: IgxDropDownItemBase;\n    newSelection: IgxDropDownItemBase;\n}\n\n/**\n * Interface for an instance of IgxDropDownNavigationDirective\n * @export\n */\nexport interface IDropDownNavigationDirective {\n    target: any;\n    handleKeyDown(event: KeyboardEvent): void;\n    onArrowDownKeyDown(event?: KeyboardEvent): void;\n    onArrowUpKeyDown(event?: KeyboardEvent): void;\n    onEndKeyDown(event?: KeyboardEvent): void;\n    onHomeKeyDown(event?: KeyboardEvent): void;\n}\n\nexport const IGX_DROPDOWN_BASE = 'IgxDropDownBaseToken';\n\n/**\n * @hidden\n */\nexport interface IDropDownList extends DisplayDensityBase {\n    onSelection: EventEmitter<ISelectionEventArgs>;\n    width: string;\n    height: string;\n    id: string;\n    maxHeight: string;\n    collapsed: boolean;\n    items: IgxDropDownItemBase[];\n    headers: IgxDropDownItemBase[];\n    focusedItem: IgxDropDownItemBase;\n    navigateFirst(): void;\n    navigateLast(): void;\n    navigateNext(): void;\n    navigatePrev(): void;\n    navigateItem(newIndex: number, direction?: Navigate): void;\n    onItemActionKey(key: DropDownActionKey, event?: Event): void;\n}\n\n/**\n * @hidden\n */\nexport interface IDropDownBase extends IDropDownList, IToggleView {\n    selectedItem: any;\n    onOpening: EventEmitter<CancelableEventArgs>;\n    onOpened: EventEmitter<void>;\n    onClosing: EventEmitter<CancelableBrowserEventArgs>;\n    onClosed: EventEmitter<void>;\n    allowItemsFocus?: boolean;\n    setSelectedItem(index: number): void;\n    selectItem(item: IgxDropDownItemBase, event?: Event): void;\n}\n\n","import { Injectable } from '@angular/core';\n\n/** @hidden */\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxSelectionAPIService {\n    /**\n     * If primaryKey is defined, then multiple selection is based on the primaryKey, and it is array of numbers, strings, etc.\n     * If the primaryKey is omitted, then selection is based on the item data\n     */\n    protected selection: Map<string,  Set<any>> = new Map<string, Set<any>>();\n\n    /**\n     * Get current component selection.\n     * @param componentID ID of the component.\n     */\n    public get(componentID: string): Set<any> {\n        return this.selection.get(componentID);\n    }\n\n    /**\n     * Set new component selection.\n     * @param componentID ID of the component.\n     * @param newSelection The new component selection to be set.\n     */\n    public set(componentID: string, newSelection: Set<any>) {\n        if (!componentID) {\n            throw Error('Invalid value for component id!');\n        }\n        this.selection.set(componentID, newSelection);\n    }\n\n    /**\n     * Clears selection for component.\n     * @param componentID ID of the component.\n     */\n    public clear(componentID: string) {\n        this.selection.set(componentID, this.get_empty());\n    }\n\n    /**\n     * Get current component selection length.\n     * @param componentID ID of the component.\n     */\n    public size(componentID: string): number {\n        const sel = this.get(componentID);\n        return sel ? sel.size : 0;\n    }\n\n    /**\n     * Creates new selection that consist of the new item added to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the select_item() one.\n     * @param componentID ID of the component, which we add new item to.\n     * @param itemID ID of the item to add to component selection.\n     * @param sel Used internally only by the selection (add_items method) to accumulate selection for multiple items.\n     *\n     * @returns Selection after the new item is added.\n     */\n    public add_item(componentID: string, itemID, sel?: Set<any>): Set<any> {\n        if (!sel) {\n            sel = new Set(this.get(componentID));\n        }\n        if (sel === undefined) {\n            sel = this.get_empty();\n        }\n        if (!itemID && itemID !== 0) {\n            throw Error('Invalid value for item id!');\n        }\n        sel.add(itemID);\n        return sel;\n    }\n\n    /**\n     * Creates new selection that consist of the new items added to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the select_items() one.\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     * @param clearSelection If true it will clear previous selection.\n     *\n     * @returns Selection after the new items are added.\n     */\n    public add_items(componentID: string, itemIDs: any[], clearSelection?: boolean): Set<any> {\n        let selection: Set<any>;\n        if (clearSelection) {\n            selection = this.get_empty();\n        } else if (itemIDs && itemIDs.length === 0) {\n            selection = new Set(this.get(componentID));\n        }\n        itemIDs.forEach((item) => selection = this.add_item(componentID, item, selection));\n        return selection;\n    }\n\n    /**\n     * Add item to the current component selection.\n     * @param componentID ID of the component, which we add new item to.\n     * @param itemID ID of the item to add to component selection.\n     * @param sel Used internally only by the selection (select_items method) to accumulate selection for multiple items.\n     */\n    public select_item(componentID: string, itemID, sel?: Set<any>) {\n        this.set(componentID, this.add_item(componentID, itemID, sel));\n    }\n\n    /**\n     * Add items to the current component selection.\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     * @param clearSelection If true it will clear previous selection.\n     */\n    public select_items(componentID: string, itemID: any[], clearSelection?: boolean) {\n        this.set(componentID, this.add_items(componentID, itemID, clearSelection));\n    }\n\n    /**\n     * Creates new selection that consist of the new items excluded from the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the deselect_item() one.\n     * @param componentID ID of the component, which we remove items from.\n     * @param itemID ID of the item to remove from component selection.\n     * @param sel Used internally only by the selection (delete_items method) to accumulate deselected items.\n     *\n     * @returns Selection after the item is removed.\n     */\n    public delete_item(componentID: string, itemID, sel?: Set<any>) {\n        if (!sel) {\n            sel = new Set(this.get(componentID));\n        }\n        if (sel === undefined) {\n            return;\n        }\n        sel.delete(itemID);\n        return sel;\n    }\n\n    /**\n     * Creates new selection that consist of the new items removed to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the deselect_items() one.\n     * @param componentID ID of the component, which we remove items from.\n     * @param itemID ID of the items to remove from component selection.\n     *\n     * @returns Selection after the items are removed.\n     */\n    public delete_items(componentID: string, itemIDs: any[]): Set<any> {\n        let selection: Set<any>;\n        itemIDs.forEach((deselectedItem) => selection = this.delete_item(componentID, deselectedItem, selection));\n        return selection;\n    }\n\n    /**\n     * Remove item from the current component selection.\n     * @param componentID ID of the component, which we remove item from.\n     * @param itemID ID of the item to remove from component selection.\n     * @param sel Used internally only by the selection (deselect_items method) to accumulate selection for multiple items.\n     */\n    public deselect_item(componentID: string, itemID, sel?: Set<any>) {\n        this.set(componentID, this.delete_item(componentID, itemID, sel));\n    }\n\n    /**\n     * Remove items to the current component selection.\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     */\n    public deselect_items(componentID: string, itemID: any[], clearSelection?: boolean) {\n        this.set(componentID, this.delete_items(componentID, itemID));\n    }\n\n    /**\n     * Check if the item is selected in the component selection.\n     * @param componentID ID of the component.\n     * @param itemID ID of the item to search.\n     *\n     * @returns If item is selected.\n     */\n    public is_item_selected(componentID: string, itemID): boolean {\n        const sel = this.get(componentID);\n        if (!sel) {\n            return false;\n        }\n        return sel.has(itemID);\n    }\n\n    /**\n     * Get first element in the selection.\n     * This is correct when we have only one item in the collection (for single selection purposes)\n     * and the method returns that item.\n     * @param componentID ID of the component.\n     *\n     * @returns First element in the set.\n     */\n    public first_item(componentID: string) {\n        const sel = this.get(componentID);\n        if (sel && sel.size > 0) {\n            return sel.values().next().value;\n       }\n    }\n\n    /**\n     * Returns whether all items are selected.\n     * @param componentID ID of the component.\n     * @param dataCount: number Number of items in the data.\n     *\n     * @returns If all items are selected.\n     */\n    public are_all_selected(componentID: string, dataCount: number): boolean {\n        return dataCount > 0 && dataCount === this.size(componentID);\n    }\n\n    /**\n     * Returns whether any of the items is selected.\n     * @param componentID ID of the component.\n     * @param data Entire data array.\n     *\n     * @returns If there is any item selected.\n     */\n    public are_none_selected(componentID: string): boolean {\n        return this.size(componentID) === 0;\n    }\n\n    /**\n     * Get all primary key values from a data array. If there isn't a primary key defined that the entire data is returned instead.\n     * @param data Entire data array.\n     * @param primaryKey Data primary key.\n     *\n     * @returns Array of identifiers, either primary key values or the entire data array.\n     */\n    public get_all_ids(data, primaryKey?) {\n        // If primaryKey is 0, this should still map to the property\n        return primaryKey !== undefined && primaryKey !== null ? data.map((x) => x[primaryKey]) : data;\n    }\n\n    /**\n     * Returns empty selection collection.\n     * @returns empty set.\n    */\n    public get_empty() {\n        return new Set();\n    }\n}\n","import { Component, Input, HostBinding } from '@angular/core';\n\nlet NEXT_ID = 0;\n/**\n * The `<igx-drop-down-item>` is a container intended for row items in\n * a `<igx-drop-down>` container.\n */\n@Component({\n    selector: 'igx-drop-down-item-group',\n    template: `\n        <label id=\"{{labelId}}\">{{ label }}</label>\n        <ng-content select=\"igx-drop-down-item\"></ng-content>\n    `\n})\nexport class IgxDropDownGroupComponent {\n    private _id = NEXT_ID++;\n\n    /**\n     * @hidden @internal\n     */\n    public get labelId(): string {\n        return `igx-item-group-label-${this._id}`;\n    }\n\n    @HostBinding(`attr.aria-labelledby`)\n    public get labelledBy(): string {\n        return this.labelId;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.role')\n    public role = 'group';\n\n    /** @hidden @internal */\n    @HostBinding('class.igx-drop-down__group')\n    public groupClass = true;\n    /**\n     * Sets/gets if the item group is disabled\n     *\n     * ```typescript\n     * const myDropDownGroup: IgxDropDownGroupComponent = this.dropdownGroup;\n     * // get\n     * ...\n     * const groupState: boolean = myDropDownGroup.disabled;\n     * ...\n     * //set\n     * ...\n     * myDropDownGroup,disabled = false;\n     * ...\n     * ```\n     *\n     * ```html\n     * <igx-drop-down-item-group [label]=\"'My Items'\" [disabled]=\"true\">\n     *     <igx-drop-down-item *ngFor=\"let item of items[index]\" [value]=\"item.value\">\n     *         {{ item.text }}\n     *     </igx-drop-down-item>\n     * </igx-drop-down-item-group>\n     * ```\n     *\n     * **NOTE:** All items inside of a disabled drop down group will be treated as disabled\n     */\n    @Input()\n    @HostBinding(`attr.aria-disabled`)\n    @HostBinding('class.igx-drop-down__group--disabled')\n    public disabled = false;\n\n    /**\n     * Sets/gets the label of the item group\n     *\n     * ```typescript\n     * const myDropDownGroup: IgxDropDownGroupComponent = this.dropdownGroup;\n     * // get\n     * ...\n     * const myLabel: string = myDropDownGroup.label;\n     * ...\n     * // set\n     * ...\n     * myDropDownGroup.label = 'My New Label';\n     * ...\n     * ```\n     *\n     * ```html\n     * <igx-drop-down-item-group [label]=\"'My new Label'\">\n     *      ...\n     * </igx-drop-down-item-group>\n     * ```\n    */\n    @Input()\n    public label: string;\n}\n","import { IDropDownBase, IGX_DROPDOWN_BASE } from './drop-down.common';\nimport { Input, HostBinding, HostListener, ElementRef, Optional, Inject, DoCheck, Output, EventEmitter } from '@angular/core';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { DeprecateProperty, showMessage } from '../core/deprecateDecorators';\nimport { IgxDropDownGroupComponent } from './drop-down-group.component';\n\nlet NEXT_ID = 0;\nlet warningShown = false;\n\n/**\n * An abstract class defining a drop-down item:\n * With properties / styles for selection, highlight, height\n * Bindable property for passing data (`value: any`)\n * Parent component (has to be used under a parent with type `IDropDownBase`)\n * Method for handling click on Host()\n */\nexport abstract class IgxDropDownItemBase implements DoCheck {\n    /**\n     * @hidden\n     */\n    protected _focused = false;\n    protected _selected = false;\n    protected _index = null;\n    protected _disabled = false;\n    protected get hasIndex(): boolean {\n        return this._index !== null && this._index !== undefined;\n    }\n\n    /**\n     * Sets/gets the `id` of the item.\n     * ```html\n     * <igx-drop-down-item [id] = 'igx-drop-down-item-0'></igx-drop-down-item>\n     * ```\n     * ```typescript\n     * let itemId =  this.item.id;\n     * ```\n     * @memberof IgxSelectItemComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-drop-down-item-${NEXT_ID++}`;\n\n    /**\n     * @hidden @internal\n     */\n    public get itemID() {\n        return this;\n    }\n\n    /**\n     * The data index of the dropdown item.\n     *\n     * ```typescript\n     * // get the data index of the selected dropdown item\n     * let selectedItemIndex = this.dropdown.selectedItem.index\n     * ```\n     */\n    @Input()\n    public get index(): number {\n        if (this._index === null) {\n            warningShown = showMessage(\n                'IgxDropDownItemBase: Automatic index is deprecated.' +\n                'Bind in the template instead using `<igx-drop-down-item [index]=\"i\"` instead.`',\n                warningShown);\n            return this.itemIndex;\n        }\n        return this._index;\n    }\n\n    public set index(value) {\n        this._index = value;\n    }\n\n    /**\n     * Gets/sets the value of the item if the item is databound\n     *\n     * ```typescript\n     * // usage in IgxDropDownItemComponent\n     * // get\n     * let mySelectedItemValue = this.dropdown.selectedItem.value;\n     *\n     * // set\n     * let mySelectedItem = this.dropdown.selectedItem;\n     * mySelectedItem.value = { id: 123, name: 'Example Name' }\n     *\n     * // usage in IgxComboItemComponent\n     * // get\n     * let myComboItemValue = this.combo.items[0].value;\n     * ```\n     */\n    @Input()\n    public value: any;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__item')\n    get itemStyle(): boolean {\n        return !this.isHeader;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__item--cosy')\n    public get itemStyleCosy() {\n        return this.dropDown.displayDensity === 'cosy' && !this.isHeader;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__item--compact')\n    public get itemStyleCompact() {\n        return this.dropDown.displayDensity === 'compact' && !this.isHeader;\n    }\n\n    /**\n     * Sets/Gets if the item is the currently selected one in the dropdown\n     *\n     * ```typescript\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemSelected = mySelectedItem.selected; // true\n     * ```\n     *\n     * Two-way data binding\n     * ```html\n     * <igx-drop-down-item [(selected)]='model.isSelected'></igx-drop-down-item>\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-selected')\n    @HostBinding('class.igx-drop-down__item--selected')\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    set selected(value: boolean) {\n        if (this.isHeader) {\n            return;\n        }\n        this._selected = value;\n        this.selectedChange.emit(this._selected);\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public selectedChange = new EventEmitter<boolean>();\n\n    /**\n     * @hidden @internal\n     */\n    @Input()\n    @DeprecateProperty(`IgxDropDownItemBase \\`isSelected\\` property is deprecated.\\n` +\n        `Use \\`selected\\` instead.`)\n    get isSelected(): boolean {\n        return this.selected;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    set isSelected(value: boolean) {\n        this.selected = value;\n    }\n\n    /**\n     * Sets/gets if the given item is focused\n     * ```typescript\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemFocused = mySelectedItem.focused;\n     * ```\n     */\n    @HostBinding('class.igx-drop-down__item--focused')\n    get focused(): boolean {\n        return (!this.isHeader && !this.disabled) && this._focused;\n    }\n\n    /**\n     * ```html\n     *  <igx-drop-down-item *ngFor=\"let item of items\" focused={{!item.focused}}>\n     *      <div>\n     *          {{item.field}}\n     *      </div>\n     *  </igx-drop-down-item>\n     * ```\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @DeprecateProperty(`IgxDropDownItemBase \\`isFocused\\` property is depracated.\\n` +\n        `Use \\`focused\\` instead.`)\n    get isFocused(): boolean {\n        return this.focused;\n    }\n    /**\n     * @hidden @internal\n     */\n    set isFocused(value: boolean) {\n        this.focused = value;\n    }\n\n    /**\n     * Sets/gets if the given item is header\n     * ```typescript\n     *  // get\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemHeader = mySelectedItem.isHeader;\n     * ```\n     *\n     * ```html\n     *  <!--set-->\n     *  <igx-dropdown-item *ngFor=\"let item of items\">\n     *      <div *ngIf=\"items.indexOf(item) === 5; then item.isHeader = true\">\n     *          {{item.field}}\n*           </div>\n     *  </igx-drop-down-item>\n     * ```\n     */\n    @Input()\n    @HostBinding('class.igx-drop-down__header')\n    public isHeader: boolean;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__header--cosy')\n    public get headerClassCosy() {\n        return this.isHeader && this.dropDown.displayDensity === 'cosy';\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__header--compact')\n    public get headerClassCompact() {\n        return this.isHeader && this.dropDown.displayDensity === 'compact';\n    }\n\n    /**\n     * Sets/gets if the given item is disabled\n     *\n     * ```typescript\n     *  // get\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let myItemIsDisabled = mySelectedItem.disabled;\n     * ```\n     *\n     * ```html\n     *  <igx-drop-down-item *ngFor=\"let item of items\" disabled={{!item.disabled}}>\n     *      <div>\n     *          {{item.field}}\n     *      </div>\n     *  </igx-drop-down-item>\n     * ```\n     * **NOTE:** Drop-down items inside of a disabled `IgxDropDownGroup` will always count as disabled\n     */\n    @Input()\n    @HostBinding('attr.aria-disabled')\n    @HostBinding('class.igx-drop-down__item--disabled')\n    public get disabled(): boolean {\n        return this.group ? this.group.disabled || this._disabled : this._disabled;\n    }\n\n    public set disabled(value: boolean) {\n        this._disabled = value;\n    }\n\n    /**\n     * Gets/sets the `role` attribute of the item. Default is 'option'.\n     *\n     * ```html\n     *  <igx-drop-down-item [role]=\"customRole\"></igx-drop-down-item>\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.role')\n    public role = 'option';\n\n    /**\n     * Gets item index\n     * @hidden @internal\n     */\n    public get itemIndex(): number {\n        return this.dropDown.items.indexOf(this);\n    }\n\n    /**\n     * Gets item element height\n     * @hidden @internal\n     */\n    public get elementHeight(): number {\n        return this.elementRef.nativeElement.clientHeight;\n    }\n\n    /**\n     * Get item html element\n     * @hidden @internal\n     */\n    public get element(): ElementRef {\n        return this.elementRef;\n    }\n\n    constructor(\n        @Inject(IGX_DROPDOWN_BASE) protected dropDown: IDropDownBase,\n        protected elementRef: ElementRef,\n        @Optional() protected group: IgxDropDownGroupComponent,\n        @Optional() @Inject(IgxSelectionAPIService) protected selection?: IgxSelectionAPIService\n    ) { }\n\n    /**\n     * @hidden @internal\n     */\n    @HostListener('click', ['$event'])\n    clicked(event) {\n    }\n\n    ngDoCheck(): void {\n        if (this._selected) {\n            const dropDownSelectedItem = this.dropDown.selectedItem;\n            if (!dropDownSelectedItem) {\n                this.dropDown.selectItem(this);\n            } else if (this.hasIndex\n                ? this._index !== dropDownSelectedItem.index || this.value !== dropDownSelectedItem.value :\n                this !== dropDownSelectedItem) {\n                this.dropDown.selectItem(this);\n            }\n        }\n    }\n}\n","import {\n    Component,\n    DoCheck,\n    HostListener,\n    HostBinding\n} from '@angular/core';\nimport { IgxDropDownItemBase } from './drop-down-item.base';\n\n/**\n * The `<igx-drop-down-item>` is a container intended for row items in\n * a `<igx-drop-down>` container.\n */\n@Component({\n    selector: 'igx-drop-down-item',\n    templateUrl: 'drop-down-item.component.html'\n})\nexport class IgxDropDownItemComponent extends IgxDropDownItemBase implements DoCheck {\n    /**\n     * @inheritdoc\n     */\n    get focused(): boolean {\n        let focusedState = this._focused;\n        if (this.hasIndex) {\n            const focusedItem = this.selection.first_item(`${this.dropDown.id}-active`);\n            const focusedIndex = focusedItem ? focusedItem.index : -1;\n            focusedState = this._index === focusedIndex;\n        }\n        return !this.isHeader && !this.disabled && focusedState;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n    /**\n     * @inheritdoc\n     */\n    get selected(): boolean {\n        if (this.hasIndex) {\n            const item = this.selection.first_item(`${this.dropDown.id}`);\n            return item ? item.index === this._index && item.value === this.value : false;\n        }\n        return this._selected;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    set selected(value: boolean) {\n        if (this.isHeader) {\n            return;\n        }\n        this._selected = value;\n        this.selectedChange.emit(this._selected);\n    }\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.tabindex')\n    get setTabIndex() {\n        const shouldSetTabIndex = this.dropDown.allowItemsFocus && !(this.disabled || this.isHeader);\n        if (shouldSetTabIndex) {\n            return 0;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostListener('click', ['$event'])\n    clicked(event) {\n        if (this.disabled || this.isHeader) {\n            const focusedItem = this.dropDown.items.find((item) => item.focused);\n            if (this.dropDown.allowItemsFocus && focusedItem) {\n                focusedItem.element.nativeElement.focus({ preventScroll: true });\n            }\n            return;\n        }\n        if (this.selection) {\n            this.dropDown.selectItem(this, event);\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostListener('mousedown', ['$event'])\n    mousedownHandler(event) {\n        event.preventDefault();\n    }\n}\n","import { InjectionToken, Input, Output, EventEmitter, DoCheck, OnInit } from '@angular/core';\nimport { IBaseEventArgs } from './utils';\n\n\n/**\n * Defines the posible values of the components' display density.\n */\nexport enum DisplayDensity {\n    comfortable = 'comfortable',\n    cosy = 'cosy',\n    compact = 'compact'\n}\n\n/**\n * Describes the object used to configure the DisplayDensity in Angular DI.\n */\nexport interface IDisplayDensityOptions {\n    displayDensity: DisplayDensity;\n}\n\nexport interface IDensityChangedEventArgs extends IBaseEventArgs {\n    oldDensity: DisplayDensity;\n    newDensity: DisplayDensity;\n}\n\n/**\n * Defines the DisplayDensity DI token.\n */\nexport const DisplayDensityToken = new InjectionToken<IDisplayDensityOptions>('DisplayDensity');\n\n/**\n * Base class containing all logic required for implementing DisplayDensity.\n */\nexport class DisplayDensityBase implements DoCheck, OnInit {\n    protected _displayDensity: DisplayDensity;\n\n     /**\n     * @hidden\n     */\n    public initialDensity: DisplayDensity;\n\n    /**\n     * Returns the theme of the component.\n     * The default theme is `comfortable`.\n     * Available options are `comfortable`, `cosy`, `compact`.\n     * ```typescript\n     * let componentTheme = this.component.displayDensity;\n     * ```\n     */\n    @Input()\n    public get displayDensity(): DisplayDensity | string {\n        return this._displayDensity ||\n            ((this.displayDensityOptions && this.displayDensityOptions.displayDensity) || DisplayDensity.comfortable);\n    }\n\n    /**\n     * Sets the theme of the component.\n     */\n    public set displayDensity(val: DisplayDensity | string) {\n        const currentDisplayDensity = this._displayDensity;\n        this._displayDensity = val as DisplayDensity;\n\n        if (currentDisplayDensity !== this._displayDensity) {\n            const densityChangedArgs: IDensityChangedEventArgs = {\n                oldDensity: currentDisplayDensity,\n                newDensity: this._displayDensity\n            };\n\n            this.onDensityChanged.emit(densityChangedArgs);\n        }\n    }\n\n    @Output()\n    public onDensityChanged = new EventEmitter<IDensityChangedEventArgs>();\n\n    protected oldDisplayDensityOptions: IDisplayDensityOptions = { displayDensity: DisplayDensity.comfortable };\n\n\n    constructor(protected displayDensityOptions: IDisplayDensityOptions) {\n        Object.assign(this.oldDisplayDensityOptions, displayDensityOptions);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit(): void {\n        this.initialDensity = this._displayDensity;\n    }\n\n    public ngDoCheck() {\n        if (!this._displayDensity && this.displayDensityOptions &&\n                this.oldDisplayDensityOptions.displayDensity !== this.displayDensityOptions.displayDensity) {\n            const densityChangedArgs: IDensityChangedEventArgs = {\n                oldDensity: this.oldDisplayDensityOptions.displayDensity,\n                newDensity: this.displayDensityOptions.displayDensity\n            };\n\n            this.onDensityChanged.emit(densityChangedArgs);\n            this.oldDisplayDensityOptions = Object.assign(this.oldDisplayDensityOptions, this.displayDensityOptions);\n        }\n    }\n\n    /**\n     * Given a style class of a component/element returns the modified version of it based\n     * on the current display density.\n     */\n    protected getComponentDensityClass(baseStyleClass: string): string {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return `${baseStyleClass}--${DisplayDensity.cosy}`;\n            case DisplayDensity.compact:\n                return `${baseStyleClass}--${DisplayDensity.compact}`;\n            default:\n                return baseStyleClass;\n        }\n    }\n}\n","import {\n    Input, HostBinding, ElementRef, QueryList, Output, EventEmitter, ChangeDetectorRef, Optional, Inject\n} from '@angular/core';\n\nimport { Navigate, ISelectionEventArgs } from './drop-down.common';\nimport { IDropDownList } from './drop-down.common';\nimport { DropDownActionKey } from './drop-down.common';\nimport { IgxDropDownItemBase } from './drop-down-item.base';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\n\nlet NEXT_ID = 0;\n\n/**\n * An abstract class, defining a drop-down component, with:\n * Properties for display styles and classes\n * A collection items of type `IgxDropDownItemBase`\n * Properties and methods for navigating (highlighting/focusing) items from the collection\n * Properties and methods for selecting items from the collection\n */\nexport abstract class IgxDropDownBase extends DisplayDensityBase implements IDropDownList {\n    protected _width;\n    protected _height;\n    protected _focusedItem: any = null;\n    protected _id = `igx-drop-down-${NEXT_ID++}`;\n\n    /**\n     * Get dropdown's html element of it scroll container\n     */\n    protected get scrollContainer() {\n        return this.element;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public children: QueryList<IgxDropDownItemBase>;\n\n    /**\n     * Emitted when item selection is changing, before the selection completes\n     *\n     * ```html\n     * <igx-drop-down (onSelection)='handleSelection()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onSelection = new EventEmitter<ISelectionEventArgs>();\n\n    /**\n     *  Gets/Sets the width of the drop down\n     *\n     * ```typescript\n     * // get\n     * let myDropDownCurrentWidth = this.dropdown.width;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [width]='160px'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public width: string;\n\n    /**\n     * Gets/Sets the height of the drop down\n     *\n     * ```typescript\n     * // get\n     * let myDropDownCurrentHeight = this.dropdown.height;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [height]='400px'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public height: string;\n\n    /**\n     * Gets/Sets the drop down's id\n     *\n     * ```typescript\n     * // get\n     * let myDropDownCurrentId = this.dropdown.id;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [id]='newDropDownId'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public id: string;\n\n    /**\n     * Gets/Sets the drop down's container max height.\n     *\n     * ```typescript\n     * // get\n     * let maxHeight = this.dropdown.maxHeight;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [maxHeight]='200px'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    @HostBinding('style.maxHeight')\n    public maxHeight = null;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down')\n    public cssClass = true;\n\n    /**\n     * Get all non-header items\n     *\n     * ```typescript\n     * let myDropDownItems = this.dropdown.items;\n     * ```\n     */\n    public get items(): IgxDropDownItemBase[] {\n        const items: IgxDropDownItemBase[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (!child.isHeader) {\n                    items.push(child);\n                }\n            }\n        }\n\n        return items;\n    }\n\n    /**\n     * Get all header items\n     *\n     * ```typescript\n     * let myDropDownHeaderItems = this.dropdown.headers;\n     * ```\n     */\n    public get headers(): IgxDropDownItemBase[] {\n        const headers: IgxDropDownItemBase[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (child.isHeader) {\n                    headers.push(child);\n                }\n            }\n        }\n\n        return headers;\n    }\n\n    /**\n     * Get dropdown html element\n     *\n     * ```typescript\n     * let myDropDownElement = this.dropdown.element;\n     * ```\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Gets if the dropdown is collapsed\n     */\n    public abstract collapsed: boolean;\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n        }\n\n    /** Keydown Handler */\n    public onItemActionKey(key: DropDownActionKey, event?: Event) {\n        switch (key) {\n            case DropDownActionKey.ENTER:\n            case DropDownActionKey.SPACE:\n                this.selectItem(this.focusedItem, event);\n                break;\n            case DropDownActionKey.ESCAPE:\n        }\n    }\n\n    /**\n     * Emits onSelection with the target item & event\n     * @hidden @internal\n     * @param newSelection the item selected\n     * @param event the event that triggered the call\n     */\n    public selectItem(newSelection?: IgxDropDownItemBase, event?: Event) {\n        this.onSelection.emit({\n            newSelection,\n            oldSelection: null,\n            cancel: false\n        });\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get focusedItem(): IgxDropDownItemBase {\n        return this._focusedItem;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set focusedItem(item: IgxDropDownItemBase) {\n        this._focusedItem = item;\n    }\n\n    protected navigate(direction: Navigate, currentIndex?: number) {\n        let index = -1;\n        if (this._focusedItem) {\n            index = currentIndex ? currentIndex : this.focusedItem.itemIndex;\n        }\n        const newIndex = this.getNearestSiblingFocusableItemIndex(index, direction);\n        this.navigateItem(newIndex);\n    }\n\n    protected getNearestSiblingFocusableItemIndex(startIndex: number, direction: Navigate): number {\n        let index = startIndex;\n        const items = this.items;\n        while (items[index + direction] && items[index + direction].disabled) {\n            index += direction;\n        }\n\n        index += direction;\n        if (index >= 0 && index < items.length) {\n            return index;\n        } else {\n            return -1;\n        }\n    }\n\n    /**\n     * Navigates to the item on the specified index\n     * @param newIndex number - the index of the item in the `items` collection\n     */\n    public navigateItem(newIndex: number) {\n        if (newIndex !== -1) {\n            const oldItem = this._focusedItem;\n            const newItem = this.items[newIndex];\n            if (oldItem) {\n                oldItem.focused = false;\n            }\n            this.focusedItem = newItem;\n            this.scrollToHiddenItem(newItem);\n            this.focusedItem.focused = true;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateFirst() {\n        this.navigate(Navigate.Down, -1);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateLast() {\n        this.navigate(Navigate.Up, this.items.length);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateNext() {\n        this.navigate(Navigate.Down);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigatePrev() {\n        this.navigate(Navigate.Up);\n    }\n\n    protected scrollToHiddenItem(newItem: IgxDropDownItemBase) {\n        const elementRect = newItem.element.nativeElement.getBoundingClientRect();\n        const parentRect = this.scrollContainer.getBoundingClientRect();\n        if (parentRect.top > elementRect.top) {\n            this.scrollContainer.scrollTop -= (parentRect.top - elementRect.top);\n        }\n\n        if (parentRect.bottom < elementRect.bottom) {\n            this.scrollContainer.scrollTop += (elementRect.bottom - parentRect.bottom);\n        }\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    HostBinding,\n    ViewChild,\n    ViewContainerRef\n} from '@angular/core';\n\n@Component({\n    selector: 'igx-display-container',\n    template: `\n        <ng-template\n            #display_container\n            igxScrollInertia\n            [IgxScrollInertiaScrollContainer]=\"scrollContainer\"\n            [IgxScrollInertiaDirection]=\"scrollDirection\">\n        </ng-template>\n    `\n})\nexport class DisplayContainerComponent {\n    @ViewChild('display_container', { read: ViewContainerRef, static: true })\n    public _vcr;\n\n    public scrollDirection: string;\n\n    @HostBinding('class')\n    public cssClass = 'igx-display-container';\n\n    @HostBinding('class.igx-display-container--inactive')\n    public notVirtual = true;\n\n    public scrollContainer;\n\n    constructor(public cdr: ChangeDetectorRef, public _viewContainer: ViewContainerRef) { }\n}\n","import {\n    EventEmitter,\n    Output,\n    HostListener,\n    ElementRef,\n    ChangeDetectorRef,\n    OnDestroy,\n    Directive\n} from '@angular/core';\n\n@Directive({\n    selector: '[igxVirtualHelperBase]'\n})\nexport class VirtualHelperBaseDirective implements OnDestroy {\n    public scrollAmount = 0;\n\n    public _size = 0;\n\n    public destroyed;\n\n    @HostListener('scroll', ['$event'])\n    onScroll(event) {\n        this.scrollAmount = event.target.scrollTop || event.target.scrollLeft;\n    }\n    constructor(public elementRef: ElementRef, public cdr: ChangeDetectorRef) { }\n\n    get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    public ngOnDestroy() {\n        this.destroyed = true;\n    }\n\n    public set size(value) {\n        if (this.destroyed) {\n            return;\n        }\n        this._size = value;\n        this.cdr.detectChanges();\n    }\n\n    public get size() {\n        return this._size;\n    }\n}\n","import { Component, ElementRef, HostBinding, Input, ViewChild, ViewContainerRef, ChangeDetectorRef } from '@angular/core';\nimport { VirtualHelperBaseDirective } from './base.helper.component';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-horizontal-virtual-helper',\n    template: '<div #horizontal_container class=\"igx-vhelper__placeholder-content\" [style.width.px]=\"size\"></div>'\n})\nexport class HVirtualHelperComponent extends VirtualHelperBaseDirective {\n    @ViewChild('horizontal_container', { read: ViewContainerRef, static: true }) public _vcr;\n    @Input() public width: number;\n    @HostBinding('class')\n    public cssClasses = 'igx-vhelper--horizontal';\n\n    constructor(public elementRef: ElementRef, public cdr: ChangeDetectorRef) {\n        super(elementRef, cdr);\n     }\n}\n","import { Component, ElementRef, HostBinding, Input, ViewChild, ViewContainerRef, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { VirtualHelperBaseDirective } from './base.helper.component';\n\n@Component({\n    selector: 'igx-virtual-helper',\n    template: '<div #container class=\"igx-vhelper__placeholder-content\" [style.height.px]=\"size\"></div>'\n})\nexport class VirtualHelperComponent extends VirtualHelperBaseDirective implements OnDestroy  {\n    @HostBinding('scrollTop')\n    public scrollTop;\n\n    @ViewChild('container', { read: ViewContainerRef, static: true }) public _vcr;\n    @Input() public itemsLength: number;\n\n\n    @HostBinding('class')\n    public cssClasses = 'igx-vhelper--vertical';\n\n    constructor(public elementRef: ElementRef, public cdr: ChangeDetectorRef) {\n        super(elementRef, cdr);\n    }\n\n}\n","import { Directive, Input, ElementRef, NgZone, OnInit, NgModule, OnDestroy } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @hidden\n */\n@Directive({ selector: '[igxScrollInertia]' })\nexport class IgxScrollInertiaDirective implements OnInit, OnDestroy {\n\n    constructor(private element: ElementRef, private _zone: NgZone) {\n\n    }\n\n    @Input()\n    public IgxScrollInertiaDirection: string;\n\n    @Input()\n    public IgxScrollInertiaScrollContainer: any;\n\n    @Input()\n    public wheelStep = 50;\n\n    @Input()\n    public inertiaStep = 1.5;\n\n    @Input()\n    public swipeToleranceX = 20;\n\n    @Input()\n    public inertiaDeltaY = 3;\n\n    @Input()\n    public inertiaDeltaX = 2;\n\n    @Input()\n    public inertiaDuration = 0.5;\n\n    private _touchInertiaAnimID;\n    private _startX;\n    private _startY;\n    private _touchStartX;\n    private _touchStartY;\n    private _lastTouchEnd;\n    private _lastTouchX;\n    private _lastTouchY;\n    private _savedSpeedsX = [];\n    private _savedSpeedsY;\n    private _totalMovedX;\n    private _offsetRecorded;\n    private _offsetDirection;\n    private _touchPrevented;\n    private _lastMovedX;\n    private _lastMovedY;\n    private _gestureObject;\n    private setPointerCaptureFName = typeof Element.prototype['msSetPointerCapture'] === 'function' ?\n    'msSetPointerCapture' :\n    'setPointerCapture';\n    private releasePointerCaptureFName = typeof Element.prototype['msReleasePointerCapture'] === 'function' ?\n    'msReleasePointerCapture' :\n    'releasePointerCapture';\n    private _pointer;\n    private _nextX;\n    private _nextY;\n\n    ngOnInit(): void {\n        this._zone.runOutsideAngular(() => {\n            const targetElem = this.element.nativeElement.parentElement || this.element.nativeElement.parentNode;\n            targetElem.addEventListener('wheel',\n                    (evt) => { this.onWheel(evt); });\n            targetElem.addEventListener('touchstart',\n                    (evt) => { this.onTouchStart(evt); });\n            targetElem.addEventListener('touchmove',\n                    (evt) => { this.onTouchMove(evt); });\n            targetElem.addEventListener('touchend',\n                    (evt) => { this.onTouchEnd(evt); });\n            targetElem.addEventListener('pointerdown',\n                    (evt) => { this.onPointerDown(evt); });\n            targetElem.addEventListener('pointerup',\n                     (evt) => { this.onPointerUp(evt); });\n            targetElem.addEventListener('MSGestureStart',\n                    (evt) => { this.onMSGestureStart(evt); });\n            targetElem.addEventListener('MSGestureChange',\n                    (evt) => { this.onMSGestureChange(evt); });\n        });\n    }\n\n     /**\n     * @hidden\n     * Function that is called when scrolling with the mouse wheel or using touchpad\n     */\n    protected onWheel(evt) {\n        // if no scrollbar return\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        let scrollDeltaX;\n        let scrollDeltaY;\n        const scrollStep = this.wheelStep;\n        const minWheelStep = 1 / this.wheelStep;\n\n        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n        if (evt.wheelDeltaX) {\n            /* Option supported on Chrome, Safari, Opera.\n            /* 120 is default for mousewheel on these browsers. Other values are for trackpads */\n            scrollDeltaX = -evt.wheelDeltaX / 120;\n\n            if (-minWheelStep < scrollDeltaX && scrollDeltaX < minWheelStep) {\n                scrollDeltaX = Math.sign(scrollDeltaX) * minWheelStep;\n            }\n        } else if (evt.deltaX) {\n            /* For other browsers that don't provide wheelDelta, use the deltaY to determine direction and pass default values. */\n            scrollDeltaX = this.calcAxisCoords(evt.deltaX, -1, 1);\n        }\n\n        /** Get delta for the Y axis*/\n        if (evt.wheelDeltaY) {\n            /* Option supported on Chrome, Safari, Opera.\n            /* 120 is default for mousewheel on these browsers. Other values are for trackpads */\n            scrollDeltaY = -evt.wheelDeltaY / 120;\n\n            if (-minWheelStep < scrollDeltaY && scrollDeltaY < minWheelStep) {\n                scrollDeltaY = Math.sign(scrollDeltaY) * minWheelStep;\n            }\n        } else if (evt.deltaY) {\n            /* For other browsers that don't provide wheelDelta, use the deltaY to determine direction and pass default values. */\n            scrollDeltaY = this.calcAxisCoords(evt.deltaY, -1, 1);\n        }\n        if (scrollDeltaX && this.IgxScrollInertiaDirection === 'horizontal') {\n            this._scrollToX(\n                this._startX + scrollDeltaX * scrollStep\n            );\n            const curScrollLeft = this.IgxScrollInertiaScrollContainer.scrollLeft;\n            const maxScrollLeft = parseInt(this.IgxScrollInertiaScrollContainer.children[0].style.width, 10);\n            if (0 < curScrollLeft && curScrollLeft < maxScrollLeft) {\n                // Prevent navigating through pages when scrolling on Mac\n                evt.preventDefault();\n            }\n        } else if (scrollDeltaY && this.IgxScrollInertiaDirection === 'vertical') {\n            this._scrollToY(\n                this._startY + scrollDeltaY * scrollStep\n            );\n            this.preventParentScroll(evt, true);\n        }\n    }\n\n    /**\n     * @hidden\n     * When there is still room to scroll up/down prevent the parent elements from scrolling too.\n     */\n    protected preventParentScroll(evt, preventDefault) {\n        const curScrollTop = this.IgxScrollInertiaScrollContainer.scrollTop;\n        const maxScrollTop = this.IgxScrollInertiaScrollContainer.children[0].scrollHeight -\n            this.IgxScrollInertiaScrollContainer.offsetHeight;\n        if (0 < curScrollTop && curScrollTop < maxScrollTop) {\n            if (preventDefault) {\n                 evt.preventDefault();\n            }\n            if (evt.stopPropagation) {\n                evt.stopPropagation();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called the first moment we start interacting with the content on a touch device\n     */\n    protected onTouchStart(event) {\n        if (typeof MSGesture === 'function' || !this.IgxScrollInertiaScrollContainer) {\n            return false;\n        }\n\n        // stops any current ongoing inertia\n        cancelAnimationFrame(this._touchInertiaAnimID);\n\n        const touch = event.touches[ 0 ];\n\n        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n\n        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n        this._touchStartX = touch.pageX;\n        this._touchStartY = touch.pageY;\n\n        this._lastTouchEnd = new Date().getTime();\n        this._lastTouchX = touch.pageX;\n        this._lastTouchY = touch.pageY;\n        this._savedSpeedsX = [];\n        this._savedSpeedsY = [];\n\n        // Vars regarding swipe offset\n        this._totalMovedX = 0;\n        this._offsetRecorded = false;\n        this._offsetDirection = 0;\n\n        this._touchPrevented = false;\n        if (this.IgxScrollInertiaDirection === 'vertical') {\n            this.preventParentScroll(event, false);\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called when we need to scroll the content based on touch interactions\n     */\n    protected onTouchMove(event) {\n        if (typeof MSGesture === 'function') {\n            this._touchPrevented = false;\n            return false;\n        }\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n\n        const touch = event.touches[ 0 ];\n        const destX = this._startX + (this._touchStartX - touch.pageX) * Math.sign(this.inertiaStep);\n        const destY = this._startY + (this._touchStartY - touch.pageY) * Math.sign(this.inertiaStep);\n\n        /* Handle complex touchmoves when swipe stops but the toch doesn't end and then a swipe is initiated again */\n        /* **********************************************************/\n\n\n        const timeFromLastTouch = (new Date().getTime()) - this._lastTouchEnd;\n        if (timeFromLastTouch !== 0 && timeFromLastTouch < 100) {\n            const speedX = (this._lastTouchX - touch.pageX) / timeFromLastTouch;\n            const speedY = (this._lastTouchY - touch.pageY) / timeFromLastTouch;\n\n            // Save the last 5 speeds between two touchmoves on X axis\n            if (this._savedSpeedsX.length < 5) {\n                this._savedSpeedsX.push(speedX);\n            } else {\n                this._savedSpeedsX.shift();\n                this._savedSpeedsX.push(speedX);\n            }\n\n            // Save the last 5 speeds between two touchmoves on Y axis\n            if (this._savedSpeedsY.length < 5) {\n                this._savedSpeedsY.push(speedY);\n            } else {\n                this._savedSpeedsY.shift();\n                this._savedSpeedsY.push(speedY);\n            }\n        }\n        this._lastTouchEnd = new Date().getTime();\n        this._lastMovedX = this._lastTouchX - touch.pageX;\n        this._lastMovedY = this._lastTouchY - touch.pageY;\n        this._lastTouchX = touch.pageX;\n        this._lastTouchY = touch.pageY;\n\n        this._totalMovedX += this._lastMovedX;\n\n        let scrolledXY; // Object: {x, y}\n        /*\tDo not scroll using touch untill out of the swipeToleranceX bounds */\n        if (Math.abs(this._totalMovedX) < this.swipeToleranceX && !this._offsetRecorded) {\n            scrolledXY = this._scrollTo(this._startX, destY);\n        } else {\n            /*\tRecord the direction the first time we are out of the swipeToleranceX bounds.\n\t\t\t*\tThat way we know which direction we apply the offset so it doesn't hickup when moving out of the swipeToleranceX bounds */\n            if (!this._offsetRecorded) {\n                this._offsetDirection = Math.sign(destX - this._startX);\n                this._offsetRecorded = true;\n            }\n\n            /*\tScroll with offset ammout of swipeToleranceX in the direction we have exited the bounds and\n            don't change it after that ever until touchend and again touchstart */\n            scrolledXY = this._scrollTo(destX - this._offsetDirection * this.swipeToleranceX,\n                destY);\n        }\n\n        if (scrolledXY.x === 0 && scrolledXY.y === 0) {\n            this._touchPrevented = true;\n        }\n\n        // On Safari preventing the touchmove would prevent default page scroll behaviour even if there is the element doesn't have overflow\n        if (this.IgxScrollInertiaDirection === 'vertical') {\n            this.preventParentScroll(event, true);\n        }\n    }\n\n    protected onTouchEnd(event) {\n        if (typeof MSGesture === 'function') {\n            return;\n        }\n        let speedX = 0;\n        let speedY = 0;\n\n        // savedSpeedsX and savedSpeedsY have same length\n        for (let i = 0; i < this._savedSpeedsX.length; i++) {\n            speedX += this._savedSpeedsX[ i ];\n            speedY += this._savedSpeedsY[ i ];\n        }\n        speedX = this._savedSpeedsX.length ? speedX / this._savedSpeedsX.length : 0;\n        speedY = this._savedSpeedsX.length ? speedY / this._savedSpeedsY.length : 0;\n\n         // Use the lastMovedX and lastMovedY to determine if the swipe stops without lifting the finger so we don't start inertia\n        if ((Math.abs(speedX) > 0.1 || Math.abs(speedY) > 0.1) &&\n                        (Math.abs(this._lastMovedX) > 2 || Math.abs(this._lastMovedY) > 2)) {\n                    this._inertiaInit(speedX, speedY);\n        }\n        if (this.IgxScrollInertiaDirection === 'vertical') {\n            this.preventParentScroll(event, false);\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called when we need to detect touch starting on a touch device on IE/Edge\n     */\n    protected onPointerDown(event) {\n        if (!event || (event.pointerType !== 2 && event.pointerType !== 'touch') ||\n            typeof MSGesture !== 'function') {\n            return true;\n        }\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        // setPointerCaptureFName is the name of the function that is supported\n        event.target[this.setPointerCaptureFName](this._pointer = event.pointerId);\n\n        // create gestureObject only one time to prevent overlapping during intertia\n        if (!this._gestureObject) {\n            this._gestureObject = new MSGesture();\n            this._gestureObject.target = this.element.nativeElement.parentElement || this.element.nativeElement.parentNode;\n        }\n        this._gestureObject.addPointer(this._pointer);\n    }\n\n    /**\n     * @hidden\n     * Function that is called when we need to detect touch ending on a touch device on IE/Edge\n     */\n    protected onPointerUp(event) {\n        if (!this._pointer) {\n            return true;\n        }\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        /* releasePointerCaptureFName is the name of the function that is supported */\n        event.target[ this.releasePointerCaptureFName ](this._pointer);\n\n        delete this._pointer;\n    }\n\n    /**\n     * @hidden\n     *  Function that is called when a gesture begins on IE/Edge\n     */\n    protected onMSGestureStart(event) {\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n\n        this._touchStartX = event.screenX;\n        this._touchStartY = event.screenY;\n\n        // Vars regarding swipe offset\n        this._totalMovedX = 0;\n        this._offsetRecorded = false;\n        this._offsetDirection = 0;\n        return false;\n    }\n\n    /**\n     * @hidden\n     * Function that is called when a we need to scroll based on the gesture performed on IE/Edge\n     */\n    protected onMSGestureChange(event) {\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        const touchPos = event,\n            destX = this._startX + this._touchStartX - touchPos.screenX,\n            destY = this._startY + this._touchStartY - touchPos.screenY;\n        /* Logic regarding x tolerance to prevent accidental horizontal scrolling when scrolling vertically */\n        this._totalMovedX = this._touchStartX - touchPos.screenX;\n        if (Math.abs(this._totalMovedX) < this.swipeToleranceX && !this._offsetRecorded) {\n            /* Do not scroll horizontally yet while in the tolerance range */\n            this._scrollToY(destY);\n        } else {\n            if (!this._offsetRecorded) {\n                this._offsetDirection = Math.sign(destX - this._startX);\n                this._offsetRecorded = true;\n            }\n            /* Once the tolerance is exceeded it can be scrolled horizontally */\n            this._scrollTo(destX - this._offsetDirection * this.swipeToleranceX, destY);\n        }\n\n        return false;\n    }\n\n    private calcAxisCoords(target, min, max) {\n        if (target === undefined || target < min) {\n            target = min;\n        } else if (target > max) {\n            target = max;\n        }\n\n        return target;\n    }\n\n    private _scrollTo(destX, destY) {\n        const curPosX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n        const curPosY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n         // TODO Trigger scrolling event?\n        const scrolledX = this._scrollToX(destX);\n        const scrolledY = this._scrollToY(destY);\n\n        return { x: scrolledX, y: scrolledY };\n    }\n    private _scrollToX(dest) {\n        this.IgxScrollInertiaScrollContainer.scrollLeft = dest;\n    }\n    private _scrollToY(dest) {\n        this.IgxScrollInertiaScrollContainer.scrollTop = dest;\n    }\n\n   protected _inertiaInit(speedX, speedY) {\n    const stepModifer = this.inertiaStep,\n        inertiaDuration = this.inertiaDuration;\n    let x = 0;\n    this._nextX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n    this._nextY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n    // Sets timeout until executing next movement iteration of the inertia\n    const inertiaStep = () => {\n        if (x > 6) {\n            cancelAnimationFrame(this._touchInertiaAnimID);\n            return;\n        }\n\n        if (Math.abs(speedX) > Math.abs(speedY)) {\n            x += 0.05 / (1 * inertiaDuration);\n        } else {\n            x += 0.05 / (1 * inertiaDuration);\n        }\n\n        if (x <= 1) {\n            // We use constant quation to determine the offset without speed falloff befor x reaches 1\n            if (Math.abs(speedY) <= Math.abs(speedX) * this.inertiaDeltaY) {\n                this._nextX += 1 * speedX * 15 * stepModifer;\n            }\n            if (Math.abs(speedY) >= Math.abs(speedX) * this.inertiaDeltaX) {\n                this._nextY += 1 * speedY * 15 * stepModifer;\n            }\n        } else {\n            // We use the quation \"y = 2 / (x + 0.55) - 0.3\" to determine the offset\n            if (Math.abs(speedY) <= Math.abs(speedX) * this.inertiaDeltaY) {\n                this._nextX += Math.abs(2 / (x + 0.55) - 0.3) * speedX * 15 * stepModifer;\n            }\n            if (Math.abs(speedY) >= Math.abs(speedX) * this.inertiaDeltaX) {\n                this._nextY += Math.abs(2 / (x + 0.55) - 0.3) * speedY * 15 * stepModifer;\n            }\n        }\n\n        // If we have mixed environment we use the default behaviour. i.e. touchscreen + mouse\n        this._scrollTo(this._nextX, this._nextY);\n\n        this._touchInertiaAnimID = requestAnimationFrame(inertiaStep);\n    };\n\n    // Start inertia and continue it recursively\n    this._touchInertiaAnimID = requestAnimationFrame(inertiaStep);\n   }\n\n    ngOnDestroy() {\n        this._zone.runOutsideAngular(() => {\n            const targetElem = this.element.nativeElement.parentElement || this.element.nativeElement.parentNode;\n            targetElem.removeEventListener('wheel',\n                (evt) => { this.onWheel(evt); });\n            targetElem.removeEventListener('touchstart',\n                (evt) => { this.onTouchStart(evt); });\n            targetElem.removeEventListener('touchmove',\n                (evt) => { this.onTouchMove(evt); });\n            targetElem.removeEventListener('touchend',\n                (evt) => { this.onTouchEnd(evt); });\n            targetElem.removeEventListener('pointerdown',\n                (evt) => { this.onPointerDown(evt); });\n            targetElem.removeEventListener('pointerup',\n                (evt) => { this.onPointerUp(evt); });\n            targetElem.removeEventListener('MSGestureStart',\n                (evt) => { this.onMSGestureStart(evt); });\n            targetElem.removeEventListener('MSGestureChange',\n                (evt) => { this.onMSGestureChange(evt); });\n        });\n    }\n\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxScrollInertiaDirective],\n    exports: [IgxScrollInertiaDirective],\n    imports: [CommonModule]\n})\n\nexport class IgxScrollInertiaModule {\n}\n\n","import { Injectable, Component } from '@angular/core';\nimport { IgxGridForOfDirective } from './for_of.directive';\nimport { VirtualHelperBaseDirective } from './base.helper.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxForOfSyncService {\n\n    private _master: Map<string, IgxGridForOfDirective<any>> = new Map<string, IgxGridForOfDirective<any>>();\n\n    /**\n     * @hidden\n     */\n    public isMaster(directive: IgxGridForOfDirective<any>): boolean {\n        return this._master.get(directive.igxForScrollOrientation) === directive;\n    }\n\n    /**\n     * @hidden\n     */\n    public setMaster(directive: IgxGridForOfDirective<any>, forced = false) {\n        const orientation = directive.igxForScrollOrientation;\n        if (orientation && (forced || !this._master.has(orientation))) {\n            this._master.set(orientation, directive);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public resetMaster() {\n        this._master.clear();\n    }\n\n    /**\n     * @hidden\n     */\n    public sizesCache(dir: string): number[] {\n        return this._master.get(dir).sizesCache;\n    }\n\n    /**\n     * @hidden\n     */\n    public chunkSize(dir: string): number {\n        return this._master.get(dir).state.chunkSize;\n    }\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxForOfScrollSyncService {\n    private _masterScroll: Map<string, VirtualHelperBaseDirective> = new Map<string, any>();\n    public setScrollMaster(dir: string, scroll: VirtualHelperBaseDirective) {\n        this._masterScroll.set(dir, scroll);\n    }\n\n    public getScrollMaster(dir: string) {\n        return this._masterScroll.get(dir);\n    }\n}\n","import { CommonModule, NgForOfContext } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    ComponentFactory,\n    ComponentFactoryResolver,\n    ComponentRef,\n    Directive,\n    DoCheck,\n    EmbeddedViewRef,\n    EventEmitter,\n    Input,\n    IterableChanges,\n    IterableDiffer,\n    IterableDiffers,\n    NgModule,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    SimpleChanges,\n    TemplateRef,\n    TrackByFunction,\n    ViewContainerRef,\n    ViewRef,\n    AfterViewInit\n} from '@angular/core';\n\nimport { DisplayContainerComponent } from './display.container';\nimport { HVirtualHelperComponent } from './horizontal.virtual.helper.component';\nimport { VirtualHelperComponent } from './virtual.helper.component';\nimport { IgxScrollInertiaModule } from './../scroll-inertia/scroll_inertia.directive';\nimport { IgxForOfSyncService, IgxForOfScrollSyncService } from './for_of.sync.service';\nimport { Subject } from 'rxjs';\nimport { takeUntil, filter, throttleTime, first } from 'rxjs/operators';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { IBaseEventArgs } from '../../core/utils';\nimport { VirtualHelperBaseDirective } from './base.helper.component';\n\n/**\n *  @publicApi\n */\nexport class IgxForOfContext<T> {\n    constructor(\n       public $implicit: T,\n       public index: number,\n       public count: number\n    ) {}\n\n    /**\n     * A function that returns whether the element is the first or not\n     */\n    get first(): boolean { return this.index === 0; }\n\n    /**\n     * A function that returns whether the element is the last or not\n     */\n    get last(): boolean { return this.index === this.count - 1; }\n\n    /**\n     * A function that returns whether the element is even or not\n     */\n    get even(): boolean { return this.index % 2 === 0; }\n\n    /**\n     * A function that returns whether the element is odd or not\n     */\n    get odd(): boolean { return !this.even; }\n\n}\n\n@Directive({ selector: '[igxFor][igxForOf]' })\nexport class IgxForOfDirective<T> implements OnInit, OnChanges, DoCheck, OnDestroy, AfterViewInit {\n\n    /**\n     * An @Input property that sets the data to be rendered.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\"></ng-template>\n     * ```\n     */\n    @Input()\n    public igxForOf: any[];\n\n    /**\n     * An @Input property that sets the property name from which to read the size in the data object.\n     */\n    @Input()\n    public igxForSizePropName;\n\n    /**\n     * An @Input property that specifies the scroll orientation.\n     * Scroll orientation can be \"vertical\" or \"horizontal\".\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\"></ng-template>\n     * ```\n     */\n    @Input()\n    public igxForScrollOrientation = 'vertical';\n\n    /**\n     * Optionally pass the parent `igxFor` instance to create a virtual template scrolling both horizontally and vertically.\n     * ```html\n     * <ng-template #scrollContainer igxFor let-rowData [igxForOf]=\"data\"\n     *       [igxForScrollOrientation]=\"'vertical'\"\n     *       [igxForContainerSize]=\"'500px'\"\n     *       [igxForItemSize]=\"'50px'\"\n     *       let-rowIndex=\"index\">\n     *       <div [style.display]=\"'flex'\" [style.height]=\"'50px'\">\n     *           <ng-template #childContainer igxFor let-item [igxForOf]=\"data\"\n     *               [igxForScrollOrientation]=\"'horizontal'\"\n     *               [igxForScrollContainer]=\"parentVirtDir\"\n     *               [igxForContainerSize]=\"'500px'\">\n     *                   <div [style.min-width]=\"'50px'\">{{rowIndex}} : {{item.text}}</div>\n     *           </ng-template>\n     *       </div>\n     * </ng-template>\n     * ```\n     */\n    @Input()\n    public igxForScrollContainer: any;\n\n    /**\n     * An @Input property that sets the px-affixed size of the container along the axis of scrolling.\n     * For \"horizontal\" orientation this value is the width of the container and for \"vertical\" is the height.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForContainerSize]=\"'500px'\"\n     *      [igxForScrollOrientation]=\"'horizontal'\">\n     * </ng-template>\n     * ```\n     */\n    @Input()\n    public igxForContainerSize: any;\n\n    /**\n     * An @Input property that sets the px-affixed size of the item along the axis of scrolling.\n     * For \"horizontal\" orientation this value is the width of the column and for \"vertical\" is the height or the row.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" [igxForItemSize]=\"'50px'\"></ng-template>\n     * ```\n     */\n    @Input()\n    public igxForItemSize: any;\n\n    /**\n     * @hidden\n     */\n    public dc: ComponentRef<DisplayContainerComponent>;\n\n    /**\n     * The current state of the directive. It contains `startIndex` and `chunkSize`.\n     * state.startIndex - The index of the item at which the current visible chunk begins.\n     * state.chunkSize - The number of items the current visible chunk holds.\n     * These options can be used when implementing remote virtualization as they provide the necessary state information.\n     * ```typescript\n     * const gridState = this.parentVirtDir.state;\n     * ```\n     */\n    public state: IForOfState = {\n        startIndex: 0,\n        chunkSize: 0\n    };\n    /**\n     * The total count of the virtual data items, when using remote service.\n     * ```typescript\n     * this.parentVirtDir.totalItemCount = data.Count;\n     * ```\n     */\n    public totalItemCount: number = null;\n\n    /**\n     * An event that is emitted after a new chunk has been loaded.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onChunkLoad)=\"chunkLoad($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * chunkLoad(e){\n     * alert(\"chunk loaded!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onChunkLoad = new EventEmitter<IForOfState>();\n\n    /**\n     * An event that is emitted after the rendered content size of the igxForOf has been changed.\n    */\n    @Output()\n    public onContentSizeChange = new EventEmitter<any>();\n\n    /**\n     * An event that is emitted after data has been changed.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onDataChanged)=\"dataChanged($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * dataChanged(e){\n     * alert(\"data changed!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onDataChanged = new EventEmitter<any>();\n\n    @Output()\n    public onBeforeViewDestroyed = new EventEmitter<EmbeddedViewRef<any>>();\n\n    /**\n     * An event that is emitted on chunk loading to emit the current state information - startIndex, endIndex, totalCount.\n     * Can be used for implementing remote load on demand for the igxFor data.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onChunkPreload)=\"chunkPreload($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * chunkPreload(e){\n     * alert(\"chunk is loading!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onChunkPreload = new EventEmitter<IForOfState>();\n    protected func;\n    protected _sizesCache: number[] = [];\n    protected scrollComponent: VirtualHelperBaseDirective;\n    protected _differ: IterableDiffer<T> | null = null;\n    protected _trackByFn: TrackByFunction<T>;\n    protected heightCache = [];\n    private _adjustToIndex;\n    private MAX_PERF_SCROLL_DIFF = 4;\n\n\n    public get displayContainer(): HTMLElement | undefined {\n        return this.dc.instance._viewContainer.element.nativeElement;\n    }\n\n    public get virtualHelper() {\n        return this.scrollComponent.nativeElement;\n    }\n\n    protected get sizesCache(): number[] {\n        return this._sizesCache;\n    }\n    protected set sizesCache(value: number[]) {\n        this._sizesCache = value;\n    }\n\n    private get _isScrolledToBottom() {\n        if (!this.getScroll()) {\n            return true;\n        }\n        const scrollHeight = this.getScroll().scrollHeight;\n        // Use === and not >= because `scrollTop + container size` can't be bigger than `scrollHeight`, unless something isn't updated.\n        // Also use Math.round because Chrome has some inconsistencies and `scrollTop + container` can be float when zooming the page.\n        return Math.round(this.getScroll().scrollTop + this.igxForContainerSize) === scrollHeight;\n    }\n\n    private get _isAtBottomIndex() {\n        return this.igxForOf && this.state.startIndex + this.state.chunkSize > this.igxForOf.length;\n    }\n\n    // Start properties related to virtual height handling due to browser limitation\n    /** Maximum height for an element of the browser. */\n    private _maxHeight;\n\n    /** Height that is being virtualized. */\n    protected _virtHeight = 0;\n\n    /**\n     * Ratio for height that's being virtualizaed and the one visible\n     * If _virtHeightRatio = 1, the visible height and the virtualized are the same, also _maxHeight > _virtHeight.\n     */\n    private _virtHeightRatio = 1;\n\n    /** Internal track for scroll top that is being virtualized */\n    protected _virtScrollTop = 0;\n\n    /** If the next onScroll event is triggered due to internal setting of scrollTop */\n    protected _bScrollInternal = false;\n    // End properties related to virtual height handling\n\n    protected _embeddedViews: Array<EmbeddedViewRef<any>> = [];\n\n    protected contentResizeNotify = new Subject();\n    protected contentObserver: ResizeObserver;\n\n    /**\n     * @hidden\n     */\n    protected destroy$ = new Subject<any>();\n\n    constructor(\n        private _viewContainer: ViewContainerRef,\n        protected _template: TemplateRef<NgForOfContext<T>>,\n        protected _differs: IterableDiffers,\n        private resolver: ComponentFactoryResolver,\n        public cdr: ChangeDetectorRef,\n        protected _zone: NgZone,\n        protected syncScrollService: IgxForOfScrollSyncService) { }\n\n    /**\n     * @hidden\n     */\n    protected get isRemote(): boolean {\n        return this.totalItemCount !== null;\n    }\n\n    /**\n     *\n     * Gets/Sets the scroll position.\n     * ```typescript\n     * const position = directive.scrollPosition;\n     * directive.scrollPosition = value;\n     * ```\n     */\n    public get scrollPosition(): number {\n        return this.scrollComponent.scrollAmount;\n    }\n    public set scrollPosition(val: number) {\n        if (val === this.scrollComponent.scrollAmount) {\n            return;\n        }\n        if (this.igxForScrollOrientation === 'horizontal' && this.scrollComponent) {\n            this.scrollComponent.nativeElement.scrollLeft = val;\n        } else if (this.scrollComponent) {\n            this.scrollComponent.nativeElement.scrollTop = val;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected removeScrollEventListeners() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this._zone.runOutsideAngular(() =>\n                this.scrollComponent.nativeElement.removeEventListener('scroll', this.func)\n            );\n        } else {\n            this._zone.runOutsideAngular(() =>\n                this.scrollComponent.nativeElement.removeEventListener('scroll', this.verticalScrollHandler)\n            );\n        }\n    }\n\n    public verticalScrollHandler(event) {\n        this.onScroll(event);\n    }\n\n    public isScrollable() {\n        return this.scrollComponent.size > parseInt(this.igxForContainerSize, 10);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit(): void {\n        let totalSize = 0;\n        const vc = this.igxForScrollContainer ? this.igxForScrollContainer._viewContainer : this._viewContainer;\n        this.igxForSizePropName = this.igxForSizePropName || 'width';\n\n        const dcFactory: ComponentFactory<DisplayContainerComponent> = this.resolver.resolveComponentFactory(DisplayContainerComponent);\n        this.dc = this._viewContainer.createComponent(dcFactory, 0);\n        this.dc.instance.scrollDirection = this.igxForScrollOrientation;\n        if (typeof MSGesture === 'function') {\n            // On Edge and IE when scrolling on touch the page scroll instead of the grid.\n            this.dc.instance._viewContainer.element.nativeElement.style.touchAction = 'none';\n        }\n        if (this.igxForOf && this.igxForOf.length) {\n            totalSize = this.initSizesCache(this.igxForOf);\n            this.scrollComponent = this.syncScrollService.getScrollMaster(this.igxForScrollOrientation);\n            this.state.chunkSize = this._calculateChunkSize();\n            this.dc.instance.notVirtual = !(this.igxForContainerSize && this.state.chunkSize < this.igxForOf.length);\n            if (this.scrollComponent) {\n                this.state.startIndex = Math.min(this.getIndexAt(this.scrollPosition, this.sizesCache, 0),\n                    this.igxForOf.length - this.state.chunkSize);\n            }\n            for (let i = this.state.startIndex; i < this.state.startIndex + this.state.chunkSize &&\n                    this.igxForOf[i] !== undefined; i++) {\n                const input = this.igxForOf[i];\n                const embeddedView = this.dc.instance._vcr.createEmbeddedView(\n                    this._template,\n                    new IgxForOfContext<T>(input, this.getContextIndex(input), this.igxForOf.length)\n                );\n                this._embeddedViews.push(embeddedView);\n            }\n        }\n\n        if (this.igxForScrollOrientation === 'vertical') {\n            this.dc.instance._viewContainer.element.nativeElement.style.top = '0px';\n            const factory: ComponentFactory<VirtualHelperComponent> = this.resolver.resolveComponentFactory(VirtualHelperComponent);\n            this.scrollComponent = vc.createComponent(factory).instance;\n            this._maxHeight = this._calcMaxBrowserHeight();\n            this.scrollComponent.size = this.igxForOf ? this._calcHeight() : 0;\n            this.syncScrollService.setScrollMaster(this.igxForScrollOrientation, this.scrollComponent);\n            this._zone.runOutsideAngular(() => {\n                this.verticalScrollHandler = this.verticalScrollHandler.bind(this);\n                this.scrollComponent.nativeElement.addEventListener('scroll', this.verticalScrollHandler);\n                this.dc.instance.scrollContainer = this.scrollComponent.nativeElement;\n            });\n            const destructor = takeUntil<any>(this.destroy$);\n            this.contentResizeNotify.pipe(destructor,\n            filter(() => this.igxForContainerSize && this.igxForOf && this.igxForOf.length > 0), throttleTime(40))\n            .subscribe(() => {\n                this._zone.runTask(() => {\n                    this.updateSizes();\n                });\n            });\n        }\n\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.func = (evt) => { this.onHScroll(evt); };\n            this.scrollComponent = this.syncScrollService.getScrollMaster(this.igxForScrollOrientation);\n            if (!this.scrollComponent) {\n                const hvFactory: ComponentFactory<HVirtualHelperComponent> =\n                    this.resolver.resolveComponentFactory(HVirtualHelperComponent);\n                this.scrollComponent = vc.createComponent(hvFactory).instance;\n                this.scrollComponent.size = totalSize;\n                this.syncScrollService.setScrollMaster(this.igxForScrollOrientation, this.scrollComponent);\n                this._zone.runOutsideAngular(() => {\n                    this.scrollComponent.nativeElement.addEventListener('scroll', this.func);\n                    this.dc.instance.scrollContainer = this.scrollComponent.nativeElement;\n                });\n            } else {\n                this._zone.runOutsideAngular(() => {\n                    this.scrollComponent.nativeElement.addEventListener('scroll', this.func);\n                    this.dc.instance.scrollContainer = this.scrollComponent.nativeElement;\n                });\n            }\n            this._updateHScrollOffset();\n        }\n    }\n\n    ngAfterViewInit(): void {\n        if (this.igxForScrollOrientation === 'vertical') {\n            this._zone.runOutsideAngular(() => {\n                this.contentObserver = new ResizeObserver(() => this.contentResizeNotify.next());\n                this.contentObserver.observe(this.dc.instance._viewContainer.element.nativeElement);\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.removeScrollEventListeners();\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        if (this.contentObserver) {\n            this.contentObserver.disconnect();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnChanges(changes: SimpleChanges): void {\n        const forOf = 'igxForOf';\n        if (forOf in changes) {\n            const value = changes[forOf].currentValue;\n            if (!this._differ && value) {\n                try {\n                    this._differ = this._differs.find(value).create(this.igxForTrackBy);\n                } catch (e) {\n                    throw new Error(\n                        `Cannot find a differ supporting object \"${value}\" of type \"${getTypeNameForDebugging(value)}\".\n                     NgFor only supports binding to Iterables such as Arrays.`);\n                }\n            }\n        }\n        const defaultItemSize = 'igxForItemSize';\n        if (defaultItemSize in changes && !changes[defaultItemSize].firstChange &&\n            this.igxForScrollOrientation === 'vertical' && this.igxForOf) {\n            // handle default item size changed.\n            this.initSizesCache(this.igxForOf);\n            this._applyChanges();\n        }\n        const containerSize = 'igxForContainerSize';\n        if (containerSize in changes && !changes[containerSize].firstChange && this.igxForOf) {\n            this._recalcOnContainerChange(changes);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck(): void {\n        if (this._differ) {\n            const changes = this._differ.diff(this.igxForOf);\n            if (changes) {\n                //  re-init cache.\n                if (!this.igxForOf) {\n                    this.igxForOf = [];\n                }\n                this._updateSizeCache();\n                this._zone.run(() => {\n                    this._applyChanges();\n                    this.cdr.markForCheck();\n                    this._updateScrollOffset();\n                    this.onDataChanged.emit();\n                });\n            }\n        }\n    }\n\n    /**\n     * Shifts the scroll thumb position.\n     * ```typescript\n     * this.parentVirtDir.addScrollTop(5);\n     * ```\n     * @param addTop negative value to scroll up and positive to scroll down;\n     */\n    public addScrollTop(addTop: number): boolean {\n        if (addTop === 0 && this.igxForScrollOrientation === 'horizontal') {\n            return false;\n        }\n        const originalVirtScrollTop = this._virtScrollTop;\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const maxVirtScrollTop = this._virtHeight - containerSize;\n\n        this._bScrollInternal = true;\n        this._virtScrollTop += addTop;\n        this._virtScrollTop = this._virtScrollTop > 0 ?\n            (this._virtScrollTop < maxVirtScrollTop ? this._virtScrollTop : maxVirtScrollTop) :\n            0;\n\n        this.scrollPosition += addTop / this._virtHeightRatio;\n        if (Math.abs(addTop / this._virtHeightRatio) < 1) {\n            // Actual scroll delta that was added is smaller than 1 and onScroll handler doesn't trigger when scrolling < 1px\n            const scrollOffset = this.fixedUpdateAllElements(this._virtScrollTop);\n            // scrollOffset = scrollOffset !== parseInt(this.igxForItemSize, 10) ? scrollOffset : 0;\n            this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n        }\n\n        const maxRealScrollTop = this.scrollComponent.nativeElement.scrollHeight - containerSize;\n        if ((this._virtScrollTop > 0 && this.scrollPosition === 0) ||\n            (this._virtScrollTop < maxVirtScrollTop && this.scrollPosition === maxRealScrollTop)) {\n            // Actual scroll position is at the top or bottom, but virtual one is not at the top or bottom (there's more to scroll)\n            // Recalculate actual scroll position based on the virtual scroll.\n            this.scrollPosition = this._virtScrollTop / this._virtHeightRatio;\n        } else if (this._virtScrollTop === 0 && this.scrollPosition > 0) {\n            // Actual scroll position is not at the top, but virtual scroll is. Just update the actual scroll\n            this.scrollPosition = 0;\n        } else if (this._virtScrollTop === maxVirtScrollTop && this.scrollPosition < maxRealScrollTop) {\n            // Actual scroll position is not at the bottom, but virtual scroll is. Just update the acual scroll\n            this.scrollPosition = maxRealScrollTop;\n        }\n        return this._virtScrollTop !== originalVirtScrollTop;\n    }\n\n    /**\n     * Scrolls to the specified index.\n     * ```typescript\n     * this.parentVirtDir.scrollTo(5);\n     * ```\n     * @param index\n     */\n    public scrollTo(index) {\n        if (index < 0 || index > (this.isRemote ? this.totalItemCount : this.igxForOf.length) - 1) {\n            return;\n        }\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const isPrevItem = index < this.state.startIndex || this.scrollPosition > this.sizesCache[index];\n        let nextScroll = isPrevItem ? this.sizesCache[index] : this.sizesCache[index + 1] - containerSize;\n        if (nextScroll < 0) {\n            return;\n        }\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.scrollPosition = nextScroll;\n        } else {\n            const maxVirtScrollTop = this._virtHeight - containerSize;\n            if (nextScroll > maxVirtScrollTop) {\n                nextScroll = maxVirtScrollTop;\n            }\n            this._bScrollInternal = true;\n            this._virtScrollTop = nextScroll;\n            this.scrollPosition = this._virtScrollTop / this._virtHeightRatio;\n            this._adjustToIndex = !isPrevItem ? index : null;\n        }\n    }\n\n    /**\n     * Scrolls by one item into the appropriate next direction.\n     * For \"horizontal\" orientation that will be the right column and for \"vertical\" that is the lower row.\n     * ```typescript\n     * this.parentVirtDir.scrollNext();\n     * ```\n     */\n    public scrollNext() {\n        const scr = Math.ceil(this.scrollPosition);\n        const endIndex = this.getIndexAt(\n            scr + parseInt(this.igxForContainerSize, 10),\n            this.sizesCache,\n            0\n        );\n        this.scrollTo(endIndex);\n    }\n\n    /**\n     * Scrolls by one item into the appropriate previous direction.\n     * For \"horizontal\" orientation that will be the left column and for \"vertical\" that is the upper row.\n     * ```typescript\n     * this.parentVirtDir.scrollPrev();\n     * ```\n     */\n    public scrollPrev() {\n        this.scrollTo(this.state.startIndex - 1);\n    }\n\n    /**\n     * Scrolls by one page into the appropriate next direction.\n     * For \"horizontal\" orientation that will be one view to the right and for \"vertical\" that is one view to the bottom.\n     * ```typescript\n     * this.parentVirtDir.scrollNextPage();\n     * ```\n     */\n    public scrollNextPage() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.scrollPosition += parseInt(this.igxForContainerSize, 10);\n        } else {\n            this.addScrollTop(parseInt(this.igxForContainerSize, 10));\n        }\n    }\n\n    /**\n     * Scrolls by one page into the appropriate previous direction.\n     * For \"horizontal\" orientation that will be one view to the left and for \"vertical\" that is one view to the top.\n     * ```typescript\n     * this.parentVirtDir.scrollPrevPage();\n     * ```\n     */\n    public scrollPrevPage() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.scrollPosition -= parseInt(this.igxForContainerSize, 10);\n        } else {\n            const containerSize = (parseInt(this.igxForContainerSize, 10));\n            this.addScrollTop(-containerSize);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getColumnScrollLeft(colIndex) {\n        return this.sizesCache[colIndex];\n    }\n\n    /**\n     * Returns the total number of items that are fully visible.\n     * ```typescript\n     * this.parentVirtDir.getItemCountInView();\n     * ```\n     */\n    public getItemCountInView() {\n        let startIndex = this.getIndexAt(\n            this.scrollPosition,\n            this.sizesCache,\n            0\n        );\n        if (this.scrollPosition - this.sizesCache[startIndex] > 0) {\n            // fisrt item is not fully in view\n            startIndex++;\n        }\n        const endIndex = this.getIndexAt(\n            this.scrollPosition + parseInt(this.igxForContainerSize, 10),\n            this.sizesCache,\n            0\n        );\n        return endIndex - startIndex;\n    }\n\n    /**\n     * Returns a reference to the scrollbar DOM element.\n     * This is either a vertical or horizontal scrollbar depending on the specified igxForScrollOrientation.\n     * ```typescript\n     * dir.getScroll();\n     * ```\n     */\n    public getScroll() {\n        return this.scrollComponent.nativeElement;\n    }\n    /**\n     * Returns the size of the element at the specified index.\n     * ```typescript\n     * this.parentVirtDir.getSizeAt(1);\n     * ```\n     */\n    public getSizeAt(index: number) {\n        return this.sizesCache[index + 1] - this.sizesCache[index];\n    }\n\n    /**\n     * Returns the scroll offset of the element at the specified index.\n     * ```typescript\n     * this.parentVirtDir.getScrollForIndex(1);\n     * ```\n     */\n    public getScrollForIndex(index: number, bottom?: boolean) {\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const scroll = bottom ? Math.max(0, this.sizesCache[index + 1] - containerSize) : this.sizesCache[index];\n        return scroll;\n    }\n\n    /**\n     * @hidden\n     * Function that is called when scrolling vertically\n     */\n    protected onScroll(event) {\n        /* in certain situations this may be called when no scrollbar is visible */\n        if (!parseInt(this.scrollComponent.nativeElement.style.height, 10)) {\n            return;\n        }\n\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const maxRealScrollTop = event.target.children[0].scrollHeight - containerSize;\n        const realPercentScrolled = maxRealScrollTop !== 0 ?  event.target.scrollTop / maxRealScrollTop : 0;\n        if (!this._bScrollInternal) {\n            const maxVirtScrollTop = this._virtHeight - containerSize;\n            this._virtScrollTop = realPercentScrolled * maxVirtScrollTop;\n        } else {\n            this._bScrollInternal = false;\n        }\n        const prevStartIndex = this.state.startIndex;\n        const scrollOffset = this.fixedUpdateAllElements(this._virtScrollTop);\n\n        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n\n        this.dc.changeDetectorRef.detectChanges();\n        if (prevStartIndex !== this.state.startIndex) {\n            this.onChunkLoad.emit(this.state);\n        }\n    }\n\n    protected updateSizes() {\n        this.recalcUpdateSizes();\n        this._applyChanges();\n        this._updateScrollOffset();\n        this.onContentSizeChange.emit();\n    }\n\n    /**\n     * @hidden\n     * Function that recaculates and updates cache sizes.\n     */\n    public recalcUpdateSizes() {\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n            this.igxForSizePropName : 'height';\n        const diffs = [];\n        let totalDiff = 0;\n        const l = this._embeddedViews.length;\n        const rNodes = this._embeddedViews.map(view =>\n            view.rootNodes.find(node => node.nodeType === Node.ELEMENT_NODE) || view.rootNodes[0].nextElementSibling);\n        for (let i = 0; i < l; i++) {\n            const rNode = rNodes[i];\n            if (rNode) {\n                const h = rNode.offsetHeight || parseInt(this.igxForItemSize, 10);\n                const index = this.state.startIndex + i;\n                if (!this.isRemote && !this.igxForOf[index]) {\n                    continue;\n                }\n                const oldVal = dimension === 'height' ? this.heightCache[index] : this.igxForOf[index][dimension];\n                const newVal = dimension === 'height' ? h : rNode.clientWidth;\n                if (dimension === 'height') {\n                    this.heightCache[index] = newVal;\n                } else {\n                    this.igxForOf[index][dimension] = newVal;\n                }\n                const currDiff = newVal - oldVal;\n                diffs.push(currDiff);\n                totalDiff += currDiff;\n                this.sizesCache[index + 1] += totalDiff;\n            }\n        }\n        // update cache\n        if (Math.abs(totalDiff) > 0) {\n            for (let j = this.state.startIndex + this.state.chunkSize + 1; j < this.sizesCache.length; j++) {\n                this.sizesCache[j] += totalDiff;\n            }\n\n            // update scrBar heights/widths\n            if (this.igxForScrollOrientation === 'horizontal') {\n                const totalWidth = parseInt(this.scrollComponent.nativeElement.children[0].style.width, 10) + totalDiff;\n                this.scrollComponent.nativeElement.children[0].style.width = totalWidth + 'px';\n            }\n            const reducer = (acc, val) => acc + val;\n            if (this.igxForScrollOrientation === 'vertical') {\n                const scrToBottom = this._isScrolledToBottom && !this.dc.instance.notVirtual;\n                const hSum = this.heightCache.reduce(reducer);\n                if (hSum > this._maxHeight) {\n                    this._virtHeightRatio = hSum / this._maxHeight;\n                }\n                this.scrollComponent.size = Math.min(this.scrollComponent.size + totalDiff, this._maxHeight);\n                this._virtHeight = hSum;\n                if (!this.scrollComponent.destroyed) {\n                    this.scrollComponent.cdr.detectChanges();\n                }\n                if (scrToBottom && !this._isAtBottomIndex) {\n                    const containerSize = parseInt(this.igxForContainerSize, 10);\n                    const maxVirtScrollTop = this._virtHeight - containerSize;\n                    this._bScrollInternal = true;\n                    this._virtScrollTop = maxVirtScrollTop;\n                    this.scrollPosition = maxVirtScrollTop;\n                    return;\n                }\n                if (this._adjustToIndex) {\n                    // in case scrolled to specific index where after scroll heights are changed\n                    // need to adjust the offsets so that item is last in view.\n                    const updatesToIndex = this._adjustToIndex - this.state.startIndex + 1;\n                    const sumDiffs = diffs.slice(0, updatesToIndex).reduce(reducer);\n                    const currOffset = parseInt(this.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n                    this.dc.instance._viewContainer.element.nativeElement.style.top = (currOffset - sumDiffs) + 'px';\n                    this._adjustToIndex = null;\n                }\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected fixedUpdateAllElements(inScrollTop: number): number {\n        const count = this.isRemote ? this.totalItemCount : this.igxForOf.length;\n        let newStart = this.getIndexAt(\n            inScrollTop,\n            this.sizesCache,\n            0\n        );\n        if (newStart + this.state.chunkSize > count) {\n            newStart = count - this.state.chunkSize;\n        }\n        const prevStart = this.state.startIndex;\n        const diff = newStart - this.state.startIndex;\n        this.state.startIndex = newStart;\n        if (diff) {\n            this.onChunkPreload.emit(this.state);\n            if (!this.isRemote) {\n                /*recalculate and apply page size.*/\n                if (diff > 0 && diff <= this.MAX_PERF_SCROLL_DIFF) {\n                    this.moveApplyScrollNext(prevStart);\n                } else if (diff < 0 && Math.abs(diff) <= this.MAX_PERF_SCROLL_DIFF) {\n                    this.moveApplyScrollPrev(prevStart);\n                } else {\n                    this.fixedApplyScroll();\n                }\n            }\n        }\n        return inScrollTop - this.sizesCache[this.state.startIndex];\n    }\n\n    /**\n     * @hidden\n     * The function applies an optimized state change for scrolling down/right employing context change with view rearrangement\n     */\n    protected moveApplyScrollNext(prevIndex: number): void {\n        const start = prevIndex + this.state.chunkSize;\n        for (let i = start; i < start + this.state.startIndex - prevIndex && this.igxForOf[i] !== undefined; i++) {\n            const input = this.igxForOf[i];\n            const embView = this._embeddedViews.shift();\n            const cntx = embView.context;\n            cntx.$implicit = input;\n            cntx.index = this.getContextIndex(input);\n            cntx.count = this.igxForOf.length;\n            const view: ViewRef = this.dc.instance._vcr.detach(0);\n            this.dc.instance._vcr.insert(view);\n            this._embeddedViews.push(embView);\n        }\n    }\n\n    /**\n     * @hidden\n     * The function applies an optimized state change for scrolling up/left employing context change with view rearrangement\n     */\n    protected moveApplyScrollPrev(prevIndex: number): void {\n        for (let i = prevIndex - 1; i >= this.state.startIndex && this.igxForOf[i] !== undefined; i--) {\n            const input = this.igxForOf[i];\n            const embView = this._embeddedViews.pop();\n            const cntx = embView.context;\n            cntx.$implicit = input;\n            cntx.index = this.getContextIndex(input);\n            const view: ViewRef = this.dc.instance._vcr.detach(this.dc.instance._vcr.length - 1);\n            this.dc.instance._vcr.insert(view, 0);\n            this._embeddedViews.unshift(embView);\n        }\n    }\n\n    /**\n     * @hidden\n    */\n    protected getContextIndex(input) {\n        return this.isRemote ? this.state.startIndex + this.igxForOf.indexOf(input) : this.igxForOf.indexOf(input);\n    }\n\n    /**\n     * @hidden\n     * The function applies an optimized state change through context change for each view\n     */\n    protected fixedApplyScroll(): void {\n        let j = 0;\n        const endIndex = this.state.startIndex + this.state.chunkSize;\n        for (let i = this.state.startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {\n            const input = this.igxForOf[i];\n            const embView = this._embeddedViews[j++];\n            const cntx = (embView as EmbeddedViewRef<any>).context;\n            cntx.$implicit = input;\n            cntx.index = this.getContextIndex(input);\n            cntx.count = this.igxForOf.length;\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called when scrolling horizontally\n     */\n    protected onHScroll(event) {\n        /* in certain situations this may be called when no scrollbar is visible */\n        if (!parseInt(this.scrollComponent.nativeElement.children[0].style.width, 10)) {\n            return;\n        }\n        const prevStartIndex = this.state.startIndex;\n        // Updating horizontal chunks\n        const scrollOffset = this.fixedUpdateAllElements(event.target.scrollLeft);\n        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n\n        this.dc.changeDetectorRef.detectChanges();\n        if (prevStartIndex !== this.state.startIndex) {\n            this.onChunkLoad.emit(this.state);\n        }\n    }\n\n    /**\n     * Gets the function used to track changes in the items collection.\n     * By default the object references are compared. However this can be optimized if you have unique identifier\n     * value that can be used for the comparison instead of the object ref or if you have some other property values\n     * in the item object that should be tracked for changes.\n     * This option is similar to ngForTrackBy.\n     * ```typescript\n     * const trackFunc = this.parentVirtDir.igxForTrackBy;\n     * ```\n     */\n    @Input()\n    get igxForTrackBy(): TrackByFunction<T> { return this._trackByFn; }\n\n    /**\n     * Sets the function used to track changes in the items collection.\n     * This function can be set in scenarios where you want to optimize or\n     * customize the tracking of changes for the items in the collection.\n     * The igxForTrackBy function takes the index and the current item as arguments and needs to return the unique identifier for this item.\n     * ```typescript\n     * this.parentVirtDir.igxForTrackBy = (index, item) => {\n     *      return item.id + item.width;\n     * };\n     * ```\n     */\n    set igxForTrackBy(fn: TrackByFunction<T>) { this._trackByFn = fn; }\n\n    /**\n     * @hidden\n     */\n    protected _applyChanges() {\n        const prevChunkSize = this.state.chunkSize;\n        this.applyChunkSizeChange();\n        this._recalcScrollBarSize();\n        if (this.igxForOf && this.igxForOf.length && this.dc) {\n            const embeddedViewCopy = Object.assign([], this._embeddedViews);\n            let startIndex = this.state.startIndex;\n            let endIndex = this.state.chunkSize + this.state.startIndex;\n            if (this.isRemote) {\n                startIndex = 0;\n                endIndex = this.igxForOf.length;\n            }\n            for (let i = startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {\n                const input = this.igxForOf[i];\n                const embView = embeddedViewCopy.shift();\n                const cntx = (embView as EmbeddedViewRef<any>).context;\n                cntx.$implicit = input;\n                cntx.index = this.getContextIndex(input);\n                cntx.count = this.igxForOf.length;\n            }\n            if (prevChunkSize !== this.state.chunkSize) {\n                this.onChunkLoad.emit(this.state);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calcMaxBrowserHeight(): number {\n        const div = document.createElement('div');\n        const style = div.style;\n        style.position = 'absolute';\n        style.top = '9999999999999999px';\n        document.body.appendChild(div);\n        const size = Math.abs(div.getBoundingClientRect()['top']);\n        document.body.removeChild(div);\n        return size;\n    }\n\n    /**\n     * @hidden\n     * Recalculates the chunkSize based on current startIndex and returns the new size.\n     * This should be called after this.state.startIndex is updated, not before.\n     */\n    protected _calculateChunkSize(): number {\n        let chunkSize = 0;\n        if (this.igxForContainerSize !== null && this.igxForContainerSize !== undefined) {\n            if (!this.sizesCache) {\n                this.initSizesCache(this.igxForOf);\n            }\n            chunkSize = this._calcMaxChunkSize();\n            if (this.igxForOf && chunkSize > this.igxForOf.length) {\n                chunkSize = this.igxForOf.length;\n            }\n        } else {\n            if (this.igxForOf) {\n                chunkSize = this.igxForOf.length;\n            }\n        }\n        return chunkSize;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getElement(viewref, nodeName) {\n        const elem = viewref.element.nativeElement.parentNode.getElementsByTagName(nodeName);\n        return elem.length > 0 ? elem[0] : null;\n    }\n\n    /**\n     * @hidden\n     */\n    protected initSizesCache(items: any[]): number {\n        let totalSize = 0;\n        let size = 0;\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n            this.igxForSizePropName : 'height';\n        let i = 0;\n        this.sizesCache = [];\n        this.heightCache = [];\n        this.sizesCache.push(0);\n        const count = this.isRemote ? this.totalItemCount : items.length;\n        for (i; i < count; i++) {\n            if (dimension === 'height') {\n                // cols[i][dimension] = parseInt(this.igxForItemSize, 10) || 0;\n                size = parseInt(this.igxForItemSize, 10) || 0;\n                this.heightCache.push(size);\n            } else {\n                size = this._getItemSize(items[i], dimension);\n            }\n            totalSize += size;\n            this.sizesCache.push(totalSize);\n        }\n        return totalSize;\n    }\n\n    protected _updateSizeCache() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.initSizesCache(this.igxForOf);\n            return;\n        }\n        const oldHeight = this.heightCache.length > 0 ? this.heightCache.reduce((acc, val) => acc + val) : 0;\n        const newHeight = this.initSizesCache(this.igxForOf);\n\n        const diff = oldHeight - newHeight;\n\n        // if data has been changed while container is scrolled\n        // should update scroll top/left according to change so that same startIndex is in view\n        if (Math.abs(diff) > 0 && this.scrollPosition > 0) {\n            this.recalcUpdateSizes();\n            const offset = parseInt(this.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n            this.scrollPosition = this.sizesCache[this.state.startIndex] - offset;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calcMaxChunkSize(): number {\n        let i = 0;\n        let length = 0;\n        let maxLength = 0;\n        const arr = [];\n        let sum = 0;\n        const availableSize = parseInt(this.igxForContainerSize, 10);\n        if (!availableSize) {\n            return 0;\n        }\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n            this.igxForSizePropName : 'height';\n        const reducer = (accumulator, currentItem) => accumulator + this._getItemSize(currentItem, dimension);\n        for (i; i < this.igxForOf.length; i++) {\n            let item = this.igxForOf[i];\n            if (dimension === 'height') {\n                item = { value: this.igxForOf[i], height: this.heightCache[i] };\n            }\n            const size = dimension === 'height' ?\n                this.heightCache[i] :\n                this._getItemSize(item, dimension);\n            sum = arr.reduce(reducer, size);\n            if (sum < availableSize) {\n                arr.push(item);\n                length = arr.length;\n                if (i === this.igxForOf.length - 1) {\n                    // reached end without exceeding\n                    // include prev items until size is filled or first item is reached.\n                    let curItem = dimension === 'height' ? arr[0].value : arr[0];\n                    let prevIndex = this.igxForOf.indexOf(curItem) - 1;\n                    while (prevIndex >= 0 && sum <= availableSize) {\n                        curItem = dimension === 'height' ? arr[0].value : arr[0];\n                        prevIndex = this.igxForOf.indexOf(curItem) - 1;\n                        const prevItem = this.igxForOf[prevIndex];\n                        const prevSize = dimension === 'height' ?\n                            this.heightCache[prevIndex] :\n                            parseInt(prevItem[dimension], 10);\n                        sum = arr.reduce(reducer, prevSize);\n                        arr.unshift(prevItem);\n                        length = arr.length;\n                    }\n                }\n            } else {\n                arr.push(item);\n                length = arr.length + 1;\n                arr.shift();\n            }\n            if (length > maxLength) {\n                maxLength = length;\n            }\n        }\n        return maxLength;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getIndexAt(left, set, index) {\n        let start = 0;\n        let end = set.length - 1;\n        if (left === 0) {\n            return 0;\n        }\n        while (start <= end) {\n            const midIdx = Math.floor((start + end) / 2);\n            const midLeft = set[midIdx];\n            const cmp = left - midLeft;\n            if (cmp > 0) {\n                start = midIdx + 1;\n            } else if (cmp < 0) {\n                end = midIdx - 1;\n            } else {\n                return midIdx;\n            }\n        }\n        return end;\n    }\n\n    protected _recalcScrollBarSize() {\n        const count = this.isRemote ? this.totalItemCount : (this.igxForOf ? this.igxForOf.length : 0);\n        this.dc.instance.notVirtual = !(this.igxForContainerSize && this.dc && this.state.chunkSize < count);\n        if (this.igxForScrollOrientation === 'horizontal') {\n            const totalWidth = this.igxForContainerSize ? this.initSizesCache(this.igxForOf) : 0;\n            this.scrollComponent.nativeElement.style.width = this.igxForContainerSize + 'px';\n            this.scrollComponent.nativeElement.children[0].style.width = totalWidth + 'px';\n            if (totalWidth <= parseInt(this.igxForContainerSize, 10)) {\n                this.scrollPosition = 0;\n            }\n        }\n        if (this.igxForScrollOrientation === 'vertical') {\n            this.scrollComponent.nativeElement.style.height = parseInt(this.igxForContainerSize, 10) + 'px';\n            this.scrollComponent.size = this._calcHeight();\n            if ( this.scrollComponent.size <= parseInt(this.igxForContainerSize, 10)) {\n                this.scrollPosition = 0;\n            }\n        }\n    }\n\n    protected _calcHeight(): number {\n        let height;\n        if (this.heightCache) {\n            height = this.heightCache.reduce((acc, val) => acc + val, 0);\n        } else {\n            height = this.initSizesCache(this.igxForOf);\n        }\n        this._virtHeight = height;\n        if (height > this._maxHeight) {\n            this._virtHeightRatio = height / this._maxHeight;\n            height = this._maxHeight;\n        }\n        return height;\n    }\n\n    protected _recalcOnContainerChange(changes: SimpleChanges) {\n        this.dc.instance._viewContainer.element.nativeElement.style.top = '0px';\n        this.dc.instance._viewContainer.element.nativeElement.style.left = '0px';\n        const prevChunkSize = this.state.chunkSize;\n        this.applyChunkSizeChange();\n        this._recalcScrollBarSize();\n        if (prevChunkSize !== this.state.chunkSize) {\n            this.onChunkLoad.emit(this.state);\n        }\n        if (this.sizesCache && this.igxForScrollOrientation === 'horizontal') {\n            // Updating horizontal chunks and offsets based on the new scrollLeft\n            const scrollOffset = this.fixedUpdateAllElements(this.scrollPosition);\n            this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n        }\n    }\n\n    /**\n     * @hidden\n     * Removes an elemenet from the embedded views and updates chunkSize.\n     */\n    protected removeLastElem() {\n        const oldElem = this._embeddedViews.pop();\n        this.onBeforeViewDestroyed.emit(oldElem);\n        oldElem.destroy();\n\n        this.state.chunkSize--;\n    }\n\n    /**\n     * @hidden\n     * If there exists an element that we can create embedded view for creates it, appends it and updates chunkSize\n     */\n    protected addLastElem() {\n        let elemIndex = this.state.startIndex + this.state.chunkSize;\n        if (!this.isRemote && !this.igxForOf) {\n            return;\n        }\n\n        if (elemIndex >= this.igxForOf.length) {\n            elemIndex = this.igxForOf.length - this.state.chunkSize;\n        }\n        const input = this.igxForOf[elemIndex];\n        const embeddedView = this.dc.instance._vcr.createEmbeddedView(\n            this._template,\n            new IgxForOfContext<T>(input, this.getContextIndex(input), this.igxForOf.length)\n        );\n\n        this._embeddedViews.push(embeddedView);\n        this.state.chunkSize++;\n\n        this._zone.run(() => {\n            this.cdr.markForCheck();\n        });\n    }\n\n    /**\n     * Recalculates chunkSize and adds/removes elements if need due to the change.\n     * this.state.chunkSize is updated in @addLastElem() or @removeLastElem()\n     */\n    protected applyChunkSizeChange() {\n        const chunkSize = this.isRemote ? (this.igxForOf ? this.igxForOf.length : 0) : this._calculateChunkSize();\n        if (chunkSize > this.state.chunkSize) {\n            const diff = chunkSize - this.state.chunkSize;\n            for (let i = 0; i < diff; i++) {\n                this.addLastElem();\n            }\n        } else if (chunkSize < this.state.chunkSize) {\n            const diff = this.state.chunkSize - chunkSize;\n            for (let i = 0; i < diff; i++) {\n                this.removeLastElem();\n            }\n        }\n    }\n\n    protected _updateScrollOffset() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this._updateHScrollOffset();\n        } else {\n            this._updateVScrollOffset();\n        }\n    }\n    private _updateVScrollOffset() {\n        let scrollOffset = 0;\n        const vScroll =  this.scrollComponent.nativeElement;\n        scrollOffset = vScroll && this.scrollComponent.size ?\n            this.scrollPosition - this.sizesCache[this.state.startIndex] : 0;\n        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n    }\n    private _updateHScrollOffset() {\n        let scrollOffset = 0;\n        scrollOffset =  this.scrollComponent.nativeElement &&\n            this.scrollComponent.size ?\n            this.scrollPosition - this.sizesCache[this.state.startIndex] : 0;\n        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n    }\n\n    private _getItemSize(item, dimension: string): number {\n        const dim = item[dimension];\n        return typeof dim === 'number' ? dim : parseInt(this.igxForItemSize, 10) || 0;\n    }\n}\n\nexport function getTypeNameForDebugging(type: any): string {\n    const name = 'name';\n    return type[name] || typeof type;\n}\n\nexport interface IForOfState extends IBaseEventArgs {\n    startIndex?: number;\n    chunkSize?: number;\n}\n\nexport interface IForOfDataChangingEventArgs extends IBaseEventArgs {\n    containerSize: number;\n}\n\n@Directive({\n    selector: '[igxGridFor][igxGridForOf]'\n})\nexport class IgxGridForOfDirective<T> extends IgxForOfDirective<T> implements OnInit, OnChanges, DoCheck {\n\n    constructor(\n        _viewContainer: ViewContainerRef,\n        _template: TemplateRef<NgForOfContext<T>>,\n        _differs: IterableDiffers,\n        resolver: ComponentFactoryResolver,\n        cdr: ChangeDetectorRef,\n        _zone: NgZone,\n        protected syncScrollService: IgxForOfScrollSyncService,\n        protected syncService: IgxForOfSyncService) {\n        super(_viewContainer, _template, _differs, resolver, cdr, _zone, syncScrollService);\n    }\n\n    @Input()\n    set igxGridForOf(value) {\n        this.igxForOf = value;\n    }\n\n    get igxGridForOf() {\n        return this.igxForOf;\n    }\n\n    /**\n     * @hidden @internal\n     * An event that is emitted after data has been changed but before the view is refreshed\n     */\n    @Output()\n    public onDataChanging = new EventEmitter<IForOfDataChangingEventArgs>();\n\n    ngOnInit() {\n        this.syncService.setMaster(this);\n        super.ngOnInit();\n        this.removeScrollEventListeners();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const forOf = 'igxGridForOf';\n        this.syncService.setMaster(this);\n        if (forOf in changes) {\n            const value = changes[forOf].currentValue;\n            if (!this._differ && value) {\n                try {\n                    this._differ = this._differs.find(value).create(this.igxForTrackBy);\n                } catch (e) {\n                    throw new Error(\n                        `Cannot find a differ supporting object \"${value}\" of type \"${getTypeNameForDebugging(value)}\".\n                     NgFor only supports binding to Iterables such as Arrays.`);\n                }\n            }\n        }\n        const defaultItemSize = 'igxForItemSize';\n        if (defaultItemSize in changes && !changes[defaultItemSize].firstChange &&\n             this.igxForScrollOrientation === 'vertical' && this.igxForOf) {\n            // handle default item size changed.\n            this.initSizesCache(this.igxForOf);\n        }\n        const containerSize = 'igxForContainerSize';\n        if (containerSize in changes && !changes[containerSize].firstChange && this.igxForOf) {\n            this._recalcOnContainerChange(changes);\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get sizesCache(): number[] {\n        if (this.syncService.isMaster(this)) {\n            return this._sizesCache;\n        }\n        return this.syncService.sizesCache(this.igxForScrollOrientation);\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    public set sizesCache(value: number[]) {\n        this._sizesCache = value;\n    }\n\n    protected get itemsDimension() {\n        return this.igxForScrollOrientation === 'horizontal' ? this.igxForSizePropName : 'height';\n    }\n\n    protected getItemSize(item) {\n        let size = 0;\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n            this.igxForSizePropName : 'height';\n        if (dimension === 'height') {\n            size = parseInt(this.igxForItemSize, 10) || 0;\n            if (item && item.summaries) {\n                size = item.max;\n            } else if (item && item.groups && item.height) {\n                size = item.height;\n            }\n        } else {\n            size = parseInt(item[dimension], 10) || 0;\n        }\n        return size;\n    }\n\n    protected initSizesCache(items: any[]): number {\n        if (!this.syncService.isMaster(this)) {\n            const masterSizesCache = this.syncService.sizesCache(this.igxForScrollOrientation);\n            return masterSizesCache[masterSizesCache.length - 1];\n        }\n        let totalSize = 0;\n        let size = 0;\n        let i = 0;\n        this.sizesCache = [];\n        this.heightCache = [];\n        this.sizesCache.push(0);\n        const count = this.isRemote ? this.totalItemCount : items.length;\n        for (i; i < count; i++) {\n            size = this.getItemSize(items[i]);\n            if (this.itemsDimension === 'height') {\n                this.heightCache.push(size);\n            }\n            totalSize += size;\n            this.sizesCache.push(totalSize);\n        }\n        return totalSize;\n    }\n\n    protected _updateSizeCache(changes: IterableChanges<T> = null) {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.initSizesCache(this.igxForOf);\n            return;\n        }\n\n        const oldHeight = this.heightCache.length > 0 ? this.heightCache.reduce((acc, val) => acc + val) : 0;\n        let newHeight = oldHeight;\n        if (changes && !this.isRemote) {\n            newHeight = this.handleCacheChanges(changes);\n        } else {\n            newHeight = this.initSizesCache(this.igxForOf);\n        }\n\n        const diff = oldHeight - newHeight;\n\n        // if data has been changed while container is scrolled\n        // should update scroll top/left according to change so that same startIndex is in view\n        if (Math.abs(diff) > 0) {\n            // TODO: This code can be removed. However tests need to be rewritten in a way that they wait for ResizeObserved to complete.\n            // So leaving as is for the moment.\n            requestAnimationFrame(() => {\n                this.recalcUpdateSizes();\n                const offset = parseInt(this.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n                if (this.scrollPosition !== 0) {\n                    this.scrollPosition = this.sizesCache[this.state.startIndex] - offset;\n                } else {\n                    this._updateScrollOffset();\n                }\n            });\n        }\n    }\n\n    protected handleCacheChanges(changes: IterableChanges<T>) {\n        const identityChanges = [];\n        const newHeightCache = [];\n        const newSizesCache = [];\n        newSizesCache.push(0);\n        let newHeight = 0;\n\n        // When there are more than one removed items the changes are not reliable so those with identity change should be default size.\n        let numRemovedItems = 0;\n        changes.forEachRemovedItem(() => numRemovedItems++);\n\n        // Get the identity changes to determine later if those that have changed their indexes should be assigned default item size.\n        changes.forEachIdentityChange((item) => {\n            if (item.currentIndex !== item.previousIndex) {\n                // Filter out ones that have not changed their index.\n                identityChanges[item.currentIndex] = item;\n            }\n        });\n\n        // Processing each item that is passed to the igxForOf so far seem to be most reliable. We parse the updated list of items.\n        changes.forEachItem((item) => {\n            if (item.previousIndex !== null &&\n                (numRemovedItems < 2 || !identityChanges.length || identityChanges[item.currentIndex])) {\n                // Reuse cache on those who have previousIndex.\n                // When there are more than one removed items currently the changes are not readable so ones with identity change\n                // should be racalculated.\n                newHeightCache[item.currentIndex] = this.heightCache[item.previousIndex];\n            } else {\n                // Assign default item size.\n                newHeightCache[item.currentIndex] = this.getItemSize(item.item);\n            }\n            newSizesCache[item.currentIndex + 1] = newSizesCache[item.currentIndex] + newHeightCache[item.currentIndex];\n            newHeight += newHeightCache[item.currentIndex];\n        });\n        this.heightCache = newHeightCache;\n        this.sizesCache = newSizesCache;\n        return newHeight;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public assumeMaster(): void {\n        this._sizesCache = this.syncService.sizesCache(this.igxForScrollOrientation);\n        this.syncService.setMaster(this, true);\n    }\n\n    ngDoCheck() {\n        if (this._differ) {\n            const changes = this._differ.diff(this.igxForOf);\n            if (changes) {\n                const args: IForOfDataChangingEventArgs = {\n                    containerSize: this.igxForContainerSize\n                };\n                this.onDataChanging.emit(args);\n                //  re-init cache.\n                if (!this.igxForOf) {\n                    this.igxForOf = [];\n                }\n                /* we need to reset the master dir if all rows are removed\n                (e.g. because of filtering); if all columns are hidden, rows are\n                still rendered empty, so we should not reset master */\n                if (!this.igxForOf.length &&\n                    this.igxForScrollOrientation === 'vertical') {\n                    this.syncService.resetMaster();\n                }\n                this.syncService.setMaster(this);\n                this.igxForContainerSize = args.containerSize;\n                this._updateSizeCache(changes);\n                this._applyChanges();\n                this._updateScrollOffset();\n                this.onDataChanged.emit();\n            }\n        }\n    }\n\n    onScroll(event) {\n        if (!parseInt(this.scrollComponent.nativeElement.style.height, 10)) {\n            return;\n        }\n\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const maxRealScrollTop = event.target.children[0].scrollHeight - containerSize;\n        const realPercentScrolled = maxRealScrollTop !== 0 ?  event.target.scrollTop / maxRealScrollTop : 0;\n        if (!this._bScrollInternal) {\n            const maxVirtScrollTop = this._virtHeight - containerSize;\n            this._virtScrollTop = realPercentScrolled * maxVirtScrollTop;\n        } else {\n            this._bScrollInternal = false;\n        }\n        const scrollOffset = this.fixedUpdateAllElements(this._virtScrollTop);\n\n        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n\n        this._zone.onStable.pipe(first()).subscribe( () => {\n            this.recalcUpdateSizes();\n        });\n        this.cdr.markForCheck();\n    }\n\n    onHScroll(scrollAmount) {\n        /* in certain situations this may be called when no scrollbar is visible */\n        if (!this.scrollComponent || !parseInt(this.scrollComponent.nativeElement.children[0].style.width, 10)) {\n            return;\n        }\n        // Updating horizontal chunks\n        const scrollOffset = this.fixedUpdateAllElements(scrollAmount);\n        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n    }\n\n    protected addLastElem() {\n        let elemIndex = this.state.startIndex + this.state.chunkSize;\n        if (!this.isRemote && !this.igxForOf) {\n            return;\n        }\n\n        if (elemIndex >= this.igxForOf.length) {\n            elemIndex = this.igxForOf.length - this.state.chunkSize;\n        }\n        const input = this.igxForOf[elemIndex];\n        const embeddedView = this.dc.instance._vcr.createEmbeddedView(\n            this._template,\n            new IgxForOfContext<T>(input, this.getContextIndex(input), this.igxForOf.length)\n        );\n\n        this._embeddedViews.push(embeddedView);\n        this.state.chunkSize++;\n    }\n\n    protected _updateViews(prevChunkSize) {\n        if (this.igxForOf && this.igxForOf.length && this.dc) {\n            const embeddedViewCopy = Object.assign([], this._embeddedViews);\n            let startIndex;\n            let endIndex;\n            if (this.isRemote) {\n                startIndex = 0;\n                endIndex = this.igxForOf.length;\n            } else {\n                startIndex = this.getIndexAt(\n                    this.scrollPosition,\n                    this.sizesCache,\n                    0\n                );\n                if (startIndex + this.state.chunkSize > this.igxForOf.length) {\n                    startIndex = this.igxForOf.length - this.state.chunkSize;\n                }\n                this.state.startIndex = startIndex;\n                endIndex = this.state.chunkSize + this.state.startIndex;\n            }\n\n            for (let i = startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {\n                const input = this.igxForOf[i];\n                const embView = embeddedViewCopy.shift();\n                const cntx = (embView as EmbeddedViewRef<any>).context;\n                cntx.$implicit = input;\n                cntx.index = this.getContextIndex(input);\n                cntx.count = this.igxForOf.length;\n            }\n            if (prevChunkSize !== this.state.chunkSize) {\n                this.onChunkLoad.emit(this.state);\n            }\n        }\n    }\n    protected _applyChanges() {\n        const prevChunkSize = this.state.chunkSize;\n        this.applyChunkSizeChange();\n        this._recalcScrollBarSize();\n        this._updateViews(prevChunkSize);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calcMaxChunkSize(): number {\n        if (this.syncService.isMaster(this)) {\n            return super._calcMaxChunkSize();\n        }\n        return this.syncService.chunkSize(this.igxForScrollOrientation);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxForOfDirective, IgxGridForOfDirective, DisplayContainerComponent, VirtualHelperComponent,\n         HVirtualHelperComponent, VirtualHelperBaseDirective],\n    entryComponents: [DisplayContainerComponent, VirtualHelperComponent, HVirtualHelperComponent],\n    exports: [IgxForOfDirective, IgxGridForOfDirective],\n    imports: [IgxScrollInertiaModule, CommonModule]\n})\n\nexport class IgxForOfModule {\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    forwardRef,\n    QueryList,\n    OnInit,\n    Input,\n    OnDestroy,\n    ViewChild,\n    ContentChild,\n    AfterViewInit,\n    Output,\n    EventEmitter,\n    Optional,\n    Inject\n} from '@angular/core';\nimport { IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { IgxDropDownItemComponent } from './drop-down-item.component';\nimport { IgxDropDownBase } from './drop-down.base';\nimport { DropDownActionKey, Navigate } from './drop-down.common';\nimport { IGX_DROPDOWN_BASE, IDropDownBase } from './drop-down.common';\nimport { ISelectionEventArgs } from './drop-down.common';\nimport { CancelableEventArgs, CancelableBrowserEventArgs, isIE, IBaseEventArgs } from '../core/utils';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { Subject } from 'rxjs';\nimport { IgxDropDownItemBase } from './drop-down-item.base';\nimport { OverlaySettings } from '../services';\nimport { IgxForOfDirective } from '../directives/for-of/for_of.directive';\nimport { take } from 'rxjs/operators';\nimport { DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\n\n/**\n * **Ignite UI for Angular DropDown** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/drop_down.html)\n *\n * The Ignite UI for Angular Drop Down displays a scrollable list of items which may be visually grouped and\n * supports selection of a single item. Clicking or tapping an item selects it and closes the Drop Down\n *\n * Example:\n * ```html\n * <igx-drop-down>\n *   <igx-drop-down-item *ngFor=\"let item of items\" disabled={{item.disabled}} isHeader={{item.header}}>\n *     {{ item.value }}\n *   </igx-drop-down-item>\n * </igx-drop-down>\n * ```\n */\n@Component({\n    selector: 'igx-drop-down',\n    templateUrl: './drop-down.component.html',\n    providers: [{ provide: IGX_DROPDOWN_BASE, useExisting: IgxDropDownComponent }]\n})\nexport class IgxDropDownComponent extends IgxDropDownBase implements IDropDownBase, OnInit, OnDestroy, AfterViewInit {\n    protected destroy$ = new Subject<boolean>();\n    protected _scrollPosition: number;\n\n    @ContentChild(IgxForOfDirective, { read: IgxForOfDirective, static: false })\n    protected virtDir: IgxForOfDirective<any>;\n\n    @ViewChild(IgxToggleDirective, { static: true })\n    protected toggleDirective: IgxToggleDirective;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(forwardRef(() => IgxDropDownItemComponent), { descendants: true })\n    public children: QueryList<IgxDropDownItemBase>;\n\n    /**\n     * Emitted before the dropdown is opened\n     *\n     * ```html\n     * <igx-drop-down (onOpening)='handleOpening()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<CancelableEventArgs & IBaseEventArgs>();\n\n    /**\n     * Emitted after the dropdown is opened\n     *\n     * ```html\n     * <igx-drop-down (onOpened)='handleOpened()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter<void>();\n\n    /**\n     * Emitted before the dropdown is closed\n     *\n     * ```html\n     * <igx-drop-down (onClosing)='handleClosing()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs & IBaseEventArgs>();\n\n    /**\n     * Emitted after the dropdown is closed\n     *\n     * ```html\n     * <igx-drop-down (onClosed)='handleClosed()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter<void>();\n\n    /**\n     * Gets/sets whether items take focus. Disabled by default.\n     * When enabled, drop down items gain tab index and are focused when active -\n     * this includes activating the selected item when opening the drop down and moving with keyboard navigation.\n     *\n     * Note: Keep that focus shift in mind when using the igxDropDownItemNavigation directive\n     * and ensure it's placed either on each focusable item or a common ancestor to allow it to handle keyboard events.\n     *\n     * ```typescript\n     * // get\n     * let dropDownAllowsItemFocus = this.dropdown.allowItemsFocus;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [allowItemsFocus]='true'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public allowItemsFocus = false;\n\n    /**\n     * @hidden @internal\n     */\n    public get focusedItem(): IgxDropDownItemBase {\n        if (this.virtDir) {\n            return this._focusedItem && this._focusedItem.index !== -1 ?\n                (this.children.find(e => e.index === this._focusedItem.index) || null) :\n                null;\n        }\n        return this._focusedItem;\n    }\n\n    public set focusedItem(value: IgxDropDownItemBase) {\n        if (!value) {\n            this.selection.clear(`${this.id}-active`);\n            this._focusedItem = null;\n            return;\n        }\n        this._focusedItem = value;\n        if (this.virtDir) {\n            this._focusedItem = {\n                value: value.value,\n                index: value.index\n            } as IgxDropDownItemBase;\n        }\n        this.selection.set(`${this.id}-active`, new Set([this._focusedItem]));\n    }\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n    set id(value: string) {\n        this.toggleDirective.id = value;\n        this.selection.set(value, this.selection.get(this.id));\n        this.selection.clear(this.id);\n        this.selection.set(value, this.selection.get(`${this.id}-active`));\n        this.selection.clear(`${this.id}-active`);\n        this._id = value;\n    }\n\n    /** Id of the internal listbox of the drop down */\n    public get listId() {\n        return this.id + '-list';\n    }\n\n    /**\n     * Get currently selected item\n     *\n     * ```typescript\n     * let currentItem = this.dropdown.selectedItem;\n     * ```\n     */\n    public get selectedItem(): IgxDropDownItemBase {\n        const selectedItem = this.selection.first_item(this.id);\n        if (selectedItem) {\n            return selectedItem;\n        }\n        return null;\n    }\n\n    /**\n     * Gets if the dropdown is collapsed\n     *\n     * ```typescript\n     * let isCollapsed = this.dropdown.collapsed;\n     * ```\n     */\n    public get collapsed(): boolean {\n        return this.toggleDirective.collapsed;\n    }\n\n    protected get scrollContainer() {\n        return this.toggleDirective.element;\n    }\n\n    protected get collectionLength() {\n        if (this.virtDir) {\n            return this.virtDir.totalItemCount || this.virtDir.igxForOf.length;\n        }\n    }\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(elementRef, cdr, _displayDensityOptions);\n    }\n\n    /**\n     * Opens the dropdown\n     *\n     * ```typescript\n     * this.dropdown.open();\n     * ```\n     */\n    public open(overlaySettings?: OverlaySettings) {\n        this.toggleDirective.open(overlaySettings);\n        this.updateScrollPosition();\n    }\n\n    /**\n     * Closes the dropdown\n     *\n     * ```typescript\n     * this.dropdown.close();\n     * ```\n     */\n    public close() {\n        this.toggleDirective.close();\n    }\n\n    /**\n     * Toggles the dropdown\n     *\n     * ```typescript\n     * this.dropdown.toggle();\n     * ```\n     */\n    public toggle(overlaySettings?: OverlaySettings) {\n        if (this.collapsed || this.toggleDirective.isClosing) {\n            this.open(overlaySettings);\n        } else {\n            this.close();\n        }\n    }\n\n    /**\n     * Select an item by index\n     * @param index of the item to select; If the drop down uses *igxFor, pass the index in data\n     */\n    public setSelectedItem(index: number) {\n        if (index < 0 || index >= this.items.length) {\n            return;\n        }\n        let newSelection: IgxDropDownItemBase;\n        if (this.virtDir) {\n            newSelection = {\n                value: this.virtDir.igxForOf[index],\n                index\n            } as IgxDropDownItemBase;\n        } else {\n            newSelection = this.items[index];\n        }\n        this.selectItem(newSelection);\n    }\n\n    /**\n     * Navigates to the item on the specified index\n     * If the data in the drop-down is virtualized, pass the index of the item in the virtualized data.\n     * @param newIndex number\n     */\n    public navigateItem(index: number) {\n        if (this.virtDir) {\n            if (index === -1 || index >= this.collectionLength) {\n                return;\n            }\n            const direction = index > (this.focusedItem ? this.focusedItem.index : -1) ? Navigate.Down : Navigate.Up;\n            const subRequired = this.isIndexOutOfBounds(index, direction);\n            this.focusedItem = {\n                value: this.virtDir.igxForOf[index],\n                index: index\n            } as IgxDropDownItemBase;\n            if (subRequired) {\n                this.virtDir.scrollTo(index);\n            }\n            if (subRequired) {\n                this.virtDir.onChunkLoad.pipe(take(1)).subscribe(() => {\n                    this.skipHeader(direction);\n                });\n            } else {\n                this.skipHeader(direction);\n            }\n        } else {\n            super.navigateItem(index);\n        }\n        if (this.allowItemsFocus && this.focusedItem) {\n            this.focusedItem.element.nativeElement.focus();\n            this.cdr.markForCheck();\n        }\n    }\n\n    private isIndexOutOfBounds(index: number, direction: Navigate) {\n        const virtState = this.virtDir.state;\n        const currentPosition = this.virtDir.getScroll().scrollTop;\n        const itemPosition = this.virtDir.getScrollForIndex(index, direction === Navigate.Down);\n        const indexOutOfChunk = index < virtState.startIndex || index > virtState.chunkSize + virtState.startIndex;\n        const scrollNeeded = direction === Navigate.Down ? currentPosition < itemPosition : currentPosition > itemPosition;\n        const subRequired = indexOutOfChunk || scrollNeeded;\n        return subRequired;\n    }\n\n    protected skipHeader(direction: Navigate) {\n        if (!this.focusedItem) {\n            return;\n        }\n        if (this.focusedItem.isHeader || this.focusedItem.disabled) {\n            if (direction === Navigate.Up) {\n                this.navigatePrev();\n            } else {\n                this.navigateNext();\n            }\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    updateScrollPosition() {\n        if (!this.virtDir) {\n            return;\n        }\n        if (!this.selectedItem) {\n            this.virtDir.scrollTo(0);\n            return;\n        }\n        let targetScroll = this.virtDir.getScrollForIndex(this.selectedItem.index);\n        const itemsInView = this.virtDir.igxForContainerSize / this.virtDir.igxForItemSize;\n        targetScroll -= (itemsInView / 2 - 1) * this.virtDir.igxForItemSize;\n        this.virtDir.getScroll().scrollTop = targetScroll;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleOpening(e: CancelableEventArgs) {\n        this.onOpening.emit(e);\n        if (e.cancel) {\n            return;\n        }\n        if (!this.virtDir && this.selectedItem) {\n            this.scrollToItem(this.selectedItem);\n        }\n        if (this.virtDir) {\n            this.virtDir.scrollPosition = this._scrollPosition;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleOpened() {\n        if (this.selectedItem) {\n            this.focusedItem = this.selectedItem;\n            this._focusedItem.focused = true;\n        } else if (this.allowItemsFocus) {\n            this.navigateFirst();\n        }\n        this.onOpened.emit();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleClosing(e: CancelableBrowserEventArgs) {\n        this.onClosing.emit(e);\n        if (this.virtDir) {\n            this._scrollPosition = this.virtDir.scrollPosition;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleClosed() {\n        if (this._focusedItem) {\n            this._focusedItem.focused = false;\n        }\n        this.onClosed.emit();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this.selection.clear(this.id);\n        this.selection.clear(`${this.id}-active`);\n    }\n\n    protected scrollToItem(item: IgxDropDownItemBase) {\n        const itemPosition = this.calculateScrollPosition(item);\n\n        //  in IE11 setting sctrollTop is somehow slow and forces dropdown\n        //  to appear on screen before animation start. As a result dropdown\n        //  flickers badly. This is why we set scrollTop just a little later\n        //  allowing animation to start and prevent dropdown flickering\n        if (isIE()) {\n            setTimeout(() => {\n                this.scrollContainer.scrollTop = (itemPosition);\n            }, 1);\n        } else {\n            this.scrollContainer.scrollTop = (itemPosition);\n        }\n    }\n\n    /** @hidden @internal */\n    public calculateScrollPosition(item: IgxDropDownItemBase): number {\n        if (!item) {\n            return 0;\n        }\n\n        const elementRect = item.element.nativeElement.getBoundingClientRect();\n        const parentRect = this.scrollContainer.getBoundingClientRect();\n        const scrollDelta = parentRect.top - elementRect.top;\n        let scrollPosition = this.scrollContainer.scrollTop - scrollDelta;\n\n        const dropDownHeight = this.scrollContainer.clientHeight;\n        scrollPosition -= dropDownHeight / 2;\n        scrollPosition += item.elementHeight / 2;\n\n        return Math.floor(scrollPosition);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    ngOnInit() {\n        this.toggleDirective.id = this.id;\n    }\n\n    ngAfterViewInit() {\n        if (this.virtDir) {\n            this.virtDir.igxForItemSize = 28;\n        }\n    }\n\n    /** Keydown Handler */\n    public onItemActionKey(key: DropDownActionKey, event?: Event) {\n        super.onItemActionKey(key, event);\n        this.close();\n    }\n\n    /**\n     * Virtual scroll implementation\n     * @hidden @internal\n     */\n    public navigateFirst() {\n        if (this.virtDir) {\n            this.navigateItem(0);\n        } else {\n            super.navigateFirst();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateLast() {\n        if (this.virtDir) {\n            this.navigateItem(this.virtDir.totalItemCount ? this.virtDir.totalItemCount - 1 : this.virtDir.igxForOf.length - 1);\n        } else {\n            super.navigateLast();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateNext() {\n        if (this.virtDir) {\n            this.navigateItem(this._focusedItem ? this._focusedItem.index + 1 : 0);\n        } else {\n            super.navigateNext();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigatePrev() {\n        if (this.virtDir) {\n            this.navigateItem(this._focusedItem ? this._focusedItem.index - 1 : 0);\n        } else {\n            super.navigatePrev();\n        }\n    }\n\n    /**\n     * Handles the `onSelection` emit and the drop down toggle when selection changes\n     * @hidden\n     * @internal\n     * @param newSelection\n     * @param event\n     */\n    public selectItem(newSelection?: IgxDropDownItemBase, event?: Event) {\n        const oldSelection = this.selectedItem;\n        if (!newSelection) {\n            newSelection = this.focusedItem;\n        }\n        if (newSelection === null) {\n            return;\n        }\n        if (newSelection instanceof IgxDropDownItemBase && newSelection.isHeader) {\n            return;\n        }\n        if (this.virtDir) {\n            newSelection = {\n                value: newSelection.value,\n                index: newSelection.index\n            } as IgxDropDownItemBase;\n        }\n        const args: ISelectionEventArgs = { oldSelection, newSelection, cancel: false };\n        this.onSelection.emit(args);\n\n        if (!args.cancel) {\n            if (this.isSelectionValid(args.newSelection)) {\n                this.selection.set(this.id, new Set([args.newSelection]));\n                if (!this.virtDir) {\n                    if (oldSelection) {\n                        oldSelection.selected = false;\n                    }\n                    if (args.newSelection) {\n                        args.newSelection.selected = true;\n                    }\n                }\n                if (event) {\n                    this.toggleDirective.close();\n                }\n            } else {\n                throw new Error('Please provide a valid drop-down item for the selection!');\n            }\n        }\n    }\n\n    /**\n     * Checks whether the selection is valid\n     * `null` - the selection should be emptied\n     * Virtual? - the selection should at least have and `index` and `value` property\n     * Non-virtual? - the selection should be a valid drop-down item and **not** be a header\n     */\n    protected isSelectionValid(selection: any): boolean {\n        return selection === null\n        || (this.virtDir && selection.hasOwnProperty('value') && selection.hasOwnProperty('index'))\n        || (selection instanceof IgxDropDownItemComponent && !selection.isHeader);\n    }\n}\n\n","import { Directive, Optional, Self, Input, HostListener, Inject } from '@angular/core';\nimport { IGX_DROPDOWN_BASE } from './drop-down.common';\nimport { IDropDownNavigationDirective } from './drop-down.common';\nimport { IgxDropDownBase } from './drop-down.base';\nimport { DropDownActionKey } from './drop-down.common';\n\n/**\n * Navigation Directive that handles keyboard events on its host and controls a targeted IgxDropDownBase component\n */\n@Directive({\n    selector: '[igxDropDownItemNavigation]'\n})\nexport class IgxDropDownItemNavigationDirective implements IDropDownNavigationDirective {\n\n    protected _target: IgxDropDownBase = null;\n\n    constructor(@Self() @Optional() @Inject(IGX_DROPDOWN_BASE) public dropdown: IgxDropDownBase) { }\n\n    /**\n     * Gets the target of the navigation directive;\n     *\n     * ```typescript\n     * // Get\n     * export class MyComponent {\n     *  ...\n     *  @ContentChild(IgxDropDownNavigationDirective)\n     *  navDirective: IgxDropDownNavigationDirective = null\n     *  ...\n     *  const navTarget: IgxDropDownBase = navDirective.navTarget\n     * }\n     * ```\n     */\n    get target(): IgxDropDownBase {\n        return this._target;\n    }\n\n    /**\n     * Sets the target of the navigation directive;\n     * If no valid target is passed, it falls back to the drop down context\n     *\n     * ```html\n     * <!-- Set -->\n     * <input [igxDropDownItemNavigation]=\"dropdown\" />\n     * ...\n     * <igx-drop-down #dropdown>\n     * ...\n     * </igx-drop-down>\n     * ```\n     */\n    @Input('igxDropDownItemNavigation')\n    set target(target: IgxDropDownBase) {\n        this._target = target ? target : this.dropdown;\n    }\n\n    /**\n     * Captures keydown events and calls the appropriate handlers on the target component\n     */\n    @HostListener('keydown', ['$event'])\n    handleKeyDown(event: KeyboardEvent) {\n        if (event) {\n            const key = event.key.toLowerCase();\n            if (!this.target.collapsed) { // If dropdown is opened\n                const navKeys = ['esc', 'escape', 'enter', 'space', 'spacebar', ' ',\n            'arrowup', 'up', 'arrowdown', 'down', 'home', 'end'];\n                if (navKeys.indexOf(key) === -1) { // If key has appropriate function in DD\n                    return;\n                }\n                event.preventDefault();\n                event.stopPropagation();\n            } else { // If dropdown is closed, do nothing\n                return;\n            }\n            switch (key) {\n                case 'esc':\n                case 'escape':\n                    this.target.onItemActionKey(DropDownActionKey.ESCAPE, event);\n                    break;\n                case 'enter':\n                    this.target.onItemActionKey(DropDownActionKey.ENTER, event);\n                    break;\n                case 'space':\n                case 'spacebar':\n                case ' ':\n                    this.target.onItemActionKey(DropDownActionKey.SPACE, event);\n                    break;\n                case 'arrowup':\n                case 'up':\n                    this.onArrowUpKeyDown();\n                    break;\n                case 'arrowdown':\n                case 'down':\n                    this.onArrowDownKeyDown();\n                    break;\n                case 'home':\n                    this.onHomeKeyDown();\n                    break;\n                case 'end':\n                    this.onEndKeyDown();\n                    break;\n                default:\n                    return;\n            }\n        }\n    }\n\n    /**\n     * Navigates to previous item\n     */\n    onArrowDownKeyDown() {\n        this.target.navigateNext();\n    }\n\n    /**\n     * Navigates to previous item\n     */\n    onArrowUpKeyDown() {\n        this.target.navigatePrev();\n    }\n\n    /**\n     * Navigates to target's last item\n     */\n    onEndKeyDown() {\n        this.target.navigateLast();\n    }\n\n    /**\n     * Navigates to target's first item\n     */\n    onHomeKeyDown() {\n        this.target.navigateFirst();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { IgxDropDownComponent } from './drop-down.component';\nimport { IgxDropDownItemComponent } from './drop-down-item.component';\nimport { IgxDropDownItemNavigationDirective } from './drop-down-navigation.directive';\nimport { CommonModule } from '@angular/common';\nimport { IgxToggleModule } from '../directives/toggle/toggle.directive';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxDropDownGroupComponent } from './drop-down-group.component';\n\nexport * from './drop-down.component';\nexport * from './drop-down-item.component';\nexport { ISelectionEventArgs, IDropDownNavigationDirective,  } from './drop-down.common';\nexport * from './drop-down-navigation.directive';\nexport * from './drop-down.base';\nexport * from './drop-down-item.base';\nexport * from './drop-down-group.component';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDropDownComponent, IgxDropDownItemComponent, IgxDropDownGroupComponent,\n        IgxDropDownItemNavigationDirective],\n    exports: [IgxDropDownComponent, IgxDropDownItemComponent, IgxDropDownGroupComponent,\n        IgxDropDownItemNavigationDirective],\n    imports: [CommonModule, IgxToggleModule],\n    providers: [IgxSelectionAPIService]\n})\nexport class IgxDropDownModule { }\n","import { Directive, ElementRef, HostBinding, Input, OnInit } from '@angular/core';\n\nenum IgxHintPosition {\n    START,\n    END\n}\n\n@Directive({\n    selector: 'igx-hint,[igxHint]'\n})\nexport class IgxHintDirective implements OnInit {\n    private _position: IgxHintPosition = IgxHintPosition.START;\n    /**\n     * Sets/gets whether the hint position is at the start.\n     * Default value is `false`.\n     * ```typescript\n     * @ViewChild('hint', {read: IgxHintDirective})\n     * public igxHint: IgxHintDirective;\n     * this.igxHint.isPositionStart = true;\n     * ```\n     * ```typescript\n     * let isHintPositionStart = this.igxHint.isPositionStart;\n     * ```\n     * @memberof IgxHintDirective\n     */\n    @HostBinding('class.igx-input-group__hint-item--start')\n    public isPositionStart = false;\n    /**\n     * Sets/gets whether the hint position is at the end.\n     * Default value is `false`.\n     * ```typescript\n     * @ViewChild('hint', {read: IgxHintDirective})\n     * public igxHint: IgxHintDirective;\n     * this.igxHint.isPositionEnd = true;\n     * ```\n     * ```typescript\n     * let isHintPositionEnd = this.igxHint.isPositionEnd;\n     * ```\n     * @memberof IgxHintDirective\n     */\n    @HostBinding('class.igx-input-group__hint-item--end')\n    public isPositionEnd = false;\n\n    constructor(private _element: ElementRef) {\n    }\n    /**\n     * Sets the position of the hint.\n     * ```html\n     * <igx-input-group>\n     *  <input igxInput type=\"text\"/>\n     *  <igx-hint #hint [position]=\"'start'\">IgxHint displayed at the start</igx-hint>\n     * </igx-input-group>\n     * ```\n     * @memberof IgxHintDirective\n     */\n    @Input('position')\n    set position(value: string) {\n        const position: IgxHintPosition = (IgxHintPosition as any)[value.toUpperCase()];\n        if (position !== undefined) {\n            this._position = position;\n            this._applyPosition(this._position);\n        }\n    }\n    /**\n     * Gets the position of the hint.\n     * ```typescript\n     * @ViewChild('hint', {read: IgxHintDirective})\n     * public igxHint: IgxHintDirective;\n     * let hintPosition =  this.igxHint.position;\n     * ```\n     * @memberof IgxHintDirective\n     */\n    get position() {\n        return this._position.toString();\n    }\n    /**\n     *@hidden\n     */\n    ngOnInit() {\n        this._applyPosition(this._position);\n    }\n\n    private _applyPosition(position: IgxHintPosition) {\n        this.isPositionStart = this.isPositionEnd = false;\n        switch (position) {\n            case IgxHintPosition.START:\n                this.isPositionStart = true;\n                break;\n            case IgxHintPosition.END:\n                this.isPositionEnd = true;\n                break;\n            default: break;\n        }\n    }\n}\n","/** @hidden */\nexport abstract class IgxInputGroupBase {\n    disabled: boolean;\n    isFocused: boolean;\n    isRequired: boolean;\n    hasPlaceholder: boolean;\n}\n","import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Self\n} from '@angular/core';\nimport { AbstractControl, FormControlName, NgControl, NgModel } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { IgxInputGroupBase } from '../../input-group/input-group.common';\n\nconst nativeValidationAttributes = ['required', 'pattern', 'minlength', 'maxlength', 'min', 'max', 'step'];\n\nexport enum IgxInputState {\n    INITIAL,\n    VALID,\n    INVALID\n}\n\n@Directive({\n    selector: '[igxInput]',\n    exportAs: 'igxInput'\n})\nexport class IgxInputDirective implements AfterViewInit, OnDestroy {\n    private _valid = IgxInputState.INITIAL;\n    private _statusChanges$: Subscription;\n\n    constructor(\n        public inputGroup: IgxInputGroupBase,\n        @Optional() @Self() @Inject(NgModel) protected ngModel: NgModel,\n        @Optional() @Self() @Inject(FormControlName) protected formControl: FormControlName,\n        protected element: ElementRef,\n        protected cdr: ChangeDetectorRef) { }\n\n    private get ngControl(): NgControl {\n        return this.ngModel ? this.ngModel : this.formControl;\n    }\n    /**\n     * Sets the `value` property.\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [value]=\"'IgxInput Value'\">\n     * </input-group>\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @Input('value')\n    set value(value: any) {\n        this.nativeElement.value = value;\n        this.checkValidity();\n    }\n    /**\n     * Gets the `value` propery.\n     * ```typescript\n     * @ViewChild('igxInput', {read: IgxInputDirective})\n     *  public igxInput: IgxInputDirective;\n     * let inputValue = this.igxInput.value;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    get value() {\n        return this.nativeElement.value;\n    }\n    /**\n     * Sets the `disabled` property.\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [disabled]=\"true\">\n     * </input-group>\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @Input()\n    public set disabled(value: boolean) {\n        this.nativeElement.disabled = value;\n        this.inputGroup.disabled = value;\n    }\n    /**\n     * Gets the `disabled` property\n     * ```typescript\n     * @ViewChild('igxInput', {read: IgxInputDirective})\n     *  public igxInput: IgxInputDirective;\n     * let isDisabled = this.igxInput.disabled;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get disabled() {\n        return this.nativeElement.hasAttribute('disabled');\n    }\n\n    /**\n     * Sets the `required` property.\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [required]=\"true\">\n     * </input-group>\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @Input()\n    public set required(value: boolean) {\n        if (typeof value === 'boolean') {\n            this.nativeElement.required = this.inputGroup.isRequired = value;\n\n            if (value && !this.nativeElement.checkValidity()) {\n                this._valid = IgxInputState.INVALID;\n            } else {\n                this._valid = IgxInputState.INITIAL;\n            }\n        }\n    }\n\n    /**\n     * Gets whether the igxInput is required.\n     * ```typescript\n     * let isRequired = this.igxInput.required;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get required() {\n        return this.nativeElement.hasAttribute('required');\n    }\n\n    /**\n     * Sets/gets whether the `\"igx-input-group__input\"` class is added to the host element.\n     * Default value is `false`.\n     * ```typescript\n     * this.igxInput.isInput = true;\n     * ```\n     * ```typescript\n     * let isCLassAdded = this.igxInput.isInput;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @HostBinding('class.igx-input-group__input')\n    public isInput = false;\n    /**\n     * Sets/gets whether the `\"class.igx-input-group__textarea\"` class is added to the host element.\n     * Default value is `false`.\n     * ```typescript\n     * this.igxInput.isTextArea = true;\n     * ```\n     * ```typescript\n     * let isCLassAdded = this.igxInput.isTextArea;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @HostBinding('class.igx-input-group__textarea')\n    public isTextArea = false;\n    /**\n     *@hidden\n     */\n    @HostListener('focus', ['$event'])\n    public onFocus(event) {\n        this.inputGroup.isFocused = true;\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('blur', ['$event'])\n    public onBlur(event) {\n        this.inputGroup.isFocused = false;\n        this._valid = IgxInputState.INITIAL;\n        if (this.ngControl) {\n            if (!this.ngControl.valid) {\n                this._valid = IgxInputState.INVALID;\n            }\n        } else if (this._hasValidators() && !this.nativeElement.checkValidity()) {\n            this._valid = IgxInputState.INVALID;\n        }\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('input')\n    public onInput() {\n        this.checkValidity();\n    }\n    /**\n     *@hidden\n     */\n    ngAfterViewInit() {\n        this.inputGroup.hasPlaceholder = this.nativeElement.hasAttribute('placeholder');\n        this.inputGroup.disabled = this.inputGroup.disabled || this.nativeElement.hasAttribute('disabled');\n        this.inputGroup.isRequired = this.nativeElement.hasAttribute('required');\n\n        // Make sure we do not invalidate the input on init\n        if (!this.ngControl) {\n            this._valid = IgxInputState.INITIAL;\n        }\n        // Also check the control's validators for required\n        if (!this.inputGroup.isRequired && this.ngControl && this.ngControl.control.validator) {\n            const validation = this.ngControl.control.validator({} as AbstractControl);\n            this.inputGroup.isRequired = validation && validation.required;\n        }\n\n\n        const elTag = this.nativeElement.tagName.toLowerCase();\n        if (elTag === 'textarea') {\n            this.isTextArea = true;\n        } else {\n            this.isInput = true;\n        }\n\n        if (this.ngControl) {\n            this._statusChanges$ = this.ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));\n        }\n\n        this.cdr.detectChanges();\n    }\n    /**\n     *@hidden\n     */\n    ngOnDestroy() {\n        if (this._statusChanges$) {\n            this._statusChanges$.unsubscribe();\n        }\n    }\n    /**\n     * Sets a focus on the igxInput.\n     * ```typescript\n     * this.igxInput.focus();\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public focus() {\n        this.nativeElement.focus();\n    }\n    /**\n     * Gets the `nativeElement` of the igxInput.\n     * ```typescript\n     * let igxInputNativeElement = this.igxInput.nativeElement;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n    /**\n     *@hidden\n     */\n    protected onStatusChanged() {\n        if (this.ngControl.control.validator || this.ngControl.control.asyncValidator) {\n            if (this.ngControl.control.touched || this.ngControl.control.dirty) {\n                //  TODO: check the logic when control is touched or dirty\n                if (this.inputGroup.isFocused) {\n                    // the user is still typing in the control\n                    this._valid = this.ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;\n                } else {\n                    // the user had touched the control previously but now the value is changing due to changes in the form\n                    this._valid = this.ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;\n                }\n            } else {\n                //  if control is untouched and pristine its state is initial. This is when user did not interact\n                //  with the input or when form/control is reset\n                this._valid = IgxInputState.INITIAL;\n            }\n        }\n    }\n    /**\n     * Gets whether the igxInput has a placeholder.\n     * ```typescript\n     * let hasPlaceholder = this.igxInput.hasPlaceholder;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get hasPlaceholder() {\n        return this.nativeElement.hasAttribute('placeholder');\n    }\n    /**\n     * Gets the placeholder element of the igxInput.\n     * ```typescript\n     * let igxInputPlaceholder = this.igxInput.placeholder;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get placeholder() {\n        return this.nativeElement.placeholder;\n    }\n\n    private _hasValidators(): boolean {\n        for (const nativeValidationAttribute of nativeValidationAttributes) {\n            if (this.nativeElement.hasAttribute(nativeValidationAttribute)) {\n                return true;\n            }\n        }\n\n        return !!this.ngControl && (!!this.ngControl.control.validator || !!this.ngControl.control.asyncValidator);\n    }\n    /**\n     * Gets whether the igxInput is focused.\n     * ```typescript\n     * let isFocused = this.igxInput.focused;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get focused() {\n        return this.inputGroup.isFocused;\n    }\n    /**\n     * Gets the state of the igxInput.\n     * ```typescript\n     * let igxInputState = this.igxInput.valid;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get valid(): IgxInputState {\n        return this._valid;\n    }\n\n    /**\n     * Gets whether the igxInput is valid.\n     * ```typescript\n     * let valid = this.igxInput.isValid;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get isValid(): boolean {\n        return this.valid !== IgxInputState.INVALID;\n    }\n\n    /**\n     * Sets the state of the igxInput.\n     * ```typescript\n     * this.igxInput.valid = IgxInputState.INVALID;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public set valid(value: IgxInputState) {\n        this._valid = value;\n    }\n\n    private checkValidity() {\n        if (!this.ngControl && this._hasValidators()) {\n            this._valid = this.nativeElement.checkValidity() ? IgxInputState.VALID : IgxInputState.INVALID;\n        }\n    }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\n\nlet NEXT_ID = 0;\n\n@Directive({\n    selector: '[igxLabel]'\n})\nexport class IgxLabelDirective {\n    @HostBinding('class.igx-input-group__label')\n    public defaultClass = true;\n\n/**\n * @hidden\n */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-label-${NEXT_ID++}`;\n}\n","import { NgModule, Directive } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-prefix,[igxPrefix]'\n})\nexport class IgxPrefixDirective { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxPrefixDirective],\n    exports: [IgxPrefixDirective]\n})\nexport class IgxPrefixModule { }\n","import { NgModule, Directive } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-suffix,[igxSuffix]'\n})\nexport class IgxSuffixDirective { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSuffixDirective],\n    exports: [IgxSuffixDirective]\n})\nexport class IgxSuffixModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    QueryList,\n    Inject,\n    Optional\n} from '@angular/core';\nimport { IgxHintDirective } from '../directives/hint/hint.directive';\nimport { IgxInputDirective, IgxInputState } from '../directives/input/input.directive';\nimport { IgxLabelDirective } from '../directives/label/label.directive';\nimport { IgxPrefixDirective, IgxPrefixModule} from '../directives/prefix/prefix.directive';\nimport { IgxSuffixDirective, IgxSuffixModule } from '../directives/suffix/suffix.directive';\nimport { DisplayDensity, IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase } from '../core/displayDensity';\nimport { IgxInputGroupBase } from './input-group.common';\n\nlet NEXT_ID = 0;\n\nenum IgxInputGroupType {\n    LINE,\n    BOX,\n    BORDER,\n    FLUENT,\n    SEARCH,\n    FLUENT_SEARCH,\n}\n\n@Component({\n    selector: 'igx-input-group',\n    templateUrl: 'input-group.component.html',\n    providers: [{ provide: IgxInputGroupBase, useExisting: IgxInputGroupComponent }]\n})\nexport class IgxInputGroupComponent extends DisplayDensityBase implements IgxInputGroupBase {\n    private _type = IgxInputGroupType.LINE;\n    private _filled = false;\n    private _supressInputAutofocus = false;\n\n    /**\n     * An ElementRef property of the `IgxInputGroupComponent`.\n     */\n    public element: ElementRef;\n\n    /**\n     * An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-input-group [id]=\"'igx-input-group-55'\"></igx-input-group>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-input-group-${NEXT_ID++}`;\n\n    /**\n     * Property that enables/disables the autogenerated class of the `IgxInputGroupComponent`.\n     * By default applied the class is applied.\n     *```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *this.inputGroup.defaultClass = false;\n     *```\n     *}\n     */\n    @HostBinding('class.igx-input-group')\n    public defaultClass = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--placeholder')\n    public hasPlaceholder = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--required')\n    public isRequired = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--focused')\n    public isFocused = false;\n\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--box')\n    public isBox = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--border')\n    public isBorder = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--search')\n    public isSearch = false;\n    /**\n     * @hidden\n     */\n\n    @HostBinding('class.igx-input-group--fluent-search')\n    public isFluentSearch = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--fluent')\n    public isFluent = false;\n\n    /**\n     * An @Input property that disables the `IgxInputGroupComponent`.\n     * ```html\n     * <igx-input-group [disabled]=\"'true'\"></igx-input-group>\n     * ```\n     */\n    @HostBinding('class.igx-input-group--disabled')\n    @Input()\n    public disabled = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--valid')\n    public get validClass(): boolean {\n        return this.input.valid === IgxInputState.VALID;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--invalid')\n    public get invalidClass(): boolean {\n        return this.input.valid === IgxInputState.INVALID;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--warning')\n    public hasWarning = false;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxHintDirective, { read: IgxHintDirective })\n    protected hints: QueryList<IgxHintDirective>;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxInputDirective, { read: IgxInputDirective, static: true })\n    protected input: IgxInputDirective;\n\n    /**\n     *@hidden\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        if (!this._supressInputAutofocus) {\n            this.input.focus();\n        }\n    }\n\n    /**\n     * An @Input property that sets how the input will be styled.\n     * The allowed values are `line`, `box`, `border`, `fluent`, `search` and `fluentSearch`. The default is `line`.\n     * ```html\n     *<igx-input-group [type]=\"'search'\">\n     * ```\n     */\n    @Input('type')\n    set type(value: string) {\n        const type: IgxInputGroupType = (IgxInputGroupType as any)[value.toUpperCase()];\n        if (type !== undefined) {\n            this.isBox = this.isFluent = this.isFluentSearch = this.isBorder = this.isSearch = false;\n            switch (type) {\n                case IgxInputGroupType.BOX:\n                    this.isBox = true;\n                    break;\n                case IgxInputGroupType.BORDER:\n                    this.isBorder = true;\n                    break;\n                case IgxInputGroupType.FLUENT:\n                    this.isFluent = true;\n                    break;\n                case IgxInputGroupType.FLUENT_SEARCH:\n                    this.isFluentSearch = true;\n                    break;\n                case IgxInputGroupType.SEARCH:\n                    this.isSearch = true;\n                    break;\n                default: break;\n            }\n\n            this._type = type;\n        }\n    }\n\n    /**\n     * Returns whether the input element of the input group will be automatically focused on click.\n     * ```typescript\n     * let supressInputAutofocus = this.inputGroup.supressInputAutofocus;\n     * ```\n     */\n    @Input()\n    public get supressInputAutofocus(): boolean {\n        return this._supressInputAutofocus;\n    }\n\n    /**\n     * Sets whether the input element of the input group will be automatically focused on click.\n     * ```html\n     * <igx-input-group [supressInputAutofocus]=\"true\"></igx-input-group>\n     * ```\n     */\n    public set supressInputAutofocus(value: boolean) {\n        this._supressInputAutofocus = value;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--filled')\n    get isFilled() {\n        return this._filled || (this.input && this.input.value);\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--cosy')\n    get isDisplayDensityCosy() {\n        return this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--comfortable')\n    get isDisplayDensityComfortable() {\n        return this.displayDensity === DisplayDensity.comfortable;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--compact')\n    get isDisplayDensityCompact() {\n        return this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * Returns the type of the `IgxInputGroupComponent`. How the input is styled.\n     * Values are `line` - 0, `box` - 1, `border` - 2,  `fluent` - 3 `fluentSearch` - 4 and `search` - 5. The default is `line`.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let inputType = this.inputGroup.type;\n     *}\n     * ```\n     */\n    get type() {\n        return this._type.toString();\n    }\n\n    constructor(private _element: ElementRef,\n        @Optional() @Inject(DisplayDensityToken) private _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n        this.element = _element;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` has hints.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let inputHints = this.inputGroup.hasHints;\n     *}\n     * ```\n     */\n    get hasHints() {\n        return this.hints.length > 0;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` has border.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let inputBroder = this.inputGroup.hasBorder;\n     *}\n     * ```\n     */\n    get hasBorder() {\n        return this._type === IgxInputGroupType.LINE ||\n            this._type === IgxInputGroupType.BOX;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is line.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeLine = this.inputGroup.isTypeLine;\n     *}\n     * ```\n     */\n    public get isTypeLine(): boolean {\n        return  this._type === IgxInputGroupType.LINE;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is box.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeBox = this.inputGroup.isTypeBox;\n     *}\n     *```\n     */\n    get isTypeBox() {\n        return this._type === IgxInputGroupType.BOX;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is border.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeBorder = this.inputGroup.isTypeBorder;\n     *}\n     * ```\n     */\n    get isTypeBorder() {\n        return this._type === IgxInputGroupType.BORDER;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is Fluent.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeFluent = this.inputGroup.isTypeFluent;\n     *}\n     * ```\n     */\n    get isTypeFluent() {\n        return this._type === IgxInputGroupType.FLUENT;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is search.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeSearch = this.inputGroup.isTypeSearch;\n     *}\n     * ```\n     */\n    get isTypeSearch() {\n        return  this._type === IgxInputGroupType.SEARCH;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is fluentSearch.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeFluentSearch = this.inputGroup.isTypeFluentSearch;\n     *}\n     * ```\n     */\n    get isTypeFluentSearch() {\n        return  this._type === IgxInputGroupType.FLUENT_SEARCH;\n    }\n\n    get filled() {\n        return this._filled;\n    }\n\n    set filled(val) {\n        this._filled = val;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxInputGroupComponent, IgxHintDirective, IgxInputDirective, IgxLabelDirective],\n    exports: [IgxInputGroupComponent,  IgxHintDirective, IgxInputDirective, IgxLabelDirective, IgxPrefixDirective, IgxSuffixDirective],\n    imports: [CommonModule, IgxPrefixModule, IgxSuffixModule]\n})\nexport class IgxInputGroupModule { }\n","import {\n    Directive, Input, Self, Optional, Inject, HostBinding, Output, EventEmitter,\n    NgModule, ElementRef, HostListener, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { NgModel, FormControlName } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport { first, takeUntil } from 'rxjs/operators';\nimport { CancelableEventArgs, IBaseEventArgs } from '../../core/utils';\nimport { OverlaySettings, AbsoluteScrollStrategy, IScrollStrategy, IPositionStrategy, AutoPositionStrategy } from '../../services/index';\nimport { IgxDropDownModule, IgxDropDownComponent, ISelectionEventArgs, IgxDropDownItemNavigationDirective } from '../../drop-down/index';\nimport { IgxInputGroupComponent } from '../../input-group/index';\nimport { IgxOverlayOutletDirective } from '../toggle/toggle.directive';\n\n/**\n * Interface that encapsulates onItemSelection event arguments - new value and cancel selection.\n * @export\n */\nexport interface AutocompleteItemSelectionEventArgs extends CancelableEventArgs, IBaseEventArgs {\n    /**\n     * New value selected from the drop down\n     */\n    value: string;\n}\n\nexport interface AutocompleteOverlaySettings {\n    /** Position strategy to use with this settings */\n    positionStrategy?: IPositionStrategy;\n    /** Scroll strategy to use with this settings */\n    scrollStrategy?: IScrollStrategy;\n    /** Set the outlet container to attach the overlay to */\n    outlet?: IgxOverlayOutletDirective | ElementRef;\n}\n\n/**\n * **Ignite UI for Angular Autocomplete** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/autocomplete.html)\n *\n * The igxAutocomplete directive provides a way to enhance a text input\n * by showing a drop down of suggested options, provided by the developer.\n *\n * Example:\n * ```html\n * <input type=\"text\" [igxAutocomplete]=\"townsPanel\" />\n * <igx-drop-down #townsPanel>\n *     <igx-drop-down-item *ngFor=\"let town of towns | startsWith:townSelected\" [value]=\"town\">\n *         {{town}}\n *     </igx-drop-down-item>\n * </igx-drop-down>\n * ```\n */\n@Directive({\n    selector: '[igxAutocomplete]'\n})\nexport class IgxAutocompleteDirective extends IgxDropDownItemNavigationDirective implements OnDestroy {\n\n    constructor(@Self() @Optional() @Inject(NgModel) protected ngModel: NgModel,\n                @Self() @Optional() @Inject(FormControlName) protected formControl: FormControlName,\n                @Optional() protected group: IgxInputGroupComponent,\n                protected elementRef: ElementRef,\n                protected cdr: ChangeDetectorRef) {\n        super(null);\n    }\n\n    private defaultSettings: OverlaySettings = {\n        modal: false,\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new AutoPositionStrategy({ target: this.parentElement }),\n        excludePositionTarget: true\n    };\n\n    protected id: string;\n    protected dropDownOpened$ = new Subject<boolean>();\n    protected get model() {\n        return this.ngModel || this.formControl;\n    }\n\n    /** @hidden @internal */\n    get nativeElement(): HTMLInputElement {\n        return this.elementRef.nativeElement;\n    }\n\n    /** @hidden @internal */\n    get parentElement(): HTMLElement {\n        return this.group ? this.group.element.nativeElement : this.nativeElement;\n    }\n\n    private get settings(): OverlaySettings {\n        const settings = Object.assign({}, this.defaultSettings, this.autocompleteSettings);\n        if (!settings.positionStrategy.settings.target) {\n            const positionStrategyClone: IPositionStrategy = settings.positionStrategy.clone();\n            positionStrategyClone.settings.target = this.parentElement;\n            settings.positionStrategy = positionStrategyClone;\n        }\n        return settings;\n    }\n\n    /**\n     * Sets the target of the autocomplete directive\n     *\n     * ```html\n     * <!-- Set -->\n     * <input [igxAutocomplete]=\"dropdown\" />\n     * ...\n     * <igx-drop-down #dropdown>\n     * ...\n     * </igx-drop-down>\n     * ```\n     */\n    @Input('igxAutocomplete')\n    public target: IgxDropDownComponent;\n\n    /**\n     * Enables/disables autocomplete component\n     *\n     * ```typescript\n     * // get\n     * let disabled = this.autocomplete.disabled;\n     * ```\n     * ```html\n     * <!--set-->\n     * <input type=\"text\" [igxAutocomplete]=\"townsPanel\" [igxAutocompleteDisabled]=\"disabled\"/>\n     * ```\n     * ```typescript\n     * // set\n     * public disabled = true;\n     * ```\n     */\n    @Input('igxAutocompleteDisabled')\n    public disabled = false;\n\n    /**\n     * Provide overlay settings for the autocomplete drop down\n     *\n     * ```typescript\n     * // get\n     * let settings = this.autocomplete.autocompleteSettings;\n     * ```\n     * ```html\n     * <!--set-->\n     * <input type=\"text\" [igxAutocomplete]=\"townsPanel\" [igxAutocompleteSettings]=\"settings\"/>\n     * ```\n     * ```typescript\n     * // set\n     * this.settings = {\n     *  positionStrategy: new ConnectedPositioningStrategy({\n     *      closeAnimation: null,\n     *      openAnimation: null\n     *  })\n     * };\n     * ```\n     */\n    @Input('igxAutocompleteSettings')\n    autocompleteSettings: AutocompleteOverlaySettings;\n\n    /**\n     * Emitted after item from the drop down is selected\n     *\n     * ```html\n     * <input igxInput [igxAutocomplete]=\"townsPanel\" (onItemSelected)='itemSelected($event)' />\n     * ```\n     */\n    @Output()\n    onItemSelected = new EventEmitter<AutocompleteItemSelectionEventArgs>();\n\n    /** @hidden @internal */\n    @HostBinding('attr.autocomplete')\n    public autofill = 'off';\n\n    /** @hidden  @internal */\n    @HostBinding('attr.role')\n    public role = 'combobox';\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-expanded')\n    public get ariaExpanded() {\n        return !this.collapsed;\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-haspopup')\n    public get hasPopUp() {\n        return 'listbox';\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-owns')\n    public get ariaOwns() {\n        return this.target.listId;\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-activedescendant')\n    public get ariaActiveDescendant() {\n        return !this.target.collapsed && this.target.focusedItem ? this.target.focusedItem.id : null;\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-autocomplete')\n    public get ariaAutocomplete() {\n        return 'list';\n    }\n\n    /** @hidden  @internal */\n    @HostListener('input')\n    onInput() {\n        this.open();\n    }\n\n    /** @hidden  @internal */\n    @HostListener('keydown.ArrowDown', ['$event'])\n    @HostListener('keydown.Alt.ArrowDown', ['$event'])\n    @HostListener('keydown.ArrowUp', ['$event'])\n    @HostListener('keydown.Alt.ArrowUp', ['$event'])\n    onArrowDown(event: Event) {\n        event.preventDefault();\n        this.open();\n    }\n\n    /** @hidden  @internal */\n    @HostListener('keydown.Tab')\n    @HostListener('keydown.Shift.Tab')\n    onTab() {\n        this.close();\n    }\n\n    /** @hidden  @internal */\n    handleKeyDown(event) {\n        if (!this.collapsed) {\n            switch (event.key.toLowerCase()) {\n                case 'space':\n                case 'spacebar':\n                case ' ':\n                case 'home':\n                case 'end':\n                    return;\n                default:\n                    super.handleKeyDown(event);\n            }\n        }\n    }\n\n    /** @hidden  @internal */\n    onArrowDownKeyDown() {\n        super.onArrowDownKeyDown();\n    }\n\n    /** @hidden  @internal */\n    onArrowUpKeyDown() {\n        super.onArrowUpKeyDown();\n    }\n\n    /** @hidden  @internal */\n    onEndKeyDown() {\n        super.onEndKeyDown();\n    }\n\n    /** @hidden  @internal */\n    onHomeKeyDown() {\n        super.onHomeKeyDown();\n    }\n\n    /**\n     * Closes autocomplete drop down\n     */\n    public close() {\n        if (this.collapsed) {\n            return;\n        }\n        this.target.close();\n        this.dropDownOpened$.next();\n    }\n\n    /**\n     * Opens autocomplete drop down\n     */\n    public open() {\n        if (this.disabled || !this.collapsed) {\n            return;\n        }\n        this.target.width = this.parentElement.clientWidth + 'px';\n        this.target.open(this.settings);\n        this.target.onSelection.pipe(takeUntil(this.dropDownOpened$)).subscribe(this.select);\n        this.target.onOpened.pipe(first()).subscribe(this.highlightFirstItem);\n        this.target.children.changes.pipe(takeUntil(this.dropDownOpened$)).subscribe(this.highlightFirstItem);\n    }\n\n    private get collapsed(): boolean {\n        return this.target ? this.target.collapsed : true;\n    }\n\n    private select = (value: ISelectionEventArgs) => {\n        if (!value.newSelection) {\n            return;\n        }\n        value.cancel = true; // Disable selection in the drop down, because in autocomplete we do not save selection.\n        const newValue = value.newSelection.value;\n        const args: AutocompleteItemSelectionEventArgs = { value: newValue, cancel: false };\n        this.onItemSelected.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        this.close();\n        this.nativeElement.focus();\n\n        // Update model after the input is re-focused, in order to have proper valid styling.\n        // Otherwise when item is selected using mouse (and input is blurred), then valid style will be removed.\n        this.model ? this.model.control.setValue(newValue) : this.nativeElement.value = newValue;\n    }\n\n    private highlightFirstItem = () => {\n        if (this.target.focusedItem) {\n            this.target.focusedItem.focused = false;\n            this.target.focusedItem = null;\n        }\n        this.target.navigateFirst();\n        this.cdr.detectChanges();\n    }\n\n    /** @hidden */\n    public ngOnDestroy() {\n        this.dropDownOpened$.complete();\n    }\n}\n\n/** @hidden */\n@NgModule({\n    imports: [IgxDropDownModule, CommonModule],\n    declarations: [IgxAutocompleteDirective],\n    exports: [IgxAutocompleteDirective]\n})\nexport class IgxAutocompleteModule { }\n","import {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    Output,\n    NgModule,\n    Renderer2,\n    HostListener,\n    Optional,\n    Inject\n} from '@angular/core';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions, DisplayDensity } from '../../core/density';\n\n@Directive({\n    selector: '[igxButton]'\n})\nexport class IgxButtonDirective extends DisplayDensityBase {\n\n    /**\n     *@hidden\n     */\n    private _type: string;\n\n    /**\n     *@hidden\n     */\n    private _defaultType = 'flat';\n\n    /**\n     *@hidden\n     */\n    private _cssClassPrefix = 'igx-button';\n\n    /**\n     *@hidden\n     */\n    private _color: string;\n\n    /**\n     *@hidden\n     */\n    private _label: string;\n\n    /**\n     *@hidden\n     */\n    private _backgroundColor: string;\n\n    /**\n     *@hidden\n     */\n    private _disabled: boolean;\n\n    constructor(public element: ElementRef, private _renderer: Renderer2,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n    }\n\n    /**\n     * Returns the underlying DOM element\n     */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Called when the button is clicked\n     */\n    @Output()\n    public buttonClick = new EventEmitter<any>();\n\n    /**\n     * Sets/gets the `role` attribute.\n     * ```typescript\n     * this.button.role = 'navbutton';\n     * ```\n     * ```typescript\n     * let buttonRole =  this.button.role;\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @HostBinding('attr.role')\n    public role = 'button';\n\n    /**\n     * Sets the type of the button.\n     * ```html\n     * <button  igxButton= \"icon\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxButton')\n    set type(value: string) {\n        const newValue = value ? value : this._defaultType;\n        if (this._type !== newValue) {\n            this._renderer.removeClass(this.nativeElement, `${this._cssClassPrefix}--${this._type}`);\n            this._type = newValue;\n            this._renderer.addClass(this.nativeElement, `${this._cssClassPrefix}--${this._type}`);\n        }\n    }\n\n    /**\n     * Sets the button text color.\n     * ```html\n     * <button igxButton=\"gradient\" igxButtonColor=\"blue\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxButtonColor') set color(value: string) {\n        this._color = value || this.nativeElement.style.color;\n        this._renderer.setStyle(this.nativeElement, 'color', this._color);\n    }\n\n    /**\n     * Sets the background color of the button.\n     * ```html\n     * <button igxButton=\"raised\" igxButtonBackground=\"red\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxButtonBackground') set background(value: string) {\n        this._backgroundColor = value || this._backgroundColor;\n        this._renderer.setStyle(this.nativeElement, 'background', this._backgroundColor);\n    }\n\n    /**\n     * Sets the `aria-label` attribute.\n     * ```html\n     * <button igxButton= \"flat\" igxLabel=\"Label\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxLabel') set label(value: string) {\n        this._label = value || this._label;\n        this._renderer.setAttribute(this.nativeElement, `aria-label`, this._label);\n    }\n\n    /**\n     * Enables/disables the button.\n     *  ```html\n     * <button igxButton= \"fab\" [disabled]=\"true\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input() set disabled(val) {\n        val = !!val;\n        this._disabled = val;\n        if (val) {\n            this._renderer.addClass(this.nativeElement, `${this._cssClassPrefix}--disabled`);\n        } else {\n            this._renderer.removeClass(this.nativeElement, `${this._cssClassPrefix}--disabled`);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-button--cosy')\n    public get cssClassCosy(): boolean {\n        return (this._type === 'flat' || this._type === 'raised' || this._type === 'outlined') &&\n            this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-button--compact')\n    public get cssClassCompact(): boolean {\n        return (this._type === 'flat' || this._type === 'raised' || this._type === 'outlined') &&\n            this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-button--fab-cosy')\n    public get cssClassCosyFab(): boolean {\n        return this._type === 'fab' && this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-button--fab-compact')\n    public get cssClassCompactFab(): boolean {\n        return this._type === 'fab' && this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.disabled')\n    public get disabledAttribute() {\n        return this._disabled ? this._disabled : null;\n    }\n\n    /**\n     * Gets or sets whether the button is selected.\n     * Mainly used in the IgxButtonGroup component and it will have no effect if set separately.\n     * ```html\n     * <button igxButton=\"flat\" [selected]=\"button.selected\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input() public selected = false;\n\n    /**\n     *@hidden\n     */\n    @HostListener('click', ['$event'])\n    public onClick(ev) {\n        this.buttonClick.emit(ev);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxButtonDirective],\n    exports: [IgxButtonDirective]\n})\nexport class IgxButtonModule { }\n","import { Directive, HostBinding, NgModule, Input } from '@angular/core';\n\nexport enum IgxDividerType {\n    DEFAULT = 'default',\n    DASHED = 'dashed'\n}\n\nlet NEXT_ID = 0;\n\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-divider'\n})\nexport class IgxDividerDirective {\n    /**\n     * Sets/gets the `id` of the divider.\n     * If not set, `id` will have value `\"igx-divider-0\"`;\n     * ```html\n     * <igx-divider id=\"my-divider\"></igx-divider>\n     * ```\n     * ```typescript\n     * let dividerId =  this.divider.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-divider-${NEXT_ID++}`;\n\n\n    /**\n     * An @Input property that sets the value of the `inset` attribute.\n     * If not provided it will be set to `'0'`.\n     * ```html\n     * <igx-divider inset=\"16px\"></igx-divider>\n     * ```\n     */\n    @Input('inset')\n    private _inset = '0';\n\n    /**\n     * An @Input property that sets the value of `role` attribute.\n     * If not the default value of `separator` will be used.\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'separator';\n\n    /**\n     * Sets the type of the divider. The default value\n     * is `default`. The divider can also be `dashed`;\n     * ```html\n     * <igx-divider type=\"dashed\"></igx-divider>\n     * ```\n     */\n    @HostBinding('class.igx-divider')\n    @Input()\n    public type: IgxDividerType | string = IgxDividerType.DEFAULT;\n\n    @HostBinding('class.igx-divider--dashed')\n    get isDashed() {\n        return this.type === IgxDividerType.DASHED;\n    }\n\n    /**\n     * An @Input that sets the `middle` attribute of the divider.\n     * If set to `true` and an `inset` value has been provided,\n     * the divider will start shrinking from both ends.\n     * ```html\n     * <igx-divider [middle]=\"true\"></igx-divider>\n     * ```\n     */\n    @HostBinding('class.igx-divider--inset')\n    @Input()\n    public middle = false;\n\n    /**\n     * A getter that returns `true` if the type of the divider is `default`;\n     * ```typescript\n     * const isDefault = this.divider.isDefault;\n     * ```\n     */\n    get isDefault() {\n        return this.type === IgxDividerType.DEFAULT;\n    }\n\n    /**\n     * An @Input that sets the vertical attribute of the divider.\n     * ```html\n     * <igx-divider [vertical]=\"true\"></igx-divider>\n     * ```\n     */\n    @HostBinding('class.igx-divider--vertical')\n    @Input()\n    public vertical = false;\n\n    /**\n     * Sets the inset of the divider from the side(s).\n     * If the divider attribute `middle` is set to `true`,\n     * it will inset the divider on both sides.\n     * ```typescript\n     * this.divider.inset = '32px';\n     * ```\n     */\n    @HostBinding('style.margin')\n    set inset(value: string) {\n        this._inset = value;\n    }\n\n    /**\n     * Gets the current divider inset in terms of\n     * margin representation as applied to the divider.\n     * ```typescript\n     * const inset = this.divider.inset;\n     * ```\n     */\n    get inset() {\n        const baseMargin = '0';\n\n        if (this.middle) {\n            if (this.vertical) {\n                return `${this._inset} ${baseMargin}`;\n            }\n            return `${baseMargin} ${this._inset}`;\n        } else {\n            if (this.vertical) {\n                return `${this._inset} ${baseMargin} 0 ${baseMargin}`;\n            }\n            return `${baseMargin} 0 ${baseMargin} ${this._inset}`;\n        }\n    }\n}\n\n@NgModule({\n    declarations: [IgxDividerDirective],\n    exports: [IgxDividerDirective]\n})\nexport class IgxDividerModule { }\n","import { Renderer2 } from '@angular/core';\nimport { IgxDragDirective, IgxDropDirective } from './drag-drop.directive';\n\n\nexport interface IDropStrategy {\n    dropAction: (drag: IgxDragDirective, drop: IgxDropDirective, atIndex: number) => void;\n}\n\n// @dynamic\nexport class IgxDefaultDropStrategy implements IDropStrategy {\n\n    dropAction(drag: IgxDragDirective, drop: IgxDropDirective, atIndex: number) { }\n}\n\n// @dynamic\nexport class IgxAppendDropStrategy implements IDropStrategy {\n\n    constructor(private _renderer: Renderer2) { }\n\n    dropAction(drag: IgxDragDirective, drop: IgxDropDirective, atIndex: number) {\n        const dragElement = drag.element.nativeElement;\n        const dropAreaElement = drop.element.nativeElement;\n        this._renderer.removeChild(dragElement.parentNode, dragElement);\n        this._renderer.appendChild(dropAreaElement, dragElement);\n    }\n}\n\n// @dynamic\nexport class IgxPrependDropStrategy implements IDropStrategy {\n\n    constructor(private _renderer: Renderer2) { }\n\n    dropAction(drag: IgxDragDirective, drop: IgxDropDirective, atIndex: number) {\n        const dragElement = drag.element.nativeElement;\n        const dropAreaElement = drop.element.nativeElement;\n        this._renderer.removeChild(dragElement.parentNode, dragElement);\n        if (dropAreaElement.children.length) {\n            this._renderer.insertBefore(dropAreaElement, dragElement, dropAreaElement.children[0]);\n        } else {\n            this._renderer.appendChild(dropAreaElement, dragElement);\n        }\n    }\n}\n\n// @dynamic\nexport class IgxInsertDropStrategy implements IDropStrategy {\n\n    constructor(private _renderer: Renderer2) { }\n\n    dropAction(drag: IgxDragDirective, drop: IgxDropDirective, atIndex: number) {\n        if (drag.element.nativeElement.parentElement === drop.element.nativeElement && atIndex === -1) {\n            return;\n        }\n\n        const dragElement = drag.element.nativeElement;\n        const dropAreaElement = drop.element.nativeElement;\n        this._renderer.removeChild(dragElement.parentNode, dragElement);\n        if (atIndex !== -1 && dropAreaElement.children.length > atIndex) {\n            this._renderer.insertBefore(dropAreaElement, dragElement, dropAreaElement.children[atIndex]);\n        } else {\n            this._renderer.appendChild(dropAreaElement, dragElement);\n        }\n    }\n}\n","import { Directive, ElementRef, HostBinding } from '@angular/core';\n\n@Directive({\n    selector: '[igxDragHandle]'\n})\nexport class IgxDragHandleDirective {\n\n    @HostBinding('class.igx-drag__handle')\n    public baseClass = true;\n\n    constructor(public element: ElementRef<any>) {}\n}\n","import {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    Renderer2,\n    ChangeDetectorRef,\n    ViewContainerRef,\n    AfterContentInit,\n    TemplateRef,\n    ContentChildren,\n    QueryList\n} from '@angular/core';\nimport { animationFrameScheduler, fromEvent, interval, Subject } from 'rxjs';\nimport { takeUntil, throttle } from 'rxjs/operators';\nimport { IgxDragHandleDirective } from './drag-handle.directive';\nimport { DeprecateProperty } from '../../core/deprecateDecorators';\nimport { IBaseEventArgs } from '../../core/utils';\nimport { IDropStrategy, IgxDefaultDropStrategy } from './drag-drop.strategy';\n\nexport enum RestrictDrag {\n    VERTICALLY,\n    HORIZONTALLY,\n    NONE\n}\n\nexport interface IgxDragCustomEventDetails {\n    startX: number;\n    startY: number;\n    pageX: number;\n    pageY: number;\n    owner: IgxDragDirective;\n    originalEvent: any;\n}\n\nexport interface IDropBaseEventArgs extends IBaseEventArgs {\n        /**\n     * Reference to the original event that caused the draggable element to enter the igxDrop element.\n     * Can be PointerEvent, TouchEvent or MouseEvent.\n     */\n    originalEvent: any;\n    /** The owner igxDrop directive that triggered this event. */\n    owner: IgxDropDirective;\n    /** The igxDrag directive instanced on an element that entered the area of the igxDrop element */\n    drag: IgxDragDirective;\n    /** The data contained for the draggable element in igxDrag directive. */\n    dragData: any;\n    /** The initial position of the pointer on X axis when the dragged element began moving */\n    startX: number;\n    /** The initial position of the pointer on Y axis when the dragged element began moving */\n    startY: number;\n    /**\n     * The current position of the pointer on X axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageX: number;\n    /**\n     * The current position of the pointer on Y axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageY: number;\n    /**\n     * The current position of the pointer on X axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetX: number;\n    /**\n     * The current position of the pointer on Y axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetY: number;\n}\n\nexport interface IDropDroppedEventArgs extends IDropBaseEventArgs {\n    /** Specifies if the default drop logic related to the event should be canceled. */\n    cancel: boolean;\n}\n\nexport interface IDragBaseEventArgs extends IBaseEventArgs {\n    /**\n     * Reference to the original event that caused the interaction with the element.\n     * Can be PointerEvent, TouchEvent or MouseEvent.\n     */\n    originalEvent: PointerEvent | MouseEvent | TouchEvent;\n    /** The owner igxDrag directive that triggered this event. */\n    owner: IgxDragDirective;\n    /** The initial position of the pointer on X axis when the dragged element began moving */\n    startX: number;\n    /** The initial position of the pointer on Y axis when the dragged element began moving */\n    startY: number;\n    /**\n     * The current position of the pointer on X axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageX: number;\n        /**\n     * The current position of the pointer on Y axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageY: number;\n}\n\nexport interface IDragStartEventArgs extends IDragBaseEventArgs {\n    /** Set if the the dragging should be canceled. */\n    cancel: boolean;\n}\n\nexport interface IDragMoveEventArgs extends IDragStartEventArgs {\n    /** The new pageX position of the pointer that the igxDrag will use. It can be overridden to limit dragged element X movement. */\n    nextPageX: number;\n    /** The new pageX position of the pointer that the igxDrag will use. It can be overridden to limit dragged element Y movement. */\n    nextPageY: number;\n}\n\n\nexport interface IDragGhostBaseEventArgs extends IBaseEventArgs {\n    /** The owner igxDrag directive that triggered this event. */\n    owner: IgxDragDirective;\n    /** Instance to the ghost element that is created when dragging starts. */\n    ghostElement: any;\n    /** Set if the ghost creation/destruction should be canceled. */\n    cancel: boolean;\n}\n\nexport interface IDragCustomTransitionArgs {\n    duration?: number;\n    timingFunction?: string;\n    delay?: number;\n}\n\nexport class IgxDragLocation {\n    public pageX: number;\n    public pageY: number;\n\n    constructor(private _pageX, private _pageY) {\n        this.pageX = parseFloat(_pageX);\n        this.pageY = parseFloat(_pageY);\n    }\n}\n\n@Directive({\n    exportAs: 'drag',\n    selector: '[igxDrag]'\n})\nexport class IgxDragDirective implements AfterContentInit, OnDestroy {\n\n    protected ghostContext: any = null;\n\n    /**\n     * - Save data inside the `igxDrag` directive. This can be set when instancing `igxDrag` on an element.\n     * ```html\n     * <div [igxDrag]=\"{ source: myElement }\"></div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input('igxDrag')\n    public data: any;\n\n    /**\n     * An @Input property that indicates when the drag should start.\n     * By default the drag starts after the draggable element is moved by 5px.\n     * ```html\n     * <div igxDrag [dragTolerance]=\"100\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public dragTolerance = 5;\n\n    /**\n     * An @Input property that provide a way for igxDrag and igxDrop to be linked through channels.\n     * It accepts single value or an array of values and evaluates then using strict equality.\n     * ```html\n     * <div igxDrag [dragChannel]=\"'odd'\">\n     *         <span>95</span>\n     * </div>\n     * <div igxDrop [dropChannel]=\"['odd', 'irrational']\">\n     *         <span>Numbers drop area!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public dragChannel: number | string | number[] | string[];\n\n    /**\n     * An @Input property that specifies if the base element should not be moved and a ghost element should be rendered that represents it.\n     * By default it is set to `true`.\n     * If it is set to `false` when dragging the base element is moved instead and no ghost elements are rendered.\n     * ```html\n     * <div igxDrag [ghost]=\"false\">\n     *      <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public ghost = true;\n\n    /**\n     * Sets a custom class that will be added to the `ghostElement` element.\n     * ```html\n     * <div igxDrag [ghostClass]=\"'ghostElement'\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public ghostClass = '';\n\n    /**\n     * @deprecated Please use custom base styling instead.\n     * An @Input property that hides the draggable element.\n     * By default it's set to false.\n     * ```html\n     * <div igxDrag [dragTolerance]=\"100\" [hideBaseOnDrag]=\"'true'\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @DeprecateProperty(`'hideBaseOnDrag' @Input property is deprecated and will be removed in future major versions.\n        Alternatives to it are using the new no ghost dragging and custom base styling.`)\n    @Input()\n    public hideBaseOnDrag = false;\n\n    /**\n     * @deprecated Please use provided transition functions in future.\n     * An @Input property that enables/disables the draggable element animation\n     * when the element is released.\n     * By default it's set to false.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @DeprecateProperty(`'animateOnRelease' @Input property is deprecated and will be removed in future major versions.\n        Please use 'transitionToOrigin' or 'transitionTo' methods instead.`)\n    @Input()\n    public animateOnRelease = false;\n\n    /**\n     * An @Input property that specifies a template for the ghost element created when dragging starts and `ghost` is true.\n     * By default a clone of the base element the igxDrag is instanced is created.\n     * ```html\n     * <div igxDrag [ghostTemplate]=\"customGhost\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * <ng-template #customGhost>\n     *      <div class=\"customGhostStyle\">\n     *          <span>I am being dragged!</span>\n     *      </div>\n     * </ng-template>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public ghostTemplate: TemplateRef<any>;\n\n    /**\n     * An @Input property that sets the element to which the dragged element will be appended.\n     * By default it's set to null and the dragged element is appended to the body.\n     * ```html\n     * <div #hostDiv></div>\n     * <div igxDrag [ghostHost]=\"hostDiv\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public ghostHost;\n\n    /**\n     * An @Input property that specifies the offset of the dragged element relative to the mouse in pixels.\n     * By default it's taking the relative position to the mouse when the drag started and keeps it the same.\n     * ```html\n     * <div #hostDiv></div>\n     * <div igxDrag [ghostOffsetX]=\"0\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public set ghostOffsetX(value) {\n        this._offsetX = parseInt(value, 10);\n    }\n\n    public get ghostOffsetX() {\n        return this._offsetX !== undefined ? this._offsetX : this._defaultOffsetX;\n    }\n\n    /**\n     * An @Input property that specifies the offset of the dragged element relative to the mouse in pixels.\n     * By default it's taking the relative position to the mouse when the drag started and keeps it the same.\n     * ```html\n     * <div #hostDiv></div>\n     * <div igxDrag [ghostOffsetY]=\"0\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Input()\n    public set ghostOffsetY(value) {\n        this._offsetY = parseInt(value, 10);\n    }\n\n    public get ghostOffsetY() {\n        return this._offsetY !== undefined ? this._offsetY : this._defaultOffsetY ;\n    }\n\n    /**\n     * Event triggered when the draggable element drag starts.\n     * ```html\n     * <div igxDrag (dragStart)=\"onDragStart()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragStart(){\n     *      alert(\"The drag has stared!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public dragStart = new EventEmitter<IDragStartEventArgs>();\n\n    /**\n     * Event triggered when the draggable element has been moved.\n     * ```html\n     * <div igxDrag  (dragMove)=\"onDragMove()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragMove(){\n     *      alert(\"The element has moved!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public dragMove = new EventEmitter<IDragMoveEventArgs>();\n\n    /**\n     * Event triggered when the draggable element is released.\n     * ```html\n     * <div igxDrag (dragEnd)=\"onDragEnd()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragEnd(){\n     *      alert(\"The drag has ended!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public dragEnd = new EventEmitter<IDragBaseEventArgs>();\n\n    /**\n     * Event triggered when the draggable element is clicked.\n     * ```html\n     * <div igxDrag (dragClick)=\"onDragClick()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragClick(){\n     *      alert(\"The element has been clicked!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public dragClick = new EventEmitter<IDragBaseEventArgs>();\n\n    /**\n     * Event triggered when the drag ghost element is created.\n     * ```html\n     * <div igxDrag (ghostCreate)=\"ghostCreated()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public ghostCreated(){\n     *      alert(\"The ghost has been created!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public ghostCreate = new EventEmitter<IDragGhostBaseEventArgs>();\n\n    /**\n     * Event triggered when the drag ghost element is created.\n     * ```html\n     * <div igxDrag (ghostDestroy)=\"ghostDestroyed()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public ghostDestroyed(){\n     *      alert(\"The ghost has been destroyed!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public ghostDestroy = new EventEmitter<IDragGhostBaseEventArgs>();\n\n    /**\n     * Event triggered after the draggable element is released and after its animation has finished.\n     * ```html\n     * <div igxDrag (transitioned)=\"onMoveEnd()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onMoveEnd(){\n     *      alert(\"The move has ended!\");\n     * }\n     * ```\n     * @memberof IgxDragDirective\n     */\n    @Output()\n    public transitioned = new EventEmitter<IDragBaseEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxDragHandleDirective)\n    public dragHandles: QueryList<IgxDragHandleDirective>;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.visibility')\n    public _visibility = 'visible';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-drag')\n    public baseClass = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-drag--select-disabled')\n    public selectDisabled = false;\n\n    /**\n     * @deprecated Please use native angular ways of hiding it using custom to the base element styling for future versions.\n     * Sets the visibility of the draggable element.\n     * ```typescript\n     * @ViewChild(\"myDrag\" ,{read: IgxDragDirective})\n     * public myDrag: IgxDragDirective;\n     * ngAfterViewInit(){\n     *     this.myDrag.visible = false;\n     * }\n     * ```\n     */\n    @DeprecateProperty(`'visible' @Input property is deprecated and will be removed in future major versions.\n        Please use native angular ways of hiding the base element using styling.`)\n    public set visible(bVisible) {\n        this._visibility = bVisible ? 'visible' : 'hidden';\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Returns the visibility state of the draggable element.\n     * ```typescript\n     * @ViewChild(\"myDrag\" ,{read: IgxDragDirective})\n     * public myDrag: IgxDragDirective;\n     * ngAfterViewInit(){\n     *     let dragVisibility = this.myDrag.visible;\n     * }\n     * ```\n     */\n    public get visible() {\n        return this._visibility === 'visible';\n    }\n\n    /**\n     * Gets the current location of the element relative to the page.\n     */\n    public get location(): IgxDragLocation {\n        return new IgxDragLocation(this.pageX, this.pageY);\n    }\n\n    /**\n     * Gets the original location of the element before dragging started.\n     */\n    public get originLocation(): IgxDragLocation {\n        return new IgxDragLocation(this.baseOriginLeft, this.baseOriginTop);\n    }\n\n    /**\n     * @hidden\n     */\n    public get pointerEventsEnabled() {\n        return typeof PointerEvent !== 'undefined';\n    }\n\n    /**\n     * @hidden\n     */\n    public get touchEventsEnabled() {\n        return 'ontouchstart' in window;\n    }\n\n    /**\n     * @hidden\n     */\n    public get pageX() {\n        if (this.ghost && this.ghostElement) {\n            return this.ghostLeft;\n        }\n        return this.baseLeft;\n    }\n\n    /**\n     * @hidden\n     */\n    public get pageY() {\n        if (this.ghost && this.ghostElement) {\n            return this.ghostTop;\n        }\n        return this.baseTop;\n    }\n\n    protected get baseLeft(): number {\n        return this.element.nativeElement.getBoundingClientRect().left;\n    }\n\n    protected get baseTop(): number {\n        return this.element.nativeElement.getBoundingClientRect().top;\n    }\n\n    protected get baseOriginLeft(): number {\n        return this.baseLeft - this.getTransformX(this.element.nativeElement);\n    }\n\n    protected get baseOriginTop(): number {\n        return this.baseTop - this.getTransformY(this.element.nativeElement);\n    }\n\n    protected set ghostLeft(pageX: number) {\n        // To Do: Remove requestAnimationFrame when deprecated animations inputs are removed as well.\n        // We use requestAnimationFrame for the old drop animations in combination with updateDragRelativePos.\n        requestAnimationFrame(() => {\n            if (this.ghostElement) {\n                // We need to take into account marginLeft, since top style does not include margin, but pageX includes the margin.\n                const ghostMarginLeft = parseInt(document.defaultView.getComputedStyle(this.ghostElement)['margin-left'], 10);\n                // If ghost host is defined it needs to be taken into account.\n                this.ghostElement.style.left = (pageX - ghostMarginLeft - this._ghostHostX) + 'px';\n            }\n        });\n    }\n\n    protected get ghostLeft() {\n        return parseInt(this.ghostElement.style.left, 10) + this._ghostHostX;\n    }\n\n    protected set ghostTop(pageY: number) {\n        // To Do: Remove requestAnimationFrame when deprecated animations inputs are removed as well.\n        // We use requestAnimationFrame for the old drop animations in combination with updateDragRelativePos.\n        requestAnimationFrame(() => {\n            if (this.ghostElement) {\n                // We need to take into account marginTop, since top style does not include margin, but pageY includes the margin.\n                const ghostMarginTop = parseInt(document.defaultView.getComputedStyle(this.ghostElement)['margin-top'], 10);\n                // If ghost host is defined it needs to be taken into account.\n                this.ghostElement.style.top = (pageY - ghostMarginTop - this._ghostHostY) + 'px';\n            }\n        });\n    }\n\n    protected get ghostTop() {\n        return parseInt(this.ghostElement.style.top, 10) + this._ghostHostY;\n    }\n\n    /**\n     * @hidden\n     */\n    public defaultReturnDuration = '0.5s';\n\n    /**\n     * @hidden\n     */\n    public ghostElement;\n\n    /**\n     * @hidden\n     */\n    public animInProgress = false;\n\n    protected _baseMarginLeft = 0;\n    protected _baseMarginTop = 0;\n    protected _baseOriginX;\n    protected _baseOriginY;\n    protected _startX = 0;\n    protected _startY = 0;\n    protected _lastX = 0;\n    protected _lastY = 0;\n    protected _dragStarted = false;\n\n    /** Drag ghost related properties */\n    protected _defaultOffsetX;\n    protected _defaultOffsetY;\n    protected _offsetX;\n    protected _offsetY;\n    protected _ghostStartX;\n    protected _ghostStartY;\n    protected _ghostHostX = 0;\n    protected _ghostHostY = 0;\n\n    protected _pointerDownId = null;\n    protected _clicked = false;\n    protected _lastDropArea = null;\n\n    protected _destroy = new Subject<boolean>();\n    protected _removeOnDestroy = true;\n\n    constructor(\n        public cdr: ChangeDetectorRef,\n        public element: ElementRef,\n        public viewContainer: ViewContainerRef,\n        public zone: NgZone,\n        public renderer: Renderer2\n    ) {\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        if (!this.dragHandles || !this.dragHandles.length ) {\n            // Set user select none to the whole draggable element if no drag handles are defined.\n            this.selectDisabled = true;\n        }\n\n        // Bind events\n        this.zone.runOutsideAngular(() => {\n            const targetElements = this.dragHandles && this.dragHandles.length ?\n                this.dragHandles.map((item) => item.element.nativeElement) : [this.element.nativeElement];\n            targetElements.forEach((element) => {\n                if (this.pointerEventsEnabled) {\n                    fromEvent(element, 'pointerdown').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerDown(res));\n\n                    fromEvent(element, 'pointermove').pipe(\n                        throttle(() => interval(0, animationFrameScheduler)),\n                        takeUntil(this._destroy)\n                    ).subscribe((res) => this.onPointerMove(res));\n\n                    fromEvent(element, 'pointerup').pipe(takeUntil(this._destroy))\n                        .subscribe((res) => this.onPointerUp(res));\n\n                    if (!this.ghost) {\n                        // Do not bind `lostpointercapture` to the target, because we will bind it on the ghost later.\n                        fromEvent(element, 'lostpointercapture').pipe(takeUntil(this._destroy))\n                        .subscribe((res) => this.onPointerLost(res));\n                    }\n                } else if (this.touchEventsEnabled) {\n                    fromEvent(element, 'touchstart').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerDown(res));\n                } else {\n                    // We don't have pointer events and touch events. Use then mouse events.\n                    fromEvent(element, 'mousedown').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerDown(res));\n                }\n            });\n\n            // We should bind to document events only once when there are no pointer events.\n            if (!this.pointerEventsEnabled && this.touchEventsEnabled) {\n                fromEvent(document.defaultView, 'touchmove').pipe(\n                    throttle(() => interval(0, animationFrameScheduler)),\n                    takeUntil(this._destroy)\n                ).subscribe((res) => this.onPointerMove(res));\n\n                fromEvent(document.defaultView, 'touchend').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerUp(res));\n            } else if (!this.pointerEventsEnabled) {\n                fromEvent(document.defaultView, 'mousemove').pipe(\n                    throttle(() => interval(0, animationFrameScheduler)),\n                    takeUntil(this._destroy)\n                ).subscribe((res) => this.onPointerMove(res));\n\n                fromEvent(document.defaultView, 'mouseup').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerUp(res));\n            }\n\n            this.element.nativeElement.addEventListener('transitionend', (args) => {\n                this.onTransitionEnd(args);\n            });\n        });\n\n        this._baseMarginLeft = parseInt(document.defaultView.getComputedStyle(this.element.nativeElement)['margin-left'], 10);\n        this._baseMarginTop = parseInt(document.defaultView.getComputedStyle(this.element.nativeElement)['margin-top'], 10);\n        this._baseOriginX = this.baseLeft;\n        this._baseOriginY = this.baseTop;\n        this._ghostStartX = this.baseLeft;\n        this._ghostStartY = this.baseTop;\n        // Set transition duration to 0s. This also helps with setting `visibility: hidden` to the base to not lag.\n        this.element.nativeElement.style.transitionDuration = '0.0s';\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._destroy.next(true);\n        this._destroy.complete();\n\n        if (this.ghost && this.ghostElement && this._removeOnDestroy) {\n            this.ghostElement.parentNode.removeChild(this.ghostElement);\n            this.ghostElement = null;\n        }\n    }\n\n    /**\n     * Sets desired location of the base element or ghost element if rended relative to the document.\n     * @param newLocation New location that should be applied. It is advised to get new location using getBoundingClientRects() + scroll.\n     */\n    public setLocation(newLocation: IgxDragLocation) {\n        // We do not subtract marginLeft and marginTop here because here we calculate deltas.\n        if (this.ghost && this.ghostElement) {\n            const offsetHostX = this.ghostHost ? this.ghostHostOffsetLeft(this.ghostHost) : 0;\n            const offsetHostY = this.ghostHost ? this.ghostHostOffsetTop(this.ghostHost) : 0;\n            this.ghostLeft = newLocation.pageX - offsetHostX + this.getWindowScrollLeft();\n            this.ghostTop = newLocation.pageY - offsetHostY + this.getWindowScrollTop();\n        } else if (!this.ghost) {\n            const deltaX = newLocation.pageX - this.pageX;\n            const deltaY = newLocation.pageY - this.pageY;\n            const transformX = this.getTransformX(this.element.nativeElement);\n            const transformY = this.getTransformY(this.element.nativeElement);\n            this.setTransformXY(transformX + deltaX, transformY + deltaY);\n        }\n\n        this._startX = this.baseLeft;\n        this._startY = this.baseTop;\n    }\n\n    /**\n     * Animates the base or ghost element depending on the `ghost` input to its initial location.\n     * If `ghost` is true but there is not ghost rendered, it will be created and animated.\n     * If the base element has changed its DOM position its initial location will be changed accordingly.\n     * @param customAnimArgs Custom transition properties that will be applied when performing the transition.\n     * @param startLocation Start location from where the transition should start.\n     */\n    public transitionToOrigin(customAnimArgs?: IDragCustomTransitionArgs, startLocation?: IgxDragLocation) {\n        if ((!!startLocation && startLocation.pageX === this.baseOriginLeft && startLocation.pageY === this.baseOriginLeft) ||\n            (!startLocation && this.ghost && !this.ghostElement)) {\n            return;\n        }\n\n        if (!!startLocation && startLocation.pageX !== this.pageX && startLocation.pageY !== this.pageY) {\n            if (this.ghost && !this.ghostElement) {\n                this._startX = startLocation.pageX;\n                this._startY = startLocation.pageY;\n                this._ghostStartX = this._startX;\n                this._ghostStartY = this._startY;\n                this.createGhost(this._startX, this._startY);\n            }\n\n            this.setLocation(startLocation);\n        }\n\n        this.animInProgress = true;\n        // Use setTimeout because we need to be sure that the element is positioned first correctly if there is start location.\n        setTimeout(() => {\n            if (this.ghost) {\n                this.ghostElement.style.transitionProperty = 'top, left';\n                this.ghostElement.style.transitionDuration =\n                    customAnimArgs && customAnimArgs.duration ? customAnimArgs.duration + 's' : this.defaultReturnDuration ;\n                this.ghostElement.style.transitionTimingFunction =\n                    customAnimArgs && customAnimArgs.timingFunction ? customAnimArgs.timingFunction : '';\n                this.ghostElement.style.transitionDelay = customAnimArgs && customAnimArgs.delay ? customAnimArgs.delay + 's' : '';\n                this.setLocation(new IgxDragLocation(this.baseLeft, this.baseTop));\n            } else if (!this.ghost) {\n                this.element.nativeElement.style.transitionProperty = 'transform';\n                this.element.nativeElement.style.transitionDuration =\n                    customAnimArgs && customAnimArgs.duration ? customAnimArgs.duration + 's' : this.defaultReturnDuration ;\n                this.element.nativeElement.style.transitionTimingFunction =\n                    customAnimArgs && customAnimArgs.timingFunction ? customAnimArgs.timingFunction : '';\n                this.element.nativeElement.style.transitionDelay = customAnimArgs && customAnimArgs.delay ? customAnimArgs.delay + 's' : '';\n                this._startX = this.baseLeft;\n                this._startY = this.baseTop;\n                this.setTransformXY(0, 0);\n            }\n        }, 0);\n    }\n\n    /**\n     * Animates the base or ghost element to a specific target location or other element using transition.\n     * If `ghost` is true but there is not ghost rendered, it will be created and animated.\n     * It is recommended to use 'getBoundingClientRects() + pageScroll' when determining desired location.\n     * @param target Target that the base or ghost will transition to. It can be either location in the page or another HTML element.\n     * @param customAnimArgs Custom transition properties that will be applied when performing the transition.\n     * @param startLocation Start location from where the transition should start.\n     */\n    public transitionTo(target: IgxDragLocation | ElementRef, customAnimArgs?: IDragCustomTransitionArgs, startLocation?: IgxDragLocation) {\n        if (!!startLocation && this.ghost && !this.ghostElement) {\n            this._startX = startLocation.pageX;\n            this._startY = startLocation.pageY;\n            this._ghostStartX = this._startX;\n            this._ghostStartY = this._startY;\n        } else if (!!startLocation && (!this.ghost || this.ghostElement)) {\n            this.setLocation(startLocation);\n        } else if (this.ghost && !this.ghostElement) {\n            this._startX = this.baseLeft;\n            this._startY = this.baseTop;\n            this._ghostStartX = this._startX + this.getWindowScrollLeft();\n            this._ghostStartY = this._startY + this.getWindowScrollTop();\n        }\n\n        if (this.ghost && !this.ghostElement) {\n            this.createGhost(this._startX, this._startY);\n        }\n\n        this.animInProgress = true;\n        // Use setTimeout because we need to be sure that the element is positioned first correctly if there is start location.\n        setTimeout(() => {\n            const movedElem = this.ghost ? this.ghostElement : this.element.nativeElement;\n            movedElem.style.transitionProperty = this.ghost && this.ghostElement ? 'left, top' : 'transform';\n            movedElem.style.transitionDuration =\n                customAnimArgs && customAnimArgs.duration ? customAnimArgs.duration + 's' : this.defaultReturnDuration ;\n            movedElem.style.transitionTimingFunction =\n                customAnimArgs && customAnimArgs.timingFunction ? customAnimArgs.timingFunction : '';\n            movedElem.style.transitionDelay = customAnimArgs && customAnimArgs.delay ? customAnimArgs.delay + 's' : '';\n\n            if (target instanceof IgxDragLocation) {\n                this.setLocation(new IgxDragLocation (target.pageX, target.pageY));\n            } else {\n                const targetRects = target.nativeElement.getBoundingClientRect();\n                this.setLocation(new IgxDragLocation(\n                    targetRects.left -  this.getWindowScrollLeft(),\n                    targetRects.top - this.getWindowScrollTop()\n                ));\n            }\n        }, 0);\n    }\n\n    /**\n     * @hidden\n     * Method bound to the PointerDown event of the base element igxDrag is initialized.\n     * @param event PointerDown event captured\n     */\n    public onPointerDown(event) {\n        this._clicked = true;\n        this._pointerDownId = event.pointerId;\n\n        // Set pointer capture so we detect pointermove even if mouse is out of bounds until ghostElement is created.\n        const handleFound = this.dragHandles.find(handle => handle.element.nativeElement === event.currentTarget);\n        const targetElement = handleFound ? handleFound.element.nativeElement : this.element.nativeElement;\n        if (this.pointerEventsEnabled) {\n            targetElement.setPointerCapture(this._pointerDownId);\n        } else {\n            targetElement.focus();\n            event.preventDefault();\n        }\n\n        if (!this._baseOriginX && !this._baseOriginY) {\n            this._baseOriginX = this.baseLeft;\n            this._baseOriginY = this.baseTop;\n        }\n\n        if (this.pointerEventsEnabled || !this.touchEventsEnabled) {\n            // Check first for pointer events or non touch, because we can have pointer events and touch events at once.\n            this._startX = event.pageX;\n            this._startY = event.pageY;\n        } else if (this.touchEventsEnabled) {\n            this._startX = event.touches[0].pageX;\n            this._startY = event.touches[0].pageY;\n        }\n\n        this._defaultOffsetX = this.baseLeft - this._startX + this.getWindowScrollLeft();\n        this._defaultOffsetY = this.baseTop - this._startY + this.getWindowScrollTop();\n        this._ghostStartX = this._startX + this.ghostOffsetX;\n        this._ghostStartY = this._startY + this.ghostOffsetY;\n        this._lastX = this._startX;\n        this._lastY = this._startY;\n    }\n\n    /**\n     * @hidden\n     * Perform drag move logic when dragging and dispatching events if there is igxDrop under the pointer.\n     * This method is bound at first at the base element.\n     * If dragging starts and after the ghostElement is rendered the pointerId is reassigned it. Then this method is bound to it.\n     * @param event PointerMove event captured\n     */\n    public onPointerMove(event) {\n        if (this._clicked) {\n            let pageX, pageY;\n            if (this.pointerEventsEnabled || !this.touchEventsEnabled) {\n                // Check first for pointer events or non touch, because we can have pointer events and touch events at once.\n                pageX = event.pageX;\n                pageY = event.pageY;\n            } else if (this.touchEventsEnabled) {\n                pageX = event.touches[0].pageX;\n                pageY = event.touches[0].pageY;\n\n                // Prevent scrolling on touch while dragging\n                event.preventDefault();\n            }\n\n            const totalMovedX = pageX - this._startX;\n            const totalMovedY = pageY - this._startY;\n            if (!this._dragStarted &&\n                (Math.abs(totalMovedX) > this.dragTolerance || Math.abs(totalMovedY) > this.dragTolerance)) {\n                const dragStartArgs: IDragStartEventArgs = {\n                    originalEvent: event,\n                    owner: this,\n                    startX: pageX - totalMovedX,\n                    startY: pageY - totalMovedY,\n                    pageX: pageX,\n                    pageY: pageY,\n                    cancel: false\n                };\n                this.zone.run(() => {\n                    this.dragStart.emit(dragStartArgs);\n                });\n\n                if (!dragStartArgs.cancel) {\n                    this._dragStarted = true;\n                    if (this.ghost) {\n                        // We moved enough so ghostElement can be rendered and actual dragging to start.\n                        // When creating it will take into account any offset set by the user by default.\n                        this.createGhost(pageX, pageY);\n                    } else if (this._offsetX !== undefined || this._offsetY !== undefined) {\n                        // There is no need for ghost, but we will need to position initially the base element to reflect any offset.\n                        const transformX = (this._offsetX !== undefined ? this._offsetX - this._defaultOffsetX : 0) +\n                            this.getTransformX(this.element.nativeElement);\n                        const transformY = (this._offsetY !== undefined ? this._offsetY - this._defaultOffsetY : 0) +\n                            this.getTransformY(this.element.nativeElement);\n                        this.setTransformXY(transformX, transformY);\n                    }\n                } else {\n                    return;\n                }\n            } else if (!this._dragStarted) {\n                return;\n            }\n\n            const moveArgs: IDragMoveEventArgs = {\n                originalEvent: event,\n                owner: this,\n                startX: this._startX,\n                startY: this._startY,\n                pageX: this._lastX,\n                pageY: this._lastY,\n                nextPageX: pageX,\n                nextPageY: pageY,\n                cancel: false\n            };\n            this.dragMove.emit(moveArgs);\n\n            const setPageX = moveArgs.nextPageX;\n            const setPageY = moveArgs.nextPageY;\n            const updatedMovedX = setPageX - this._startX;\n            const updatedMovedY = setPageY - this._startY;\n\n            if (!moveArgs.cancel) {\n                if (this.ghost) {\n                    this.ghostLeft = this._ghostStartX + updatedMovedX;\n                    this.ghostTop = this._ghostStartY + updatedMovedY;\n                } else {\n                    const lastMovedX = setPageX - this._lastX;\n                    const lastMovedY = setPageY - this._lastY;\n                    const translateX = this.getTransformX(this.element.nativeElement) + lastMovedX;\n                    const translateY = this.getTransformY(this.element.nativeElement) + lastMovedY;\n                    this.setTransformXY(translateX, translateY);\n                }\n                this.dispatchDragEvents(pageX, pageY, event);\n            }\n\n            this._lastX = setPageX;\n            this._lastY = setPageY;\n        }\n    }\n\n    /**\n     * @hidden\n     * Perform drag end logic when releasing the ghostElement and dispatching drop event if igxDrop is under the pointer.\n     * This method is bound at first at the base element.\n     * If dragging starts and after the ghostElement is rendered the pointerId is reassigned to it. Then this method is bound to it.\n     * @param event PointerUp event captured\n     */\n    public onPointerUp(event) {\n        if (!this._clicked) {\n            return;\n        }\n\n        let pageX, pageY;\n        if (this.pointerEventsEnabled || !this.touchEventsEnabled) {\n            // Check first for pointer events or non touch, because we can have pointer events and touch events at once.\n            pageX = event.pageX;\n            pageY = event.pageY;\n        } else if (this.touchEventsEnabled) {\n            pageX = event.touches[0].pageX;\n            pageY = event.touches[0].pageY;\n\n            // Prevent scrolling on touch while dragging\n            event.preventDefault();\n        }\n\n        const eventArgs: IDragBaseEventArgs = {\n            originalEvent: event,\n            owner: this,\n            startX: this._startX,\n            startY: this._startY,\n            pageX: pageX,\n            pageY: pageY\n        };\n        this._pointerDownId = null;\n        this._clicked = false;\n        if (this._dragStarted) {\n            if (this._lastDropArea && this._lastDropArea !== this.element.nativeElement ) {\n                this.dispatchDropEvent(event.pageX, event.pageY, event);\n            } else if (this.animateOnRelease) {\n                this.transitionToOrigin();\n            }\n\n            this.zone.run(() => {\n                this.dragEnd.emit(eventArgs);\n            });\n\n            if (!this.animInProgress) {\n                this.onTransitionEnd(null);\n            }\n        } else {\n            // Trigger our own click event because when there is no ghost, native click cannot be prevented when dragging.\n            this.zone.run(() => {\n                this.dragClick.emit(eventArgs);\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     * Execute this method whe the pointer capture has been lost.\n     * This means that during dragging the user has performed other action like right clicking and then clicking somewhere else.\n     * This method will ensure that the drag state is being reset in this case as if the user released the dragged element.\n     * @param event Event captured\n     */\n    public onPointerLost(event) {\n        if (!this._clicked) {\n            return;\n        }\n\n        const eventArgs = {\n            originalEvent: event,\n            owner: this,\n            startX: this._startX,\n            startY: this._startY,\n            pageX: event.pageX,\n            pageY: event.pageY\n        };\n        this._pointerDownId = null;\n        this._clicked = false;\n        if (this._dragStarted) {\n            this.zone.run(() => {\n                this.dragEnd.emit(eventArgs);\n            });\n            if (this.animateOnRelease) {\n                this.transitionToOrigin();\n            } else if (!this.animInProgress) {\n                this.onTransitionEnd(null);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     * Create ghost element - if a Node object is provided it creates a clone of that node,\n     * otherwise it clones the host element.\n     * Bind all needed events.\n     * @param pageX Latest pointer position on the X axis relative to the page.\n     * @param pageY Latest pointer position on the Y axis relative to the page.\n     * @param node The Node object to be cloned.\n     */\n    protected createGhost(pageX, pageY, node: any = null) {\n        if (!this.ghost) {\n            return;\n        }\n\n        let dynamicGhostRef;\n        if (this.ghostTemplate) {\n            dynamicGhostRef = this.viewContainer.createEmbeddedView(this.ghostTemplate, this.ghostContext);\n            this.ghostElement = dynamicGhostRef.rootNodes[0];\n        } else {\n            this.ghostElement = node ? node.cloneNode(true) : this.element.nativeElement.cloneNode(true);\n        }\n\n        const totalMovedX = pageX - this._startX;\n        const totalMovedY = pageY - this._startY;\n        this._ghostHostX = this.ghostHost ? this.ghostHostOffsetLeft(this.ghostHost) : 0;\n        this._ghostHostY = this.ghostHost ? this.ghostHostOffsetTop(this.ghostHost) : 0;\n\n        this.ghostElement.style.transitionDuration = '0.0s';\n        this.ghostElement.style.position = 'absolute';\n\n\n        if (this.ghostClass) {\n            this.renderer.addClass(this.ghostElement, this.ghostClass);\n        }\n\n        const createEventArgs = {\n            owner: this,\n            ghostElement: this.ghostElement,\n            cancel: false\n        };\n        this.ghostCreate.emit(createEventArgs);\n        if (createEventArgs.cancel) {\n            this.ghostElement = null;\n            if (this.ghostTemplate && dynamicGhostRef) {\n                dynamicGhostRef.destroy();\n            }\n            return;\n        }\n\n        if (this.ghostHost) {\n            this.ghostHost.appendChild(this.ghostElement);\n        } else {\n            document.body.appendChild(this.ghostElement);\n        }\n\n        const ghostMarginLeft = parseInt(document.defaultView.getComputedStyle(this.ghostElement)['margin-left'], 10);\n        const ghostMarginTop = parseInt(document.defaultView.getComputedStyle(this.ghostElement)['margin-top'], 10);\n        this.ghostElement.style.left = (this._ghostStartX - ghostMarginLeft + totalMovedX - this._ghostHostX) + 'px';\n        this.ghostElement.style.top = (this._ghostStartY - ghostMarginTop + totalMovedY - this._ghostHostX) + 'px';\n\n        if (this.pointerEventsEnabled) {\n            // The ghostElement takes control for moving and dragging after it has been rendered.\n            if (this._pointerDownId !== null) {\n                this.ghostElement.setPointerCapture(this._pointerDownId);\n            }\n            this.ghostElement.addEventListener('pointermove', (args) => {\n                this.onPointerMove(args);\n            });\n            this.ghostElement.addEventListener('pointerup', (args) => {\n                this.onPointerUp(args);\n            });\n            this.ghostElement.addEventListener('lostpointercapture', (args) => {\n                this.onPointerLost(args);\n            });\n        }\n\n        // Transition animation when the ghostElement is released and it returns to it's original position.\n        this.ghostElement.addEventListener('transitionend', (args) => {\n            this.onTransitionEnd(args);\n        });\n\n        // Hide the base after the ghostElement is created, because otherwise the ghostElement will be not visible.\n        if (this.hideBaseOnDrag) {\n            this.visible = false;\n        }\n\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden\n     * Dispatch custom igxDragEnter/igxDragLeave events based on current pointer position and if drop area is under.\n     */\n    protected dispatchDragEvents(pageX: number, pageY: number, originalEvent) {\n        let topDropArea;\n        const customEventArgs: IgxDragCustomEventDetails = {\n            startX: this._startX,\n            startY: this._startY,\n            pageX: pageX,\n            pageY: pageY,\n            owner: this,\n            originalEvent: originalEvent\n        };\n\n        const elementsFromPoint = this.getElementsAtPoint(pageX, pageY);\n        for (let i = 0; i < elementsFromPoint.length; i++) {\n            if (elementsFromPoint[i].getAttribute('droppable') === 'true' &&\n                elementsFromPoint[i] !== this.ghostElement && elementsFromPoint[i] !== this.element.nativeElement) {\n                topDropArea = elementsFromPoint[i];\n                break;\n            }\n        }\n\n        if (topDropArea &&\n            (!this._lastDropArea || (this._lastDropArea && this._lastDropArea !== topDropArea))) {\n                if (this._lastDropArea) {\n                    this.dispatchEvent(this._lastDropArea, 'igxDragLeave', customEventArgs);\n                }\n\n                this._lastDropArea = topDropArea;\n                this.dispatchEvent(this._lastDropArea, 'igxDragEnter', customEventArgs);\n            } else if (!topDropArea && this._lastDropArea) {\n                this.dispatchEvent(this._lastDropArea, 'igxDragLeave', customEventArgs);\n                this._lastDropArea = null;\n                return;\n            }\n\n        if (topDropArea) {\n            this.dispatchEvent(topDropArea, 'igxDragOver', customEventArgs);\n        }\n    }\n\n    /**\n     * @hidden\n     * Dispatch custom igxDrop event based on current pointer position if there is last recorder drop area under the pointer.\n     * Last recorder drop area is updated in @dispatchDragEvents method.\n     */\n    protected dispatchDropEvent(pageX: number, pageY: number, originalEvent) {\n        const eventArgs: IgxDragCustomEventDetails = {\n            startX: this._startX,\n            startY: this._startY,\n            pageX: pageX,\n            pageY: pageY,\n            owner: this,\n            originalEvent: originalEvent\n        };\n\n        this.dispatchEvent(this._lastDropArea, 'igxDrop', eventArgs);\n        this.dispatchEvent(this._lastDropArea, 'igxDragLeave', eventArgs);\n        this._lastDropArea = null;\n    }\n\n    /**\n     * @hidden\n     * Update relative positions\n     */\n    public updateDragRelativePos() {\n        let newPosX, newPosY;\n        if (this.ghost && this.ghostElement) {\n            // Calculate the new ghostElement position to remain where the mouse is, so it doesn't jump\n            const totalDraggedX = this.ghostLeft - this._ghostStartX;\n            const totalDraggedY = this.ghostTop - this._ghostStartY;\n            newPosX = this.baseLeft;\n            newPosY = this.baseTop;\n            const diffStartX = this._ghostStartX - newPosX;\n            const diffStartY = this._ghostStartY - newPosY;\n            this.ghostTop = newPosX + totalDraggedX - diffStartX;\n            this.ghostLeft = newPosY + totalDraggedY - diffStartY;\n        } else if (!this.ghost) {\n            const totalDraggedX = this.getTransformX(this.element.nativeElement);\n            const totalDraggedY = this.getTransformY(this.element.nativeElement);\n            newPosX = this.baseLeft - totalDraggedX;\n            newPosY = this.baseTop - totalDraggedY;\n            const deltaX = this._baseOriginX - newPosX;\n            const deltaY = this._baseOriginY - newPosY;\n            this.setTransformXY(totalDraggedX + deltaX, totalDraggedY + deltaY);\n        }\n        this._baseOriginX = newPosX !== undefined ? newPosX : this._baseOriginX;\n        this._baseOriginY = newPosY !== undefined ? newPosY : this._baseOriginY;\n    }\n\n    /**\n     * @deprecated This method will be removed in future major version. Please use `transitionToOrigin` or `transitionTo`.\n     * Informs the `igxDrag` directive that it has been dropped/released.\n     * This should usually be called when `animateOnRelease` is set to `true`.\n     * When canceling or defining custom drop logic this tells the igxDrag to update it's positions and\n     * animate correctly to the new position.\n     * ```typescript\n     * public onDropElem(event) {\n     *     // Function bound to the igxDrop directive event `onDrop`\n     *     // This cancels the default drop logic of the `igxDrop`\n     *     event.cancel = true;\n     *     event.drag.dropFinished();\n     * }\n     * ```\n    */\n    public dropFinished() {\n        this.updateDragRelativePos();\n        if (this.animateOnRelease && this.ghostElement) {\n            this.transitionToOrigin();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onTransitionEnd(event) {\n        if ((!this._dragStarted && !this.animInProgress) || this._clicked) {\n            // Return if no dragging started and there is no animation in progress.\n            return ;\n        }\n\n        if (this.ghost && this.ghostElement) {\n            this._ghostStartX = this.baseLeft + this.getWindowScrollLeft();\n            this._ghostStartY = this.baseTop + this.getWindowScrollTop();\n\n            const ghostDestroyArgs: IDragGhostBaseEventArgs = {\n                owner: this,\n                ghostElement: this.ghostElement,\n                cancel: false\n            };\n            this.ghostDestroy.emit(ghostDestroyArgs);\n            if (ghostDestroyArgs.cancel) {\n                return;\n            }\n\n            if (this.hideBaseOnDrag) {\n                this.visible = true;\n            }\n            this.ghostElement.parentNode.removeChild(this.ghostElement);\n            this.ghostElement = null;\n        } else if (!this.ghost) {\n            this.element.nativeElement.style.transitionProperty = '';\n            this.element.nativeElement.style.transitionDuration = '0.0s';\n            this.element.nativeElement.style.transitionTimingFunction = '';\n            this.element.nativeElement.style.transitionDelay = '';\n        }\n        this.animInProgress = false;\n        this._dragStarted = false;\n\n        // Execute transitioned after everything is reset so if the user sets new location on the base now it would work as expected.\n        this.zone.run(() => {\n            this.transitioned.emit({\n                originalEvent: event,\n                owner: this,\n                startX: this._startX,\n                startY: this._startY,\n                pageX: this._startX,\n                pageY: this._startY\n            });\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    protected getElementsAtPoint(pageX: number, pageY: number) {\n        // correct the coordinates with the current scroll position, because\n        // document.elementsFromPoint consider position within the current viewport\n        // window.pageXOffset == window.scrollX; // always true\n        // using window.pageXOffset for IE9 compatibility\n        const viewPortX = pageX - window.pageXOffset;\n        const viewPortY = pageY - window.pageYOffset;\n        if (document['msElementsFromPoint']) {\n            // Edge and IE special snowflakes\n            const elements = document['msElementsFromPoint'](viewPortX, viewPortY);\n            return elements === null ? [] : elements;\n        } else {\n            // Other browsers like Chrome, Firefox, Opera\n            return document.elementsFromPoint(viewPortX, viewPortY);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected dispatchEvent(target, eventName: string, eventArgs: IgxDragCustomEventDetails) {\n        // This way is IE11 compatible.\n        const dragLeaveEvent = document.createEvent('CustomEvent');\n        dragLeaveEvent.initCustomEvent(eventName, false, false, eventArgs);\n        target.dispatchEvent(dragLeaveEvent);\n        // Otherwise can be used `target.dispatchEvent(new CustomEvent(eventName, eventArgs));`\n    }\n\n    protected getTransformX(elem) {\n        let posX = 0;\n        if (elem.style.transform) {\n            const matrix = elem.style.transform;\n            const values = matrix ? matrix.match(/-?[\\d\\.]+/g) : undefined;\n            posX = values ? Number(values[ 1 ]) : 0;\n        }\n\n        return posX;\n    }\n\n    protected getTransformY(elem) {\n        let posY = 0;\n        if (elem.style.transform) {\n            const matrix = elem.style.transform;\n            const values = matrix ? matrix.match(/-?[\\d\\.]+/g) : undefined;\n            posY = values ? Number(values[ 2 ]) : 0;\n        }\n\n        return posY;\n    }\n\n    /** Method setting transformation to the base draggable element. */\n    protected setTransformXY(x: number, y: number) {\n        this.element.nativeElement.style.transform = 'translate3d(' + x + 'px, ' + y + 'px, 0px)';\n    }\n\n    protected getWindowScrollTop() {\n        return window.scrollY ? window.scrollY : (window.pageYOffset ? window.pageYOffset : 0);\n    }\n\n    protected getWindowScrollLeft() {\n        return window.scrollX ? window.scrollX : (window.pageXOffset ? window.pageXOffset : 0);\n    }\n\n    protected ghostHostOffsetLeft(ghostHost: any) {\n        const ghostPosition = document.defaultView.getComputedStyle(ghostHost).getPropertyValue('position');\n        if (ghostPosition === 'static' && ghostHost.offsetParent && ghostHost.offsetParent === document.body) {\n            return 0;\n        } else if (ghostPosition === 'static' && ghostHost.offsetParent) {\n            return ghostHost.offsetParent.getBoundingClientRect().left - this.getWindowScrollLeft();\n        }\n        return ghostHost.getBoundingClientRect().left - this.getWindowScrollLeft();\n    }\n\n    protected ghostHostOffsetTop(ghostHost: any) {\n        const ghostPosition = document.defaultView.getComputedStyle(ghostHost).getPropertyValue('position');\n        if (ghostPosition === 'static' && ghostHost.offsetParent && ghostHost.offsetParent === document.body) {\n            return 0;\n        } else if (ghostPosition === 'static' && ghostHost.offsetParent) {\n            return ghostHost.offsetParent.getBoundingClientRect().top - this.getWindowScrollTop();\n        }\n        return ghostHost.getBoundingClientRect().top - this.getWindowScrollTop();\n    }\n}\n\n@Directive({\n    exportAs: 'drop',\n    selector: '[igxDrop]'\n})\nexport class IgxDropDirective implements OnInit, OnDestroy {\n\n    /**\n     * - Save data inside the `igxDrop` directive. This can be set when instancing `igxDrop` on an element.\n     * ```html\n     * <div [igxDrop]=\"{ source: myElement }\"></div>\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Input('igxDrop')\n    public data: any;\n\n    /**\n     * An @Input property that provide a way for igxDrag and igxDrop to be linked through channels.\n     * It accepts single value or an array of values and evaluates then using strict equality.\n     * ```html\n     * <div igxDrag [dragChannel]=\"'odd'\">\n     *         <span>95</span>\n     * </div>\n     * <div igxDrop [dropChannel]=\"['odd', 'irrational']\">\n     *         <span>Numbers drop area!</span>\n     * </div>\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Input()\n    public dropChannel: number | string | number[] | string[];\n\n    /**\n     * An @Input property that specifies a drop strategy type that will be executed when an `IgxDrag` element is released inside\n     *  the current drop area. The provided strategies are:\n     *  - IgxDefaultDropStrategy - This is the default base strategy and it doesn't perform any actions.\n     *  - IgxAppendDropStrategy - Appends the dropped element to last position as a direct child to the `igxDrop`.\n     *  - IgxPrependDropStrategy - Prepends the dropped element to first position as a direct child to the `igxDrop`.\n     *  - IgxInsertDropStrategy - If the dropped element is released above a child element of the `igxDrop`, it will be inserted\n     *      at that position. Otherwise the dropped element will be appended if released outside any child of the `igxDrop`.\n     * ```html\n     * <div igxDrag>\n     *      <span>DragMe</span>\n     * </div>\n     * <div igxDrop [dropStrategy]=\"myDropStrategy\">\n     *         <span>Numbers drop area!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * import { IgxAppendDropStrategy } from 'igniteui-angular';\n     *\n     * export class App {\n     *      public myDropStrategy = IgxAppendDropStrategy;\n     * }\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Input()\n    public set dropStrategy(classRef: any) {\n        this._dropStrategy = new classRef(this._renderer);\n    }\n\n    public get dropStrategy() {\n        return this._dropStrategy;\n    }\n\n    /** Event triggered when dragged element enters the area of the element.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (enter)=\"dragEnter()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragEnter(){\n     *     alert(\"A draggable element has entered the chip area!\");\n     * }\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Output()\n    public enter = new EventEmitter<IDropBaseEventArgs>();\n\n        /** Event triggered when dragged element enters the area of the element.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (enter)=\"dragEnter()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragEnter(){\n     *     alert(\"A draggable element has entered the chip area!\");\n     * }\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Output()\n    public over = new EventEmitter<IDropBaseEventArgs>();\n\n    /** Event triggered when dragged element leaves the area of the element.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (leave)=\"dragLeave()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragLeave(){\n     *     alert(\"A draggable element has left the chip area!\");\n     * }\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Output()\n    public leave = new EventEmitter<IDropBaseEventArgs>();\n\n    /** Event triggered when dragged element is dropped in the area of the element.\n     * Since the `igxDrop` has default logic that appends the dropped element as a child, it can be canceled here.\n     * To cancel the default logic the `cancel` property of the event needs to be set to true.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (dropped)=\"dragDrop()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragDrop(){\n     *     alert(\"A draggable element has been dropped in the chip area!\");\n     * }\n     * ```\n     * @memberof IgxDropDirective\n     */\n    @Output()\n    public dropped = new EventEmitter<IDropDroppedEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.droppable')\n    public droppable = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.dragOver')\n    public dragover = false;\n\n    /**\n     * @hidden\n     */\n    protected _destroy = new Subject<boolean>();\n    protected _dropStrategy: IDropStrategy;\n\n    constructor(public element: ElementRef, private _renderer: Renderer2, private _zone: NgZone) {\n        this._dropStrategy = new IgxDefaultDropStrategy();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this._zone.runOutsideAngular(() => {\n            fromEvent(this.element.nativeElement, 'igxDragEnter').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onDragEnter(res as CustomEvent<IgxDragCustomEventDetails>));\n\n            fromEvent(this.element.nativeElement, 'igxDragLeave').pipe(takeUntil(this._destroy)).subscribe((res) => this.onDragLeave(res));\n            fromEvent(this.element.nativeElement, 'igxDragOver').pipe(takeUntil(this._destroy)).subscribe((res) => this.onDragOver(res));\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._destroy.next(true);\n        this._destroy.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    public onDragOver(event) {\n        const elementPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n        const elementPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n        const offsetX = event.detail.pageX - elementPosX;\n        const offsetY = event.detail.pageY - elementPosY;\n        const eventArgs: IDropBaseEventArgs = {\n            originalEvent: event.detail.originalEvent,\n            owner: this,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            startX: event.detail.startX,\n            startY: event.detail.startY,\n            pageX: event.detail.pageX,\n            pageY: event.detail.pageY,\n            offsetX: offsetX,\n            offsetY: offsetY\n        };\n\n        this.over.emit(eventArgs);\n     }\n\n    /**\n     * @hidden\n     */\n    public onDragEnter(event: CustomEvent<IgxDragCustomEventDetails>) {\n        if (!this.isDragLinked(event.detail.owner)) {\n            return;\n        }\n\n        this.dragover = true;\n        const elementPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n        const elementPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n        const offsetX = event.detail.pageX - elementPosX;\n        const offsetY = event.detail.pageY - elementPosY;\n        const eventArgs: IDropBaseEventArgs = {\n            originalEvent: event.detail.originalEvent,\n            owner: this,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            startX: event.detail.startX,\n            startY: event.detail.startY,\n            pageX: event.detail.pageX,\n            pageY: event.detail.pageY,\n            offsetX: offsetX,\n            offsetY: offsetY\n        };\n        this._zone.run(() => {\n            this.enter.emit(eventArgs);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public onDragLeave(event) {\n        if (!this.isDragLinked(event.detail.owner)) {\n            return;\n        }\n\n        this.dragover = false;\n        const elementPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n        const elementPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n        const offsetX = event.detail.pageX - elementPosX;\n        const offsetY = event.detail.pageY - elementPosY;\n        const eventArgs: IDropBaseEventArgs = {\n            originalEvent: event.detail.originalEvent,\n            owner: this,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            startX: event.detail.startX,\n            startY: event.detail.startY,\n            pageX: event.detail.pageX,\n            pageY: event.detail.pageY,\n            offsetX: offsetX,\n            offsetY: offsetY\n        };\n        this._zone.run(() => {\n            this.leave.emit(eventArgs);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('igxDrop', ['$event'])\n    public onDragDrop(event) {\n        if (!this.isDragLinked(event.detail.owner)) {\n            return;\n        }\n\n        const elementPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n        const elementPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n        const offsetX = event.detail.pageX - elementPosX;\n        const offsetY = event.detail.pageY - elementPosY;\n        const args: IDropDroppedEventArgs = {\n            owner: this,\n            originalEvent: event.detail.originalEvent,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            startX: event.detail.startX,\n            startY: event.detail.startY,\n            pageX: event.detail.pageX,\n            pageY: event.detail.pageY,\n            offsetX: offsetX,\n            offsetY: offsetY,\n            cancel: false\n        };\n        this._zone.run(() => {\n            this.dropped.emit(args);\n        });\n\n        if (this._dropStrategy && !args.cancel) {\n            const elementsAtPoint = event.detail.owner.getElementsAtPoint(event.detail.pageX, event.detail.pageY);\n            const insertIndex = this.getInsertIndexAt(event.detail.owner, elementsAtPoint);\n            this._dropStrategy.dropAction(event.detail.owner, this, insertIndex);\n        }\n    }\n\n    protected getWindowScrollTop() {\n        return window.scrollY ? window.scrollY : (window.pageYOffset ? window.pageYOffset : 0);\n    }\n\n    protected getWindowScrollLeft() {\n        return window.scrollX ? window.scrollX : (window.pageXOffset ? window.pageXOffset : 0);\n    }\n\n    protected isDragLinked(drag: IgxDragDirective): boolean {\n        const dragLinkArray = drag.dragChannel instanceof Array;\n        const dropLinkArray = this.dropChannel instanceof Array;\n\n        if (!dragLinkArray && !dropLinkArray) {\n            return this.dropChannel === drag.dragChannel;\n        } else if (!dragLinkArray && dropLinkArray) {\n            const dropLinks = <Array<any>>this.dropChannel;\n            for (let i = 0; i < dropLinks.length; i ++) {\n                if (dropLinks[i] === drag.dragChannel) {\n                    return true;\n                }\n            }\n        } else if (dragLinkArray && !dropLinkArray) {\n            const dragLinks = <Array<any>>drag.dragChannel;\n            for (let i = 0; i < dragLinks.length; i ++) {\n                if (dragLinks[i] === this.dropChannel) {\n                    return true;\n                }\n            }\n        } else {\n            const dragLinks = <Array<any>>drag.dragChannel;\n            const dropLinks = <Array<any>>this.dropChannel;\n            for (let i = 0; i < dragLinks.length; i ++) {\n                for (let j = 0; j < dropLinks.length; j ++) {\n                    if (dragLinks[i] === dropLinks[j]) {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    protected getInsertIndexAt(draggedDir: IgxDragDirective, elementsAtPoint: any[]): number {\n        let insertIndex = -1;\n        const dropChildren = Array.prototype.slice.call(this.element.nativeElement.children);\n        if (!dropChildren.length) {\n            return insertIndex;\n        }\n\n        let i = 0;\n        let childUnder = null;\n        while (!childUnder && i < elementsAtPoint.length) {\n            if (elementsAtPoint[i].parentElement === this.element.nativeElement) {\n                childUnder = elementsAtPoint[i];\n            }\n            i++;\n        }\n\n        const draggedElemIndex = dropChildren.indexOf(draggedDir.element.nativeElement);\n        insertIndex = dropChildren.indexOf(childUnder);\n        if (draggedElemIndex !== -1 && draggedElemIndex < insertIndex) {\n            insertIndex++;\n        }\n\n        return insertIndex;\n    }\n}\n\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDragDirective, IgxDropDirective, IgxDragHandleDirective],\n    exports: [IgxDragDirective, IgxDropDirective, IgxDragHandleDirective]\n})\nexport class IgxDragDropModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgModule,\n    OnChanges,\n    Output,\n    Pipe,\n    PipeTransform,\n    Renderer2,\n    SimpleChanges\n} from '@angular/core';\n\nexport class IgxFilterOptions {\n    // Input text value that will be used as a filtering pattern (matching condition is based on it)\n    public inputValue = '';\n\n    // Item property, which value should be used for filtering\n    public key: string;\n\n    // Represent items of the list. It should be used to handle decalaratevely defined widgets\n    public items: any[];\n\n    // Function - get value to be tested from the item\n    // item - single item of the list to be filtered\n    // key - property name of item, which value should be tested\n    // Default behavior - returns \"key\"- named property value of item if key si provided,\n    // otherwise textContent of the item's html element\n    public get_value(item: any, key: string): string {\n        let result = '';\n\n        if (key && item[key]) {\n            result = item[key].toString();\n        } else if (item.element) {\n            if (item.element.nativeElement) {\n                result = item.element.nativeElement.textContent.trim();\n            // Check if element doesn't return the DOM element directly\n            } else if (item.element.textContent) {\n                result = item.element.textContent.trim();\n            }\n        }\n\n        return result;\n    }\n\n    // Function - formats the original text before matching process\n    // Default behavior - returns text to lower case\n    public formatter(valueToTest: string): string {\n        return valueToTest.toLowerCase();\n    }\n\n    // Function - determines whether the item met the condition\n    // valueToTest - text value that should be tested\n    // inputValue - text value from input that condition is based on\n    // Default behavior - \"contains\"\n    public matchFn(valueToTest: string, inputValue: string): boolean {\n        return valueToTest.indexOf(inputValue && inputValue.toLowerCase() || '') > -1;\n    }\n\n    // Function - executed after matching test for every matched item\n    // Default behavior - shows the item\n    public metConditionFn(item: any) {\n        if (item.hasOwnProperty('hidden')) {\n            item.hidden = false;\n        }\n    }\n\n    // Function - executed for every NOT matched item after matching test\n    // Default behavior - hides the item\n    public overdueConditionFn(item: any) {\n        if (item.hasOwnProperty('hidden')) {\n            item.hidden = true;\n        }\n    }\n}\n\n\n@Directive({\n    selector: '[igxFilter]'\n})\nexport class IgxFilterDirective implements OnChanges {\n    @Output() public filtering = new EventEmitter(false); // synchronous event emitter\n    @Output() public filtered = new EventEmitter();\n\n    @Input('igxFilter') public filterOptions: IgxFilterOptions;\n\n    constructor(private element: ElementRef, renderer: Renderer2) {\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        // Detect only changes of input value\n        if (changes.filterOptions &&\n            changes.filterOptions.currentValue &&\n            changes.filterOptions.currentValue.inputValue !== undefined &&\n            changes.filterOptions.previousValue &&\n            changes.filterOptions.currentValue.inputValue !== changes.filterOptions.previousValue.inputValue) {\n            this.filter();\n        }\n    }\n\n    private filter() {\n        if (!this.filterOptions.items) {\n            return;\n        }\n\n        const args = { cancel: false, items: this.filterOptions.items };\n        this.filtering.emit(args);\n\n        if (args.cancel) {\n            return;\n        }\n\n        const pipe = new IgxFilterPipe();\n\n        const filtered = pipe.transform(this.filterOptions.items, this.filterOptions);\n        this.filtered.emit({ filteredItems: filtered });\n    }\n}\n\n@Pipe({\n    name: 'igxFilter',\n    pure: false\n})\n\nexport class IgxFilterPipe implements PipeTransform {\n    public transform(items: any[],\n                     // options - initial settings of filter functionality\n                     options: IgxFilterOptions) {\n\n        let result = [];\n\n        if (!items || !items.length || !options) {\n            return;\n        }\n\n        if (options.items) {\n            items = options.items;\n        }\n\n        result = items.filter((item: any) => {\n            const match = options.matchFn(options.formatter(options.get_value(item, options.key)), options.inputValue);\n\n            if (match) {\n                if (options.metConditionFn) {\n                    options.metConditionFn(item);\n                }\n            } else {\n                if (options.overdueConditionFn) {\n                    options.overdueConditionFn(item);\n                }\n            }\n\n            return match;\n        });\n\n        return result;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxFilterDirective, IgxFilterPipe],\n    exports: [IgxFilterDirective, IgxFilterPipe],\n    imports: [CommonModule]\n})\nexport class IgxFilterModule {\n}\n","import { Directive, ElementRef, Input, NgModule, Optional, Inject, Self } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { EditorProvider } from '../../core/edit-provider';\n\n@Directive({\n    exportAs: 'igxFocus',\n    selector: '[igxFocus]'\n})\nexport class IgxFocusDirective {\n\n    private focusState = true;\n    /**\n     * Returns the state of the igxFocus.\n     * ```typescript\n     * @ViewChild('focusContainer', {read: IgxFocusDirective})\n     * public igxFocus: IgxFocusDirective;\n     * let isFocusOn = this.igxFocus.focused;\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    @Input('igxFocus')\n    get focused(): boolean {\n        return this.focusState;\n    }\n    /**\n     * Sets the state of the igxFocus.\n     * ```html\n     * <igx-input-group >\n     *  <input #focusContainer igxInput [igxFocus]=\"true\"/>\n     * </igx-input-group>\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    set focused(val: boolean) {\n        this.focusState = val;\n        this.trigger();\n    }\n    /**\n     * Gets the native element of the igxFocus.\n     * ```typescript\n     * @ViewChild('focusContainer', {read: IgxFocusDirective})\n     * public igxFocus: IgxFocusDirective;\n     * let igxFocusNativeElement = this.igxFocus.nativeElement;\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    get nativeElement() {\n        if (this.comp && this.comp[0] && this.comp[0].getEditElement) {\n            return (this.comp[0] as EditorProvider).getEditElement();\n        }\n        return this.element.nativeElement;\n    }\n\n    constructor(private element: ElementRef, @Inject(NG_VALUE_ACCESSOR) @Self() @Optional() private comp?: any[]) { }\n    /**\n     * Triggers the igxFocus state.\n     * ```typescript\n     * @ViewChild('focusContainer', {read: IgxFocusDirective})\n     * public igxFocus: IgxFocusDirective;\n     * this.igxFocus.trigger();\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    trigger() {\n        if (this.focusState) {\n            requestAnimationFrame(() => this.nativeElement.focus());\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxFocusDirective],\n    exports: [IgxFocusDirective]\n})\nexport class IgxFocusModule { }\n","import { Directive, HostBinding, Input, NgModule } from '@angular/core';\n\n@Directive({\n    selector: '[igxLayout]'\n})\nexport class IgxLayoutDirective {\n    /**\n     * Sets the default flow direction of the container's children.\n     *\n     * Defaults to `rows`.\n     *\n     * ```html\n     *  <div\n     *   igxLayout\n     *   igxLayoutDir=\"row\">\n     *    <div igxFlex>1</div>\n     *    <div igxFlex>2</div>\n     *    <div igxFlex>3</div>\n     *  </div>\n     * ```\n     */\n    @Input('igxLayoutDir') public dir = 'row';\n\n    /**\n     * Defines the direction flex children are placed in the flex container.\n     *\n     * When set to `true`, the `rows` direction goes right to left and `columns` goes bottom to top.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutReverse=\"true\">\n     *    <div igxFlex>1</div>\n     *    <div igxFlex>2</div>\n     *    <div igxFlex>3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutReverse') public reverse = false;\n\n    /**\n     * By default the immediate children will all try to fit onto one line.\n     *\n     * The default value `nowrap` sets this behavior.\n     *\n     * Other accepted values are `wrap` and `wrap-reverse`.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutDir=\"row\"\n     *   igxLayoutWrap=\"wrap\">\n     *    <div igxFlex igxFlexGrow=\"0\">1</div>\n     *    <div igxFlex igxFlexGrow=\"0\">2</div>\n     *    <div igxFlex igxFlexGrow=\"0\">3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutWrap') public wrap = 'nowrap';\n\n    /**\n     * Defines the alignment along the main axis.\n     *\n     * Defaults to `flex-start` which packs the children toward the start line.\n     *\n     * Other possible values are `flex-end`, `center`, `space-between`, `space-around`.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutDir=\"column\"\n     *   igxLayoutJustify=\"space-between\">\n     *    <div>1</div>\n     *    <div>2</div>\n     *    <div>3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutJustify') public justify = 'flex-start';\n\n    /**\n     * Defines the default behavior for how children are laid out along the corss axis of the current line.\n     *\n     * Defaults to `flex-start`.\n     *\n     * Other possible values are `flex-end`, `center`, `baseline`, and `stretch`.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutDir=\"column\"\n     *   igxLayoutItemAlign=\"start\">\n     *    <div igxFlex igxFlexGrow=\"0\">1</div>\n     *    <div igxFlex igxFlexGrow=\"0\">2</div>\n     *    <div igxFlex igxFlexGrow=\"0\">3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutItemAlign') public itemAlign = 'stretch';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.display') public display = 'flex';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flex-wrap') get flexwrap() { return this.wrap; }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.justify-content') get justifycontent() { return this.justify; }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.align-items') get align() { return this.itemAlign; }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flex-direction')\n    get direction() {\n        if (this.reverse) {\n            return (this.dir === 'row') ? 'row-reverse' : 'column-reverse';\n        }\n        return (this.dir === 'row') ? 'row' : 'column';\n    }\n}\n\n@Directive({\n    selector: '[igxFlex]'\n})\nexport class IgxFlexDirective {\n\n    /**\n     * Applies the `grow` attribute to an element that uses the directive.\n     *\n     * Default value is `1`.\n     *\n     * ```html\n     * <div>\n     *    <div igxFlex igxFlexGrow=\"0\">Content1</div>\n     *    <div igxFlex igxFlexGrow=\"1\">Content2</div>\n     *    <div igxFlex igxFlexGrow=\"0\">Content3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxFlexGrow') public grow = 1;\n\n    /**\n     * Applies the `shrink` attribute to an element that uses the directive.\n     *\n     * Default value is `1`.\n     *\n     * ```html\n     * <div>\n     *    <div igxFlex igxFlexShrink=\"1\">Content1</div>\n     *    <div igxFlex igxFlexShrink=\"0\">Content2</div>\n     *    <div igxFlex igxFlexShrink=\"1\">Content3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxFlexShrink') public shrink = 1;\n\n    /**\n     * Applies the directive to an element.\n     *\n     * Possible values include `igxFlexGrow`, `igxFlexShrink`, `igxFlexOrder`, `igxFlexBasis`.\n     *\n     * ```html\n     * <div igxFlex>Content</div>\n     * ```\n     */\n    @Input('igxFlex') public flex = '';\n\n    /**\n     * Applies the `order` attribute to an element that uses the directive.\n     *\n     * Default value is `0`.\n     *\n     * ```html\n     * <div>\n     *    <div igxFlex igxFlexOrder=\"1\">Content1</div>\n     *    <div igxFlex igxFlexOrder=\"0\">Content2</div>\n     *    <div igxFlex igxFlexOrder=\"2\">Content3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxFlexOrder') public order = 0;\n\n    /**\n     * Applies the `flex-basis` attribute to an element that uses the directive.\n     *\n     * Default value is `auto`.\n     *\n     * Other possible values include `content`, `max-content`, `min-content`, `fit-content`.\n     *\n     * ```html\n     * <div igxFlex igxFlexBasis=\"fit-content\">Content</div>\n     * ```\n     */\n    @Input('igxFlexBasis') public basis = 'auto';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flex')\n    get style() {\n        if (this.flex) {\n            return `${this.flex}`;\n        }\n        return `${this.grow} ${this.shrink} ${this.basis}`;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.order')\n    get itemorder() {\n        return this.order || 0;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxFlexDirective, IgxLayoutDirective],\n    exports: [IgxFlexDirective, IgxLayoutDirective]\n})\nexport class IgxLayoutModule { }\n","/**\n * @hidden\n */\nexport const MASK_FLAGS = [ 'C', '&', 'a', 'A', '?', 'L', '9', '0', '#' ];\n\n/**\n * @hidden\n */\nexport const KEYS = {\n    Ctrl : 17,\n    Z : 90,\n    Y : 89,\n    X : 88,\n    BACKSPACE : 8,\n    DELETE : 46\n  };\n\n\n/**\n * @hidden\n */\nexport class MaskHelper {\n    private _cursor;\n    public get cursor() {\n        return this._cursor;\n    }\n    public data: boolean;\n\n    public parseValueByMask(value, maskOptions, cursor): string {\n        let inputValue: string = value;\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n\n        if (inputValue.length < mask.length) { // BACKSPACE, DELETE\n            if (inputValue === '' && cursor === -1) {\n                this._cursor = 0;\n                return this.parseValueByMaskOnInit(value, maskOptions);\n            } // workaround for IE 'x' button\n\n            if (nonLiteralIndeces.indexOf(cursor + 1) !== -1) {\n                inputValue = this.insertCharAt(inputValue, cursor + 1, maskOptions.promptChar);\n                this._cursor = cursor + 1;\n            } else {\n                inputValue = this.insertCharAt(inputValue, cursor + 1, mask[cursor + 1]);\n                this._cursor = cursor + 1;\n                for (let i = this._cursor; i < 0; i--) {\n                    if (literalKeys.indexOf(this._cursor) !== -1) {\n                        this._cursor--;\n                    } else {\n                        break;\n                    }\n                }\n            }\n        } else {\n            const char = inputValue[cursor];\n            let isCharValid = this.validateCharOnPostion(char, cursor, mask);\n            if (nonLiteralIndeces.indexOf(cursor) !== -1) {\n                inputValue = this.replaceCharAt(inputValue, cursor, '');\n                if (isCharValid) {\n                    inputValue = this.replaceCharAt(inputValue, cursor, char);\n                    this._cursor = cursor + 1;\n                } else {\n                    this._cursor = cursor;\n                }\n            } else {\n                inputValue = this.replaceCharAt(inputValue, cursor, '');\n                this._cursor = ++cursor;\n                for (let i = cursor; i < mask.length; i++) {\n                    if (literalKeys.indexOf(this._cursor) !== -1) {\n                        this._cursor = ++cursor;\n                    } else {\n                        isCharValid = this.validateCharOnPostion(char, cursor, mask);\n                        if (isCharValid) {\n                            inputValue = this.replaceCharAt(inputValue, cursor, char);\n                            this._cursor = ++cursor;\n                            break;\n                        } else {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return inputValue;\n    }\n\n    public parseMask(maskOptions): string {\n        let outputVal = '';\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n\n        for (const maskSym of mask) {\n            outputVal += maskOptions.promptChar;\n        }\n\n        literals.forEach((val: string, key: number) => {\n            outputVal = this.replaceCharAt(outputVal, key, val);\n        });\n\n        return outputVal;\n    }\n\n    public parseValueByMaskOnInit(inputVal, maskOptions): string {\n        let outputVal = '';\n        let value = '';\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n        const literalValues: string[] = Array.from(literals.values());\n\n        if (inputVal != null) {\n            value = inputVal.toString();\n        }\n\n        for (const maskSym of mask) {\n            outputVal += maskOptions.promptChar;\n        }\n\n        literals.forEach((val: string, key: number) => {\n            outputVal = this.replaceCharAt(outputVal, key, val);\n        });\n\n        if (!value) {\n            return outputVal;\n        }\n\n        const nonLiteralValues: string[] = this.getNonLiteralValues(value, literalValues);\n\n        for (let i = 0; i < nonLiteralValues.length; i++) {\n            const char = nonLiteralValues[i];\n            const isCharValid = this.validateCharOnPostion(char, nonLiteralIndeces[i], mask);\n\n            if (!isCharValid && char !== maskOptions.promptChar) {\n                nonLiteralValues[i] = maskOptions.promptChar;\n            }\n        }\n\n        if (nonLiteralValues.length > nonLiteralIndeces.length) {\n            nonLiteralValues.splice(nonLiteralIndeces.length);\n        }\n\n        let pos = 0;\n        for (const nonLiteralValue of nonLiteralValues) {\n            const char = nonLiteralValue;\n            outputVal = this.replaceCharAt(outputVal, nonLiteralIndeces[pos++], char);\n        }\n\n        return outputVal;\n    }\n\n    public restoreValueFromMask(value, maskOptions): string {\n        let outputVal = '';\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalValues: string[] = Array.from(literals.values());\n\n        for (const val of value) {\n            if (literalValues.indexOf(val) === -1) {\n                if (val !== maskOptions.promptChar) {\n                    outputVal += val;\n                }\n            }\n        }\n\n        return outputVal;\n    }\n\n    public parseValueByMaskUponSelection(value, maskOptions, cursor, selection): string {\n        let isCharValid: boolean;\n        let inputValue: string = value;\n        const char: string = inputValue[cursor];\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n\n        if (!this.data) {\n            this._cursor = cursor < 0 ? ++cursor : cursor;\n            if (nonLiteralIndeces.indexOf(this._cursor) !== -1) {\n                isCharValid = this.validateCharOnPostion(char, this._cursor, mask);\n                inputValue = isCharValid ? this.replaceCharAt(inputValue, this._cursor++, char) :\n                    inputValue = this.replaceCharAt(inputValue, this._cursor++, maskOptions.promptChar);\n                selection--;\n                if (selection > 0) {\n                    for (let i = 0; i < selection; i++) {\n                        cursor++;\n                        inputValue = nonLiteralIndeces.indexOf(cursor) !== -1 ?\n                            this.insertCharAt(inputValue, cursor, maskOptions.promptChar) :\n                            this.insertCharAt(inputValue, cursor, mask[cursor]);\n                    }\n                }\n            } else {\n                inputValue = this.replaceCharAt(inputValue, this._cursor, mask[this._cursor]);\n                this._cursor++;\n                selection--;\n                let isMarked = false;\n                if (selection > 0) {\n                    cursor = this._cursor;\n                    for (let i = 0; i < selection; i++) {\n                        if (nonLiteralIndeces.indexOf(cursor) !== -1) {\n                            isCharValid = this.validateCharOnPostion(char, cursor, mask);\n                            if (isCharValid && !isMarked) {\n                                inputValue = this.insertCharAt(inputValue, cursor, char);\n                                cursor++;\n                                this._cursor++;\n                                isMarked = true;\n                            } else {\n                                inputValue = this.insertCharAt(inputValue, cursor, maskOptions.promptChar);\n                                cursor++;\n                            }\n                        } else {\n                            inputValue = this.insertCharAt(inputValue, cursor, mask[cursor]);\n                            if (cursor === this._cursor) {\n                                this._cursor++;\n                            }\n                            cursor++;\n                        }\n                    }\n                }\n            }\n        } else {\n            if (inputValue === '' && cursor === -1) {\n                this._cursor = 0;\n                return this.parseValueByMaskOnInit(value, maskOptions);\n            } // workaround for IE 'x' button\n\n            if (this._cursor < 0) {\n                this._cursor++;\n                cursor++;\n            }\n            cursor++;\n            this._cursor = cursor;\n            for (let i = 0; i < selection; i++) {\n                if (nonLiteralIndeces.indexOf(cursor) !== -1) {\n                    inputValue = this.insertCharAt(inputValue, cursor, maskOptions.promptChar);\n                    cursor++;\n                } else {\n                    inputValue = this.insertCharAt(inputValue, cursor, mask[cursor]);\n                    cursor++;\n                }\n            }\n        }\n\n        return inputValue;\n    }\n\n    public parseValueByMaskUponCopyPaste(value, maskOptions, cursor, clipboardData, selection): string {\n        let inputValue: string = value;\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n\n        const selectionEnd = cursor + selection;\n\n        this._cursor = cursor;\n        for (const clipboardSym of clipboardData) {\n            const char = clipboardSym;\n\n            if (this._cursor > mask.length) {\n                return inputValue;\n            }\n\n            if (nonLiteralIndeces.indexOf(this._cursor) !== -1) {\n                const isCharValid = this.validateCharOnPostion(char, this._cursor, mask);\n                if (isCharValid) {\n                    inputValue = this.replaceCharAt(inputValue, this._cursor++, char);\n                }\n            } else {\n                for (let i = cursor; i < mask.length; i++) {\n                    if (literalKeys.indexOf(this._cursor) !== -1) {\n                        this._cursor++;\n                    } else {\n                        const isCharValid = this.validateCharOnPostion(char, this._cursor, mask);\n                        if (isCharValid) {\n                            inputValue = this.replaceCharAt(inputValue, this._cursor++, char);\n                        }\n                        break;\n                    }\n                }\n            }\n\n            selection--;\n        }\n\n        if (selection > 0) {\n            for (let i = this._cursor; i < selectionEnd; i++) {\n                if (literalKeys.indexOf(this._cursor) !== -1) {\n                    this._cursor++;\n                } else {\n                    inputValue = this.replaceCharAt(inputValue, this._cursor++, maskOptions.promptChar);\n                }\n            }\n        }\n\n        return inputValue;\n    }\n\n    private validateCharOnPostion(inputChar: string, position: number, mask: string): boolean {\n        let regex: RegExp;\n        let isValid: boolean;\n        const letterOrDigitRegEx = '[\\\\d\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z]';\n        const letterDigitOrSpaceRegEx = '[\\\\d\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z\\\\u0020]';\n        const letterRegEx = '[\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z]';\n        const letteSpaceRegEx = '[\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z\\\\u0020]';\n        const digitRegEx = '[\\\\d]';\n        const digitSpaceRegEx = '[\\\\d\\\\u0020]';\n        const digitSpecialRegEx = '[\\\\d-\\\\+]';\n\n        switch (mask.charAt(position)) {\n            case 'C':\n                isValid = inputChar !== '';\n                break;\n            case '&':\n                regex = new RegExp('[\\\\u0020]');\n                isValid = !regex.test(inputChar);\n                break;\n            case 'a':\n                regex = new RegExp(letterDigitOrSpaceRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case 'A':\n                regex = new RegExp(letterOrDigitRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '?':\n                regex = new RegExp(letteSpaceRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case 'L':\n                regex = new RegExp(letterRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '0':\n                regex = new RegExp(digitRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '9':\n                regex = new RegExp(digitSpaceRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '#':\n                regex = new RegExp(digitSpecialRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            default: {\n                isValid = null;\n            }\n        }\n\n        return isValid;\n    }\n    private replaceCharAt(strValue: string, index: number, char: string): string {\n        if (strValue !== undefined) {\n            return strValue.substring(0, index) + char + strValue.substring(index + 1);\n        }\n    }\n    private insertCharAt(strValue: string, index: number, char: string): string {\n        if (strValue !== undefined) {\n            return strValue.substring(0, index) + char + strValue.substring(index);\n        }\n    }\n    private getMaskLiterals(mask: string): Map<number, string> {\n        const literals = new Map<number, string>();\n\n        for (let i = 0; i < mask.length; i++) {\n            const char = mask.charAt(i);\n            if (MASK_FLAGS.indexOf(char) === -1) {\n                literals.set(i, char);\n            }\n        }\n\n        return literals;\n    }\n    private getNonLiteralIndeces(mask: string, literalKeys: number[]): number[] {\n        const nonLiteralsIndeces: number[] = new Array();\n\n        for (let i = 0; i < mask.length; i++) {\n            if (literalKeys.indexOf(i) === -1) {\n                nonLiteralsIndeces.push(i);\n            }\n        }\n\n        return nonLiteralsIndeces;\n    }\n    private getNonLiteralValues(value: string, literalValues: string[]): string[] {\n        const nonLiteralValues: string[] = new Array();\n\n        for (const val of value) {\n            if (literalValues.indexOf(val) === -1) {\n                nonLiteralValues.push(val);\n            }\n        }\n\n        return nonLiteralValues;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostListener,\n    Input,\n    NgModule,\n    OnInit,\n    Output,\n    PipeTransform\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { KEYS, MaskHelper } from './mask-helper';\nimport { isIE, IBaseEventArgs } from '../../core/utils';\n\nconst noop = () => { };\n\n@Directive({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxMaskDirective, multi: true }],\n    selector: '[igxMask]'\n})\nexport class IgxMaskDirective implements OnInit, ControlValueAccessor {\n    /**\n     * Sets the input mask.\n     * ```html\n     * <input [igxMask] = \"'00/00/0000'\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input('igxMask')\n    public mask: string;\n\n    /**\n     * Sets the character representing a fillable spot in the input mask.\n     * Default value is \"'_'\".\n     * ```html\n     * <input [promptChar] = \"'/'\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public promptChar: string;\n\n    /**\n     * Specifies if the bound value includes the formatting symbols.\n     * ```html\n     * <input [includeLiterals] = \"true\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public includeLiterals: boolean;\n\n    /**\n     * Specifies a placeholder.\n     * ```html\n     * <input placeholder = \"enter text...\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public set placeholder(val: string) {\n        this._placeholder = val;\n        this.nativeElement.setAttribute('placeholder', this._placeholder);\n    }\n\n    public get placeholder(): string {\n        return this._placeholder;\n    }\n\n    /**\n     * Specifies a pipe to be used on blur.\n     * ```html\n     * <input [displayValuePipe] = \"displayFormatPipe\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public displayValuePipe: PipeTransform;\n\n    /**\n     * Specifies a pipe to be used on focus.\n     * ```html\n     * <input [focusedValuePipe] = \"inputFormatPipe\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public focusedValuePipe: PipeTransform;\n\n    /**\n     *@hidden\n     */\n    @Input()\n    private dataValue: string;\n\n    /**\n     * Emits an event each time the value changes.\n     * Provides `rawValue: string` and `formattedValue: string` as event arguments.\n     * ```html\n     * <input (onValueChange) = \"onValueChange(rawValue: string, formattedValue: string)\">\n     * ```\n     */\n    @Output()\n    public onValueChange = new EventEmitter<IMaskEventArgs>();\n\n    /**\n     *@hidden\n     */\n    private get value() {\n        return this.nativeElement.value;\n    }\n\n    /**\n     *@hidden\n     */\n    private set value(val) {\n        this.nativeElement.value = val;\n    }\n\n    /**\n     *@hidden\n     */\n    private get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     *@hidden\n     */\n    private get selectionStart() {\n        return this.nativeElement.selectionStart;\n    }\n\n    /**\n     *@hidden\n     */\n    private get selectionEnd() {\n        return this.nativeElement.selectionEnd;\n    }\n\n    /**\n     *@hidden\n     */\n    private _ctrlDown: boolean;\n\n    /**\n     *@hidden\n     */\n    private _paste: boolean;\n\n    /**\n     *@hidden\n     */\n    private _selection: number;\n\n    /**\n     *@hidden\n     */\n    private _placeholder: string;\n\n    /**\n     *@hidden\n     */\n    private _maskOptions = {\n        format: '',\n        promptChar: ''\n    };\n\n    /**\n     *@hidden\n     */\n    private _key;\n\n    /**\n     *@hidden\n     */\n    private _cursorOnPaste;\n\n    /**\n     *@hidden\n     */\n    private _valOnPaste;\n\n    private _stopPropagation: boolean;\n\n    /**\n     *@hidden\n     */\n    private maskHelper: MaskHelper;\n\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = noop;\n\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n\n    constructor(private elementRef: ElementRef) {\n        this.maskHelper = new MaskHelper();\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnInit(): void {\n        if (this.promptChar && this.promptChar.length > 1) {\n            this._maskOptions.promptChar = this.promptChar = this.promptChar.substring(0, 1);\n        }\n\n        this._maskOptions.format = this.mask ? this.mask : 'CCCCCCCCCC';\n        this._maskOptions.promptChar = this.promptChar ? this.promptChar : '_';\n        this.nativeElement.setAttribute('placeholder', this.placeholder ? this.placeholder : this._maskOptions.format);\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('keydown', ['$event'])\n    public onKeydown(event): void {\n        const key = event.keyCode || event.charCode;\n\n        if (isIE() && this._stopPropagation) {\n            this._stopPropagation = false;\n        }\n\n        if (key === KEYS.Ctrl) {\n            this._ctrlDown = true;\n        }\n\n        if ((this._ctrlDown && key === KEYS.Z) || (this._ctrlDown && key === KEYS.Y)) {\n            event.preventDefault();\n        }\n\n        this._key = key;\n        this._selection = Math.abs(this.selectionEnd - this.selectionStart);\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('keyup', ['$event'])\n    public onKeyup(event): void {\n        const key = event.keyCode || event.charCode;\n\n        if (key === KEYS.Ctrl) {\n            this._ctrlDown = false;\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('paste', ['$event'])\n    public onPaste(event): void {\n        this._paste = true;\n\n        this._valOnPaste = this.value;\n        this._cursorOnPaste = this.getCursorPosition();\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('input', ['$event'])\n    public onInputChanged(event): void {\n        if (isIE() && this._stopPropagation) {\n            this._stopPropagation = false;\n            return;\n        }\n\n        if (this._paste) {\n            this._paste = false;\n\n            const clipboardData = this.value.substring(this._cursorOnPaste, this.getCursorPosition());\n            this.value = this.maskHelper.parseValueByMaskUponCopyPaste(\n                this._valOnPaste, this._maskOptions, this._cursorOnPaste, clipboardData, this._selection);\n\n            this.setCursorPosition(this.maskHelper.cursor);\n        } else {\n            const currentCursorPos = this.getCursorPosition();\n\n            this.maskHelper.data = (this._key === KEYS.BACKSPACE) || (this._key === KEYS.DELETE);\n\n            this.value = this._selection && this._selection !== 0 ?\n                this.maskHelper.parseValueByMaskUponSelection(this.value, this._maskOptions, currentCursorPos - 1, this._selection) :\n                this.maskHelper.parseValueByMask(this.value, this._maskOptions, currentCursorPos - 1);\n\n            this.setCursorPosition(this.maskHelper.cursor);\n        }\n\n        const rawVal = this.maskHelper.restoreValueFromMask(this.value, this._maskOptions);\n\n        this.dataValue = this.includeLiterals ? this.value : rawVal;\n        this._onChangeCallback(this.dataValue);\n\n        this.onValueChange.emit({ rawValue: rawVal, formattedValue: this.value });\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('focus', ['$event.target.value'])\n    public onFocus(value) {\n        if (this.focusedValuePipe) {\n            if (isIE()) {\n                this._stopPropagation = true;\n            }\n            this.value = this.focusedValuePipe.transform(value);\n        } else {\n            this.value = this.maskHelper.parseValueByMaskOnInit(this.value, this._maskOptions);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('blur', ['$event.target.value'])\n    public onBlur(value) {\n        if (this.displayValuePipe) {\n            this.value = this.displayValuePipe.transform(value);\n        } else if (value === this.maskHelper.parseMask(this._maskOptions)) {\n            this.value = '';\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private getCursorPosition(): number {\n        return this.nativeElement.selectionStart;\n    }\n\n    /**\n     *@hidden\n     */\n    private setCursorPosition(start: number, end: number = start): void {\n        this.nativeElement.setSelectionRange(start, end);\n    }\n\n    /**\n     *@hidden\n     */\n    public writeValue(value) {\n        if (this.promptChar && this.promptChar.length > 1) {\n            this._maskOptions.promptChar = this.promptChar.substring(0, 1);\n        }\n\n        this.value = value ? this.maskHelper.parseValueByMaskOnInit(value, this._maskOptions) : '';\n        if (this.displayValuePipe) {\n            this.value = this.displayValuePipe.transform(this.value);\n        }\n\n        this.dataValue = this.includeLiterals ? this.value : value;\n        this._onChangeCallback(this.dataValue);\n\n        this.onValueChange.emit({ rawValue: value, formattedValue: this.value });\n    }\n\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n}\n\n/**\n * The IgxMaskModule provides the {@link IgxMaskDirective} inside your application.\n */\nexport interface IMaskEventArgs extends IBaseEventArgs {\n    rawValue: string;\n    formattedValue: string;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxMaskDirective],\n    exports: [IgxMaskDirective],\n    imports: [CommonModule]\n})\nexport class IgxMaskModule { }\n","import {\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    Output,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { isIE, IBaseEventArgs } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport interface IChangeRadioEventArgs extends IBaseEventArgs {\n    value: any;\n    radio: IgxRadioComponent;\n}\n\nexport enum RadioLabelPosition {\n    BEFORE = 'before',\n    AFTER = 'after'\n}\n\nlet nextId = 0;\nconst noop = () => { };\n/**\n * **Ignite UI for Angular Radio Button** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/radio_button.html)\n *\n * The Ignite UI Radio Button allows the user to select a single option from an available set of options that are listed side by side.\n *\n * Example:\n * ```html\n * <igx-radio>\n *   Simple radio button\n * </igx-radio>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxRadioComponent, multi: true }],\n    selector: 'igx-radio',\n    templateUrl: 'radio.component.html'\n})\n\nexport class IgxRadioComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     * Returns reference to native radio element.\n     * ```typescript\n     * let radioElement =  this.radio.nativeRadio;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('radio', { static: true }) public nativeRadio: ElementRef;\n    /**\n     * Returns reference to native label element.\n     * ```typescript\n     * let labelElement =  this.radio.nativeLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('nativeLabel', { static: true }) public nativeLabel;\n    /**\n     * Returns reference to the label placeholder element.\n     * ```typescript\n     * let labelPlaceholder =  this.radio.placeholderLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('placeholderLabel', { static: true }) public placeholderLabel;\n\n    /**\n     * Sets/gets the `id` of the radio component.\n     * If not set, the `id` of the first radio component will be `\"igx-radio-0\"`.\n     * ```html\n     * <igx-radio id = \"my-first-radio\"></igx-radio>\n     * ```\n     * ```typescript\n     * let radioId =  this.radio.id;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-radio-${nextId++}`;\n    /**\n     * Sets/gets the id of the `label` element in the radio component.\n     * If not set, the id of the `label` in the first radio component will be `\"igx-radio-0-label\"`.\n     * ```html\n     * <igx-radio labelId = \"Label1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let labelId =  this.radio.labelId;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public labelId = `${this.id}-label`;\n    /**\n     * Sets/gets the position of the `label` in the radio component.\n     * If not set, `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-radio labelPosition = \"before\"></igx-radio>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.radio.labelPosition;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public labelPosition: RadioLabelPosition | string = 'after';\n    /**\n     * Sets/gets the `value` attribute.\n     * ```html\n     * <igx-radio [value] = \"'radioButtonValue'\"></igx-radio>\n     * ```\n     * ```typescript\n     * let value =  this.radio.value;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public value: any;\n    /**\n     * Sets/gets the `name` attribute of the radio component.\n     * ```html\n     * <igx-radio name = \"Radio1\"></igx-radio>\n     *  ```\n     * ```typescript\n     * let name =  this.radio.name;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public name: string;\n    /**\n     * Sets the value of the `tabindex` attribute.\n     * ```html\n     * <igx-radio [tabindex] = \"1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let tabIndex =  this.radio.tabindex;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public tabindex: number = null;\n    /**\n     * Enables/disables the ripple effect on the radio button..\n     * If not set, the `disableRipple` will have value `false`.\n     * ```html\n     * <igx-radio [disableRipple] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isDisabledRipple =  this.radio.disableRipple;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public disableRipple = false;\n    /**\n     * Sets/gets whether the radio button is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-radio [required] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isRequired =  this.radio.required;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public required = false;\n    /**\n     * Sets/gets the `aria-labelledby` attribute of the radio component.\n     * If not set, the `aria-labelledby` will be equal to the value of `labelId` attribute.\n     * ```html\n     * <igx-radio aria-labelledby = \"Radio1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let ariaLabelledBy = this.radio.ariaLabelledBy;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input('aria-labelledby')\n    public ariaLabelledBy = this.labelId;\n    /**\n     * Sets/gets the `aria-label` attribute of the radio component.\n     * ```html\n     * <igx-radio aria-label = \"Radio1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let ariaLabel =  this.radio.ariaLabel;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input('aria-label')\n    public ariaLabel: string | null = null;\n    /**\n     * An event that is emitted after the radio `value` is changed.\n     * Provides references to the `IgxRadioComponent` and the `value` property as event arguments.\n     * @memberof IgxRadioComponent\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeRadioEventArgs> = new EventEmitter<IChangeRadioEventArgs>();\n    /**\n     * Returns the class of the radio component.\n     * ```typescript\n     * let radioClass = this.radio.cssClass;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio')\n    public cssClass = 'igx-radio';\n    /**\n     * Sets/gets  the `checked` attribute.\n     * Default value is `false`.\n     * ```html\n     * <igx-radio [checked] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isChecked =  this.radio.checked;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio--checked')\n    @Input() public checked = false;\n    /**\n     * Sets/gets  the `disabled` attribute.\n     * Default value is `false`.\n     * ```html\n     * <igx-radio [disabled] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isDisabled =  this.radio.disabled;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio--disabled')\n    @Input() public disabled = false;\n    /**\n     * Sets/gets whether the radio component is on focus.\n     * Default value is `false`.\n     * ```typescript\n     * this.radio.focus = true;\n     * ```\n     * ```typescript\n     * let isFocused =  this.radio.focused;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio--focused')\n    public focused = false;\n    /**\n     *@hidden\n     */\n    public inputId = `${this.id}-input`;\n    /**\n     *@hidden\n     */\n    protected _value: any = null;\n\n    constructor() { }\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     *@hidden\n     */\n    public _onRadioChange(event) {\n        event.stopPropagation();\n    }\n    /**\n     *@hidden\n     */\n    public _onRadioClick(event) {\n        event.stopPropagation();\n        this.select();\n\n        if (isIE()) {\n            this.nativeRadio.nativeElement.blur();\n        }\n    }\n    /**\n     *@hidden\n     */\n    public _onLabelClick() {\n        this.select();\n    }\n    /**\n     * Selects the current radio button.\n     * ```typescript\n     * this.radio.select();\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    public select() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.checked = true;\n        this.focused = false;\n        this.change.emit({ value: this.value, radio: this });\n        this._onChangeCallback(this.value);\n    }\n    /**\n     * Checks whether the provided value is consistent to the current radio button.\n     * If it is, the checked attribute will have value `true`;\n     * ```typescript\n     * this.radio.writeValue('radioButtonValue');\n     * ```\n     */\n    public writeValue(value: any) {\n        this._value = value;\n        this.checked = (this._value === this.value);\n    }\n    /** @hidden */\n    getEditElement() {\n        return this.nativeRadio.nativeElement;\n    }\n    /**\n     *@hidden\n     */\n    public get labelClass(): string {\n        switch (this.labelPosition) {\n            case RadioLabelPosition.BEFORE:\n                return `${this.cssClass}__label--before`;\n            case RadioLabelPosition.AFTER:\n            default:\n                return `${this.cssClass}__label`;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public onFocus() {\n        this.focused = true;\n    }\n    /**\n     *@hidden\n     */\n    public onBlur() {\n        this.focused = false;\n        this._onTouchedCallback();\n    }\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n}\n","import { Directive, ElementRef, HostListener, Input, NgModule, NgZone, Renderer2 } from '@angular/core';\nimport { AnimationBuilder, style, animate } from '@angular/animations';\n\n@Directive({\n    selector: '[igxRipple]'\n})\nexport class IgxRippleDirective {\n    /**\n     * Sets/gets the ripple target.\n     * ```html\n     * <div  #rippleContainer class=\"div-1\" igxRipple [igxRippleTarget] = \"'.div-1'\"></div>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let rippleTarget = this.ripple.rippleTarget;\n     * ```\n     * Can set the ripple to activate on a child element inside the parent where igxRipple is defined.\n     * ```html\n     * <div #rippleContainer [igxRippleTarget] = \"'#child\"'>\n     *  <button id=\"child\">Click</button>\n     * </div>\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleTarget')\n    public rippleTarget = '';\n    /**\n     * Sets/gets the ripple color.\n     * ```html\n     * <button #rippleContainer [igxRipple] = \"'red'\" ></button>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let rippleColor = this.ripple.rippleColor;\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRipple')\n    public rippleColor: string;\n    /**\n     * Sets/gets the ripple duration(in milliseconds).\n     * Default value is `600`.\n     * ```html\n     * <button #rippleContainer igxRipple [igxRippleDuration] = \"800\"></button>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let rippleDuration = this.ripple.rippleDuration;\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleDuration')\n    public rippleDuration = 600;\n    /**\n     * Enables/disables the ripple to be centered.\n     * ```html\n     * <button #rippleContainer igxRipple [igxRippleCentered] = \"true\"></button>\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleCentered') set centered(value: boolean) {\n        this._centered = value || this.centered;\n    }\n    /**\n     * Sets/gets whether the ripple is disabled.\n     * Default value is `false`.\n     * ```html\n     * <button #rippleContainer igxRipple [igxRippleDisabled] = \"true\"></button>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let isRippleDisabled = this.ripple.rippleDisabled;\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleDisabled')\n    public rippleDisabled = false;\n\n    protected get nativeElement(): HTMLElement {\n        return this.elementRef.nativeElement;\n    }\n\n    private rippleElementClass = 'igx-ripple__inner';\n    private rippleHostClass = 'igx-ripple';\n    private _centered = false;\n    private animationQueue = [];\n\n    constructor(\n        protected builder: AnimationBuilder,\n        protected elementRef: ElementRef,\n        protected renderer: Renderer2,\n        private zone: NgZone) { }\n    /**\n     *@hidden\n     */\n    @HostListener('mousedown', ['$event'])\n    public onMouseDown(event) {\n        this.zone.runOutsideAngular(() => this._ripple(event));\n    }\n\n    private setStyles(rippleElement: HTMLElement, styleParams: any) {\n        this.renderer.addClass(rippleElement, this.rippleElementClass);\n        this.renderer.setStyle(rippleElement, 'width', `${styleParams.radius}px`);\n        this.renderer.setStyle(rippleElement, 'height', `${styleParams.radius}px`);\n        this.renderer.setStyle(rippleElement, 'top', `${styleParams.top}px`);\n        this.renderer.setStyle(rippleElement, 'left', `${styleParams.left}px`);\n        if (this.rippleColor) {\n            this.renderer.setStyle(rippleElement, 'background', this.rippleColor);\n        }\n    }\n\n    private _ripple(event) {\n        if (this.rippleDisabled) {\n            return;\n        }\n\n        const target = (this.rippleTarget ? this.nativeElement.querySelector(this.rippleTarget) || this.nativeElement : this.nativeElement);\n\n        const rectBounds = target.getBoundingClientRect();\n        const radius = Math.max(rectBounds.width, rectBounds.height);\n        let left = event.clientX - rectBounds.left - radius / 2;\n        let top = event.clientY - rectBounds.top - radius / 2;\n\n        if (this._centered) {\n            left = top = 0;\n        }\n\n        const dimensions = {\n            radius,\n            top,\n            left\n        };\n\n        const rippleElement = this.renderer.createElement('span');\n\n        this.setStyles(rippleElement, dimensions);\n        this.renderer.addClass(target, this.rippleHostClass);\n        this.renderer.appendChild(target, rippleElement);\n\n        const animation = this.builder.build([\n            style({ opacity: 0.5, transform: 'scale(.3)' }),\n            animate(this.rippleDuration, style({ opacity: 0, transform: 'scale(2)' }))\n        ]).create(rippleElement);\n\n        this.animationQueue.push(animation);\n\n        animation.onDone(() => {\n            this.animationQueue.splice(this.animationQueue.indexOf(animation), 1);\n            target.removeChild(rippleElement);\n            if (this.animationQueue.length < 1) {\n                this.renderer.removeClass(target, this.rippleHostClass);\n            }\n        });\n\n        animation.play();\n\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxRippleDirective],\n    exports: [IgxRippleDirective]\n})\nexport class IgxRippleModule { }\n","import {\n    Directive,\n    NgModule,\n    Input,\n    QueryList,\n    Output,\n    EventEmitter,\n    AfterContentInit,\n    ContentChildren,\n    OnDestroy,\n    HostBinding\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxRadioComponent, RadioLabelPosition, IChangeRadioEventArgs } from '../../radio/radio.component';\nimport { IgxRippleModule } from '../ripple/ripple.directive';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\nconst noop = () => { };\nlet nextId = 0;\n\n/**\n * **Ignite UI for Angular Radio Group** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/radio_button.html)\n *\n * The Ignite UI Radio Group allows the user to select a single option from an available set of options that are listed side by side.\n *\n * Example:\n * ```html\n * <igx-radio-group name=\"radioGroup\">\n *   <igx-radio *ngFor=\"let item of ['Foo', 'Bar', 'Baz']\" value=\"{{item}}\">\n *      {{item}}\n *   </igx-radio>\n * </igx-radio-group>\n * ```\n */\n@Directive({\n    exportAs: 'igxRadioGroup',\n    selector: 'igx-radio-group, [igxRadioGroup]',\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxRadioGroupDirective, multi: true }]\n})\nexport class IgxRadioGroupDirective implements AfterContentInit, ControlValueAccessor, OnDestroy {\n    /**\n     * Returns reference to the child radio buttons.\n     * ```typescript\n     * let radioButtons =  this.radioGroup.radioButtons;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @ContentChildren(IgxRadioComponent, { descendants: true }) public radioButtons: QueryList<IgxRadioComponent>;\n\n    /**\n     * Sets/gets the `value` attribute.\n     * ```html\n     * <igx-radio-group [value] = \"'radioButtonValue'\"></igx-radio-group>\n     * ```\n     * ```typescript\n     * let value =  this.radioGroup.value;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            this._value = newValue;\n            this._selectRadioButton();\n        }\n    }\n\n    /**\n     * Sets/gets the `name` attribute of the radio group component. All child radio buttons inherits this name.\n     * ```html\n     * <igx-radio-group name = \"Radio1\"></igx-radio-group>\n     *  ```\n     * ```typescript\n     * let name =  this.radioGroup.name;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get name(): string { return this._name; }\n    set name(newValue: string) {\n        if (this._name !== newValue) {\n            this._name = newValue;\n            this._setRadioButtonNames();\n        }\n    }\n\n    /**\n     * Sets/gets whether the radio group is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-radio-group [required] = \"true\"></igx-radio-group>\n     * ```\n     * ```typescript\n     * let isRequired =  this.radioGroup.required;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(newValue: boolean) {\n        if (this._required !== newValue) {\n            this._required = newValue;\n            this._setRadioButtonsRequired();\n        }\n    }\n\n    /**\n     * An @Input property that allows you to disable the radio group. By default it's false.\n     * ```html\n     * <igx-radio-group [disabled]=\"true\"></igx-radio-group>\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(newValue: boolean) {\n        if (this._disabled !== newValue) {\n            this._disabled = newValue;\n            this._disableRadioButtons();\n        }\n    }\n\n    /**\n     * Sets/gets the position of the `label` in the child radio buttons.\n     * If not set, `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-radio-group labelPosition = \"before\"></igx-radio-group>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.radioGroup.labelPosition;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get labelPosition(): RadioLabelPosition | string { return this._labelPosition; }\n    set labelPosition(newValue: RadioLabelPosition | string) {\n        if (this._labelPosition !== newValue) {\n            this._labelPosition = newValue === RadioLabelPosition.BEFORE ? RadioLabelPosition.BEFORE : RadioLabelPosition.AFTER;\n            this._setRadioButtonLabelPosition();\n        }\n    }\n\n    /**\n     * Sets/gets the selected child radio button.\n     * ```typescript\n     * let selectedButton = this.radioGroup.selected;\n     * this.radioGroup.selected = selectedButton;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: IgxRadioComponent | null) {\n        if (this._selected !== selected) {\n            this._selected = selected;\n            this.value = selected ? selected.value : null;\n        }\n    }\n\n    /**\n     * An event that is emitted after the radio group `value` is changed.\n     * Provides references to the selected `IgxRadioComponent` and the `value` property as event arguments.\n     * @memberof IgxRadioGroupDirective\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeRadioEventArgs> = new EventEmitter<IChangeRadioEventArgs>();\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-radio-group')\n    public cssClass = 'igx-radio-group';\n\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     *@hidden\n     */\n    private _name = `igx-radio-group-${nextId++}`;\n    /**\n     *@hidden\n     */\n    private _value: any = null;\n    /**\n     *@hidden\n     */\n    private _selected: IgxRadioComponent | null = null;\n    /**\n     *@hidden\n     */\n    private _isInitialized = false;\n    /**\n     *@hidden\n     */\n    private _labelPosition: RadioLabelPosition | string = 'after';\n    /**\n     *@hidden\n     */\n    private _disabled = false;\n    /**\n     *@hidden\n     */\n    private _required = false;\n    /**\n     *@hidden\n     */\n    private destroy$ = new Subject<boolean>();\n\n    ngAfterContentInit() {\n        // The initial value can possibly be set by NgModel and it is possible that\n        // the OnInit of the NgModel occurs after the OnInit of this class.\n        this._isInitialized = true;\n\n        setTimeout(() => { this._initRadioButtons(); });\n    }\n\n    /**\n     * Checks whether the provided value is consistent to the current radio button.\n     * If it is, the checked attribute will have value `true` and selected property will contain the selected `IgxRadioComponent`.\n     * ```typescript\n     * this.radioGroup.writeValue('radioButtonValue');\n     * ```\n     */\n    public writeValue(value: any) {\n        this.value = value;\n    }\n\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.registerOnTouched(fn);\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     *@hidden\n     */\n    private _initRadioButtons() {\n        if (this.radioButtons) {\n            const props = { name: this._name, labelPosition: this._labelPosition, disabled: this._disabled, required: this._required };\n            this.radioButtons.forEach((button) => {\n                Object.assign(button, props);\n\n                if (button.value === this._value) {\n                    button.checked = true;\n                    this._selected = button;\n                }\n\n                button.change.pipe(takeUntil(this.destroy$)).subscribe((ev) => this._selectedRadioButtonChanged(ev));\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _selectedRadioButtonChanged(args: IChangeRadioEventArgs) {\n        if (this._selected !== args.radio) {\n            if (this._selected) {\n                this._selected.checked = false;\n            }\n            this._selected = args.radio;\n        }\n\n        this._value = args.value;\n\n        if (this._isInitialized) {\n            this.change.emit(args);\n            this._onChangeCallback(this.value);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _setRadioButtonNames() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.name = this._name;\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _selectRadioButton() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                if (!this._value) {\n                    // no value - uncheck all radio buttons\n                    if (button.checked) {\n                        button.checked = false;\n                    }\n                } else {\n                    if (this._value === button.value) {\n                        // selected button\n                        if (this._selected !== button) {\n                            this._selected = button;\n                        }\n\n                        if (!button.checked) {\n                            button.select();\n                        }\n                    } else {\n                        // non-selected button\n                        if (button.checked) {\n                            button.checked = false;\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _setRadioButtonLabelPosition() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.labelPosition = this._labelPosition;\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _disableRadioButtons() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.disabled = this._disabled;\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _setRadioButtonsRequired() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.required = this._required;\n            });\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxRadioGroupDirective, IgxRadioComponent],\n    exports: [IgxRadioGroupDirective, IgxRadioComponent],\n    imports: [IgxRippleModule]\n})\nexport class IgxRadioModule { }\n","import {\n    AfterViewInit,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgModule,\n    OnChanges,\n    OnDestroy,\n    Renderer2,\n    SimpleChanges,\n    AfterViewChecked,\n} from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { DeprecateProperty } from '../../core/deprecateDecorators';\n\ninterface ISearchInfo {\n    searchedText: string;\n    content: string;\n    matchCount: number;\n    caseSensitive: boolean;\n    exactMatch: boolean;\n}\n\n/**\n * An interface describing information for the active highlight.\n */\nexport interface IActiveHighlightInfo {\n    /**\n     * The row index of the highlight. This property is deprecated, use `row` instead.\n     */\n    rowIndex?: number;\n    /**\n     * The column index of the highlight. This property is deprecated, use `column` instead.\n     */\n    columnIndex?: number;\n    /**\n     * The page index of the highlight. This property is deprecated.\n     */\n    page?: number;\n    /**\n     * The row of the highlight.\n     */\n    row?: any;\n    /**\n     * The column of the highlight.\n     */\n    column?: any;\n    /**\n     * The index of the highlight.\n     */\n    index: number;\n}\n\n@Directive({\n    selector: '[igxTextHighlight]'\n})\nexport class IgxTextHighlightDirective implements AfterViewInit, AfterViewChecked, OnDestroy, OnChanges {\n    private static onActiveElementChanged = new EventEmitter<string>();\n    public static highlightGroupsMap = new Map<string, IActiveHighlightInfo>();\n\n    private _lastSearchInfo: ISearchInfo;\n    private _div = null;\n    private _observer: MutationObserver = null;\n    private _nodeWasRemoved = false;\n    private _forceEvaluation = false;\n    private _activeElementIndex = -1;\n    private _valueChanged: boolean;\n    private _defaultCssClass = 'igx-highlight';\n    private _defaultActiveCssClass = 'igx-highlight--active';\n\n    /**\n     * Determines the `CSS` class of the highlight elements.\n     * This allows the developer to provide custom `CSS` to customize the highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [cssClass]=\"myClass\">\n     * </div>\n     * ```\n     */\n    @Input('cssClass')\n    public cssClass: string;\n\n    /**\n     * Determines the `CSS` class of the active highlight element.\n     * This allows the developer to provide custom `CSS` to customize the highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [activeCssClass]=\"activeHighlightClass\">\n     * </div>\n     * ```\n     */\n    @Input('activeCssClass')\n    public activeCssClass: string;\n\n    /**\n     * @hidden\n     */\n    @Input('containerClass')\n    public containerClass: string;\n\n    /**\n     * Identifies the highlight within a unique group.\n     * This allows it to have several different highlight groups,\n     * with each of them having their own active highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [groupName]=\"myGroupName\">\n     * </div>\n     * ```\n     */\n    @Input('groupName')\n    public groupName = '';\n\n    private _value = '';\n\n    /**\n     * The underlying value of the element that will be highlighted.\n     *\n     * ```typescript\n     * // get\n     * const elementValue = this.textHighlight.value;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <div\n     *   igxTextHighlight\n     *   [value]=\"newValue\">\n     * </div>\n     * ```\n     */\n    @Input('value')\n    public get value(): any {\n        return this._value;\n    }\n    public set value(value: any) {\n        if (value === undefined || value === null) {\n            this._value = '';\n        } else {\n            this._value = value;\n        }\n    }\n\n    /**\n     * The identifier of the row on which the directive is currently on.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [row]=\"0\">\n     * </div>\n     * ```\n     */\n    @Input('row')\n    public row: any;\n\n    /**\n     * The identifier of the column on which the directive is currently on.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [column]=\"0\">\n     * </div>\n     * ```\n     */\n    @Input('column')\n    public column: any;\n\n    @Input('page')\n    @DeprecateProperty(`IgxTextHighlightDirective 'page' input property is deprecated.`)\n    public page: number;\n\n    /**\n     * @hidden\n     */\n    public get lastSearchInfo(): ISearchInfo {\n        return this._lastSearchInfo;\n    }\n\n    /**\n     * @hidden\n     */\n    public parentElement: any;\n\n    private _container: any;\n\n    private destroy$ = new Subject<boolean>();\n\n    /**\n     * Activates the highlight at a given index.\n     * (if such index exists)\n     */\n    public static setActiveHighlight(groupName: string, highlight: IActiveHighlightInfo) {\n        IgxTextHighlightDirective.highlightGroupsMap.set(groupName, highlight);\n        IgxTextHighlightDirective.onActiveElementChanged.emit(groupName);\n    }\n\n    /**\n     * Clears any existing highlight.\n     */\n    public static clearActiveHighlight(groupName) {\n        IgxTextHighlightDirective.highlightGroupsMap.set(groupName, {\n            index: -1\n        });\n        IgxTextHighlightDirective.onActiveElementChanged.emit(groupName);\n    }\n\n    constructor(private element: ElementRef, public renderer: Renderer2) {\n        IgxTextHighlightDirective.onActiveElementChanged.pipe(takeUntil(this.destroy$)).subscribe((groupName) => {\n            if (this.groupName === groupName) {\n                if (this._activeElementIndex !== -1) {\n                    this.deactivate();\n                }\n                this.activateIfNecessary();\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        this.clearHighlight();\n\n        if (this._observer !== null) {\n            this._observer.disconnect();\n        }\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.value && !changes.value.firstChange) {\n            this._valueChanged = true;\n        } else if ((changes.row !== undefined && !changes.row.firstChange) ||\n            (changes.column !== undefined && !changes.column.firstChange) ||\n            (changes.page !== undefined && !changes.page.firstChange)) {\n            if (this._activeElementIndex !== -1) {\n                this.deactivate();\n            }\n            this.activateIfNecessary();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        this.parentElement = this.renderer.parentNode(this.element.nativeElement);\n\n        if (IgxTextHighlightDirective.highlightGroupsMap.has(this.groupName) === false) {\n            IgxTextHighlightDirective.highlightGroupsMap.set(this.groupName, {\n                index: -1\n            });\n        }\n\n        this._lastSearchInfo = {\n            searchedText: '',\n            content: this.value,\n            matchCount: 0,\n            caseSensitive: false,\n            exactMatch: false\n        };\n\n        this._container = this.parentElement.firstElementChild;\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewChecked() {\n        if (this._valueChanged) {\n            this.highlight(this._lastSearchInfo.searchedText, this._lastSearchInfo.caseSensitive, this._lastSearchInfo.exactMatch);\n            this.activateIfNecessary();\n            this._valueChanged = false;\n        }\n    }\n\n    /**\n     * Clears the existing highlight and highlights the searched text.\n     * Returns how many times the element contains the searched text.\n     */\n    public highlight(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        const caseSensitiveResolved = caseSensitive ? true : false;\n        const exactMatchResolved = exactMatch ? true : false;\n\n        if (this.searchNeedsEvaluation(text, caseSensitiveResolved, exactMatchResolved)) {\n            this._lastSearchInfo.searchedText = text;\n            this._lastSearchInfo.caseSensitive = caseSensitiveResolved;\n            this._lastSearchInfo.exactMatch = exactMatchResolved;\n            this._lastSearchInfo.content = this.value;\n\n            if (text === '' || text === undefined || text === null) {\n                this.clearHighlight();\n            } else {\n                this.clearChildElements(true);\n                this._lastSearchInfo.matchCount = this.getHighlightedText(text, caseSensitive, exactMatch);\n            }\n        } else if (this._nodeWasRemoved) {\n            this._lastSearchInfo.searchedText = text;\n            this._lastSearchInfo.caseSensitive = caseSensitiveResolved;\n            this._lastSearchInfo.exactMatch = exactMatchResolved;\n        }\n\n        return this._lastSearchInfo.matchCount;\n    }\n\n    /**\n     * Clears any existing highlight.\n     */\n    public clearHighlight(): void {\n        this.clearChildElements(false);\n\n        this._lastSearchInfo.searchedText = '';\n        this._lastSearchInfo.matchCount = 0;\n    }\n\n    /**\n     * Activates the highlight if it is on the currently active row, column and page.\n     */\n    public activateIfNecessary(): void {\n        const group = IgxTextHighlightDirective.highlightGroupsMap.get(this.groupName);\n        const column = group.columnIndex === undefined ? group.column : group.columnIndex;\n        const row = group.rowIndex === undefined ? group.row : group.rowIndex;\n\n        if (column === this.column && row === this.row && group.page === this.page) {\n            this.activate(group.index);\n        }\n    }\n\n    /**\n     * Attaches a MutationObserver to the parentElement and watches for when the container element is removed/readded to the DOM.\n     * Should be used only when necessary as using many observers may lead to performance degradation.\n     */\n    public observe(): void {\n        if (this._observer === null) {\n            const callback = (mutationList) => {\n                mutationList.forEach((mutation) => {\n                    const removedNodes = Array.from(mutation.removedNodes);\n                    removedNodes.forEach((n) => {\n                        if (n === this._container) {\n                            this._nodeWasRemoved = true;\n                            this.clearChildElements(false);\n                        }\n                    });\n\n                    const addedNodes = Array.from(mutation.addedNodes);\n                    addedNodes.forEach((n) => {\n                        if (n === this.parentElement.firstElementChild && this._nodeWasRemoved) {\n                            this._container = this.parentElement.firstElementChild;\n                            this._nodeWasRemoved = false;\n\n                            this._forceEvaluation = true;\n                            this.highlight(this._lastSearchInfo.searchedText,\n                                this._lastSearchInfo.caseSensitive,\n                                this._lastSearchInfo.exactMatch);\n                            this._forceEvaluation = false;\n\n                            this.activateIfNecessary();\n                            this._observer.disconnect();\n                            this._observer = null;\n                        }\n                    });\n                });\n            };\n\n            this._observer = new MutationObserver(callback);\n            this._observer.observe(this.parentElement, {childList: true});\n        }\n    }\n\n    private activate(index: number) {\n        this.deactivate();\n\n        if (this._div !== null) {\n            const spans = this._div.querySelectorAll('span');\n            this._activeElementIndex = index;\n\n            if (spans.length <= index) {\n                return;\n            }\n\n            const elementToActivate = spans[index];\n            this.renderer.addClass(elementToActivate, this._defaultActiveCssClass);\n            this.renderer.addClass(elementToActivate, this.activeCssClass);\n        }\n    }\n\n    private deactivate() {\n        if (this._activeElementIndex === -1) {\n            return;\n        }\n\n        const spans = this._div.querySelectorAll('span');\n\n        if (spans.length <= this._activeElementIndex) {\n            this._activeElementIndex = -1;\n            return;\n        }\n\n        const elementToDeactivate = spans[this._activeElementIndex];\n        this.renderer.removeClass(elementToDeactivate, this._defaultActiveCssClass);\n        this.renderer.removeClass(elementToDeactivate, this.activeCssClass);\n        this._activeElementIndex = -1;\n    }\n\n    private clearChildElements(originalContentHidden: boolean): void {\n        this.renderer.setProperty(this.element.nativeElement, 'hidden', originalContentHidden);\n\n        if (this._div !== null) {\n            this.renderer.removeChild(this.parentElement, this._div);\n\n            this._div = null;\n            this._activeElementIndex = -1;\n        }\n    }\n\n    private getHighlightedText(searchText: string, caseSensitive: boolean, exactMatch: boolean) {\n        this.appendDiv();\n\n        const stringValue = String(this.value);\n        const contentStringResolved = !caseSensitive ? stringValue.toLowerCase() : stringValue;\n        const searchTextResolved = !caseSensitive ? searchText.toLowerCase() : searchText;\n\n        let matchCount = 0;\n\n        if (exactMatch) {\n            if (contentStringResolved === searchTextResolved) {\n                // tslint:disable-next-line:max-line-length\n                this.appendSpan(`<span class=\"${this._defaultCssClass} ${this.cssClass ? this.cssClass : ''}\">${stringValue}</span>`);\n                matchCount++;\n            } else {\n                this.appendText(stringValue);\n            }\n        } else {\n            let foundIndex = contentStringResolved.indexOf(searchTextResolved, 0);\n            let previousMatchEnd = 0;\n\n            while (foundIndex !== -1) {\n                const start = foundIndex;\n                const end = foundIndex + searchTextResolved.length;\n\n                this.appendText(stringValue.substring(previousMatchEnd, start));\n                // tslint:disable-next-line:max-line-length\n                this.appendSpan(`<span class=\"${this._defaultCssClass} ${this.cssClass ? this.cssClass : ''}\">${stringValue.substring(start, end)}</span>`);\n\n                previousMatchEnd = end;\n                matchCount++;\n\n                foundIndex = contentStringResolved.indexOf(searchTextResolved, end);\n            }\n\n            this.appendText(stringValue.substring(previousMatchEnd, stringValue.length));\n        }\n\n        return matchCount;\n    }\n\n    private appendText(text: string) {\n        const textElement = this.renderer.createText(text);\n        this.renderer.appendChild(this._div, textElement);\n    }\n\n    private appendSpan(outerHTML: string) {\n        const span = this.renderer.createElement('span');\n        this.renderer.appendChild(this._div, span);\n        this.renderer.setProperty(span, 'outerHTML', outerHTML);\n    }\n\n    private appendDiv() {\n        this._div = this.renderer.createElement('div');\n        if ( this.containerClass) {\n            this.renderer.addClass(this._div, this.containerClass);\n        }\n        this.renderer.appendChild(this.parentElement, this._div);\n    }\n\n    private searchNeedsEvaluation(text: string, caseSensitive: boolean, exactMatch: boolean): boolean {\n        const searchedText = this._lastSearchInfo.searchedText;\n\n        return !this._nodeWasRemoved &&\n            (searchedText === null ||\n                searchedText !== text ||\n                this._lastSearchInfo.content !== this.value ||\n                this._lastSearchInfo.caseSensitive !== caseSensitive ||\n                this._lastSearchInfo.exactMatch !== exactMatch ||\n                this._forceEvaluation);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTextHighlightDirective],\n    exports: [IgxTextHighlightDirective]\n})\nexport class IgxTextHighlightModule { }\n","import { Directive, ElementRef, HostListener, Input, NgModule } from '@angular/core';\n\n@Directive({\n    exportAs: 'igxTextSelection',\n    selector: '[igxTextSelection]'\n})\nexport class IgxTextSelectionDirective {\n\n    private selectionState = true;\n\n    /**\n     * Returns whether the input element is selectable through the directive.\n     *\n     * ```typescript\n     * // get\n     * @ViewChild('firstName',\n     *  {read: IgxTextSelectionDirective})\n     * public firstName: IgxTextSelectionDirective;\n     *\n     * public getFirstNameSelectionStatus() {\n     *  return this.firstName.selected;\n     * }\n     * ```\n     */\n    @Input('igxTextSelection')\n    get selected(): boolean {\n        return this.selectionState;\n    }\n\n    /**\n     *  Determines whether the input element could be selected through the directive.\n     *\n     *```html\n     * <!--set-->\n     * <input\n     *   type=\"text\"\n     *   id=\"firstName\"\n     *   [igxTextSelection]=\"true\">\n     * </input>\n     *\n     * <input\n     *   type=\"text\"\n     *   id=\"lastName\"\n     *   igxTextSelection\n     *   [selected]=\"true\">\n     * </input>\n     * ```\n     */\n    set selected(val: boolean) {\n        this.selectionState = val;\n    }\n\n    /**\n     * Returns the nativeElement of the element where the directive was applied.\n     *\n     * ```html\n     * <input\n     *   type=\"text\"\n    *    id=\"firstName\"\n     *   igxTextSelection>\n     * </input>\n     * ```\n     *\n     * ```typescript\n     * @ViewChild('firstName',\n     *  {read: IgxTextSelectionDirective})\n     * public inputElement: IgxTextSelectionDirective;\n     *\n     * public getNativeElement() {\n     *  return this.inputElement.nativeElement;\n     * }\n     * ```\n     */\n    get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('focus')\n    onFocus() {\n        this.trigger();\n    }\n\n    constructor(private element: ElementRef) { }\n\n    /**\n     * Triggers the selection of the element if it is marked as selectable.\n     *\n     * ```html\n     * <input\n     *   type=\"text\"\n     *   id=\"firstName\"\n     *   igxTextSelection>\n     * </input>\n     * ```\n     *\n     * ```typescript\n     * @ViewChild('firstName',\n     *  {read: IgxTextSelectionDirective})\n     * public inputElement: IgxTextSelectionDirective;\n     *\n     * public triggerElementSelection() {\n     *  this.inputElement.trigger();\n     * }\n     * ```\n     */\n    trigger() {\n        if (this.selected && this.nativeElement.value.length) {\n            requestAnimationFrame(() => this.nativeElement.setSelectionRange(0, this.nativeElement.value.length));\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTextSelectionDirective],\n    exports: [IgxTextSelectionDirective]\n})\nexport class IgxTextSelectionModule { }\n","import {\n    Directive, ElementRef, HostListener, Input, NgModule, ChangeDetectorRef, OnInit,\n    Output, EventEmitter, Optional, HostBinding, Inject\n} from '@angular/core';\nimport { useAnimation } from '@angular/animations';\nimport { scaleInCenter } from '../../animations/scale/index';\nimport { fadeOut } from '../../animations/fade/index';\nimport { IgxOverlayService } from '../../services/overlay/overlay';\nimport { HorizontalAlignment, AutoPositionStrategy, PositionSettings, OverlaySettings } from '../../services';\nimport { CommonModule } from '@angular/common';\nimport { IgxNavigationService } from '../../core/navigation';\nimport { IgxToggleDirective, IgxToggleActionDirective } from '../toggle/toggle.directive';\nimport { IBaseEventArgs } from '../../core/utils';\n\nexport interface ITooltipShowEventArgs extends IBaseEventArgs {\n    target: IgxTooltipTargetDirective;\n    tooltip: IgxTooltipDirective;\n    cancel: boolean;\n}\nexport interface ITooltipHideEventArgs extends IBaseEventArgs {\n    target: IgxTooltipTargetDirective;\n    tooltip: IgxTooltipDirective;\n    cancel: boolean;\n}\n\n/**\n * **Ignite UI for Angular Tooltip Target** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tooltip.html)\n *\n * The Ignite UI for Angular Tooltip Target directive is used to mark an HTML element in the markup as one that has a tooltip.\n * The tooltip target is used in combination with the Ignite UI for Angular Tooltip by assigning the exported tooltip reference to the\n * target's selector property.\n *\n * Example:\n * ```html\n * <button [igxTooltipTarget]=\"tooltipRef\">Hover me</button>\n * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n * ```\n */\n@Directive({\n    exportAs: 'tooltipTarget',\n    selector: '[igxTooltipTarget]'\n})\nexport class IgxTooltipTargetDirective extends IgxToggleActionDirective implements OnInit {\n    /**\n     * Gets/sets the amount of milliseconds that should pass before showing the tooltip.\n     *\n     * ```typescript\n     * // get\n     * let tooltipShowDelay = this.tooltipTarget.showDelay;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <button [igxTooltipTarget]=\"tooltipRef\" showDelay=\"1500\">Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Input('showDelay')\n    public showDelay = 500;\n\n    /**\n     * Gets/sets the amount of milliseconds that should pass before hiding the tooltip.\n     *\n     * ```typescript\n     * // get\n     * let tooltipHideDelay = this.tooltipTarget.hideDelay;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <button [igxTooltipTarget]=\"tooltipRef\" hideDelay=\"1500\">Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Input('hideDelay')\n    public hideDelay = 500;\n\n    /**\n     * Specifies if the tooltip should not show when hovering its target with the mouse. (defaults to false)\n     * While setting this property to 'true' will disable the user interactions that shows/hides the tooltip,\n     * the developer will still be able to show/hide the tooltip through the API.\n     *\n     * ```typescript\n     * // get\n     * let tooltipDisabledValue = this.tooltipTarget.tooltipDisabled;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <button [igxTooltipTarget]=\"tooltipRef\" [tooltipDisabled]=\"true\">Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Input('tooltipDisabled')\n    public tooltipDisabled = false;\n\n    /**\n     * @hidden\n     */\n    @Input('igxTooltipTarget')\n    set target(target: any) {\n        if (target !== null && target !== '') {\n            this._target = target;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get target(): any {\n        if (typeof this._target === 'string') {\n            return this._navigationService.get(this._target);\n        }\n        return this._target;\n    }\n\n    /**\n     * Gets the respective native element of the directive.\n     *\n     * ```typescript\n     * let tooltipTargetElement = this.tooltipTarget.nativeElement;\n     * ```\n     */\n    public get nativeElement() {\n        return this._element.nativeElement;\n    }\n\n    /**\n     * Indicates if the tooltip that is is associated with this target is currently hidden.\n     *\n     * ```typescript\n     * let tooltipHiddenValue = this.tooltipTarget.tooltipHidden;\n     * ```\n     */\n    public get tooltipHidden(): boolean {\n        return !this.target || this.target.collapsed;\n    }\n\n    /**\n     * Emits an event when the tooltip that is associated with this target starts showing.\n     * This event is fired before the start of the countdown to showing the tooltip.\n     *\n     * ```typescript\n     * tooltipShowing(args: ITooltipShowEventArgs) {\n     *    alert(\"Tooltip started showing!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <button [igxTooltipTarget]=\"tooltipRef\"\n     *         (onTooltipShow)='tooltipShowing($event)'>Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Output()\n    public onTooltipShow = new EventEmitter<ITooltipShowEventArgs>();\n\n    /**\n     * Emits an event when the tooltip that is associated with this target starts hiding.\n     * This event is fired before the start of the countdown to hiding the tooltip.\n     *\n     * ```typescript\n     * tooltipHiding(args: ITooltipHideEventArgs) {\n     *    alert(\"Tooltip started hiding!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <button [igxTooltipTarget]=\"tooltipRef\"\n     *         (onTooltipHide)='tooltipHiding($event)'>Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Output()\n    public onTooltipHide = new EventEmitter<ITooltipHideEventArgs>();\n\n    constructor(private _element: ElementRef,\n        @Optional() private _navigationService: IgxNavigationService) {\n        super(_element, _navigationService);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        super.ngOnInit();\n\n        const positionSettings: PositionSettings = {\n            target: this.nativeElement,\n            horizontalDirection: HorizontalAlignment.Center,\n            horizontalStartPoint: HorizontalAlignment.Center,\n            openAnimation: useAnimation(scaleInCenter, { params: { duration: '150ms' } }),\n            closeAnimation: useAnimation(fadeOut, { params: { duration: '75ms' } })\n        };\n\n        this._overlayDefaults.positionStrategy = new AutoPositionStrategy(positionSettings);\n        this._overlayDefaults.closeOnOutsideClick = false;\n    }\n\n    private checkOutletAndOutsideClick() {\n        if (this.outlet) {\n            this._overlayDefaults.outlet = this.outlet;\n        }\n    }\n\n    private get mergedOverlaySettings() {\n        return Object.assign({}, this._overlayDefaults, this.overlaySettings);\n    }\n\n    // Return true if the execution in onMouseEnter should be terminated after this method\n    private preMouseEnterCheck() {\n        // If tooltip is about to be opened\n        if (this.target.toBeShown) {\n            clearTimeout(this.target.timeoutId);\n            this.target.toBeShown = false;\n        }\n\n        // If Tooltip is opened or about to be hidden\n        if (!this.target.collapsed || this.target.toBeHidden) {\n            clearTimeout(this.target.timeoutId);\n\n            const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n            this.onTooltipHide.emit(hidingArgs);\n\n            if (hidingArgs.cancel) {\n                return true;\n            }\n\n            //  if close animation has started finish it, or close the tooltip with no animation\n            this.target.forceClose(this.mergedOverlaySettings);\n            this.target.toBeHidden = false;\n        }\n\n        return false;\n    }\n\n    // Return true if the execution in onMouseLeave should be terminated after this method\n    private preMouseLeaveCheck(): boolean {\n        clearTimeout(this.target.timeoutId);\n\n        // If tooltip is about to be opened\n        if (this.target.toBeShown) {\n            this.target.toBeShown = false;\n            this.target.toBeHidden = false;\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('document:keydown.escape', ['$event'])\n    public onKeydownEscape(event) {\n        const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipHide.emit(hidingArgs);\n\n        if (hidingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeHidden = true;\n        this.target.close();\n        this.target.toBeHidden = false;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click')\n    public onClick() {\n        if (!this.target.collapsed) {\n            const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n            this.onTooltipHide.emit(hidingArgs);\n\n            if (hidingArgs.cancel) {\n                return;\n            }\n\n            this.target.forceClose(this.mergedOverlaySettings);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseenter')\n    public onMouseEnter() {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        this.checkOutletAndOutsideClick();\n        const shouldReturn = this.preMouseEnterCheck();\n        if (shouldReturn) {\n            return;\n        }\n\n        const showingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipShow.emit(showingArgs);\n\n        if (showingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeShown = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.open(this.mergedOverlaySettings); // Call open() of IgxTooltipDirective\n            this.target.toBeShown = false;\n        }, this.showDelay);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseleave')\n    public onMouseLeave() {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        this.checkOutletAndOutsideClick();\n        const shouldReturn = this.preMouseLeaveCheck();\n        if (shouldReturn || this.target.collapsed) {\n            return;\n        }\n\n        const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipHide.emit(hidingArgs);\n\n        if (hidingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeHidden = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.close(); // Call close() of IgxTooltipDirective\n            this.target.toBeHidden = false;\n        }, this.hideDelay);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('touchstart', ['$event'])\n    public onTouchStart(event) {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        this.showTooltip();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('document:touchstart', ['$event'])\n    public onDocumentTouchStart(event) {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        if (this.nativeElement !== event.target &&\n            !this.nativeElement.contains(event.target)\n        ) {\n            this.hideTooltip();\n        }\n    }\n\n    /**\n     * Shows the tooltip by respecting the 'showDelay' property.\n     *\n     * ```typescript\n     * this.tooltipTarget.showTooltip();\n     * ```\n     */\n    public showTooltip() {\n        clearTimeout(this.target.timeoutId);\n\n        if (!this.target.collapsed) {\n            const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n            this.onTooltipHide.emit(hidingArgs);\n\n            if (hidingArgs.cancel) {\n                return;\n            }\n            //  if close animation has started finish it, or close the tooltip with no animation\n            this.target.forceClose(this.mergedOverlaySettings);\n            this.target.toBeHidden = false;\n        }\n\n        const showingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipShow.emit(showingArgs);\n\n        if (showingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeShown = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.open(this.mergedOverlaySettings); // Call open() of IgxTooltipDirective\n            this.target.toBeShown = false;\n        }, this.showDelay);\n    }\n\n    /**\n     * Hides the tooltip by respecting the 'hideDelay' property.\n     *\n     * ```typescript\n     * this.tooltipTarget.hideTooltip();\n     * ```\n     */\n    public hideTooltip() {\n        if (this.target.collapsed && this.target.toBeShown) {\n            clearTimeout(this.target.timeoutId);\n        }\n\n        if (this.target.collapsed || this.target.toBeHidden) {\n            return;\n        }\n\n        const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipHide.emit(hidingArgs);\n\n        if (hidingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeHidden = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.close(); // Call close() of IgxTooltipDirective\n            this.target.toBeHidden = false;\n        }, this.hideDelay);\n    }\n}\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Tooltip** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tooltip.html)\n *\n * The Ignite UI for Angular Tooltip directive is used to mark an HTML element in the markup as one that should behave as a tooltip.\n * The tooltip is used in combination with the Ignite UI for Angular Tooltip Target by assigning the exported tooltip reference to the\n * respective target's selector property.\n *\n * Example:\n * ```html\n * <button [igxTooltipTarget]=\"tooltipRef\">Hover me</button>\n * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n * ```\n */\n@Directive({\n    exportAs: 'tooltip',\n    selector: '[igxTooltip]'\n})\nexport class IgxTooltipDirective extends IgxToggleDirective {\n\n    /**\n     * @hidden\n     */\n    public timeoutId;\n\n    /**\n     * @hidden\n     * Returns whether close time out has started\n     */\n    public toBeHidden = false;\n\n    /**\n     * @hidden\n     * Returns whether open time out has started\n     */\n    public toBeShown = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-tooltip--hidden')\n    public get hiddenClass() {\n        return this.collapsed;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-tooltip--desktop')\n    public get defaultClass() {\n        return !this.collapsed;\n    }\n\n    /**\n     * Gets/sets any tooltip related data.\n     * The 'context' can be used for storing any information that is necessary\n     * to access when working with the tooltip.\n     *\n     * ```typescript\n     * // get\n     * let tooltipContext = this.tooltip.context;\n     * ```\n     *\n     * ```typescript\n     * // set\n     * this.tooltip.context = \"Tooltip's context\";\n     * ```\n     */\n    @Input('context')\n    public context;\n\n    /**\n     * Identifier for the tooltip.\n     * If this is property is not explicitly set, it will be automatically generated.\n     *\n     * ```typescript\n     * let tooltipId = this.tooltip.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-tooltip-${NEXT_ID++}`;\n\n    /**\n     * Get the role attribute of the tooltip.\n     *\n     * ```typescript\n     * let tooltipRole = this.tooltip.role;\n     * ```\n     */\n    @HostBinding('attr.role')\n    public get role() {\n        return 'tooltip';\n    }\n\n    /** @hidden */\n    constructor(\n        elementRef: ElementRef,\n        cdr: ChangeDetectorRef,\n        @Inject(IgxOverlayService) overlayService: IgxOverlayService,\n        @Optional() navigationService: IgxNavigationService) {\n        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(elementRef, cdr, overlayService, navigationService);\n    }\n\n    /**\n     * If there is open animation in progress this method will finish is.\n     * If there is no open animation in progress this method will open the toggle with no animation.\n     * @param overlaySettings setting to use for opening the toggle\n     */\n    protected forceOpen(overlaySettings?: OverlaySettings) {\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasOpenAnimation = info ? info.openAnimationPlayer : false;\n        if (hasOpenAnimation) {\n            info.openAnimationPlayer.finish();\n            info.openAnimationPlayer.reset();\n            info.openAnimationPlayer = null;\n        } else if (this.collapsed) {\n            const animation = overlaySettings.positionStrategy.settings.openAnimation;\n            overlaySettings.positionStrategy.settings.openAnimation = null;\n            this.open(overlaySettings);\n            overlaySettings.positionStrategy.settings.openAnimation = animation;\n        }\n    }\n\n    /**\n     * If there is close animation in progress this method will finish is.\n     * If there is no close animation in progress this method will close the toggle with no animation.\n     * @param overlaySettings settings to use for closing the toggle\n     */\n    protected forceClose(overlaySettings?: OverlaySettings) {\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasCloseAnimation = info ? info.closeAnimationPlayer : false;\n\n        if (hasCloseAnimation) {\n            info.closeAnimationPlayer.finish();\n            info.closeAnimationPlayer.reset();\n            info.closeAnimationPlayer = null;\n        } else if (!this.collapsed) {\n            const animation = overlaySettings.positionStrategy.settings.closeAnimation;\n            overlaySettings.positionStrategy.settings.closeAnimation = null;\n            this.close();\n            overlaySettings.positionStrategy.settings.closeAnimation = animation;\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTooltipDirective, IgxTooltipTargetDirective],\n    exports: [IgxTooltipDirective, IgxTooltipTargetDirective],\n    imports: [CommonModule],\n    providers: [IgxOverlayService]\n})\nexport class IgxTooltipModule { }\n\n","/**\n * Provides base filtering operations\n * Implementations should be Singleton\n *\n * @export\n */\nexport class IgxFilteringOperand {\n    protected static _instance: IgxFilteringOperand = null;\n    public operations: IFilteringOperation[];\n\n    public constructor() {\n        this.operations = [{\n            name: 'null',\n            isUnary: true,\n            iconName: 'is_null',\n            logic: (target: any) => {\n                return target === null;\n            }\n        }, {\n            name: 'notNull',\n            isUnary: true,\n            iconName: 'is_not_null',\n            logic: (target: any) => {\n                return target !== null;\n            }\n        }, {\n            name: 'in',\n            isUnary: false,\n            iconName: 'is_in',\n            hidden: true,\n            logic: (target: any, searchVal: Set<any>) => {\n                return this.findValueInSet(target, searchVal);\n            }\n        }];\n    }\n\n    public static instance(): IgxFilteringOperand {\n        return this._instance || (this._instance = new this());\n    }\n\n    /**\n     * @hidden\n     */\n    protected findValueInSet(target: any, searchVal: Set<any>) {\n        return searchVal.has(target);\n    }\n\n    /**\n     * Returns an array of names of the conditions which are visible in the UI\n     */\n    public conditionList(): string[] {\n        return this.operations.filter(f => !f.hidden).map((element) => element.name);\n    }\n\n    /**\n     * Returns an instance of the condition with the specified name.\n     * @param name The name of the condition.\n     */\n    public condition(name: string): IFilteringOperation {\n        return this.operations.find((element) => element.name === name);\n    }\n\n    /**\n     * Adds a new condition to the filtering operations.\n     * @param operation The filtering operation.\n     */\n    public append(operation: IFilteringOperation) {\n        this.operations.push(operation);\n    }\n}\n\n/**\n * Provides filtering operations for booleans\n *\n * @export\n */\nexport class IgxBooleanFilteringOperand extends IgxFilteringOperand {\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'all',\n            isUnary: true,\n            iconName: 'all',\n            logic: (target: boolean) => {\n                return true;\n            }\n        }, {\n            name: 'true',\n            isUnary: true,\n            iconName: 'is_true',\n            logic: (target: boolean) => {\n                return !!(target && target !== null && target !== undefined);\n            }\n        }, {\n            name: 'false',\n            isUnary: true,\n            iconName: 'is_false',\n            logic: (target: boolean) => {\n                return !target && target !== null && target !== undefined;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: boolean) => {\n                return target === null || target === undefined;\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: boolean) => {\n                return target !== null && target !== undefined;\n            }\n        }].concat(this.operations);\n    }\n}\n\n/**\n * Provides filtering operations for Dates\n *\n * @export\n */\nexport class IgxDateFilteringOperand extends IgxFilteringOperand {\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'equals',\n            isUnary: false,\n            iconName: 'equals',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const targetp = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const searchp = IgxDateFilteringOperand.getDateParts(searchVal, 'yMd');\n                return targetp.year === searchp.year &&\n                    targetp.month === searchp.month &&\n                    targetp.day === searchp.day;\n            }\n        }, {\n            name: 'doesNotEqual',\n            isUnary: false,\n            iconName: 'not_equal',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return true;\n                }\n\n                this.validateInputData(target);\n\n                const targetp = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const searchp = IgxDateFilteringOperand.getDateParts(searchVal, 'yMd');\n                return targetp.year !== searchp.year ||\n                    targetp.month !== searchp.month ||\n                    targetp.day !== searchp.day;\n            }\n        }, {\n            name: 'before',\n            isUnary: false,\n            iconName: 'is_before',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                return target < searchVal;\n            }\n        }, {\n            name: 'after',\n            isUnary: false,\n            iconName: 'is_after',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                return target > searchVal;\n            }\n        }, {\n            name: 'today',\n            isUnary: true,\n            iconName: 'today',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yMd');\n                return d.year === now.year &&\n                    d.month === now.month &&\n                    d.day === now.day;\n            }\n        }, {\n            name: 'yesterday',\n            isUnary: true,\n            iconName: 'yesterday',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const td = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const y = ((d) => new Date(d.setDate(d.getDate() - 1)))(new Date());\n                const yesterday = IgxDateFilteringOperand.getDateParts(y, 'yMd');\n                return td.year === yesterday.year &&\n                    td.month === yesterday.month &&\n                    td.day === yesterday.day;\n            }\n        }, {\n            name: 'thisMonth',\n            isUnary: true,\n            iconName: 'this_month',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yM');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');\n                return d.year === now.year &&\n                    d.month === now.month;\n            }\n        }, {\n            name: 'lastMonth',\n            isUnary: true,\n            iconName: 'last_month',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yM');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');\n                if (!now.month) {\n                    now.month = 11;\n                    now.year -= 1;\n                } else {\n                    now.month--;\n                }\n                return d.year === now.year &&\n                    d.month === now.month;\n            }\n        }, {\n            name: 'nextMonth',\n            isUnary: true,\n            iconName: 'next_month',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yM');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');\n                if (now.month === 11) {\n                    now.month = 0;\n                    now.year += 1;\n                } else {\n                    now.month++;\n                }\n                return d.year === now.year &&\n                    d.month === now.month;\n            }\n        }, {\n            name: 'thisYear',\n            isUnary: true,\n            iconName: 'this_year',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'y');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');\n                return d.year === now.year;\n            }\n        }, {\n            name: 'lastYear',\n            isUnary: true,\n            iconName: 'last_year',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'y');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');\n                return d.year === now.year - 1;\n            }\n        }, {\n            name: 'nextYear',\n            isUnary: true,\n            iconName: 'next_year',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'y');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');\n                return d.year === now.year + 1;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: Date) => {\n                return target === null || target === undefined;\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: Date) => {\n                return target !== null && target !== undefined;\n            }\n        }].concat(this.operations);\n    }\n\n    /**\n     * Splits a Date object into parts\n     *\n     * @memberof IgxDateFilteringOperand\n     */\n    public static getDateParts(date: Date, dateFormat?: string): IDateParts {\n        const res = {\n            day: null,\n            hours: null,\n            milliseconds: null,\n            minutes: null,\n            month: null,\n            seconds: null,\n            year: null\n        };\n        if (!date || !dateFormat) {\n            return res;\n        }\n        if (dateFormat.indexOf('y') >= 0) {\n            res.year = date.getFullYear();\n        }\n        if (dateFormat.indexOf('M') >= 0) {\n            res.month = date.getMonth();\n        }\n        if (dateFormat.indexOf('d') >= 0) {\n            res.day = date.getDate();\n        }\n        if (dateFormat.indexOf('h') >= 0) {\n            res.hours = date.getHours();\n        }\n        if (dateFormat.indexOf('m') >= 0) {\n            res.minutes = date.getMinutes();\n        }\n        if (dateFormat.indexOf('s') >= 0) {\n            res.seconds = date.getSeconds();\n        }\n        if (dateFormat.indexOf('f') >= 0) {\n            res.milliseconds = date.getMilliseconds();\n        }\n        return res;\n    }\n\n    private validateInputData(target: Date) {\n        if (!(target instanceof Date)) {\n            throw new Error('Could not perform filtering on \\'date\\' column because the datasource object type is not \\'Date\\'.');\n        }\n    }\n\n    protected findValueInSet(target: any, searchVal: Set<any>) {\n        if (!target) { return false; }\n        return searchVal.has(new Date(target.getFullYear(), target.getMonth(), target.getDate()).toISOString());\n    }\n}\n\n/**\n * Provides filtering operations for numbers\n *\n * @export\n */\nexport class IgxNumberFilteringOperand extends IgxFilteringOperand {\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'equals',\n            isUnary: false,\n            iconName: 'equals',\n            logic: (target: number, searchVal: number) => {\n                return target === searchVal;\n            }\n        }, {\n            name: 'doesNotEqual',\n            isUnary: false,\n            iconName: 'not_equal',\n            logic: (target: number, searchVal: number) => {\n                return target !== searchVal;\n            }\n        }, {\n            name: 'greaterThan',\n            isUnary: false,\n            iconName: 'greater_than',\n            logic: (target: number, searchVal: number) => {\n                return target > searchVal;\n            }\n        }, {\n            name: 'lessThan',\n            isUnary: false,\n            iconName: 'less_than',\n            logic: (target: number, searchVal: number) => {\n                return target < searchVal;\n            }\n        }, {\n            name: 'greaterThanOrEqualTo',\n            isUnary: false,\n            iconName: 'greater_than_or_equal',\n            logic: (target: number, searchVal: number) => {\n                return target >= searchVal;\n            }\n        }, {\n            name: 'lessThanOrEqualTo',\n            isUnary: false,\n            iconName: 'less_than_or_equal',\n            logic: (target: number, searchVal: number) => {\n                return target <= searchVal;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: number) => {\n                return target === null || target === undefined || isNaN(target);\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: number) => {\n                return target !== null && target !== undefined && !isNaN(target);\n            }\n        }].concat(this.operations);\n    }\n}\n\n/**\n * Provides filtering operations for strings\n *\n * @export\n */\nexport class IgxStringFilteringOperand extends IgxFilteringOperand {\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'contains',\n            isUnary: false,\n            iconName: 'contains',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.indexOf(search) !== -1;\n            }\n        }, {\n            name: 'doesNotContain',\n            isUnary: false,\n            iconName: 'does_not_contain',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.indexOf(search) === -1;\n            }\n        }, {\n            name: 'startsWith',\n            isUnary: false,\n            iconName: 'starts_with',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.startsWith(search);\n            }\n        }, {\n            name: 'endsWith',\n            isUnary: false,\n            iconName: 'ends_with',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.endsWith(search);\n            }\n        }, {\n            name: 'equals',\n            isUnary: false,\n            iconName: 'equals',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target === search;\n            }\n        }, {\n            name: 'doesNotEqual',\n            isUnary: false,\n            iconName: 'not_equal',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target !== search;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: string) => {\n                return target === null || target === undefined || target.length === 0;\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: string) => {\n                return target !== null && target !== undefined && target.length > 0;\n            }\n        }].concat(this.operations);\n    }\n\n    /**\n     * Applies case sensitivity on strings if provided\n     *\n     * @memberof IgxStringFilteringOperand\n     */\n    public static applyIgnoreCase(a: string, ignoreCase: boolean): string {\n        a = a || '';\n        // bulletproof\n        return ignoreCase ? ('' + a).toLowerCase() : a;\n    }\n}\n\n/**\n * Interface describing filtering operations\n *\n * @export\n */\nexport interface IFilteringOperation {\n    name: string;\n    isUnary: boolean;\n    iconName: string;\n    hidden?: boolean;\n    logic: (value: any, searchVal?: any, ignoreCase?: boolean) => boolean;\n}\n\n/**\n * Interface describing Date object in parts\n *\n * @export\n */\nexport interface IDateParts {\n    year: number;\n    month: number;\n    day: number;\n    hours: number;\n    minutes: number;\n    seconds: number;\n    milliseconds: number;\n}\n","import { IFilteringExpressionsTree } from './filtering-expressions-tree';\nimport { FilteringStrategy, IFilteringStrategy } from './filtering-strategy';\n\nexport const filteringStateDefaults = {\n    strategy: new FilteringStrategy()\n};\n\nexport declare interface IFilteringState {\n    expressionsTree: IFilteringExpressionsTree;\n    advancedExpressionsTree?: IFilteringExpressionsTree;\n    strategy?: IFilteringStrategy;\n}\n","import { ISortingExpression } from './sorting-expression.interface';\n\n/**\n * @hidden\n */\nexport class GroupedRecords extends Array<any> {}\n\nexport interface IGroupByRecord {\n    expression: ISortingExpression;\n    level: number;\n    records: GroupedRecords;\n    value: any;\n    groupParent: IGroupByRecord;\n    groups?: IGroupByRecord[];\n    height: number;\n }\n","import { Injectable, SecurityContext, Inject } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * **Ignite UI for Angular Icon Service** -\n *\n * The Ignite UI Icon Service makes it easy for developers to include custom SVG images and use them with IgxIconComponent.\n * In addition it could be used to associate a custom class to be applied on IgxIconComponent according to given fontSet.\n *\n * Example:\n * ```typescript\n * this.iconService.registerFontSetAlias('material', 'material-icons');\n * this.iconService.addSvgIcon('aruba', '/assets/svg/country_flags/aruba.svg', 'svg-flags');\n * ```\n */\n\n@Injectable({\n    providedIn: 'root'\n})\n\nexport class IgxIconService {\n    private _fontSet = 'material-icons';\n    private _fontSetAliases = new Map<string, string>();\n    private _svgContainer: HTMLElement;\n    private _cachedSvgIcons: Set<string> = new Set<string>();\n\n    constructor(private _sanitizer: DomSanitizer, @Inject(DOCUMENT) private _document: any) { }\n\n    /**\n     *  Returns the default font set.\n     *```typescript\n     *   const defaultFontSet = this.iconService.defaultFontSet;\n     * ```\n     */\n    get defaultFontSet(): string {\n        return this._fontSet;\n    }\n\n    /**\n     *  Sets the default font set.\n     *```typescript\n     *   this.iconService.defaultFontSet = 'svg-flags';\n     * ```\n     */\n    set defaultFontSet(className: string) {\n        this._fontSet = className;\n    }\n\n    /**\n     *  Registers a custom class to be applied to IgxIconComponent for a given fontSet.\n     *```typescript\n     *   this.iconService.registerFontSetAlias('material', 'material-icons');\n     * ```\n     */\n    public registerFontSetAlias(alias: string, className: string = alias): this {\n        this._fontSetAliases.set(alias, className);\n        return this;\n    }\n\n    /**\n     *  Returns the custom class, if any, associated to a given fontSet.\n     *```typescript\n     *   const fontSetClass = this.iconService.fontSetClassName('material');\n     * ```\n     */\n    public fontSetClassName(alias: string): string {\n        return this._fontSetAliases.get(alias) || alias;\n    }\n\n    /**\n     *  Adds an SVG image to the cache. SVG source is an url.\n     *```typescript\n     *   this.iconService.addSvgIcon('aruba', '/assets/svg/country_flags/aruba.svg', 'svg-flags');\n     * ```\n     */\n    public addSvgIcon(iconName: string, url: string, fontSet: string = '') {\n        if (iconName && url) {\n            const safeUrl = this._sanitizer.bypassSecurityTrustResourceUrl(url);\n            if (!safeUrl) {\n                throw new Error(`The provided URL could not be processed as trusted resource URL by Angular's DomSanitizer: \"${url}\".`);\n            }\n\n            const sanitizedUrl = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n            if (!sanitizedUrl) {\n                throw new Error(`The URL provided was not trusted as a resource URL: \"${url}\".`);\n            }\n\n            this.fetchSvg(iconName, url, fontSet);\n        } else {\n            throw new Error('You should provide at least `iconName` and `url` to register an svg icon.');\n        }\n    }\n\n    /**\n     *  Adds an SVG image to the cache. SVG source is its text.\n     *```typescript\n     *   this.iconService.addSvgIcon('simple', '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 200 200\">\n     *   <path d=\"M74 74h54v54H74\" /></svg>', 'svg-flags');\n     * ```\n     */\n    public addSvgIconFromText(iconName: string, iconText: string, fontSet: string = '') {\n        if (iconName && iconText) {\n            this.cacheSvgIcon(iconName, iconText, fontSet);\n        } else {\n            throw new Error('You should provide at least `iconName` and `iconText` to register an svg icon.');\n        }\n    }\n\n    /**\n     *  Returns whether a given SVG image is present in the cache.\n     *```typescript\n     *   const isSvgCached = this.iconService.isSvgIconCached('aruba', 'svg-flags');\n     * ```\n     */\n    public isSvgIconCached(iconName: string, fontSet: string = ''): boolean {\n        const iconKey = this.getSvgIconKey(iconName, fontSet);\n        return this._cachedSvgIcons.has(iconKey);\n    }\n\n    /**\n     *  Returns the key of a cached SVG image.\n     *```typescript\n     *   const svgIconKey = this.iconService.getSvgIconKey('aruba', 'svg-flags');\n     * ```\n     */\n    public getSvgIconKey(iconName: string, fontSet: string = '') {\n        return fontSet + '_' + iconName;\n    }\n\n    /**\n     * @hidden\n     */\n    private fetchSvg(iconName: string, url: string, fontSet: string = '') {\n        const instance = this;\n        const httpRequest = new XMLHttpRequest();\n        httpRequest.open('GET', url, true);\n        httpRequest.responseType = 'text';\n\n        // load â when the result is ready, that includes HTTP errors like 404.\n        httpRequest.onload = function (event: ProgressEvent) {\n            if (event) {\n                const request = event.target as XMLHttpRequest;\n                if (request.status === 200) {\n                    instance.cacheSvgIcon(iconName, request.responseText, fontSet);\n                } else {\n                    throw new Error(`Could not fetch SVG from url: ${url}; error: ${request.status} (${request.statusText})`);\n                }\n            } else {\n                throw new Error(`Could not fetch SVG from url: ${url};`);\n            }\n        };\n\n        // error â when the request couldnât be made, e.g.network down or invalid URL.\n        httpRequest.onerror = function (event: ProgressEvent) {\n            if (event) {\n                const request = event.target as XMLHttpRequest;\n                throw new Error(`Could not fetch SVG from url: ${url}; error status code: ${request.status} (${request.statusText})`);\n            }\n            throw new Error(`Could not fetch SVG from url: ${url};`);\n        };\n\n        httpRequest.send();\n    }\n\n    /**\n     * @hidden\n     */\n    private cacheSvgIcon(iconName: string, value: string, fontSet: string = '') {\n        if (iconName && value) {\n            this.ensureSvgContainerCreated();\n\n            const div = this._document.createElement('DIV');\n            div.innerHTML = value;\n            const svg = div.querySelector('svg') as SVGElement;\n\n            if (svg) {\n                const iconKey = this.getSvgIconKey(iconName, fontSet);\n\n                svg.setAttribute('id', iconKey);\n                svg.setAttribute('fit', '');\n                svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n                svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n\n                if (this._cachedSvgIcons.has(iconKey)) {\n                    const oldChild = this._svgContainer.querySelector(`svg[id='${iconKey}']`);\n                    this._svgContainer.removeChild(oldChild);\n                }\n\n                this._svgContainer.appendChild(svg);\n                this._cachedSvgIcons.add(iconKey);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private ensureSvgContainerCreated() {\n        if (!this._svgContainer) {\n            this._svgContainer = this._document.documentElement.querySelector('.igx-svg-container');\n            if (!this._svgContainer) {\n                this._svgContainer = this._document.createElement('DIV');\n                this._svgContainer.classList.add('igx-svg-container');\n                this._document.documentElement.appendChild(this._svgContainer);\n            }\n        }\n    }\n}\n","import { Component, ElementRef, HostBinding, Input, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { IgxIconService } from './icon.service';\n\n/**\n * **Ignite UI for Angular Icon** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/icon.html)\n *\n * The Ignite UI Icon makes it easy for developers to include material design icons directly in their markup. The icons\n * support custom colors and can be marked as active or disabled using the `isActive` property. This will change the appearance\n * of the icon.\n *\n * Example:\n * ```html\n * <igx-icon color=\"#00ff00\" isActive=\"true\">home</igx-icon>\n * ```\n */\nlet NEXT_ID = 0;\n\n@Component({\n    selector: 'igx-icon',\n    templateUrl: 'icon.component.html'\n})\n\nexport class IgxIconComponent implements OnInit {\n    @ViewChild('noLigature', { read: TemplateRef, static: true })\n    private noLigature: TemplateRef<HTMLElement>;\n\n    @ViewChild('explicitLigature', { read: TemplateRef, static: true })\n    private explicitLigature: TemplateRef<HTMLElement>;\n\n    @ViewChild('svgImage', { read: TemplateRef, static: true })\n    private svgImage: TemplateRef<HTMLElement>;\n\n    /**\n     *  This allows you to change the value of `class.igx-icon`. By default it's `igx-icon`.\n     *```typescript\n     *@ViewChild(\"MyIcon\") public icon: IgxIconComponent;\n     *constructor(private cdRef:ChangeDetectorRef) {}\n     *ngAfterViewInit() {\n     *    this.icon.cssClass = \"\";\n     *    this.cdRef.detectChanges();\n     *}\n     * ```\n     */\n    @HostBinding('class.igx-icon')\n    public cssClass = 'igx-icon';\n\n    /**\n     *  This allows you to disable the `aria-hidden` attribute. By default it's applied.\n     *```typescript\n     *@ViewChild(\"MyIcon\") public icon: IgxIconComponent;\n     *constructor(private cdRef:ChangeDetectorRef) {}\n     *ngAfterViewInit() {\n     *    this.icon.ariaHidden = false;\n     *    this.cdRef.detectChanges();\n     *}\n     * ```\n     */\n    @HostBinding('attr.aria-hidden')\n    public ariaHidden = true;\n\n    /**\n    *  An @Input property that sets the value of the `id` attribute.\n    *```html\n    *<igx-icon id=\"igx-icon-1\" fontSet=\"material\" color=\"blue\" [isActive]=\"false\">settings</igx-icon>\n    *```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-icon-${NEXT_ID++}`;\n\n    /**\n    *  An @Input property that sets the value of the `fontSet`. By default it's \"material\".\n    *```html\n    *<igx-icon fontSet=\"material\" color=\"blue\" [isActive]=\"false\">settings</igx-icon>\n    *```\n    */\n    @Input('fontSet')\n    public font: string;\n\n    /**\n    *  An @Input property that allows you to disable the `active` property. By default it's applied.\n    *```html\n    *<igx-icon [isActive]=\"false\" fontSet=\"material\" color=\"blue\">settings</igx-icon>\n    *```\n    */\n    @Input('isActive')\n    public active = true;\n\n    /**\n    *  An @Input property that allows you to change the `iconColor` of the icon.\n    *```html\n    *<igx-icon color=\"blue\" [isActive]=\"true\" fontSet=\"material\">settings</igx-icon>\n    *```\n    */\n    @Input('color')\n    public iconColor: string;\n\n    /**\n    *  An @Input property that allows you to set the `iconName` of the icon.\n    *  The `iconName` can be set using the `name` property.\n    *```html\n    *<igx-icon color=\"blue\" [isActive]=\"true\" fontSet=\"material\">question_answer</igx-icon>\n    *```\n    */\n    @Input('name')\n    public iconName: string;\n\n    /**\n     * An ElementRef property of the `igx-icon` component.\n     */\n    public el: ElementRef;\n\n    constructor(private _el: ElementRef, private iconService: IgxIconService) {\n        this.el = _el;\n        this.font = this.iconService.defaultFontSet;\n        this.iconService.registerFontSetAlias('material', 'material-icons');\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this.updateIconClass();\n    }\n\n    /**\n     *  An accessor that returns the value of the font property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconFont = this.icon.getFontSet;\n     * }\n     * ```\n     */\n    get getFontSet(): string {\n        return this.font;\n    }\n\n    /**\n     *  An accessor that returns the value of the active property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconActive = this.icon.getActive;\n     * }\n     * ```\n     */\n    get getActive(): boolean {\n        return this.active;\n    }\n\n    /**\n     *  An accessor that returns inactive property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconActive = this.icon.getInactive;\n     * }\n     * ```\n     */\n    @HostBinding('class.igx-icon--inactive')\n    get getInactive(): boolean {\n        return !this.active;\n    }\n\n    /**\n     *  An accessor that returns the opposite value of the `iconColor` property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconColor = this.icon.getIconColor;\n     * }\n     * ```\n     */\n    @HostBinding('style.color')\n    get getIconColor(): string {\n        return this.iconColor;\n    }\n\n    /**\n     *  An accessor that returns the value of the iconName property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconName = this.icon.getIconName;\n     * }\n     * ```\n     */\n    get getIconName(): string {\n        return this.iconName;\n    }\n\n    /**\n     *  An accessor that returns the key of the SVG image.\n     *  The key consists of the fontSet and the iconName separated by underscore.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let svgKey = this.icon.getSvgKey;\n     * }\n     * ```\n     */\n    get getSvgKey(): string {\n        if (this.iconService.isSvgIconCached(this.iconName, this.font)) {\n            return '#' + this.iconService.getSvgIconKey(this.iconName, this.font);\n        }\n\n        return null;\n    }\n\n    /**\n     *   An accessor that returns a TemplateRef to explicit, svg or no ligature.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconTemplate = this.icon.template;\n     * }\n     * ```\n     */\n    get template(): TemplateRef<HTMLElement> {\n        if (this.iconName) {\n            if (this.iconService.isSvgIconCached(this.iconName, this.font)) {\n                return this.svgImage;\n            }\n\n            return this.noLigature;\n        }\n\n        return this.explicitLigature;\n    }\n\n    /**\n     * @hidden\n     */\n    private updateIconClass() {\n        const className = this.iconService.fontSetClassName(this.font);\n        this.el.nativeElement.classList.add(className);\n\n        if (this.iconName && !this.iconService.isSvgIconCached(this.iconName, this.font)) {\n            this.el.nativeElement.classList.add(this.iconName);\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { IgxIconComponent } from './icon.component';\nimport { DeprecateMethod } from '../core/deprecateDecorators';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxIconComponent],\n    exports: [IgxIconComponent],\n    imports: [CommonModule]\n})\nexport class IgxIconModule {\n    @DeprecateMethod('IgxIconModule.forRoot method is deprecated. Use IgxIconModule instead.')\n    public static forRoot() {\n        return {\n            ngModule: IgxIconModule\n        };\n    }\n}\n\nexport * from './icon.component';\nexport * from './icon.service';\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    HostBinding,\n    Input,\n    NgModule,\n    OnInit,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\nimport { IgxIconModule } from '../icon/index';\n\nlet NEXT_ID = 0;\n\nexport enum Size {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large'\n}\n\nexport enum AvatarType {\n    DEFAULT = 'default',\n    INITIALS = 'initials',\n    IMAGE = 'image',\n    ICON = 'icon'\n}\n\n/**\n * **Ignite UI for Angular Avatar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/avatar.html)\n *\n * The Ignite UI Avatar provides an easy way to add an avatar icon to your application.  This icon can be an\n * image, someone's initials or a material icon from the google material icon set.\n *\n * Example:\n * ```html\n * <igx-avatar initials=\"MS\" roundShape=\"true\" size=\"large\">\n * </igx-avatar>\n * ```\n */\n@Component({\n    selector: 'igx-avatar',\n    templateUrl: 'avatar.component.html'\n})\nexport class IgxAvatarComponent implements OnInit, AfterViewInit {\n\n    /**\n     * This is a reference to the avatar `image` element in the DOM.\n     *\n     * ```typescript\n     *  let image =  this.avatar.image;\n     * ```\n     * @memberof IgxAvatarComponent\n     */\n    @ViewChild('image', { static: false })\n    public image: ElementRef;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('defaultTemplate', { read: TemplateRef, static: true })\n    protected defaultTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('imageTemplate', { read: TemplateRef, static: true })\n    protected imageTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('initialsTemplate', { read: TemplateRef, static: true })\n    protected initialsTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('iconTemplate', { read: TemplateRef, static: true })\n    protected iconTemplate: TemplateRef<any>;\n\n    /**\n     * Returns the `aria-label` of the avatar.\n     *\n     * ```typescript\n     * let ariaLabel = this.avatar.ariaLabel;\n     * ```\n     *\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel = 'avatar';\n\n    /**\n     * Returns the `role` attribute of the avatar.\n     *\n     * ```typescript\n     * let avatarRole = this.avatar.role;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('attr.role')\n    public role = 'img';\n\n    /**\n     * Returns the class of the avatar.\n     *\n     * ```typescript\n     * let avatarCLass =  this.avatar.cssClass;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('class.igx-avatar')\n    public cssClass = 'igx-avatar';\n\n    /**\n     * Returns the type of the avatar.\n     * The avatar can be: `\"initials type avatar\"`, `\"icon type avatar\"` or `\"image type avatar\"`.\n     *\n     * ```typescript\n     * let avatarDescription = this.avatar.roleDescription;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n\n    @HostBinding('attr.aria-roledescription')\n    public roleDescription: string;\n\n    /**\n     * @hidden\n     */\n    private _size: string | Size = 'small';\n\n    /**\n     * Sets the `id` of the avatar. If not set, the first avatar component will have `id` = `\"igx-avatar-0\"`.\n     *\n     * ```html\n     * <igx-avatar id=\"my-first-avatar\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-avatar-${NEXT_ID++}`;\n\n    /**\n     * Sets a round shape to the avatar if `roundShape` is `\"true\"`.\n     * By default the shape of the avatar is a square.\n     *\n     * ```html\n     * <igx-avatar roundShape = \"true\" ></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n\n    @HostBinding('class.igx-avatar--rounded')\n    @Input()\n    public roundShape = false;\n\n    /**\n     * Sets the avatar's `initials`/`icon` color.\n     *\n     *```html\n     *<igx-avatar color=\"blue\"></igx-avatar>\n     *```\n     *\n     * @memberof IgxAvatarComponent\n     */\n\n    @HostBinding('style.color')\n    @Input()\n    public color: string;\n\n    /**\n     * Sets the background color of the avatar.\n     *\n     * ```html\n     * <igx-avatar bgColor=\"yellow\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n\n    @HostBinding('style.background')\n    @Input()\n    public bgColor: string;\n\n    /**\n     * Sets `initials` to the avatar.\n     *\n     * ```html\n     * <igx-avatar initials=\"MN\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public initials: string;\n\n    /**\n     * Sets an `icon` to the avatar. All icons from the material icon set are supported.\n     *\n     * ```html\n     * <igx-avatar icon=\"phone\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public icon: string;\n\n    /**\n     * Sets the `image` source of the avatar.\n     *\n     * ```html\n     * <igx-avatar src=\"images/picture.jpg\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public src: string;\n\n    /**\n     * Returns the `size` of the avatar.\n     *\n     * ```typescript\n     *let avatarSize =  this.avatar.size;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public get size(): string | Size {\n        return this._size;\n    }\n\n    /**\n     * Sets the `size`  of the avatar.\n     * By default the `size` is `\"small\"`. It can be set to `\"medium\"` or `\"large\"`.\n     *\n     * ```\n     * <igx-avatar size=\"large\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    public set size(value: string | Size) {\n        switch (value) {\n            case 'small':\n            case 'medium':\n            case 'large':\n                this._size = value;\n                break;\n            default:\n                this._size = 'small';\n        }\n    }\n\n    /**\n     * Returns the type of the avatar.\n     *\n     * ```typescript\n     * let avatarType = this.avatar.type;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    get type(): AvatarType {\n        if (this.src) {\n            return AvatarType.IMAGE;\n        }\n\n        if (this.icon) {\n            return AvatarType.ICON;\n        }\n\n        if (this.initials) {\n            return AvatarType.INITIALS;\n        }\n\n        return AvatarType.DEFAULT;\n    }\n\n    /**\n     * Returns the template of the avatar.\n     *\n     * ```typescript\n     * let template = this.avatar.template;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    get template(): TemplateRef<any> {\n        switch (this.type) {\n            case AvatarType.IMAGE:\n                return this.imageTemplate;\n            case AvatarType.INITIALS:\n                return this.initialsTemplate;\n            case AvatarType.ICON:\n                return this.iconTemplate;\n            default:\n                return this.defaultTemplate;\n        }\n    }\n\n    constructor(public elementRef: ElementRef) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this.roleDescription = this.getRole();\n    }\n\n    /**\n     *@hidden\n     */\n    public ngAfterViewInit() {\n        this.elementRef.nativeElement.classList\n            .add(`igx-avatar--${this._size}`, `igx-avatar--${this.type}`);\n    }\n\n    /**\n     * @hidden\n     */\n    private getRole(): string {\n        switch (this.type) {\n            case AvatarType.IMAGE:\n                return 'image avatar';\n            case AvatarType.ICON:\n                return 'icon avatar';\n            case AvatarType.INITIALS:\n                return 'initials avatar';\n            default:\n                return 'custom avatar';\n        }\n    }\n\n    /**\n     * Returns the url of the `image`.\n     *\n     * ```typescript\n     * let imageSourceUrl = this.avatar.getSrcUrl();\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    public getSrcUrl() {\n        return `url(${this.src})`;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxAvatarComponent],\n    exports: [IgxAvatarComponent],\n    imports: [CommonModule, IgxIconModule]\n})\nexport class IgxAvatarModule { }\n","import { CommonModule } from '@angular/common';\nimport { Component, HostBinding, Input, NgModule } from '@angular/core';\nimport { IgxIconModule } from '../icon/index';\n\nlet NEXT_ID = 0;\n\nexport enum Type {\n    DEFAULT = 'default',\n    INFO = 'info',\n    SUCCESS = 'success',\n    WARNING = 'warning',\n    ERROR = 'error'\n}\n/**\n * **Ignite UI for Angular Badge** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/badge.html)\n *\n * The Ignite UI Badge is used to decorate avatars, navigation menus, or other components in the\n * application when visual notification is needed. They are usually designed as icons with a predefined\n * style to communicate information, success, warnings, or errors.\n *\n * Example:\n * ```html\n * <igx-avatar icon=\"person\" roundShape=\"true\" size=\"small\">\n *   <igx-badge icon=\"check\" type=\"success\" class=\"badge-style\">\n *   </igx-badge>\n * </igx-avatar>\n * ```\n * The `badge-style` class is used to position the badge:\n * ```css\n * .badge-style {\n *   position: absolute;\n *   bottom: -6px;\n *   right:-50px;\n * }\n * ```\n */\n@Component({\n    selector: 'igx-badge',\n    templateUrl: 'badge.component.html'\n})\nexport class IgxBadgeComponent {\n\n    /**\n    * An @Input property that sets the value of the `id` attribute.\n    * ```html\n    *<igx-badge id=\"igx-badge-2\" icon=\"check\" type=\"success\" class=\"badge-style\"></igx-badge>\n    * ```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-badge-${NEXT_ID++}`;\n\n    /**\n    * An @Input property controlling the type of the badge.\n    * Allowed values are `default`, `info`, `success`, `warning`, `error`.\n    * Providing an invalid value won't display a badge.\n    * ```html\n    *<igx-badge type=\"success\" icon=\"check\" class=\"badge-style\"></igx-badge>\n    * ```\n    */\n    @Input()\n    public type: string | Type = 'default';\n\n    /**\n    * An @Input property that sets the value to be displayed inside the badge.\n    * If an `icon` property is already set the `icon` will be displayed.\n    * If neither a `value` nor an `icon` is set the contentent of the badge will be empty.\n    * ```html\n    *<igx-badge value=\"11\" type=\"success\" class=\"badge-style\"></igx-badge>\n    * ```\n    */\n    @Input()\n    public value = '';\n\n    /**\n     * Set an icon for the badge from the material icons set.\n     * Has priority over the `value` property.\n     * If neither a `value` nor an `icon` is set the content of the badge will be empty.\n     * Providing an invalid value won't display anything.\n     * ```html\n     *<igx-badge icon=\"check\" type=\"success\" class=\"badge-style\" value=\"11\"></igx-badge>\n     * ```\n     */\n    @Input()\n    public icon: string;\n\n    /**\n     * This allows you to set value to role attribute.\n     *```html\n     *@ViewChild(\"MyBadge\", { read: IgxBadgeComponent })\n     *public badge: IgxBadgeComponent;\n     * //...\n     *badge.label = \"badge-status\";\n     * ```\n     */\n    @HostBinding('attr.role')\n    public role = 'status';\n\n    /**\n     * This allows you to disable igx-badge class. The default it's applied.\n     *```html\n     *@ViewChild(\"MyBadge\", { read: IgxBadgeComponent })\n     *public badge: IgxBadgeComponent;\n     * //...\n     *badge.cssClass = false;\n     * ```\n     */\n    @HostBinding('class.igx-badge')\n    public cssClass = 'igx-badge';\n\n    /**\n     * This allows you to set value to aria-label attribute.\n     *```html\n     *@ViewChild(\"MyBadge\", { read: IgxBadgeComponent })\n     *public badge: IgxBadgeComponent;\n     * //...\n     *badge.label = \"icon-badge\";\n     * ```\n     */\n    @HostBinding('attr.aria-label')\n    public label = 'badge';\n\n    /**\n     * @hidden\n     * Defines a human-readable, accessor, author-localized description for the `type` and the `icon` or `value` of the element.\n     */\n    get roleDescription() {\n        let message;\n\n        // tslint:disable-next-line:prefer-conditional-expression\n        if (this.icon) {\n            message = this.type + ' type badge with icon type ' + this.icon;\n        } else if (this.value) {\n            message = this.type + ' badge type with value ' + this.value;\n        } else {\n            message = this.type + ' badge type without value';\n        }\n\n        return message;\n    }\n\n    /**\n     * @hidden\n     * Method which makes the name of the class more descriptive.\n     * This helps the styling of the badges.\n     */\n    public setClasses() {\n        let classes = {};\n\n        switch (Type[this.type.toUpperCase()]) {\n            case Type.DEFAULT:\n                classes = {\n                    [`${this.cssClass}__circle--default`]: true\n                };\n                break;\n            case Type.INFO:\n                classes = {\n                    [`${this.cssClass}__circle--info`]: true\n                };\n                break;\n            case Type.SUCCESS:\n                classes = {\n                    [`${this.cssClass}__circle--success`]: true\n                };\n                break;\n            case Type.WARNING:\n                classes = {\n                    [`${this.cssClass}__circle--warning`]: true\n                };\n                break;\n            case Type.ERROR:\n                classes = {\n                    [`${this.cssClass}__circle--error`]: true\n                };\n                break;\n        }\n\n        return classes;\n    }\n\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxBadgeComponent],\n    exports: [IgxBadgeComponent],\n    imports: [CommonModule, IgxIconModule]\n})\nexport class IgxBadgeModule {\n}\n","import { Component, HostBinding, ElementRef, Input, ChangeDetectorRef, Inject } from '@angular/core';\nimport { IgxExpansionPanelBase, IGX_EXPANSION_PANEL_COMPONENT } from './expansion-panel.common';\n\n@Component({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-body',\n    template: `<ng-content></ng-content>`\n})\nexport class IgxExpansionPanelBodyComponent {\n    private _labelledBy = '';\n    private _label = '';\n    constructor(\n        @Inject(IGX_EXPANSION_PANEL_COMPONENT) public panel: IgxExpansionPanelBase,\n        public element: ElementRef, public cdr: ChangeDetectorRef) {\n    }\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-expansion-panel__body')\n    public cssClass = `igx-expansion-panel__body`;\n\n    /**\n     * Gets the `aria-label` attribute of the panel body\n     * Defaults to the panel id with '-region' in the end;\n     * Get\n     * ```typescript\n     *  const currentLabel = this.panel.body.label;\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-label')\n    public get label(): string {\n        return this._label || this.panel.id + '-region';\n    }\n    /**\n     * Sets the `aria-label` attribute of the panel body\n     * ```typescript\n     *  this.panel.body.label = 'my-custom-label';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-body [label]=\"'my-custom-label'\"></igx-expansion-panel-body>\n     * ```\n     */\n    public set label(val: string) {\n        this._label = val;\n    }\n\n    /**\n     * Gets the `aria-labelledby` attribute of the panel body\n     * Defaults to the panel header id;\n     * Get\n     * ```typescript\n     *  const currentLabel = this.panel.body.labelledBy;\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-labelledby')\n    public get labelledBy(): string {\n        return this._labelledBy;\n    }\n    /**\n     * Sets the `aria-labelledby` attribute of the panel body\n     * ```typescript\n     *  this.panel.body.labelledBy = 'my-custom-id';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-body [labelledBy]=\"'my-custom-id'\"></igx-expansion-panel-body>\n     * ```\n     */\n    public set labelledBy(val: string) {\n        this._labelledBy = val;\n    }\n\n    /**\n     * Gets/sets the `role` attribute of the panel body\n     * Default is 'region';\n     * Get\n     * ```typescript\n     *  const currentRole = this.panel.body.role;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.body.role = 'content';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-body [role]=\"'custom'\"></igx-expansion-panel-body>\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.role')\n    public role = 'region';\n}\n","import { EventEmitter } from '@angular/core';\nimport { AnimationReferenceMetadata } from '@angular/animations';\nimport { IBaseEventArgs } from '../core/utils';\n\nexport interface IgxExpansionPanelBase {\n    id: string;\n    cssClass: string;\n    /** @hidden @internal */\n    headerId: string;\n    collapsed: boolean;\n    animationSettings: { openAnimation: AnimationReferenceMetadata, closeAnimation: AnimationReferenceMetadata };\n    onCollapsed: EventEmitter<any>;\n    onExpanded: EventEmitter<any>;\n    collapse(evt?: Event);\n    expand(evt?: Event);\n    toggle(evt?: Event);\n}\n\n/** @hidden */\nexport const IGX_EXPANSION_PANEL_COMPONENT = 'IgxExpansionPanelToken';\n\nexport interface IExpansionPanelEventArgs extends IBaseEventArgs {\n    event: Event;\n    panel: IgxExpansionPanelBase;\n}\n","import { Directive, HostBinding } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-title'\n})\nexport class IgxExpansionPanelTitleDirective {\n    @HostBinding('class.igx-expansion-panel__header-title')\n    public cssClass = `igx-expansion-panel__header-title`;\n}\n\n/**\n * @hidden\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-description'\n})\nexport class IgxExpansionPanelDescriptionDirective {\n    @HostBinding('class.igx-expansion-panel__header-description')\n    public cssClass = `igx-expansion-panel__header-description`;\n}\n\n/**\n * @hidden\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-icon'\n})\nexport class IgxExpansionPanelIconDirective {\n}\n","import {\n    Component,\n    ChangeDetectorRef,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    Host,\n    EventEmitter,\n    Output,\n    ContentChild,\n    Inject\n} from '@angular/core';\nimport { IgxExpansionPanelIconDirective } from './expansion-panel.directives';\nimport { IExpansionPanelEventArgs, IGX_EXPANSION_PANEL_COMPONENT, IgxExpansionPanelBase } from './expansion-panel.common';\n\n/**\n * @hidden\n */\nexport enum ICON_POSITION {\n    LEFT = 'left',\n    NONE = 'none',\n    RIGHT = 'right'\n}\n\n\n@Component({\n    selector: 'igx-expansion-panel-header',\n    templateUrl: 'expansion-panel-header.component.html'\n})\nexport class IgxExpansionPanelHeaderComponent {\n     // properties section\n    private _iconTemplate = false;\n    /**\n     * Sets/gets the `id` of the expansion panel header.\n     * ```typescript\n     * let panelHeaderId =  this.panel.header.id;\n     * ```\n     * @memberof IgxExpansionPanelComponent\n     */\n    public id = '';\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxExpansionPanelIconDirective, { static: false })\n    public set iconTemplate(val: any) {\n        this._iconTemplate = <boolean>val;\n    }\n\n    /**\n     * @hidden\n     */\n    public get iconTemplate(): any {\n        return this._iconTemplate;\n    }\n\n    /**\n     * Gets/sets the `aria-level` attribute of the header\n     * Get\n     * ```typescript\n     *  const currentAriaLevel = this.panel.header.lv;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.lv = '5';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [lv]=\"myCustomLevel\"></igx-expansion-panel-header>\n     * ```\n     */\n    @HostBinding('attr.aria-level')\n    @Input()\n    public lv = '3';\n\n    /**\n     * Gets/sets the `role` attribute of the header\n     * Get\n     * ```typescript\n     *  const currentRole = this.panel.header.role;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.role = '5';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [role]=\"'custom'\"></igx-expansion-panel-header>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'heading';\n\n    /**\n     * @hidden\n     */\n    public get controls (): string {\n        return this.panel.id;\n    }\n\n    /**\n     * Gets/sets the position of the expansion-panel-header expand/collapse icon\n     * Accepts `left`, `right` or `none`\n     * ```typescript\n     *  const currentIconPosition = this.panel.header.iconPosition;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.iconPosition = 'left';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [iconPosition]=\"'right'\"></igx-expansion-panel-header>\n     * ```\n     */\n    @Input()\n    public iconPosition: ICON_POSITION = ICON_POSITION.LEFT;\n\n    /**\n     * Emitted whenever a user interacts with the header host\n     * ```typescript\n     *  handleInteraction(event: IExpansionPanelEventArgs) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header (onInteraction)=\"handleInteraction($event)\">\n     *      ...\n     *  </igx-expansion-panel-header>\n     * ```\n     */\n    @Output()\n    public onInteraction = new EventEmitter<IExpansionPanelEventArgs>();\n\n    /**\n     * @hidden\n     */\n     @HostBinding('class.igx-expansion-panel__header')\n     public cssClass = 'igx-expansion-panel__header';\n\n     /**\n     * @hidden\n     */\n     @HostBinding('class.igx-expansion-panel__header--expanded')\n     public get isExpanded () {\n            return !this.panel.collapsed;\n         }\n\n    /**\n     * Gets/sets the whether the header is disabled\n     * When disabled, the header will not handle user events and will stop their propagation\n     *\n     * ```typescript\n     *  const isDisabled = this.panel.header.disabled;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.disabled = true;\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [disabled]=\"true\">\n     *     ...\n     *  </igx-expansion-panel-header>\n     * ```\n     */\n    @Input()\n    @HostBinding('class.igx-expansion-panel--disabled')\n    public disabled = false;\n\n    constructor(@Host() @Inject(IGX_EXPANSION_PANEL_COMPONENT) public panel: IgxExpansionPanelBase, public cdr: ChangeDetectorRef,\n     public elementRef: ElementRef) {\n         this.id = `${this.panel.id}-header`;\n     }\n\n     /**\n     * @hidden\n     */\n     @HostListener('keydown.Enter', ['$event'])\n     @HostListener('keydown.Space', ['$event'])\n     @HostListener('keydown.Spacebar', ['$event'])\n     @HostListener('click', ['$event'])\n     public onAction(evt?: Event) {\n         if (this.disabled) {\n            evt.stopPropagation();\n            return;\n         }\n         this.onInteraction.emit({ event: evt, panel: this.panel });\n         this.panel.toggle(evt);\n         evt.preventDefault();\n     }\n\n    /** @hidden @internal */\n    @HostListener('keydown.Alt.ArrowDown', ['$event'])\n    public openPanel(event: KeyboardEvent) {\n        if (event.altKey) {\n            this.panel.expand(event);\n            this.onInteraction.emit({ event: event, panel: this.panel });\n        }\n     }\n\n     /** @hidden @internal */\n     @HostListener('keydown.Alt.ArrowUp', ['$event'])\n     public closePanel(event: KeyboardEvent) {\n        if (event.altKey) {\n            this.panel.collapse(event);\n            this.onInteraction.emit({ event: event, panel: this.panel });\n        }\n     }\n\n     /**\n     * @hidden\n     */\n     public get iconPositionClass(): string {\n        switch (this.iconPosition) {\n            case (ICON_POSITION.LEFT):\n                return `igx-expansion-panel__header-icon--start`;\n            case (ICON_POSITION.RIGHT):\n                return `igx-expansion-panel__header-icon--end`;\n            case (ICON_POSITION.NONE):\n                return `igx-expansion-panel__header-icon--none`;\n            default:\n                return '';\n        }\n     }\n}\n","import {\n    Component,\n    ChangeDetectorRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    Output,\n    ContentChild,\n    forwardRef,\n    AfterContentInit\n} from '@angular/core';\nimport { AnimationBuilder, AnimationReferenceMetadata, useAnimation } from '@angular/animations';\nimport { growVerOut, growVerIn } from '../animations/main';\nimport { IgxExpansionPanelBodyComponent } from './expansion-panel-body.component';\nimport { IgxExpansionPanelHeaderComponent } from './expansion-panel-header.component';\nimport { IGX_EXPANSION_PANEL_COMPONENT, IgxExpansionPanelBase, IExpansionPanelEventArgs } from './expansion-panel.common';\n\nlet NEXT_ID = 0;\n\nexport interface AnimationSettings {\n    openAnimation: AnimationReferenceMetadata;\n    closeAnimation: AnimationReferenceMetadata;\n}\n@Component({\n    selector: 'igx-expansion-panel',\n    templateUrl: 'expansion-panel.component.html',\n    providers: [{ provide: IGX_EXPANSION_PANEL_COMPONENT, useExisting: IgxExpansionPanelComponent }]\n})\nexport class IgxExpansionPanelComponent implements IgxExpansionPanelBase, AfterContentInit {\n    private _collapsed = true;\n    /**\n     * Sets/gets the animation settings of the expansion panel component\n     * Open and Close animation should be passed\n     *\n     * Get\n     * ```typescript\n     *  const currentAnimations = this.panel.animationSettings;\n     * ```\n     * Set\n     * ```typescript\n     *  import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     *  ...\n     *  this.panel.animationsSettings = {\n     *      openAnimation: slideInLeft,\n     *      closeAnimation: slideOutRight\n     * };\n     * ```\n     * or via template\n     * ```typescript\n     *  import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     *  ...\n     *  myCustomAnimationObject = {\n     *      openAnimation: slideInLeft,\n     *      closeAnimation: slideOutRight\n     * };\n     * ```html\n     *  <igx-expansion-panel [animationSettings]='myCustomAnimationObject'>\n     *  ...\n     *  </igx-expansion-panel>\n     * ```\n     */\n    @Input()\n    public animationSettings: AnimationSettings = {\n        openAnimation: growVerIn,\n        closeAnimation: growVerOut\n    };\n\n    /**\n     * Sets/gets the `id` of the expansion panel component.\n     * If not set, `id` will have value `\"igx-expansion-panel-0\"`;\n     * ```html\n     * <igx-expansion-panel id = \"my-first-expansion-panel\"></igx-expansion-panel>\n     * ```\n     * ```typescript\n     * let panelId =  this.panel.id;\n     * ```\n     * @memberof IgxExpansionPanelComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-expansion-panel-${NEXT_ID++}`;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-expansion-panel')\n    public cssClass = 'igx-expansion-panel';\n\n    /**\n     * Gets/sets whether the component is collapsed (its content is hidden)\n     * Get\n     * ```typescript\n     *  const myPanelState: boolean = this.panel.collapsed;\n     * ```\n     * Set\n     * ```html\n     *  this.panel.collapsed = true;\n     * ```\n     *\n     * Two-way data binding:\n     * ```html\n     * <igx-expansion-panel [(collapsed)]=\"model.isCollapsed\"></igx-expansion-panel>\n     * ```\n     */\n    @Input()\n    public get collapsed(): boolean {\n        return this._collapsed;\n    }\n    public set collapsed(value) {\n        this._collapsed = value;\n        this.collapsedChange.emit(this._collapsed);\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public collapsedChange = new EventEmitter<boolean>();\n\n    /**\n     * Emitted when the expansion panel finishes collapsing\n     * ```typescript\n     *  handleCollapsed(event: {\n     *  panel: IgxExpansionPanelComponent,\n     *  event: Event\n     * })\n     * ```\n     * ```html\n     *  <igx-expansion-panel (onCollapsed)=\"handleCollapsed($event)\">\n     *      ...\n     *  </igx-expansion-panel>\n     * ```\n     */\n    @Output()\n    public onCollapsed = new EventEmitter<IExpansionPanelEventArgs>();\n\n    /**\n     * Emitted when the expansion panel finishes expanding\n     * ```typescript\n     *  handleExpanded(event: {\n     *  panel: IgxExpansionPanelComponent,\n     *  event: Event\n     * })\n     * ```\n     * ```html\n     *  <igx-expansion-panel (onExpanded)=\"handleExpanded($event)\">\n     *      ...\n     *  </igx-expansion-panel>\n     * ```\n     */\n    @Output()\n    public onExpanded = new EventEmitter<IExpansionPanelEventArgs>();\n\n    /**\n     * @hidden\n     */\n    public get headerId() {\n        return this.header ? `${this.id}-header` : '';\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(forwardRef(() => IgxExpansionPanelBodyComponent),\n        { read: forwardRef(() => IgxExpansionPanelBodyComponent), static: false })\n    public body: IgxExpansionPanelBodyComponent;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(forwardRef(() => IgxExpansionPanelHeaderComponent),\n        { read: forwardRef(() => IgxExpansionPanelHeaderComponent), static: false })\n    public header: IgxExpansionPanelHeaderComponent;\n\n    constructor(private cdr: ChangeDetectorRef, private builder: AnimationBuilder) { }\n\n    /** @hidden */\n    ngAfterContentInit(): void {\n        if (this.body && this.header) {\n            // schedule at end of turn:\n            Promise.resolve().then(() => {\n                this.body.labelledBy = this.body.labelledBy || this.headerId;\n                this.body.label = this.body.label || this.id + '-region';\n            });\n        }\n    }\n\n    private playOpenAnimation(cb: () => void) {\n        if (!this.body) { // if not body element is passed, there is nothing to animate\n            return;\n        }\n        const animation = useAnimation(this.animationSettings.openAnimation);\n        const animationBuilder = this.builder.build(animation);\n        const openAnimationPlayer = animationBuilder.create(this.body.element.nativeElement);\n\n        openAnimationPlayer.onDone(() => {\n            cb();\n            openAnimationPlayer.reset();\n        });\n\n        openAnimationPlayer.play();\n    }\n\n    private playCloseAnimation(cb: () => void) {\n        if (!this.body) { // if not body element is passed, there is nothing to animate\n            return;\n        }\n        const animation = useAnimation(this.animationSettings.closeAnimation);\n        const animationBuilder = this.builder.build(animation);\n        const closeAnimationPlayer = animationBuilder.create(this.body.element.nativeElement);\n        closeAnimationPlayer.onDone(() => {\n            cb();\n            closeAnimationPlayer.reset();\n        });\n\n        closeAnimationPlayer.play();\n    }\n\n    /**\n     * Collapses the panel\n     *\n     * ```html\n     *  <igx-expansion-panel #myPanel>\n     *      ...\n     *  </igx-expansion-panel>\n     *  <button (click)=\"myPanel.collapse($event)\">Collpase Panel</button>\n     * ```\n     */\n    collapse(evt?: Event) {\n        if (this.collapsed) { // If expansion panel is already collapsed, do nothing\n            return;\n        }\n        this.playCloseAnimation(\n            () => {\n                this.onCollapsed.emit({ event: evt, panel: this });\n                this.collapsed = true;\n            }\n        );\n    }\n\n    /**\n     * Expands the panel\n     *\n     * ```html\n     *  <igx-expansion-panel #myPanel>\n     *      ...\n     *  </igx-expansion-panel>\n     *  <button (click)=\"myPanel.expand($event)\">Expand Panel</button>\n     * ```\n     */\n    expand(evt?: Event) {\n        if (!this.collapsed) { // If the panel is already opened, do nothing\n            return;\n        }\n        this.collapsed = false;\n        this.cdr.detectChanges();\n        this.playOpenAnimation(\n            () => {\n                this.onExpanded.emit({ event: evt, panel: this });\n            }\n        );\n    }\n\n    /**\n     * Toggles the panel\n     *\n     * ```html\n     *  <igx-expansion-panel #myPanel>\n     *      ...\n     *  </igx-expansion-panel>\n     *  <button (click)=\"myPanel.toggle($event)\">Expand Panel</button>\n     * ```\n     */\n    toggle(evt?: Event) {\n        if (this.collapsed) {\n            this.open(evt);\n        } else {\n            this.close(evt);\n        }\n    }\n\n    open(evt?: Event) {\n        this.expand(evt);\n    }\n    close(evt?: Event) {\n        this.collapse(evt);\n    }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxAvatarModule } from '../avatar/avatar.component';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxExpansionPanelComponent } from './expansion-panel.component';\nimport { IgxExpansionPanelHeaderComponent } from './expansion-panel-header.component';\nimport { IgxExpansionPanelBodyComponent } from './expansion-panel-body.component';\nimport { IgxExpansionPanelDescriptionDirective, IgxExpansionPanelTitleDirective,\n  IgxExpansionPanelIconDirective } from './expansion-panel.directives';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxExpansionPanelComponent,\n    IgxExpansionPanelHeaderComponent,\n    IgxExpansionPanelBodyComponent,\n    IgxExpansionPanelDescriptionDirective,\n    IgxExpansionPanelTitleDirective,\n    IgxExpansionPanelIconDirective\n  ],\n  entryComponents: [\n  ],\n  exports: [\n    IgxExpansionPanelComponent,\n    IgxExpansionPanelHeaderComponent,\n    IgxExpansionPanelBodyComponent,\n    IgxExpansionPanelDescriptionDirective,\n    IgxExpansionPanelTitleDirective,\n      IgxExpansionPanelIconDirective\n  ],\n  imports: [\n    CommonModule,\n    IgxRippleModule,\n    IgxIconModule,\n    IgxButtonModule,\n    IgxAvatarModule\n  ]\n})\nexport class IgxExpansionPanelModule {\n}\n","import { Directive } from '@angular/core';\n\n// tslint:disable:directive-selector\n@Directive({\n    selector: 'igx-banner-actions'\n})\nexport class IgxBannerActionsDirective {\n}\n","import { Component, NgModule, EventEmitter, Output, Input, ViewChild, ElementRef,\n    ContentChild, HostBinding } from '@angular/core';\nimport { IgxExpansionPanelModule } from '../expansion-panel/expansion-panel.module';\nimport { AnimationSettings } from '../expansion-panel/expansion-panel.component';\nimport { IgxExpansionPanelComponent } from '../expansion-panel';\nimport { IgxIconModule, IgxIconComponent } from '../icon/index';\nimport { IToggleView } from '../core/navigation';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxBannerActionsDirective } from './banner.directives';\nimport { CommonModule } from '@angular/common';\nimport { CancelableEventArgs, IBaseEventArgs } from '../core/utils';\n\nexport interface BannerEventArgs extends IBaseEventArgs {\n    banner: IgxBannerComponent;\n    event?: Event;\n}\n\nexport interface BannerCancelEventArgs extends BannerEventArgs, CancelableEventArgs {\n}\n/**\n * **Ignite UI for Angular Banner** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/banner.html)\n *\n * The Ignite UI Banner provides a highly templateable and easy to use banner that can be shown in your application.\n *\n * Usage:\n *\n * ```html\n * <igx-banner #banner>\n *   Our privacy settings have changed.\n *  <igx-banner-actions>\n *      <button igxButton=\"raised\">Read More</button>\n *      <button igxButton=\"raised\">Accept and Continue</button>\n *  </igx-banner-actions>\n * </igx-banner>\n * ```\n */\n@Component({\n    selector: 'igx-banner',\n    templateUrl: 'banner.component.html'\n})\nexport class IgxBannerComponent implements IToggleView {\n    private _bannerEvent: BannerEventArgs;\n    private _animationSettings: AnimationSettings;\n\n    @ViewChild('expansionPanel', { static: true })\n    private _expansionPanel: IgxExpansionPanelComponent;\n\n    @ContentChild(IgxBannerActionsDirective, { static: false })\n    private _bannerActionTemplate: IgxBannerActionsDirective;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxIconComponent, { static: false })\n    public bannerIcon: IgxIconComponent;\n\n    /**\n     * Fires after the banner shows up\n     * ```typescript\n     * public handleOpened(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onOpened)=\"handleOpened($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter<BannerEventArgs>();\n\n    /**\n     * Fires before the banner shows up\n     * ```typescript\n     * public handleOpening(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onOpening)=\"handleOpening($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<BannerCancelEventArgs>();\n\n    /**\n     * Fires after the banner hides\n     * ```typescript\n     * public handleClosed(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onClosed)=\"handleClosed($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter<BannerEventArgs>();\n\n    /**\n     * Fires before the banner hides\n     * ```typescript\n     * public handleClosing(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onClosing)=\"handleClosing($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<BannerCancelEventArgs>();\n\n    /** @hidden */\n    public get useDefaultTemplate(): boolean {\n        return !this._bannerActionTemplate;\n    }\n\n    /**\n     * Get the animation settings used by the banner open/close methods\n     * ```typescript\n     * let currentAnimations: AnimationSettings = banner.animationSettings\n     * ```\n     */\n    @Input()\n    public get animationSettings(): AnimationSettings {\n        return this._animationSettings ? this._animationSettings : this._expansionPanel.animationSettings;\n    }\n\n    /**\n     * Set the animation settings used by the banner open/close methods\n     * ```typescript\n     * import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     * ...\n     * banner.animationSettings: AnimationSettings = { openAnimation: slideInLeft, closeAnimation: slideOutRight };\n     * ```\n     */\n    public set animationSettings(settings: AnimationSettings) {\n        this._animationSettings = settings;\n    }\n    /**\n     * Gets whether banner is collapsed\n     *\n     * ```typescript\n     * const isCollapsed: boolean = banner.collapsed;\n     * ```\n     */\n    public get collapsed() {\n        return this._expansionPanel.collapsed;\n    }\n\n    /**\n     * Returns the native element of the banner component\n     * ```typescript\n     *  const myBannerElement: HTMLElement = banner.element;\n     * ```\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.display')\n    public get displayStyle(): string {\n        return this.collapsed ? '' : 'block';\n    }\n\n    constructor(public elementRef: ElementRef) { }\n\n    /**\n     * Opens the banner\n     *\n     * ```typescript\n     *  myBanner.open();\n     * ```\n     *\n     * ```html\n     * <igx-banner #banner>\n     * ...\n     * </igx-banner>\n     * <button (click)=\"banner.open()\">Open Banner</button>\n     * ```\n     */\n    public open(event?: Event) {\n        this._bannerEvent = { banner: this, event};\n        const openingArgs = {\n            banner: this,\n            event,\n            cancel: false\n        };\n        this.onOpening.emit(openingArgs);\n        if (openingArgs.cancel) {\n            return;\n        }\n        this._expansionPanel.open(event);\n    }\n\n    /**\n     * Closes the banner\n     *\n     * ```typescript\n     *  myBanner.close();\n     * ```\n     *\n     * ```html\n     * <igx-banner #banner>\n     * ...\n     * </igx-banner>\n     * <button (click)=\"banner.close()\">Close Banner</button>\n     * ```\n     */\n    public close(event?: Event) {\n        this._bannerEvent = { banner: this, event};\n        const closingArgs = {\n            banner: this,\n            event,\n            cancel: false\n        };\n        this.onClosing.emit(closingArgs);\n        if (closingArgs.cancel) {\n            return;\n        }\n        this._expansionPanel.close(event);\n    }\n\n    /**\n     * Toggles the banner\n     *\n     * ```typescript\n     *  myBanner.toggle();\n     * ```\n     *\n     * ```html\n     * <igx-banner #banner>\n     * ...\n     * </igx-banner>\n     * <button (click)=\"banner.toggle()\">Toggle Banner</button>\n     * ```\n     */\n    toggle(event?: Event) {\n        if (this.collapsed) {\n            this.open(event);\n        } else {\n            this.close(event);\n        }\n    }\n\n    /** @hidden */\n    public onExpansionPanelOpen() {\n        this.onOpened.emit(this._bannerEvent);\n    }\n\n    /** @hidden */\n    public onExpansionPanelClose() {\n        this.onClosed.emit(this._bannerEvent);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxBannerComponent, IgxBannerActionsDirective],\n    exports: [IgxBannerComponent, IgxBannerActionsDirective],\n    imports: [CommonModule, IgxExpansionPanelModule, IgxIconModule, IgxButtonModule, IgxRippleModule]\n})\nexport class IgxBannerModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    Component,\n    ContentChildren,\n    ChangeDetectorRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    Input,\n    NgModule,\n    Output,\n    Optional,\n    QueryList,\n    Renderer2,\n    ViewChildren,\n    OnDestroy\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { IgxButtonDirective, IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxIconModule } from '../icon/index';\nimport { takeUntil } from 'rxjs/operators';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\nimport { IBaseEventArgs } from '../core/utils';\n\nexport enum ButtonGroupAlignment { horizontal, vertical }\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Button Group** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/buttongroup.html)\n *\n * The Ignite UI Button Group displays a group of buttons either vertically or horizontally.  The group supports\n * single, multiple and toggle selection.\n *\n * Example:\n * ```html\n * <igx-buttongroup multiSelection=\"true\" [values]=\"fontOptions\">\n * </igx-buttongroup>\n * ```\n * The `fontOptions` value shown above is defined as:\n * ```typescript\n * this.fontOptions = [\n *   { icon: 'format_bold', selected: false },\n *   { icon: 'format_italic', selected: false },\n *   { icon: 'format_underlined', selected: false }];\n * ```\n */\n@Component({\n    selector: 'igx-buttongroup',\n    templateUrl: 'buttongroup-content.component.html'\n})\n\nexport class IgxButtonGroupComponent extends DisplayDensityBase implements AfterContentInit, AfterViewInit, OnDestroy {\n\n    private _disabled = false;\n    protected buttonClickNotifier$ = new Subject<boolean>();\n    protected queryListNotifier$ = new Subject<boolean>();\n\n    @ViewChildren(IgxButtonDirective) private viewButtons: QueryList<IgxButtonDirective>;\n    @ContentChildren(IgxButtonDirective) private templateButtons: QueryList<IgxButtonDirective>;\n\n    /**\n     * A collection containing all buttons inside the button group.\n     */\n    public get buttons(): IgxButtonDirective[] {\n        return [...this.viewButtons.toArray(), ...this.templateButtons.toArray()];\n    }\n\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not set it will be automatically generated.\n     * ```html\n     *  <igx-buttongroup [id]=\"'igx-dialog-56'\" [multiSelection]=\"!multi\" [values]=\"alignOptions\">\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-buttongroup-${NEXT_ID++}`;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.zIndex')\n    public zIndex = 0;\n\n    /**\n     * Allows you to set a style using the `itemContentCssClass` input.\n     * The value should be the CSS class name that will be applied to the button group.\n     *```typescript\n     *public style1 = \"styleClass\";\n     * //..\n     *```\n     * ```html\n     *<igx-buttongroup [itemContentCssClass]=\"style1\" [multiSelection]=\"!multi\" [values]=\"alignOptions\">\n     *```\n     */\n    @Input() set itemContentCssClass(value: string) {\n        this._itemContentCssClass = value || this._itemContentCssClass;\n    }\n\n    /**\n     * Returns the CSS class of the item content of the `IgxButtonGroup`.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *   let buttonSelect = this.buttonG.itemContentCssClass;\n     *}\n     *```\n     */\n    get itemContentCssClass(): string {\n        return this._itemContentCssClass;\n    }\n\n    /**\n     * An @Input property that enables selecting multiple buttons. By default, multi-selection is false.\n     * ```html\n     * <igx-buttongroup [multiSelection]=\"false\" [alignment]=\"alignment\"></igx-buttongroup>\n     * ```\n     */\n    @Input() public multiSelection = false;\n    /**\n     * An @Input property that allows setting the buttons in the button group.\n     * ```typescript\n     *  public ngOnInit() {\n     *      this.cities = [\n     *        new Button({\n     *          label: \"Sofia\"\n     *      }),\n     *        new Button({\n     *          label: \"London\"\n     *      }),\n     *        new Button({\n     *          label: \"New York\",\n     *          selected: true\n     *      }),\n     *        new Button({\n     *          label: \"Tokyo\"\n     *      })\n     *  ];\n     *  }\n     *  //..\n     * ```\n     * ```html\n     *  <igx-buttongroup [multiSelection]=\"false\" [values]=\"cities\"></igx-buttongroup>\n     * ```\n     */\n    @Input() public values: any;\n    /**\n     * An @Input property that allows you to disable the `igx-buttongroup` component. By default it's false.\n     * ```html\n     * <igx-buttongroup [disabled]=\"true\" [multiSelection]=\"multi\" [values]=\"fontOptions\"></igx-buttongroup>\n     * ```\n     */\n    @Input()\n    public get disabled(): boolean {\n        return this._disabled;\n    }\n    public set disabled(value: boolean) {\n        if (this._disabled !== value) {\n            this._disabled = value;\n\n            if (this.viewButtons && this.templateButtons) {\n                this.buttons.forEach((b) => b.disabled = this._disabled);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectedIndexes: number[] = [];\n\n    /**\n     * Allows you to set the button group alignment.\n     * Available options are `ButtonGroupAlignment.horizontal` (default) and `ButtonGroupAlignment.vertical`.\n     * ```typescript\n     *public alignment = ButtonGroupAlignment.vertical;\n     * //..\n     * ```\n     * ```html\n     *<igx-buttongroup [multiSelection]=\"false\" [values]=\"cities\" [alignment]=\"alignment\"></igx-buttongroup>\n     * ```\n     */\n    @Input() set alignment(value: ButtonGroupAlignment) {\n        this._isVertical = value === ButtonGroupAlignment.vertical;\n    }\n    /**\n     * Returns the alignment of the `igx-buttongroup`.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    let buttonAlignment = this.buttonG.alignment;\n     *}\n     *```\n     */\n    get alignment(): ButtonGroupAlignment {\n        return this._isVertical ? ButtonGroupAlignment.vertical : ButtonGroupAlignment.horizontal;\n    }\n\n    /**\n     * An @Ouput property that emits an event when a button is selected.\n     *```typescript\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onSelect(buttongroup){\n     *    this.toast.show()\n     *}\n     * //...\n     *```\n     *```html\n     * <igx-buttongroup #MyChild [multiSelection]=\"!multi\" (onSelect)=\"onSelect($event)\"></igx-buttongroup>\n     *<igx-toast #toast message=\"You have made a selection!\"></igx-toast>\n     *```\n     */\n    @Output() public onSelect = new EventEmitter<IButtonGroupEventArgs>();\n\n    /**\n     * An @Ouput property that emits an event when a button is deselected.\n     *```typescript\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onUnselect(buttongroup){\n     *    this.toast.show()\n     *}\n     * //...\n     *```\n     *```html\n     * igx-buttongroup #MyChild [multiSelection]=\"multi\" (onUnselect)=\"onUnselect($event)\"></igx-buttongroup>\n     *<igx-toast #toast message=\"You have deselected a button!\"></igx-toast>\n     *```\n     */\n    @Output() public onUnselect = new EventEmitter<IButtonGroupEventArgs>();\n\n    /**\n     * Returns true if the `igx-buttongroup` alignment is vertical.\n     * Note that in order for the accessor to work correctly the property should be set explicitly.\n     * ```html\n     * <igx-buttongroup #MyChild [alignment]=\"alignment\" [values]=\"alignOptions\">\n     * ```\n     * ```typescript\n     * //...\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    let orientation = this.buttonG.isVertical;\n     *}\n     *```\n     */\n    public get isVertical(): boolean {\n        return this._isVertical;\n    }\n    private _isVertical: boolean;\n    private _itemContentCssClass: string;\n\n    constructor(private _cdr: ChangeDetectorRef, private _renderer: Renderer2,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n    }\n\n    /**\n     * Gets the selected button/buttons.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    let selectedButton = this.buttonG.selectedButtons;\n     *}\n     *```\n     */\n    get selectedButtons(): IgxButtonDirective[] {\n        return this.buttons.filter((b, i) => {\n            return this.selectedIndexes.indexOf(i) !== -1;\n        });\n\n    }\n\n    /**\n     * Selects a button by its index.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    this.buttonG.selectButton(2);\n     *    this.cdr.detectChanges();\n     *}\n     *```\n     * @memberOf {@link IgxButtonGroupComponent}\n     */\n    public selectButton(index: number) {\n        if (index >= this.buttons.length || index < 0) {\n            return;\n        }\n\n        const button = this.buttons[index];\n        const buttonElement = button.nativeElement;\n\n        this.selectedIndexes.push(index);\n        button.selected = true;\n\n        this._renderer.setAttribute(buttonElement, 'aria-pressed', 'true');\n        this._renderer.addClass(buttonElement, 'igx-button-group__item--selected');\n\n        this.onSelect.emit({ button: button, index: index });\n\n        const indexInViewButtons = this.viewButtons.toArray().indexOf(button);\n        if (indexInViewButtons !== -1) {\n            this.values[indexInViewButtons].selected = true;\n        }\n\n        // deselect other buttons if multiSelection is not enabled\n        if (!this.multiSelection && this.selectedIndexes.length > 1) {\n            this.buttons.forEach((b, i) => {\n                if (i !== index && this.selectedIndexes.indexOf(i) !== -1) {\n                    this.deselectButton(i);\n                }\n            });\n        }\n    }\n\n    /**\n     * Deselects a button by its index.\n     * ```typescript\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    this.buttonG.deselectButton(2);\n     *    this.cdr.detectChanges();\n     *}\n     * ```\n     * @memberOf {@link IgxButtonGroupComponent}\n     */\n    public deselectButton(index: number) {\n        if (index >= this.buttons.length || index < 0) {\n            return;\n        }\n\n        const button = this.buttons[index];\n        const buttonElement = button.nativeElement;\n\n        this.selectedIndexes.splice(this.selectedIndexes.indexOf(index), 1);\n        button.selected = false;\n\n        this._renderer.setAttribute(buttonElement, 'aria-pressed', 'false');\n        this._renderer.removeClass(buttonElement, 'igx-button-group__item--selected');\n\n        this.onUnselect.emit({ button: button, index: index });\n\n        const indexInViewButtons = this.viewButtons.toArray().indexOf(button);\n        if (indexInViewButtons !== -1) {\n            this.values[indexInViewButtons].selected = false;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        this.templateButtons.forEach((button) => {\n            if (!button.initialDensity) {\n                button.displayDensity = this.displayDensity;\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        const initButtons = () => {\n            // Cancel any existing buttonClick subscriptions\n            this.buttonClickNotifier$.next();\n\n            this.selectedIndexes.splice(0, this.selectedIndexes.length);\n\n            // initial configuration\n            this.buttons.forEach((button, index) => {\n                const buttonElement = button.nativeElement;\n\n                if (this.disabled) {\n                    button.disabled = true;\n                }\n\n                if (button.selected) {\n                    this.selectButton(index);\n                }\n\n                button.buttonClick.pipe(takeUntil(this.buttonClickNotifier$)).subscribe((ev) => this._clickHandler(ev, index));\n                this._renderer.addClass(buttonElement, 'igx-button-group__item');\n            });\n        };\n\n        this.viewButtons.changes.pipe(takeUntil(this.queryListNotifier$)).subscribe(() => initButtons());\n        this.templateButtons.changes.pipe(takeUntil(this.queryListNotifier$)).subscribe(() => initButtons());\n        initButtons();\n\n        this._cdr.detectChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.buttonClickNotifier$.next();\n        this.buttonClickNotifier$.complete();\n\n        this.queryListNotifier$.next();\n        this.queryListNotifier$.complete();\n    }\n\n    /**\n     *@hidden\n     */\n    public _clickHandler(event, i) {\n        if (this.selectedIndexes.indexOf(i) !== -1) {\n            this.deselectButton(i);\n        } else {\n            this.selectButton(i);\n        }\n    }\n}\n\nexport interface IButtonGroupEventArgs extends IBaseEventArgs {\n    button: IgxButtonDirective;\n    index: number;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxButtonGroupComponent],\n    exports: [IgxButtonGroupComponent],\n    imports: [IgxButtonModule, CommonModule, IgxRippleModule, IgxIconModule]\n})\n\nexport class IgxButtonGroupModule {\n}\n","export interface DateRangeDescriptor {\n    type: DateRangeType;\n    dateRange?: Date[];\n}\n\nexport enum DateRangeType {\n    After,\n    Before,\n    Between,\n    Specific,\n    Weekdays,\n    Weekends\n}\n","import { DateRangeDescriptor, DateRangeType } from '../core/dates';\n\nconst MDAYS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst FEBRUARY = 1;\n\nexport function range(start = 0, stop, step = 1) {\n    const res = [];\n    const cur = (stop === undefined) ? 0 : start;\n    const max = (stop === undefined) ? start : stop;\n    for (let i = cur; step < 0 ? i > max : i < max; i += step) {\n        res.push(i);\n    }\n    return res;\n}\n\n/**\n * Returns true for leap years, false for non-leap years.\n *\n * @export\n * @param year\n * @returns\n */\nexport function isLeap(year: number): boolean {\n    return (year % 4 === 0) && ((year % 100 !== 0) || (year % 400 === 0));\n}\n\nexport function weekDay(year: number, month: number, day: number): number {\n    return new Date(year, month, day).getDay();\n}\n\n/**\n * Return weekday and number of days for year, month.\n *\n * @export\n * @param year\n * @param month\n * @returns\n */\nexport function monthRange(year: number, month: number): number[] {\n    if ((month < 0) || (month > 11)) {\n        throw new Error('Invalid month specified');\n    }\n    const day = weekDay(year, month, 1);\n    let nDays = MDAYS[month];\n    if ((month === FEBRUARY) && (isLeap(year))) {\n        nDays++;\n    }\n    return [day, nDays];\n}\n\nexport function isDateInRanges(date: Date, ranges: DateRangeDescriptor[]): boolean {\n    date = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n    const dateInMs = date.getTime();\n\n    if (!ranges) {\n        return false;\n    }\n\n    for (const descriptor of ranges) {\n        const dRanges = descriptor.dateRange ? descriptor.dateRange.map(\n            r => new Date(r.getFullYear(), r.getMonth(), r.getDate())) : undefined;\n        switch (descriptor.type) {\n            case (DateRangeType.After):\n                if (dateInMs > dRanges[0].getTime()) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Before):\n                if (dateInMs < dRanges[0].getTime()) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Between):\n                const dRange = dRanges.map(d => d.getTime());\n                const min = Math.min(dRange[0], dRange[1]);\n                const max = Math.max(dRange[0], dRange[1]);\n                if (dateInMs >= min && dateInMs <= max) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Specific):\n                const datesInMs = dRanges.map(d => d.getTime());\n                for (const specificDateInMs of datesInMs) {\n                    if (dateInMs === specificDateInMs) {\n                        return true;\n                    }\n                }\n\n                break;\n            case (DateRangeType.Weekdays):\n                const day = date.getDay();\n                if (day % 6 !== 0) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Weekends):\n                const weekday = date.getDay();\n                if (weekday % 6 === 0) {\n                    return true;\n                }\n\n                break;\n            default:\n                return false;\n        }\n    }\n\n    return false;\n}\n\nexport interface ICalendarDate {\n    date: Date;\n    isCurrentMonth: boolean;\n    isPrevMonth: boolean;\n    isNextMonth: boolean;\n}\n\nexport interface IFormattedParts {\n    value: string;\n    literal?: string;\n    combined: string;\n}\n\nexport interface IFormattingOptions {\n    day?: string;\n    month?: string;\n    weekday?: string;\n    year?: string;\n}\n\n\nexport interface IFormattingViews {\n    day?: boolean;\n    month?: boolean;\n    year?: boolean;\n}\n\nexport enum WEEKDAYS {\n    SUNDAY = 0,\n    MONDAY = 1,\n    TUESDAY = 2,\n    WEDNESDAY = 3,\n    THURSDAY = 4,\n    FRIDAY = 5,\n    SATURDAY = 6\n}\n\nexport class Calendar {\n\n    private _firstWeekDay: number | WEEKDAYS;\n\n    constructor(firstWeekDay: number | WEEKDAYS = WEEKDAYS.SUNDAY) {\n        this._firstWeekDay = firstWeekDay;\n    }\n\n    public get firstWeekDay(): number {\n        return this._firstWeekDay % 7;\n    }\n\n    public set firstWeekDay(value: number) {\n        this._firstWeekDay = value;\n    }\n\n    /**\n     * Returns an array of weekdays for one week starting\n     * with the currently set `firstWeekDay`\n     *\n     * this.firstWeekDay = 0 (Sunday) --> [0, 1, 2, 3, 4, 5, 6]\n     * this.firstWeekDay = 1 (Monday) --> [1, 2, 3, 4, 5, 6, 0]\n     *\n     * @returns\n     *\n     * @memberof Calendar\n     */\n    public weekdays(): number[] {\n        const res = [];\n        for (const i of range(this.firstWeekDay, this.firstWeekDay + 7)) {\n            res.push(i % 7);\n        }\n        return res;\n    }\n\n    /**\n     * Returns the date values for one month. It will always iterate throught\n     * complete weeks, so it will contain dates outside the specified month.\n     *\n     * @param year\n     * @param month\n     * @param boolean\n     * @returns\n     *\n     * @memberof Calendar\n     */\n    public monthdates(year: number, month: number, extraWeek: boolean = false): ICalendarDate[] {\n        let date = new Date(year, month, 1);\n        let days = (date.getDay() - this.firstWeekDay) % 7;\n        if (days < 0) {\n            days = 7 - Math.abs(days);\n        }\n        date = this.timedelta(date, 'day', -days);\n        const res = [];\n        let value: ICalendarDate;\n\n        while (true) {\n\n            value = this.generateICalendarDate(date, year, month);\n            res.push(value);\n\n            date = this.timedelta(date, 'day', 1);\n\n            if ((date.getMonth() !== month) && (date.getDay() === this.firstWeekDay)) {\n                if (extraWeek && res.length <= 35) {\n                    for (const _ of range(0, 7)) {\n                        value = this.generateICalendarDate(date, year, month);\n                        res.push(value);\n                        date = this.timedelta(date, 'day', 1);\n                    }\n                }\n                break;\n            }\n        }\n        return res;\n    }\n\n    /**\n     * Returns a matrix (array of arrays) representing a month's calendar.\n     * Each row represents a full week; week entries are ICalendarDate objects.\n     *\n     * @param year\n     * @param month\n     * @returns\n     *\n     * @memberof Calendar\n     */\n    public monthdatescalendar(year: number, month: number, extraWeek: boolean = false): ICalendarDate[][] {\n        const dates = this.monthdates(year, month, extraWeek);\n        const res = [];\n        for (const i of range(0, dates.length, 7)) {\n            res.push(dates.slice(i, i + 7));\n        }\n        return res;\n    }\n\n    public timedelta(date: Date, interval: string, units: number): Date {\n        const ret = new Date(date);\n\n        const checkRollover = () => {\n            if (ret.getDate() !== date.getDate()) {\n                ret.setDate(0);\n            }\n        };\n\n        switch (interval.toLowerCase()) {\n            case 'year':\n                ret.setFullYear(ret.getFullYear() + units);\n                checkRollover();\n                break;\n            case 'quarter':\n                ret.setMonth(ret.getMonth() + 3 * units);\n                checkRollover();\n                break;\n            case 'month':\n                ret.setMonth(ret.getMonth() + units);\n                checkRollover();\n                break;\n            case 'week':\n                ret.setDate(ret.getDate() + 7 * units);\n                break;\n            case 'day':\n                ret.setDate(ret.getDate() + units);\n                break;\n            case 'hour':\n                ret.setTime(ret.getTime() + units * 3600000);\n                break;\n            case 'minute':\n                ret.setTime(ret.getTime() + units * 60000);\n                break;\n            case 'second':\n                ret.setTime(ret.getTime() + units * 1000);\n                break;\n            default:\n                throw new Error('Invalid interval specifier');\n        }\n        return ret;\n    }\n\n    public formatToParts(date: Date, locale: string, options: any, parts: string[]) {\n        const formatter = new Intl.DateTimeFormat(locale, options);\n        const result = {\n            date,\n            full: formatter.format(date)\n        };\n\n        if ((formatter as any).formatToParts) {\n            const formattedParts = (formatter as any).formatToParts(date);\n\n            const toType = (partType: string) => {\n                const index = formattedParts.findIndex(({ type }) => type === partType);\n                const o: IFormattedParts = { value: '', literal: '', combined: '' };\n\n                if (partType === 'era' && index > -1) {\n                    o.value = formattedParts[index].value;\n                    return o;\n                } else if (partType === 'era' && index === -1) {\n                    return o;\n                }\n\n                o.value = formattedParts[index].value;\n                o.literal = formattedParts[index + 1] ? formattedParts[index + 1].value : '';\n                o.combined = [o.value, o.literal].join('');\n                return o;\n            };\n\n            for (const each of parts) {\n                result[each] = toType(each);\n            }\n        } else {\n            for (const each of parts) {\n                result[each] = { value: '', literal: '', combined: '' };\n            }\n        }\n        return result;\n    }\n\n    private generateICalendarDate(date: Date, year: number, month: number): ICalendarDate {\n        return {\n            date,\n            isCurrentMonth: date.getFullYear() === year && date.getMonth() === month,\n            isNextMonth: this.isNextMonth(date, year, month),\n            isPrevMonth: this.isPreviousMonth(date, year, month)\n        };\n    }\n\n    private isPreviousMonth(date: Date, year: number, month: number): boolean {\n        if (date.getFullYear() === year) {\n            return date.getMonth() < month;\n        }\n        return date.getFullYear() < year;\n    }\n\n    private isNextMonth(date: Date, year: number, month: number): boolean {\n        if (date.getFullYear() === year) {\n            return date.getMonth() > month;\n        }\n\n        return date.getFullYear() > year;\n    }\n}\n","/**\n * This file contains all the directives used by the @link IgxCalendarComponent.\n * Except for the directives which are used for templating the calendar itself\n * you should generally not use them directly.\n * @preferred\n */\nimport {\n    Directive,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    Output,\n    TemplateRef,\n    ElementRef,\n    AfterViewInit,\n    OnDestroy,\n    NgZone\n} from '@angular/core';\nimport { fromEvent, Subject, interval } from 'rxjs';\nimport { takeUntil, debounce, tap } from 'rxjs/operators';\nimport { KEYS } from '../core/utils';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarYear]'\n})\nexport class IgxCalendarYearDirective {\n\n    @Input('igxCalendarYear')\n    public value: Date;\n\n    @Input()\n    public date: Date;\n\n    @Output()\n    public onYearSelection = new EventEmitter<Date>();\n\n    @HostBinding('class.igx-calendar__year')\n    public get defaultCSS(): boolean {\n        return !this.isCurrentYear;\n    }\n\n    @HostBinding('class.igx-calendar__year--current')\n    public get currentCSS(): boolean {\n        return this.isCurrentYear;\n    }\n\n    public get isCurrentYear(): boolean {\n        return this.date.getFullYear() === this.value.getFullYear();\n    }\n\n    @HostListener('click')\n    public onClick() {\n        this.onYearSelection.emit(this.value);\n    }\n}\n\n@Directive({\n    selector: '[igxCalendarMonth]'\n})\nexport class IgxCalendarMonthDirective {\n\n    @Input('igxCalendarMonth')\n    public value: Date;\n\n    @Input()\n    public date: Date;\n\n    @Input()\n    public index;\n\n    @Output()\n    public onMonthSelection = new EventEmitter<Date>();\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('class.igx-calendar__month')\n    public get defaultCSS(): boolean {\n        return !this.isCurrentMonth;\n    }\n\n    @HostBinding('class.igx-calendar__month--current')\n    public get currentCSS(): boolean {\n        return this.isCurrentMonth;\n    }\n\n    public get isCurrentMonth(): boolean {\n        return this.date.getMonth() === this.value.getMonth();\n    }\n\n    public get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    constructor(public elementRef: ElementRef) {}\n\n    @HostListener('click')\n    public onClick() {\n        const date = new Date(this.value.getFullYear(), this.value.getMonth(), this.date.getDate());\n        this.onMonthSelection.emit(date);\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarHeader]'\n})\nexport class IgxCalendarHeaderTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {}\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarSubheader]'\n})\nexport class IgxCalendarSubheaderTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarScrollMonth]'\n})\nexport class IgxCalendarScrollMonthDirective implements AfterViewInit, OnDestroy {\n\n    /**\n     * A callback function to be invoked when month increment/decrement starts.\n     * @hidden\n     */\n    @Input()\n    public startScroll: (keydown?: boolean) => {};\n\n    /**\n     * A callback function to be invoked when month increment/decrement stops.\n     * @hidden\n     */\n    @Input()\n    public stopScroll: (event: any) => {};\n\n    /**\n     * @hidden\n     */\n    private destroy$ = new Subject<boolean>();\n\n    constructor(private element: ElementRef, private zone: NgZone) { }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n\n        fromEvent(this.element.nativeElement, 'keyup').pipe(\n            debounce(() => interval(100)),\n            takeUntil(this.destroy$)\n        ).subscribe((event: KeyboardEvent) => {\n            this.stopScroll(event);\n        });\n\n        this.zone.runOutsideAngular(() => {\n            fromEvent(this.element.nativeElement, 'keydown').pipe(\n                tap((event: KeyboardEvent) => {\n                    if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n                        event.preventDefault();\n                        event.stopPropagation();\n                    }\n                }),\n                debounce(() => interval(100)),\n                takeUntil(this.destroy$)\n            ).subscribe((event: KeyboardEvent) => {\n                if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n                    this.zone.run(() => this.startScroll(true));\n                }\n            });\n        });\n\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mousedown')\n    public onMouseDown() {\n        this.startScroll();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseup', ['$event'])\n    public onMouseUp(event: MouseEvent) {\n        this.stopScroll(event);\n    }\n}\n","import { Input, Output, EventEmitter } from '@angular/core';\nimport { WEEKDAYS, Calendar, isDateInRanges, IFormattingOptions, IFormattingViews } from './calendar';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { DateRangeDescriptor } from '../core/dates';\nimport { Subject } from 'rxjs';\nimport { isDate } from '../core/utils';\n\n/**\n * Sets the selction type - single, multi or range.\n */\nexport enum CalendarSelection {\n    SINGLE = 'single',\n    MULTI = 'multi',\n    RANGE = 'range'\n}\n\nexport enum ScrollMonth {\n    PREV = 'prev',\n    NEXT = 'next',\n    NONE = 'none'\n}\n\nexport class IgxCalendarBase implements ControlValueAccessor {\n    /**\n     * Gets the start day of the week.\n     * Can return a numeric or an enum representation of the week day.\n     * Defaults to `Sunday` / `0`.\n     */\n    @Input()\n    public get weekStart(): WEEKDAYS | number {\n        return this.calendarModel.firstWeekDay;\n    }\n\n    /**\n     * Sets the start day of the week.\n     * Can be assigned to a numeric value or to `WEEKDAYS` enum value.\n     */\n    public set weekStart(value: WEEKDAYS | number) {\n        this.calendarModel.firstWeekDay = value;\n    }\n\n    /**\n     * Gets the `locale` of the calendar.\n     * Default value is `\"en\"`.\n     */\n    @Input()\n    public get locale(): string {\n        return this._locale;\n    }\n\n    /**\n     * Sets the `locale` of the calendar.\n     * Expects a valid BCP 47 language tag.\n     * Default value is `\"en\"`.\n     */\n    public set locale(value: string) {\n        this._locale = value;\n        this.initFormatters();\n    }\n\n    /**\n     * Gets the date format options of the days view.\n     */\n    @Input()\n    public get formatOptions(): IFormattingOptions {\n        return this._formatOptions;\n    }\n\n    /**\n     * Sets the date format options of the days view.\n     * Default is { day: 'numeric', month: 'short', weekday: 'short', year: 'numeric' }\n     */\n    public set formatOptions(formatOptions: IFormattingOptions) {\n        this._formatOptions = Object.assign(this._formatOptions, formatOptions);\n        this.initFormatters();\n    }\n\n    /**\n     * Gets whether the `day`, `month` and `year` should be rendered\n     * according to the locale and formatOptions, if any.\n     */\n    @Input()\n    public get formatViews(): IFormattingViews {\n        return this._formatViews;\n    }\n\n    /**\n     * Gets whether the `day`, `month` and `year` should be rendered\n     * according to the locale and formatOptions, if any.\n     */\n    public set formatViews(formatViews: IFormattingViews) {\n        this._formatViews = Object.assign(this._formatViews, formatViews);\n    }\n\n    /**\n     *\n     * Gets the selection type.\n     * Default value is `\"single\"`.\n     * Changing the type of selection resets the currently\n     * selected values if any.\n     */\n    @Input()\n    public get selection(): string {\n        return this._selection;\n    }\n\n    /**\n     * Sets the selection.\n     */\n    public set selection(value: string) {\n        switch (value) {\n            case CalendarSelection.SINGLE:\n                this.selectedDates = null;\n                break;\n            case CalendarSelection.MULTI:\n            case CalendarSelection.RANGE:\n                this.selectedDates = [];\n                break;\n            default:\n                throw new Error('Invalid selection value');\n        }\n        this._onChangeCallback(this.selectedDates);\n        this.rangeStarted = false;\n        this._selection = value;\n    }\n\n    /**\n     * Gets the selected date(s).\n     *\n     * When selection is set to `single`, it returns\n     * a single `Date` object.\n     * Otherwise it is an array of `Date` objects.\n     */\n    @Input()\n    public get value(): Date | Date[] {\n        return this.selectedDates;\n    }\n\n    /**\n     * Sets the selected date(s).\n     *\n     * When selection is set to `single`, it accepts\n     * a single `Date` object.\n     * Otherwise it is an array of `Date` objects.\n     */\n    public set value(value: Date | Date[]) {\n        if (!value || !!value && (value as Date[]).length === 0) {\n            return;\n        }\n\n        this.selectDate(value);\n    }\n\n    /**\n     * Gets the date that is presented.\n     * By default it is the current date.\n     */\n    @Input()\n    public get viewDate(): Date {\n        return this._viewDate;\n    }\n\n    /**\n     * Sets the date that will be presented in the default view when the component renders.\n     */\n    public set viewDate(value: Date) {\n        this._viewDate = this.getDateOnly(value);\n    }\n\n    /**\n     * Gets the disabled dates descriptors.\n     */\n    @Input()\n    public get disabledDates(): DateRangeDescriptor[] {\n        return this._disabledDates;\n    }\n\n    /**\n     * Sets the disabled dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyCalendar\")\n     *public calendar: IgxCalendarComponent;\n     *ngOnInit(){\n     *    this.calendar.disabledDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     *}\n     *```\n     */\n    public set disabledDates(value: DateRangeDescriptor[]) {\n        this._disabledDates = value;\n    }\n\n    /**\n     * Gets the special dates descriptors.\n     */\n    @Input()\n    public get specialDates(): DateRangeDescriptor[] {\n        return this._specialDates;\n    }\n\n    /**\n     * Sets the special dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyCalendar\")\n     *public calendar: IgxCalendarComponent;\n     *ngOnInit(){\n     *    this.calendar.specialDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     *}\n     *```\n     */\n    public set specialDates(value: DateRangeDescriptor[]) {\n        this._specialDates = value;\n    }\n\n    /**\n     * Sets/gets whether the outside dates (dates that are out of the current month) will be hidden.\n     * Default value is `false`.\n     * ```html\n     * <igx-calendar [hideOutsideDays] = \"true\"></igx-calendar>\n     * ```\n     * ```typescript\n     * let hideOutsideDays = this.calendar.hideOutsideDays;\n     * ```\n     */\n\n    @Input()\n    public hideOutsideDays = false;\n\n    /**\n     * Emits an event when a date is selected.\n     * Provides reference the `selectedDates` property.\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date | Date[]>();\n\n    /**\n     *@hidden\n     */\n    private _selection: CalendarSelection | string = CalendarSelection.SINGLE;\n\n    /**\n     *@hidden\n     */\n    public rangeStarted = false;\n\n    /**\n    *@hidden\n    */\n    private _locale = 'en';\n\n    /**\n     *@hidden\n     */\n    private _viewDate: Date;\n\n    /**\n     *@hidden\n     */\n    private _disabledDates: DateRangeDescriptor[] = null;\n\n    /**\n     *@hidden\n     */\n    private _specialDates: DateRangeDescriptor[] = null;\n\n    /**\n     *@hidden\n     */\n    private _formatOptions: IFormattingOptions = {\n        day: 'numeric',\n        month: 'short',\n        weekday: 'short',\n        year: 'numeric'\n    };\n\n    /**\n     *@hidden\n     */\n    private _formatViews: IFormattingViews = {\n        day: false,\n        month: true,\n        year: false\n    };\n\n    /**\n     *@hidden\n     */\n    protected formatterWeekday;\n\n    /**\n     *@hidden\n     */\n    protected formatterDay;\n\n    /**\n     *@hidden\n     */\n    protected formatterMonth;\n\n    /**\n     *@hidden\n     */\n    protected formatterYear;\n\n    /**\n     *@hidden\n     */\n    protected formatterMonthday;\n\n    /**\n     *@hidden\n     */\n    public calendarModel: Calendar;\n\n    /**\n     * @hidden\n     */\n    public monthScrollDirection = ScrollMonth.NONE;\n\n    /**\n     *@hidden\n     */\n    public scrollMonth$ = new Subject();\n\n    /**\n     *@hidden\n     */\n    public stopMonthScroll$ = new Subject<boolean>();\n\n    /**\n     *@hidden\n     */\n    public startMonthScroll$ = new Subject();\n\n    /**\n     *@hidden\n     */\n    public selectedDates;\n\n    /**\n     *@hidden\n     */\n    protected _onTouchedCallback: () => void = () => { };\n    /**\n     *@hidden\n     */\n    protected _onChangeCallback: (_: Date) => void = () => { };\n\n    /**\n     * @hidden\n     */\n    constructor() {\n        this.calendarModel = new Calendar();\n\n        this.viewDate = this.viewDate ? this.viewDate : new Date();\n\n        this.calendarModel.firstWeekDay = this.weekStart;\n        this.initFormatters();\n    }\n\n    /**\n     *@hidden\n     */\n    private getDateOnlyInMs(date: Date) {\n        return this.getDateOnly(date).getTime();\n    }\n\n    /**\n     *@hidden\n     */\n    private generateDateRange(start: Date, end: Date): Date[] {\n        const result = [];\n        start = this.getDateOnly(start);\n        end = this.getDateOnly(end);\n        while (start.getTime() !== end.getTime()) {\n            start = this.calendarModel.timedelta(start, 'day', 1);\n            result.push(start);\n        }\n\n        return result;\n    }\n\n    /**\n     * Performs a single selection.\n     * @hidden\n     */\n    private selectSingle(value: Date) {\n        this.selectedDates = this.getDateOnly(value);\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     * Performs a multiple selection\n     * @hidden\n     */\n    private selectMultiple(value: Date | Date[]) {\n        if (Array.isArray(value)) {\n            const newDates = value.map(v => this.getDateOnly(v).getTime());\n            const selDates = this.selectedDates.map(v => this.getDateOnly(v).getTime());\n\n            if (JSON.stringify(newDates) === JSON.stringify(selDates)) {\n                return;\n            }\n\n            this.selectedDates = Array.from(new Set([...newDates, ...selDates])).map(v => new Date(v));\n        } else {\n            const valueDateOnly = this.getDateOnly(value);\n            const newSelection = [];\n            if (this.selectedDates.every((date: Date) => date.getTime() !== valueDateOnly.getTime())) {\n                newSelection.push(valueDateOnly);\n            } else {\n                this.selectedDates = this.selectedDates.filter(\n                    (date: Date) => date.getTime() !== valueDateOnly.getTime()\n                );\n            }\n\n            if (newSelection.length > 0) {\n                this.selectedDates = this.selectedDates.concat(newSelection);\n            }\n        }\n        this.selectedDates = this.selectedDates.filter(d => !this.isDateDisabled(d));\n        this.selectedDates.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     *@hidden\n     */\n    private selectRange(value: Date | Date[], excludeDisabledDates: boolean = false) {\n        let start: Date;\n        let end: Date;\n\n        if (Array.isArray(value)) {\n            // this.rangeStarted = false;\n            value.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n            start = this.getDateOnly(value[0]);\n            end = this.getDateOnly(value[value.length - 1]);\n            this.selectedDates = [start, ...this.generateDateRange(start, end)];\n        } else {\n            if (!this.rangeStarted) {\n                this.rangeStarted = true;\n                this.selectedDates = [value];\n            } else {\n                this.rangeStarted = false;\n\n                if (this.selectedDates[0].getTime() === value.getTime()) {\n                    this.selectedDates = [];\n                    this._onChangeCallback(this.selectedDates);\n                    return;\n                }\n\n                this.selectedDates.push(value);\n                this.selectedDates.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n\n                start = this.selectedDates.shift();\n                end = this.selectedDates.pop();\n                this.selectedDates = [start, ...this.generateDateRange(start, end)];\n            }\n        }\n\n        if (excludeDisabledDates) {\n            this.selectedDates = this.selectedDates.filter(d => !this.isDateDisabled(d));\n        }\n\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     * Performs a single deselection.\n     * @hidden\n     */\n    private deselectSingle(value: Date) {\n        if (this.selectedDates !== null &&\n            this.getDateOnlyInMs(value as Date) === this.getDateOnlyInMs(this.selectedDates)) {\n            this.selectedDates = null;\n            this._onChangeCallback(this.selectedDates);\n        }\n    }\n\n    /**\n     * Performs a multiple deselection.\n     * @hidden\n     */\n    private deselectMultiple(value: Date[]) {\n        value = value.filter(v => v !== null);\n        const selectedDatesCount = this.selectedDates.length;\n        const datesInMsToDeselect: Set<number> = new Set<number>(\n            value.map(v => this.getDateOnlyInMs(v)));\n\n        for (let i = this.selectedDates.length - 1; i >= 0; i--) {\n            if (datesInMsToDeselect.has(this.getDateOnlyInMs(this.selectedDates[i]))) {\n                this.selectedDates.splice(i, 1);\n            }\n        }\n\n        if (this.selectedDates.length !== selectedDatesCount) {\n            this._onChangeCallback(this.selectedDates);\n        }\n    }\n\n    /**\n     * Performs deselection of a single value, when selection is multi\n     * Usually performed by the selectMultiple method, but leads to bug when multiple months are in view\n     * @hidden\n     */\n    public deselectMultipleInMonth(value: Date) {\n        const valueDateOnly = this.getDateOnly(value);\n        this.selectedDates = this.selectedDates.filter(\n            (date: Date) => date.getTime() !== valueDateOnly.getTime()\n        );\n    }\n\n    /**\n     * Performs a range deselection.\n     * @hidden\n     */\n    private deselectRange(value: Date[]) {\n        value = value.filter(v => v !== null);\n        if (value.length < 1) {\n            return;\n        }\n\n        value.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n        const valueStart = this.getDateOnlyInMs(value[0]);\n        const valueEnd = this.getDateOnlyInMs(value[value.length - 1]);\n\n        this.selectedDates.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n        const selectedDatesStart = this.getDateOnlyInMs(this.selectedDates[0]);\n        const selectedDatesEnd = this.getDateOnlyInMs(this.selectedDates[this.selectedDates.length - 1]);\n\n        if (!(valueEnd < selectedDatesStart) && !(valueStart > selectedDatesEnd)) {\n            this.selectedDates = [];\n            this.rangeStarted = false;\n            this._onChangeCallback(this.selectedDates);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected initFormatters() {\n        this.formatterDay = new Intl.DateTimeFormat(this._locale, { day: this._formatOptions.day });\n        this.formatterWeekday = new Intl.DateTimeFormat(this._locale, { weekday: this._formatOptions.weekday });\n        this.formatterMonth = new Intl.DateTimeFormat(this._locale, { month: this._formatOptions.month });\n        this.formatterYear = new Intl.DateTimeFormat(this._locale, { year: this._formatOptions.year });\n        this.formatterMonthday = new Intl.DateTimeFormat(this._locale, { month: this._formatOptions.month, day: this._formatOptions.day });\n    }\n\n    /**\n     *@hidden\n     */\n    protected getDateOnly(date: Date) {\n        return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (v: Date) => void) {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date | Date[]) {\n        this.selectDate(value as Date);\n    }\n\n    /**\n     * Checks whether a date is disabled.\n     * @hidden\n     */\n    public isDateDisabled(date: Date) {\n        if (this.disabledDates === null) {\n            return false;\n        }\n\n        return isDateInRanges(date, this.disabledDates);\n    }\n\n    /**\n     * Selects date(s) (based on the selection type).\n     */\n    public selectDate(value: Date | Date[]) {\n        if (value === null || value === undefined || (Array.isArray(value) && value.length === 0)) {\n            return;\n        }\n\n        switch (this.selection) {\n            case CalendarSelection.SINGLE:\n                if (isDate(value) && !this.isDateDisabled(value as Date)) {\n                    this.selectSingle(value as Date);\n                }\n                break;\n            case CalendarSelection.MULTI:\n                this.selectMultiple(value);\n                break;\n            case CalendarSelection.RANGE:\n                this.selectRange(value, true);\n                break;\n        }\n    }\n\n    /**\n     * Deselects date(s) (based on the selection type).\n     */\n    public deselectDate(value?: Date | Date[]) {\n        if (this.selectedDates === null || this.selectedDates.length === 0) {\n            return;\n        }\n\n        if (value === null || value === undefined) {\n            this.selectedDates = this.selection === CalendarSelection.SINGLE ? null : [];\n            this.rangeStarted = false;\n            this._onChangeCallback(this.selectedDates);\n            return;\n        }\n\n        switch (this.selection) {\n            case CalendarSelection.SINGLE:\n                this.deselectSingle(value as Date);\n                break;\n            case CalendarSelection.MULTI:\n                this.deselectMultiple(value as Date[]);\n                break;\n            case CalendarSelection.RANGE:\n                this.deselectRange(value as Date[]);\n                break;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectDateFromClient(value: Date) {\n        switch (this.selection) {\n            case CalendarSelection.SINGLE:\n            case CalendarSelection.MULTI:\n                this.selectDate(value);\n                break;\n            case CalendarSelection.RANGE:\n                this.selectRange(value, true);\n                break;\n        }\n    }\n}\n","import { IgxCalendarBase } from './calendar-base';\nimport { ViewChild, ElementRef, HostBinding } from '@angular/core';\nimport { KEYS } from '../core/utils';\n\n/**\n * Sets the calender view - days, months or years.\n */\nexport enum CalendarView {\n    DEFAULT,\n    YEAR,\n    DECADE\n}\nexport class IgxMonthPickerBase extends IgxCalendarBase {\n\n    /**\n     * @hidden\n     */\n    @ViewChild('yearsBtn', { static: false })\n    public yearsBtn: ElementRef;\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * Gets the current active view.\n     */\n    public get activeView(): CalendarView {\n        return this._activeView;\n    }\n\n    /**\n     * Sets the current active view.\n     */\n    public set activeView(val: CalendarView) {\n        this._activeView = val;\n    }\n\n    /**\n     * @hidden\n     */\n    public get isDefaultView(): boolean {\n        return this._activeView === CalendarView.DEFAULT;\n    }\n\n    /**\n     * @hidden\n     */\n    public get isDecadeView(): boolean {\n        return this._activeView === CalendarView.DECADE;\n    }\n\n    /**\n     *@hidden\n     */\n    private _activeView = CalendarView.DEFAULT;\n\n    /**\n     * @hidden\n     */\n    public changeYear(event: Date) {\n        this.viewDate = new Date(event.getFullYear(), this.viewDate.getMonth());\n        this._activeView = CalendarView.DEFAULT;\n\n        requestAnimationFrame(() => {\n            if (this.yearsBtn) { this.yearsBtn.nativeElement.focus(); }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecade(args?: Date): void {\n        this._activeView = CalendarView.DECADE;\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecadeKB(event, args?: Date) {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            this.activeViewDecade(args);\n        }\n    }\n\n    /**\n     * Returns the locale representation of the year in the year view if enabled,\n     * otherwise returns the default `Date.getFullYear()` value.\n     *\n     * @hidden\n     */\n    public formattedYear(value: Date): string {\n        if (this.formatViews.year) {\n            return this.formatterYear.format(value);\n        }\n        return `${value.getFullYear()}`;\n    }\n}\n","import {\n    Component,\n    Output,\n    EventEmitter,\n    Input,\n    HostBinding,\n    HostListener,\n    ViewChildren,\n    QueryList,\n    ElementRef\n} from '@angular/core';\nimport { Calendar } from '../calendar';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxCalendarMonthDirective } from '../calendar.directives';\n\nlet NEXT_ID = 0;\n\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxMonthsViewComponent, multi: true }],\n    selector: 'igx-months-view',\n    templateUrl: 'months-view.component.html'\n})\nexport class IgxMonthsViewComponent implements ControlValueAccessor {\n\n    /**\n     * Sets/gets the `id` of the months view.\n     * If not set, the `id` will have value `\"igx-months-view-0\"`.\n     * ```html\n     * <igx-months-view id=\"my-months-view\"></igx-months-view>\n     * ```\n     * ```typescript\n     * let monthsViewId =  this.monthsView.id;\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-months-view-${NEXT_ID++}`;\n\n    /**\n     * Gets/sets the selected date of the months view.\n     * By default it is the current date.\n     * ```html\n     * <igx-months-view [date]=\"myDate\"></igx-months-view>\n     * ```\n     * ```typescript\n     * let date =  this.monthsView.date;\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @Input()\n    public date = new Date();\n\n    /**\n     * Gets the month format option of the months view.\n     * ```typescript\n     * let monthFormat = this.monthsView.monthFormat.\n     * ```\n     */\n    @Input()\n    public get monthFormat(): string {\n        return this._monthFormat;\n    }\n\n    /**\n     * Sets the month format option of the months view.\n     * ```html\n     * <igx-months-view> [monthFormat] = \"short'\"</igx-months-view>\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    public set monthFormat(value: string) {\n        this._monthFormat = value;\n        this.initMonthFormatter();\n    }\n\n    /**\n     * Gets the `locale` of the months view.\n     * Default value is `\"en\"`.\n     * ```typescript\n     * let locale =  this.monthsView.locale;\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @Input()\n    public get locale(): string {\n        return this._locale;\n    }\n\n    /**\n     * Sets the `locale` of the months view.\n     * Expects a valid BCP 47 language tag.\n     * Default value is `\"en\"`.\n     * ```html\n     * <igx-months-view [locale]=\"de\"></igx-months-view>\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    public set locale(value: string) {\n        this._locale = value;\n        this.initMonthFormatter();\n    }\n\n    /**\n     * Gets/sets whether the view should be rendered\n     * according to the locale and monthFormat, if any.\n     */\n    @Input()\n    public formatView = true;\n\n    /**\n     * Emits an event when a selection is made in the months view.\n     * Provides reference the `date` property in the `IgxMonthsViewComponent`.\n     * ```html\n     * <igx-months-view (onSelection)=\"onSelection($event)\"></igx-months-view>\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date>();\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxCalendarMonthDirective, { read: IgxCalendarMonthDirective })\n    public dates: QueryList<IgxCalendarMonthDirective>;\n\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * Returns an array of date objects which are then used to\n     * properly render the month names.\n     *\n     * Used in the template of the component\n     *\n     * @hidden\n     */\n    get months(): Date[] {\n        let start = new Date(this.date.getFullYear(), 0, 1);\n        const result = [];\n\n        for (let i = 0; i < 12; i++) {\n            result.push(start);\n            start = this._calendarModel.timedelta(start, 'month', 1);\n        }\n\n        return result;\n    }\n\n    /**\n     *@hidden\n     */\n    private _formatterMonth: any;\n\n    /**\n     *@hidden\n     */\n    private _locale = 'en';\n\n    /**\n     *@hidden\n     */\n    private _monthFormat = 'short';\n\n    /**\n     *@hidden\n     */\n    private _calendarModel: Calendar;\n\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = () => { };\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: Date) => void = () => { };\n\n    constructor(public el: ElementRef) {\n        this.initMonthFormatter();\n        this._calendarModel = new Calendar();\n    }\n\n    /**\n     * Returns the locale representation of the month in the months view.\n     *\n     * @hidden\n     */\n    public formattedMonth(value: Date): string {\n        if (this.formatView) {\n            return this._formatterMonth.format(value);\n        }\n        return `${value.getMonth()}`;\n    }\n\n    /**\n     *@hidden\n     */\n    public selectMonth(event) {\n        this.onSelection.emit(event);\n\n        this.date = event;\n        this._onChangeCallback(this.date);\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (v: Date) => void) {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n        if (value) {\n            this.date = value;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public monthTracker(index, item): string {\n        return `${item.getMonth()}}`;\n    }\n\n    /**\n     *@hidden\n     */\n    private initMonthFormatter() {\n        this._formatterMonth = new Intl.DateTimeFormat(this._locale, { month: this.monthFormat });\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.dates.find((date) => date.nativeElement === event.target);\n        if (!node) {\n            return;\n        }\n\n        const months = this.dates.toArray();\n        const nodeRect = node.nativeElement.getBoundingClientRect();\n\n        for (let index = months.indexOf(node) - 1; index >= 0; index--) {\n            const nextNodeRect = months[index].nativeElement.getBoundingClientRect();\n            const tolerance = 6;\n            if (nodeRect.top !== nextNodeRect.top && (nextNodeRect.left - nodeRect.left) < tolerance) {\n                months[index].nativeElement.focus();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.dates.find((date) => date.nativeElement === event.target);\n        if (!node) {\n            return;\n        }\n\n        const months = this.dates.toArray();\n        const nodeRect = node.nativeElement.getBoundingClientRect();\n\n        for (let index = months.indexOf(node) + 1; index < months.length; index++) {\n            const nextNodeRect = months[index].nativeElement.getBoundingClientRect();\n            const tolerance = 6;\n            if (nextNodeRect.top !== nodeRect.top && (nodeRect.left - nextNodeRect.left) < tolerance ) {\n                months[index].nativeElement.focus();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.dates.find((date) => date.nativeElement === event.target);\n        if (!node) { return; }\n\n        const months = this.dates.toArray();\n        if (months.indexOf(node) + 1 < months.length) {\n            const month = months[months.indexOf(node) + 1];\n\n            month.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.dates.find((date) => date.nativeElement === event.target);\n        if (!node) { return; }\n\n        const months = this.dates.toArray();\n        if (months.indexOf(node) - 1 >= 0) {\n            const month = months[months.indexOf(node) - 1];\n\n            month.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const month = this.dates.toArray()[0];\n\n        month.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const months = this.dates.toArray();\n        const month = months[months.length - 1];\n\n        month.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.enter', ['$event'])\n    public onKeydownEnter(event) {\n        const value = this.dates.find((date) => date.nativeElement === event.target).value;\n        this.date = new Date(value.getFullYear(), value.getMonth(), this.date.getDate());\n\n        this.onSelection.emit(this.date);\n        this._onChangeCallback(this.date);\n    }\n}\n","import { Component, Output, EventEmitter, Input, HostBinding, HostListener, ElementRef, Injectable} from '@angular/core';\nimport { range, Calendar } from '../calendar';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { HammerGestureConfig, HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\n\nlet NEXT_ID = 0;\n\n@Injectable()\nexport class CalendarHammerConfig extends HammerGestureConfig {\n    public overrides = {\n        pan: { direction: Hammer.DIRECTION_VERTICAL, threshold: 1 }\n    };\n}\n\n@Component({\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxYearsViewComponent,\n            multi: true\n        },\n        {\n            provide: HAMMER_GESTURE_CONFIG,\n            useClass: CalendarHammerConfig\n        }\n    ],\n    selector: 'igx-years-view',\n    templateUrl: 'years-view.component.html'\n})\nexport class IgxYearsViewComponent implements ControlValueAccessor {\n\n    /**\n     * Sets/gets the `id` of the years view.\n     * If not set, the `id` will have value `\"igx-years-view-0\"`.\n     * ```html\n     * <igx-years-view id = \"my-years-view\"></igx-years-view>\n     * ```\n     * ```typescript\n     * let yearsViewId =  this.yearsView.id;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-years-view-${NEXT_ID++}`;\n\n    /**\n     * Gets/sets the selected date of the years view.\n     * By default it is the current date.\n     * ```html\n     * <igx-years-view [date]=\"myDate\"></igx-years-view>\n     * ```\n     * ```typescript\n     * let date =  this.yearsView.date;\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    @Input()\n    public date = new Date();\n\n    /**\n     * Gets the year format option of the years view.\n     * ```typescript\n     * let yearFormat = this.yearsView.yearFormat.\n     * ```\n     */\n    @Input()\n    public get yearFormat(): string {\n        return this._yearFormat;\n    }\n\n    /**\n     * Sets the year format option of the years view.\n     * ```html\n     * <igx-years-view [yearFormat]=\"numeric\"></igx-years-view>\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    public set yearFormat(value: string) {\n        this._yearFormat = value;\n        this.initYearFormatter();\n    }\n\n    /**\n     * Gets the `locale` of the years view.\n     * Default value is `\"en\"`.\n     * ```typescript\n     * let locale =  this.yearsView.locale;\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    @Input()\n    public get locale(): string {\n        return this._locale;\n    }\n\n    /**\n     * Sets the `locale` of the years view.\n     * Expects a valid BCP 47 language tag.\n     * Default value is `\"en\"`.\n     * ```html\n     * <igx-years-view [locale]=\"de\"></igx-years-view>\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    public set locale(value: string) {\n        this._locale = value;\n        this.initYearFormatter();\n    }\n\n    /**\n     * Gets/sets whether the view should be rendered\n     * according to the locale and yearFormat, if any.\n     */\n    @Input()\n    public formatView: boolean;\n\n    /**\n     * Emits an event when a selection is made in the years view.\n     * Provides reference the `date` property in the `IgxYearsViewComponent`.\n     * ```html\n     * <igx-years-view (onSelection)=\"onSelection($event)\"></igx-years-view>\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date>();\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * Returns an array of date objects which are then used to properly\n     * render the years.\n     *\n     * Used in the template of the component.\n     *\n     * @hidden\n     */\n    get decade(): number[] {\n        const result = [];\n        const start = this.date.getFullYear() - 3;\n        const end = this.date.getFullYear() + 4;\n\n        for (const year of range(start, end)) {\n            result.push(new Date(year, this.date.getMonth(), this.date.getDate()));\n        }\n\n        return result;\n    }\n\n    /**\n     *@hidden\n     */\n    private _formatterYear: any;\n\n    /**\n     *@hidden\n     */\n    private _locale = 'en';\n\n    /**\n     *@hidden\n     */\n    private _yearFormat = 'numeric';\n\n    /**\n     *@hidden\n     */\n    private _calendarModel: Calendar;\n\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = () => { };\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: Date) => void = () => { };\n\n    constructor(public el: ElementRef) {\n        this.initYearFormatter();\n        this._calendarModel = new Calendar();\n    }\n\n    /**\n     * Returns the locale representation of the year in the years view.\n     *\n     * @hidden\n     */\n    public formattedYear(value: Date): string {\n        if (this.formatView) {\n            return this._formatterYear.format(value);\n        }\n        return `${value.getFullYear()}`;\n    }\n\n    /**\n     *@hidden\n     */\n    public selectYear(event) {\n        this.date = event;\n\n        this.onSelection.emit(this.date);\n        this._onChangeCallback(this.date);\n    }\n\n    /**\n     *@hidden\n     */\n    public scroll(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const delta = event.deltaY < 0 ? -1 : 1;\n        this.generateYearRange(delta);\n    }\n\n    /**\n     *@hidden\n     */\n    public pan(event) {\n        const delta = event.deltaY < 0 ? 1 : -1;\n        this.generateYearRange(delta);\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (v: Date) => void) {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public yearTracker(index, item): string {\n        return `${item.getFullYear()}}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n        if (value) {\n            this.date = value;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.generateYearRange(1);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.generateYearRange(-1);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.enter')\n    public onKeydownEnter() {\n        this.onSelection.emit(this.date);\n        this._onChangeCallback(this.date);\n    }\n\n    /**\n     *@hidden\n     */\n    private initYearFormatter() {\n        this._formatterYear = new Intl.DateTimeFormat(this._locale, { year: this.yearFormat });\n    }\n\n    /**\n     *@hidden\n     */\n    private generateYearRange(delta: number) {\n        const currentYear = new Date().getFullYear();\n\n        if ((delta > 0 && this.date.getFullYear() - currentYear >= 95) ||\n            (delta < 0 && currentYear - this.date.getFullYear() >= 95)) {\n            return;\n        }\n        this.date = this._calendarModel.timedelta(this.date, 'year', delta);\n    }\n}\n","import { Component, Input, Output, EventEmitter, HostBinding, ElementRef, HostListener } from '@angular/core';\nimport { ICalendarDate, isDateInRanges } from '../calendar';\nimport { DateRangeDescriptor } from '../../core/dates';\nimport { CalendarSelection } from '../calendar-base';\n\n/**\n *@hidden\n*/\n@Component({\n    selector: 'igx-day-item',\n    templateUrl: 'day-item.component.html'\n})\nexport class IgxDayItemComponent {\n    @Input()\n    public date: ICalendarDate;\n\n    @Input()\n    public selection: string;\n\n    /**\n     * Returns boolean indicating if the day is selected\n     *\n     */\n    @Input()\n    public get selected(): any {\n        return this._selected;\n    }\n\n    /**\n     * Selects the day\n     */\n    public set selected(value: any) {\n        this._selected = value;\n    }\n\n    @Input()\n    public disabledDates: DateRangeDescriptor[];\n\n    @Input()\n    public outOfRangeDates: DateRangeDescriptor[];\n\n    @Input()\n    public specialDates: DateRangeDescriptor[];\n\n    @Input()\n    public hideOutsideDays = false;\n\n    @Input()\n    @HostBinding('class.igx-calendar__date--last')\n    public isLastInRange = false;\n\n    @Input()\n    @HostBinding('class.igx-calendar__date--first')\n    public isFirstInRange = false;\n\n    @Input()\n    public isWithinRange = false;\n\n    @Output()\n    public onDateSelection = new EventEmitter<ICalendarDate>();\n\n    public get isCurrentMonth(): boolean {\n        return this.date.isCurrentMonth;\n    }\n\n    public get isPreviousMonth(): boolean {\n        return this.date.isPrevMonth;\n    }\n\n    public get isNextMonth(): boolean {\n        return this.date.isNextMonth;\n    }\n\n    public get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    @HostBinding('class.igx-calendar__date--selected')\n    public get isSelectedCSS(): boolean {\n        return (!this.isDisabled && this.selected);\n    }\n\n    @HostBinding('class.igx-calendar__date--inactive')\n    public get isInactive(): boolean {\n        return this.date.isNextMonth || this.date.isPrevMonth;\n    }\n\n    @HostBinding('class.igx-calendar__date--hidden')\n    public get isHidden(): boolean {\n        return this.hideOutsideDays && this.isInactive;\n    }\n\n    @HostBinding('class.igx-calendar__date--current')\n    public get isToday(): boolean {\n        const today = new Date(Date.now());\n        const date = this.date.date;\n        return (date.getFullYear() === today.getFullYear() &&\n            date.getMonth() === today.getMonth() &&\n            date.getDate() === today.getDate()\n        );\n    }\n\n    @HostBinding('class.igx-calendar__date--weekend')\n    public get isWeekend(): boolean {\n        const day = this.date.date.getDay();\n        return day === 0 || day === 6;\n    }\n\n    public get isDisabled(): boolean {\n        if (this.disabledDates === null) {\n            return false;\n        }\n\n        return isDateInRanges(this.date.date, this.disabledDates);\n    }\n\n    public get isOutOfRange(): boolean {\n        if (!this.outOfRangeDates) {\n            return false;\n        }\n\n        return isDateInRanges(this.date.date, this.outOfRangeDates);\n    }\n\n    public get isFocusable(): boolean {\n        return this.isCurrentMonth && !this.isHidden && !this.isDisabled && !this.isOutOfRange;\n    }\n\n    @HostBinding('class.igx-calendar__date--range')\n    public get isWithinRangeCSS(): boolean {\n        return !this.isSingleSelection && this.isWithinRange;\n    }\n\n    @HostBinding('class.igx-calendar__date--special')\n    public get isSpecial(): boolean {\n        if (this.specialDates === null) {\n            return false;\n        }\n\n        return isDateInRanges(this.date.date, this.specialDates);\n    }\n\n    @HostBinding('class.igx-calendar__date')\n    public get defaultCSS(): boolean {\n        return this.date.isCurrentMonth && !(this.isWeekend && this.selected);\n    }\n\n    @HostBinding('class.igx-calendar__date--disabled')\n    public get isDisabledCSS(): boolean {\n        return this.isHidden || this.isDisabled || this.isOutOfRange;\n    }\n\n    @HostBinding('class.igx-calendar__date--single')\n    public get isSingleSelection(): boolean {\n        return this.selection !== CalendarSelection.RANGE;\n    }\n\n    @HostBinding('attr.tabindex')\n    public get tabindex(): number {\n        return this.isDisabled || this.isHidden ? -1 : 0;\n    }\n\n    private _selected = false;\n\n    constructor(private elementRef: ElementRef) { }\n\n    @HostListener('click')\n    @HostListener('keydown.enter')\n    public onSelect() {\n        this.onDateSelection.emit(this.date);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { IgxDayItemComponent } from './day-item.component';\nimport { IgxDaysViewComponent } from './days-view.component';\nimport { ScrollMonth } from '../calendar-base';\n\nenum Direction {\n    Up = 'ArrowUp',\n    Down = 'ArrowDown',\n    Left = 'ArrowLeft',\n    Right = 'ArrowRight',\n}\n\nconst ARROW = 'Arrow';\n\n/** @hidden */\n@Injectable()\nexport class IgxDaysViewNavigationService {\n    public monthView: IgxDaysViewComponent;\n    /**\n     * Implements kb navigation in all MoveDirections. nextDate and nextMonthView naming convention is used for both previous/next\n     * @hidden\n     */\n    public focusNextDate(target: HTMLElement, key: string, nextView = false) {\n        if (target.childElementCount === 0) { target = target.parentElement; }\n        if (key.indexOf('Arrow') === -1) { key = ARROW.concat(key); }\n        const monthView = this.monthView;\n        const node = monthView.dates.find((date) => date.nativeElement === target);\n        let dates = monthView.dates.toArray(),\n            day: IgxDayItemComponent, step, i, nextDate: Date;\n        const index = dates.indexOf(node);\n\n        if (!node) { return; }\n\n        // focus item in current month\n        switch (key) {\n            case Direction.Left: {\n                step = -1;\n                nextDate = this.timedelta(node.date.date, step);\n                for (i = index; i > 0; i--) {\n                    day = nextView ? dates[i] : dates[i - 1];\n                    nextDate = day.date.date;\n                    if (day.date.isPrevMonth) {\n                        break;\n                    }\n                    if (day && day.isFocusable) {\n                        day.nativeElement.focus();\n                        return;\n                    }\n                }\n                break;\n            }\n            case Direction.Right: {\n                step = 1;\n                nextDate = this.timedelta(node.date.date, step);\n                for (i = index; i < dates.length - 1; i++) {\n                    day = nextView ? dates[i] : dates[i + 1];\n                    nextDate = day.date.date;\n                    if (day.date.isNextMonth) {\n                        break;\n                    }\n                    if (day && day.isFocusable) {\n                        day.nativeElement.focus();\n                        return;\n                    }\n                }\n                break;\n            }\n            case Direction.Up: {\n                step = -7;\n                nextDate = this.timedelta(node.date.date, step);\n                for (i = index; i - 7 > -1; i -= 7) {\n                    day = nextView ? dates[i] : dates[i - 7];\n                    nextDate = day.date.date;\n                    if (day.date.isPrevMonth) {\n                        break;\n                    }\n                    if (day && day.isFocusable) {\n                        day.nativeElement.focus();\n                        return;\n                    }\n                }\n                break;\n            }\n            case Direction.Down: {\n                step = 7;\n                nextDate = this.timedelta(node.date.date, step);\n                for (i = index; i + 7 < 42; i += 7) {\n                    day = nextView ? dates[i] : dates[i + 7];\n                    nextDate = day.date.date;\n                    if (day.date.isNextMonth) {\n                        break;\n                    }\n                    if (day && day.isFocusable) {\n                        day.nativeElement.focus();\n                        return;\n                    }\n                }\n                break;\n            }\n        }\n\n        // focus item in prev/next visible month\n        const nextMonthView = step > 0 ? monthView.nextMonthView : monthView.prevMonthView;\n        if (nextMonthView) {\n            dates = nextMonthView.dates.toArray();\n            day = dates.find((item) => item.date.date.getTime() === nextDate.getTime());\n\n            if (day && day.isFocusable) {\n                day.nativeElement.focus();\n                return;\n            }\n            nextMonthView.navService.focusNextDate(day.nativeElement, key);\n        }\n\n        // if iterating in the visible prev/next moths above found a day that is not focusable, ie is disabled, hidden, etc\n        // then it is needed to recalculate the next day, which is going to be part of the prev/next months\n        if (day && !day.isFocusable) {\n            day = dates[i + step];\n            if (!day) {\n                nextDate = this.timedelta(node.date.date, step + i - index);\n            }\n        }\n\n        // focus item in prev/next month, which is currently out of view\n        let dayIsNextMonth: boolean; // determine what we need to check for next date - if it belongs to prev or next month\n        if (day) { dayIsNextMonth = step > 0 ? day.date.isNextMonth : day.date.isPrevMonth; }\n        if (monthView.changeDaysView && !nextMonthView && ((day && dayIsNextMonth) || !day)) {\n            const monthAction = step > 0 ? ScrollMonth.NEXT : ScrollMonth.PREV;\n            monthView.onViewChanging.emit({monthAction: monthAction, key: key, nextDate: nextDate});\n        }\n    }\n\n    /**\n     * Focuses first focusable day in the month. Will go to next visible month, if no day in the first month is focusable\n     * @hidden\n     */\n    public focusHomeDate() {\n        let monthView = this.monthView;\n        while (!this.focusFirstDay(monthView) && monthView.nextMonthView) {\n            monthView = monthView.nextMonthView;\n        }\n    }\n\n    /**\n     * Focuses last focusable day in the month. Will go to previous visible month, if no day in the first month is focusable\n     * @hidden\n     */\n    public focusEndDate() {\n        let monthView = this.monthView;\n        while (!this.focusLastDay(monthView) && monthView.prevMonthView) {\n            monthView = monthView.prevMonthView;\n        }\n    }\n\n    private timedelta(date: Date, units: number): Date {\n        const ret = new Date(date);\n        ret.setDate(ret.getDate() + units);\n        return ret;\n    }\n\n    private focusFirstDay(monthView: IgxDaysViewComponent): boolean {\n        const dates = monthView.dates.filter(d => d.isCurrentMonth);\n        for (let i = 0; i < dates.length; i++) {\n            if (dates[i].isFocusable) {\n                dates[i].nativeElement.focus();\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private focusLastDay(monthView: IgxDaysViewComponent): boolean {\n        const dates = monthView.dates.filter(d => d.isCurrentMonth);\n        for (let i = dates.length - 1; i >= 0; i--) {\n            if (dates[i].isFocusable) {\n                dates[i].nativeElement.focus();\n                return true;\n            }\n        }\n        return false;\n    }\n}\n","import {\n    Component,\n    Output,\n    EventEmitter,\n    Input,\n    HostListener,\n    ViewChildren,\n    QueryList,\n    HostBinding,\n    DoCheck,\n    OnInit\n} from '@angular/core';\nimport { ICalendarDate, isDateInRanges } from '../../calendar/calendar';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxDayItemComponent } from './day-item.component';\nimport { DateRangeDescriptor, DateRangeType } from '../../core/dates';\nimport { IgxCalendarBase, CalendarSelection } from '../calendar-base';\nimport { isEqual } from '../../core/utils';\nimport { IViewChangingEventArgs } from './days-view.interface';\nimport { IgxDaysViewNavigationService } from './daysview-navigation.service';\n\nlet NEXT_ID = 0;\n\n@Component({\n    providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxDaysViewComponent\n        },\n        { provide: IgxDaysViewNavigationService, useClass: IgxDaysViewNavigationService }\n    ],\n    selector: 'igx-days-view',\n    templateUrl: 'days-view.component.html'\n})\nexport class IgxDaysViewComponent extends IgxCalendarBase implements DoCheck, OnInit {\n    /**\n     * Sets/gets the `id` of the days view.\n     * If not set, the `id` will have value `\"igx-days-view-0\"`.\n     * ```html\n     * <igx-days-view id=\"my-days-view\"></igx-days-view>\n     * ```\n     * ```typescript\n     * let daysViewId =  this.daysView.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-days-view-${NEXT_ID++}`;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public changeDaysView = false;\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public onDateSelection = new EventEmitter<ICalendarDate>();\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public onViewChanging = new EventEmitter<IViewChangingEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxDayItemComponent, { read: IgxDayItemComponent })\n    public dates: QueryList<IgxDayItemComponent>;\n\n    /**\n     * @hidden\n     */\n    public outOfRangeDates: DateRangeDescriptor[];\n\n    /**\n     * @hidden\n     */\n    public nextMonthView: IgxDaysViewComponent;\n\n    /**\n     * @hidden\n     */\n    public prevMonthView: IgxDaysViewComponent;\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * @hidden\n     */\n    constructor(public navService: IgxDaysViewNavigationService) {\n        super();\n    }\n\n    /**\n     * @hidden\n     */\n    public get getCalendarMonth(): ICalendarDate[][] {\n        return this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth(), true);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this.navService.monthView = this;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck() {\n        if (!this.changeDaysView && this.dates) {\n            this.disableOutOfRangeDates();\n        }\n    }\n\n    /**\n     * Returns the locale representation of the date in the days view.\n     *\n     * @hidden\n     */\n    public formattedDate(value: Date): string {\n        if (this.formatViews.day) {\n            return this.formatterDay.format(value);\n        }\n        return `${value.getDate()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public generateWeekHeader(): string[] {\n        const dayNames = [];\n        const rv = this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth())[0];\n        for (const day of rv) {\n            dayNames.push(this.formatterWeekday.format(day.date));\n        }\n\n        return dayNames;\n    }\n\n    /**\n     * @hidden\n     */\n    public rowTracker(index, item): string {\n        return `${item[index].date.getMonth()}${item[index].date.getDate()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public dateTracker(index, item): string {\n        return `${item.date.getMonth()}--${item.date.getDate()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public isCurrentMonth(value: Date): boolean {\n        return this.viewDate.getMonth() === value.getMonth();\n    }\n\n    /**\n     * @hidden\n     */\n    public isCurrentYear(value: Date): boolean {\n        return this.viewDate.getFullYear() === value.getFullYear();\n    }\n\n    /**\n     * @hidden\n     */\n    public isSelected(date: ICalendarDate): boolean {\n        let selectedDates: Date | Date[];\n        if (this.isDateDisabled(date.date) || !this.value ||\n            (Array.isArray(this.value) && this.value.length === 0)\n            )  {\n            return false;\n        }\n\n        if (this.selection === CalendarSelection.SINGLE) {\n            selectedDates = (this.value as Date);\n            return this.getDateOnly(selectedDates).getTime() === date.date.getTime();\n        }\n\n        selectedDates = (this.value as Date[]);\n        if (this.selection === CalendarSelection.RANGE && selectedDates.length === 1) {\n            return this.getDateOnly(selectedDates[0]).getTime() === date.date.getTime();\n        }\n\n        if (this.selection === CalendarSelection.MULTI) {\n            const start = this.getDateOnly(selectedDates[0]);\n            const end = this.getDateOnly(selectedDates[selectedDates.length - 1]);\n\n            if (this.isWithinRange(date.date, false, start, end)) {\n                const currentDate = selectedDates.find(element => element.getTime() === date.date.getTime());\n                return !!currentDate;\n            } else {\n                return false;\n            }\n\n        } else {\n            return this.isWithinRange(date.date, true);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public isLastInRange(date: ICalendarDate): boolean {\n        if (this.isSingleSelection || !this.value) {\n            return false;\n        }\n\n        const dates = this.value as Date[];\n        const lastDate = dates[dates.length - 1];\n        return isEqual(lastDate, date.date);\n    }\n\n    /**\n     * @hidden\n     */\n    public isFirstInRange(date: ICalendarDate): boolean {\n        if (this.isSingleSelection || !this.value) {\n            return false;\n        }\n\n        return isEqual((this.value as Date[])[0], date.date);\n    }\n\n    /**\n     * @hidden\n     */\n    public isWithinRange(date: Date, checkForRange: boolean, min?: Date, max?: Date): boolean {\n        if (checkForRange && !(Array.isArray(this.value) && this.value.length > 1)) {\n            return false;\n        }\n\n        min = min ? min : this.value[0];\n        max = max ? max : this.value[(this.value as Date[]).length - 1];\n\n        return isDateInRanges(date,\n            [\n                {\n                    type: DateRangeType.Between,\n                    dateRange: [min, max]\n                }\n            ]\n        );\n    }\n\n    /**\n     *@hidden\n     */\n    public focusActiveDate() {\n        let date = this.dates.find((d) => d.selected);\n\n        if (!date) {\n            date = this.dates.find((d) => d.isToday);\n        }\n\n        if (date.isFocusable) {\n            date.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectDay(event) {\n        this.selectDateFromClient(event.date);\n        this.onDateSelection.emit(event);\n\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    private disableOutOfRangeDates() {\n        const dateRange = [];\n        this.dates.toArray().forEach((date) => {\n            if (!date.isCurrentMonth) {\n                dateRange.push(date.date.date);\n            }\n        });\n\n        this.outOfRangeDates = [{\n            type: DateRangeType.Specific,\n            dateRange: dateRange\n        }];\n    }\n\n    /**\n     * @hidden\n     */\n    public getFirstMonthView(): IgxDaysViewComponent {\n        let monthView = this as IgxDaysViewComponent;\n        while (monthView.prevMonthView) {\n            monthView = monthView.prevMonthView;\n        }\n        return monthView;\n    }\n\n    /**\n     * @hidden\n     */\n    private getLastMonthView(): IgxDaysViewComponent {\n        let monthView = this as IgxDaysViewComponent;\n        while (monthView.nextMonthView) {\n            monthView = monthView.nextMonthView;\n        }\n        return monthView;\n    }\n\n    /**\n     * @hidden\n     */\n    private get isSingleSelection(): boolean {\n        return this.selection !== CalendarSelection.RANGE;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    @HostListener('keydown.arrowright', ['$event'])\n    @HostListener('keydown.arrowup', ['$event'])\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrow(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.navService.focusNextDate(event.target as HTMLElement, event.key);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.getFirstMonthView().navService.focusHomeDate();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.getLastMonthView().navService.focusEndDate();\n    }\n}\n","import { transition, trigger, useAnimation } from '@angular/animations';\nimport {\n    Component,\n    ContentChild,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    ViewChild,\n    ElementRef,\n    AfterViewInit,\n    ViewChildren,\n    QueryList,\n    OnDestroy\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { fadeIn, scaleInCenter, slideInLeft, slideInRight } from '../animations/main';\nimport {\n    IgxCalendarHeaderTemplateDirective,\n    IgxCalendarSubheaderTemplateDirective\n} from './calendar.directives';\nimport { KEYS } from '../core/utils';\nimport { ICalendarDate, monthRange } from './calendar';\nimport { CalendarView, IgxMonthPickerBase } from './month-picker-base';\nimport { IgxMonthsViewComponent } from './months-view/months-view.component';\nimport { IgxYearsViewComponent } from './years-view/years-view.component';\nimport { IgxDaysViewComponent } from './days-view/days-view.component';\nimport { interval, Subscription } from 'rxjs';\nimport { takeUntil, debounce, skipLast, switchMap } from 'rxjs/operators';\nimport { ScrollMonth } from './calendar-base';\nimport { IViewChangingEventArgs } from './days-view/days-view.interface';\n\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Calendar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/calendar.html)\n *\n * The Ignite UI Calendar provides an easy way to display a calendar and allow users to select dates using single, multiple\n * or range selection.\n *\n * Example:\n * ```html\n * <igx-calendar selection=\"range\"></igx-calendar>\n * ```\n */\n@Component({\n    providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxCalendarComponent\n        }\n    ],\n    animations: [\n        trigger('animateView', [\n            transition('void => 0', useAnimation(fadeIn)),\n            transition('void => *', useAnimation(scaleInCenter, {\n                params: {\n                    duration: '.2s',\n                    fromScale: .9\n                }\n            }))\n        ]),\n        trigger('animateChange', [\n            transition('* => prev', useAnimation(slideInLeft, {\n                params: {\n                    fromPosition: 'translateX(-30%)'\n                }\n            })),\n            transition('* => next', useAnimation(slideInRight, {\n                params: {\n                    fromPosition: 'translateX(30%)'\n                }\n            }))\n        ])\n    ],\n    selector: 'igx-calendar',\n    templateUrl: 'calendar.component.html'\n})\nexport class IgxCalendarComponent extends IgxMonthPickerBase implements AfterViewInit, OnDestroy {\n    /**\n     * Sets/gets the `id` of the calendar.\n     * If not set, the `id` will have value `\"igx-calendar-0\"`.\n     * ```html\n     * <igx-calendar id = \"my-first-calendar\"></igx-calendar>\n     * ```\n     * ```typescript\n     * let calendarId =  this.calendar.id;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-calendar-${NEXT_ID++}`;\n\n    @Input()\n    public hasHeader = true;\n\n    /**\n     * Sets/gets whether the calendar header will be in vertical position.\n     * Default value is `false`.\n     * ```html\n     * <igx-calendar [vertical] = \"true\"></igx-calendar>\n     * ```\n     * ```typescript\n     * let isVertical = this.calendar.vertical;\n     * ```\n     */\n    @Input()\n    public vertical = false;\n\n    /**\n     * Sets/gets the number of month views displayed.\n     * Default value is `1`.\n     * ```html\n     * <igx-calendar [vertical] = \"true\" [monthsViewNumber]=\"2\"></igx-calendar>\n     * ```\n     * ```typescript\n     * let monthViewsDisplayed = this.calendar.monthsViewNumber;\n     * ```\n     */\n    @Input()\n    get monthsViewNumber() {\n        return this._monthsViewNumber;\n    }\n\n    set monthsViewNumber(val: number) {\n        if (this._monthsViewNumber === val || val <= 0) {\n            return;\n        } else if (this._monthsViewNumber < val) {\n            for (let i = this._monthsViewNumber; i < val; i++) {\n                const nextMonthDate = new Date(this.viewDate);\n                nextMonthDate.setMonth(nextMonthDate.getMonth() + i);\n                const monthView = {\n                    value: null,\n                    viewDate: nextMonthDate\n                };\n                this.dayViews.push(monthView);\n            }\n            this._monthsViewNumber = val;\n        } else {\n            this.dayViews.splice(val, this.dayViews.length - val);\n            this._monthsViewNumber = val;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public animationAction: any = '';\n\n    /**\n     * @hidden\n     */\n    public nextDate: Date;\n\n    /**\n     * @hidden\n     */\n    public isKeydownTrigger = false;\n\n    /**\n     * @hidden\n     */\n    public callback: (next) => void;\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * The default aria role attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'grid';\n\n    /**\n     * The default aria lebelled by attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.aria-labelledby')\n    public ariaLabelledBy = 'calendar';\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar--vertical')\n    get styleVerticalClass(): boolean {\n        return this.vertical;\n    }\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('months', { read: IgxMonthsViewComponent, static: false })\n    public monthsView: IgxMonthsViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('monthsBtn', { static: false })\n    public monthsBtn: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('decade', { read: IgxYearsViewComponent, static: false })\n    public dacadeView: IgxYearsViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('days', { read: IgxDaysViewComponent, static: false })\n    public daysView: IgxDaysViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren('days', { read: IgxDaysViewComponent })\n    public monthViews: QueryList<IgxDaysViewComponent>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('prevMonthBtn', { static: false })\n    public prevMonthBtn: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('nextMonthBtn', { static: false })\n    public nextMonthBtn: ElementRef;\n\n    /**\n     * @hidden\n     */\n    get isYearView(): boolean {\n        return this.activeView === CalendarView.YEAR;\n    }\n\n    /**\n     * Gets the header template.\n     * ```typescript\n     * let headerTemplate =  this.calendar.headerTeamplate;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    get headerTemplate(): any {\n        if (this.headerTemplateDirective) {\n            return this.headerTemplateDirective.template;\n        }\n        return null;\n    }\n\n    /**\n     * Sets the header template.\n     * ```html\n     * <igx-calendar headerTemplateDirective = \"igxCalendarHeader\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    set headerTemplate(directive: any) {\n        this.headerTemplateDirective = directive;\n    }\n\n    /**\n     * Gets the subheader template.\n     * ```typescript\n     * let subheaderTemplate = this.calendar.subheaderTemplate;\n     * ```\n     */\n    get subheaderTemplate(): any {\n        if (this.subheaderTemplateDirective) {\n            return this.subheaderTemplateDirective.template;\n        }\n        return null;\n    }\n\n    /**\n     * Sets the subheader template.\n     * ```html\n     * <igx-calendar subheaderTemplate = \"igxCalendarSubheader\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    set subheaderTemplate(directive: any) {\n        this.subheaderTemplateDirective = directive;\n    }\n\n    /**\n     * Gets the context for the template marked with the `igxCalendarHeader` directive.\n     * ```typescript\n     * let headerContext =  this.calendar.headerContext;\n     * ```\n     */\n    get headerContext() {\n        const date: Date = this.headerDate;\n        return this.generateContext(date);\n    }\n\n    /**\n     * Gets the context for the template marked with either `igxCalendarSubHeaderMonth`\n     * or `igxCalendarSubHeaderYear` directive.\n     * ```typescript\n     * let context =  this.calendar.context;\n     * ```\n     */\n    get context() {\n        const date: Date = this.viewDate;\n        return this.generateContext(date);\n    }\n\n    /**\n     * @hidden\n     */\n    get headerDate(): Date {\n        return this.selectedDates ? this.selectedDates : new Date();\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(forwardRef(() => IgxCalendarHeaderTemplateDirective), { read: IgxCalendarHeaderTemplateDirective, static: true  })\n    private headerTemplateDirective: IgxCalendarHeaderTemplateDirective;\n\n    /**\n     * @hidden\n     */\n    // tslint:disable-next-line:max-line-length\n    @ContentChild(forwardRef(() => IgxCalendarSubheaderTemplateDirective), { read: IgxCalendarSubheaderTemplateDirective, static: true  })\n    private subheaderTemplateDirective: IgxCalendarSubheaderTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    private _monthsViewNumber = 1;\n\n    /**\n     *@hidden\n     */\n    private _monthViewsChanges$: Subscription;\n\n    /**\n     *@hidden\n     */\n    private defaultDayView = {\n        value: this.value,\n        viewDate: this.viewDate\n    };\n\n    /**\n     *@hidden\n     */\n    public dayViews = [this.defaultDayView];\n\n    public ngAfterViewInit() {\n        this.setSiblingMonths(this.monthViews);\n        this._monthViewsChanges$ = this.monthViews.changes.subscribe(c => {\n            this.setSiblingMonths(c);\n        });\n\n        this.startMonthScroll$.pipe(\n            takeUntil(this.stopMonthScroll$),\n            switchMap(() => this.scrollMonth$.pipe(\n                skipLast(1),\n                debounce(() => interval(300)),\n                takeUntil(this.stopMonthScroll$)\n            ))).subscribe(() => {\n                switch (this.monthScrollDirection) {\n                    case ScrollMonth.PREV:\n                        this.previousMonth();\n                        break;\n                    case ScrollMonth.NEXT:\n                        this.nextMonth();\n                        break;\n                    case ScrollMonth.NONE:\n                    default:\n                        break;\n                }\n        });\n    }\n\n    /**\n     * Returns the locale representation of the month in the month view if enabled,\n     * otherwise returns the default `Date.getMonth()` value.\n     *\n     * @hidden\n     */\n    public formattedMonth(value: Date): string {\n        if (this.formatViews.month) {\n            return this.formatterMonth.format(value);\n        }\n        return `${value.getMonth()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public previousMonth(isKeydownTrigger = false) {\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'month', -1);\n        this.animationAction = ScrollMonth.PREV;\n        this.isKeydownTrigger = isKeydownTrigger;\n    }\n\n    /**\n     * @hidden\n     */\n    public nextMonth(isKeydownTrigger = false) {\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'month', 1);\n        this.animationAction = ScrollMonth.NEXT;\n        this.isKeydownTrigger = isKeydownTrigger;\n    }\n\n    /**\n     * @hidden\n     */\n    public startPrevMonthScroll = (isKeydownTrigger = false) => {\n        this.startMonthScroll$.next();\n        this.monthScrollDirection = ScrollMonth.PREV;\n\n        this.previousMonth(isKeydownTrigger);\n    }\n\n    /**\n     * @hidden\n     */\n    public startNextMonthScroll = (isKeydownTrigger = false) => {\n        this.startMonthScroll$.next();\n        this.monthScrollDirection = ScrollMonth.NEXT;\n\n        this.nextMonth(isKeydownTrigger);\n    }\n\n    /**\n     * @hidden\n     */\n    public stopMonthScroll = (event) => {\n        event.stopPropagation();\n\n        // generally the scrolling is built on the calendar component\n        // and all start/stop scrolling methods are called on the calendar\n        // if we change below lines to call stopMonthScroll$ on the calendar instead of on the views,\n        // strange bug is introduced --> after changing number of months, continuous scrolling on mouse click does not happen\n        this.daysView.stopMonthScroll$.next(true);\n        this.daysView.stopMonthScroll$.complete();\n\n\n        if (this.monthScrollDirection === ScrollMonth.PREV) {\n            this.prevMonthBtn.nativeElement.focus();\n        } else if (this.monthScrollDirection === ScrollMonth.NEXT) {\n            this.nextMonthBtn.nativeElement.focus();\n        }\n\n        this.monthScrollDirection = ScrollMonth.NONE;\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecade(args: Date) {\n        super.activeViewDecade();\n        requestAnimationFrame(() => {\n            if (this.dacadeView) {\n                this.dacadeView.date = args;\n                this.dacadeView.el.nativeElement.focus();\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecadeKB(event, args: Date) {\n        super.activeViewDecadeKB(event, args);\n\n        requestAnimationFrame(() => {\n            if (this.dacadeView) {\n                this.dacadeView.date = args;\n                this.dacadeView.el.nativeElement.focus();\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public getFormattedDate(): { weekday: string, monthday: string } {\n\n        const date = this.headerDate;\n\n        return {\n            monthday: this.formatterMonthday.format(date),\n            weekday: this.formatterWeekday.format(date),\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    public childClicked(instance: ICalendarDate) {\n        if (instance.isPrevMonth) {\n            this.previousMonth();\n        }\n\n        if (instance.isNextMonth) {\n            this.nextMonth();\n        }\n\n        this.selectDateFromClient(instance.date);\n        if (this.selection === 'multi') {\n            this.deselectDateInMonthViews(instance.date);\n        }\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    public viewChanging(args: IViewChangingEventArgs) {\n        this.animationAction = args.monthAction;\n        this.isKeydownTrigger = true;\n        this.nextDate = args.nextDate;\n        this.callback = (next) => {\n            const day = this.daysView.dates.find((item) => item.date.date.getTime() === next.getTime());\n            if (day) {\n                this.daysView.navService.focusNextDate(day.nativeElement, args.key, true);\n            }\n        };\n        this.viewDate = this.calendarModel.timedelta(this.nextDate, 'month', 0);\n    }\n\n    /**\n     * @hidden\n     */\n    public changeMonth(event: Date) {\n        this.viewDate = new Date(this.viewDate.getFullYear(), event.getMonth());\n        this.activeView = CalendarView.DEFAULT;\n\n        requestAnimationFrame(() => {\n            if (this.monthsBtn) { this.monthsBtn.nativeElement.focus(); }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewYear(args: Date, event): void {\n        this.activeView = CalendarView.YEAR;\n        requestAnimationFrame(() => {\n            this.monthsView.date = args;\n            this.focusMonth(event.target);\n        });\n    }\n\n    private focusMonth(target: HTMLElement) {\n        const month = this.monthsView.dates.find((date) =>\n            date.index === parseInt(target.parentElement.attributes['data-month'].value, 10));\n        if (month) { month.nativeElement.focus(); }\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewYearKB(args: Date, event): void {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            this.activeViewYear(args, event);\n        }\n    }\n\n    /**\n     * Deselects date(s) (based on the selection type).\n     *```typescript\n     * this.calendar.deselectDate(new Date(`2018-06-12`));\n     *````\n     */\n    public deselectDate(value?: Date | Date[]) {\n        super.deselectDate(value);\n\n        this.monthViews.forEach((view) => {\n            view.selectedDates = this.selectedDates;\n            view.rangeStarted = false;\n        });\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     * Helper method that does deselection for all month views when selection is \"multi\"\n     * If not called, selection in other month views stays\n     * @hidden\n     */\n    private deselectDateInMonthViews(value: Date) {\n        this.monthViews.forEach(m => {\n            m.deselectMultipleInMonth(value);\n         });\n    }\n\n    /**\n     * @hidden\n     */\n    public getViewDate(i: number): Date {\n        const date = this.calendarModel.timedelta(this.viewDate, 'month', i);\n        return date;\n    }\n\n    /**\n     * @hidden\n     */\n    public getMonth(i: number): number {\n        const date = this.calendarModel.timedelta(this.viewDate, 'month', i);\n        return date.getMonth();\n    }\n\n    /**\n     * @hidden\n     */\n    public getContext(i: number) {\n        const date = this.calendarModel.timedelta(this.viewDate, 'month', i);\n        return this.generateContext(date, i);\n    }\n\n    /**\n     * @hidden\n     */\n    public animationDone(event) {\n        if (this.monthScrollDirection !== ScrollMonth.NONE) {\n            this.scrollMonth$.next();\n        }\n\n        if (this.activeView !== CalendarView.DEFAULT) {\n            return;\n        }\n\n        let monthView = this.daysView as IgxDaysViewComponent;\n        let date = monthView.dates.find((d) => d.selected);\n\n        while (!date && monthView.nextMonthView) {\n            monthView = monthView.nextMonthView;\n            date = monthView.dates.find((d) => d.selected);\n        }\n        if (date && date.isFocusable && !this.isKeydownTrigger) {\n            setTimeout(() => {\n                date.nativeElement.focus();\n            }, parseInt(slideInRight.options.params.duration, 10));\n        } else if (this.callback && (event.toState === ScrollMonth.NEXT || event.toState === ScrollMonth.PREV)) {\n            this.callback(this.nextDate);\n        }\n        this.animationAction = ScrollMonth.NONE;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.pagedown', ['$event'])\n    @HostListener('keydown.pageup', ['$event'])\n    public onKeydownPageDown(event: KeyboardEvent) {\n        event.preventDefault();\n\n        if (this.activeView !== CalendarView.DEFAULT) {\n            return;\n        }\n\n        const isPageDown = event.key === 'PageDown';\n        const step = isPageDown ? 1 : -1;\n        let monthView = this.daysView as IgxDaysViewComponent;\n        let activeDate;\n\n        while (!activeDate && monthView) {\n            activeDate = monthView.dates.find((date) => date.nativeElement === document.activeElement);\n            monthView = monthView.nextMonthView;\n        }\n\n        if (activeDate) {\n            this.nextDate = new Date(activeDate.date.date);\n\n            let year = this.nextDate.getFullYear();\n\n            let month = this.nextDate.getMonth() + step;\n            if (isPageDown) {\n                if (month > 11) { month = 0; year += step; }\n            } else {\n                if (month < 0) { month = 11; year += step; }\n            }\n\n            const range = monthRange(this.nextDate.getFullYear(), month);\n\n            let day = this.nextDate.getDate();\n            if (day > range[1]) { day = range[1]; }\n\n            this.nextDate.setDate(day);\n            this.nextDate.setMonth(month);\n            this.nextDate.setFullYear(year);\n\n            this.callback = (next) => {\n                monthView = this.daysView as IgxDaysViewComponent;\n                let dayItem;\n                while ((!dayItem && monthView) || (dayItem && !dayItem.isCurrentMonth)) {\n                    dayItem = monthView.dates.find((d) => d.date.date.getTime() === next.getTime());\n                    monthView = monthView.nextMonthView;\n                }\n                if (dayItem && dayItem.isFocusable) { dayItem.nativeElement.focus(); }\n            };\n        }\n\n        if (isPageDown) { this.nextMonth(true); } else {\n            this.previousMonth(true);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.shift.pageup', ['$event'])\n    @HostListener('keydown.shift.pagedown', ['$event'])\n    public onKeydownShiftPageUp(event: KeyboardEvent) {\n        event.preventDefault();\n\n        if (this.activeView !== CalendarView.DEFAULT) {\n            return;\n        }\n\n        const isPageDown = event.key === 'PageDown';\n        const step = isPageDown ? 1 : -1;\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', step);\n\n        this.animationAction = isPageDown ? ScrollMonth.NEXT : ScrollMonth.PREV;\n        this.isKeydownTrigger = true;\n\n        let monthView = this.daysView as IgxDaysViewComponent;\n        let activeDate;\n\n        while (!activeDate && monthView) {\n            activeDate = monthView.dates.find((date) => date.nativeElement === document.activeElement);\n            monthView = monthView.nextMonthView;\n        }\n\n        if (activeDate) {\n            this.nextDate = new Date(activeDate.date.date);\n\n            const year = this.nextDate.getFullYear() + step;\n\n            const range = monthRange(year, this.nextDate.getMonth());\n\n            let day = this.nextDate.getDate();\n            if (day > range[1]) { day = range[1]; }\n\n            this.nextDate.setDate(day);\n            this.nextDate.setFullYear(year);\n\n            this.callback = (next) => {\n                monthView = this.daysView as IgxDaysViewComponent;\n                let dayItem;\n                while ((!dayItem && monthView) || (dayItem && !dayItem.isCurrentMonth)) {\n                    dayItem = monthView.dates.find((d) => d.date.date.getTime() === next.getTime());\n                    monthView = monthView.nextMonthView;\n                }\n                if (dayItem && dayItem.isFocusable) { dayItem.nativeElement.focus(); }\n            };\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        if (this.daysView) {\n            this.daysView.onKeydownHome(event);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        if (this.daysView) {\n            this.daysView.onKeydownEnd(event);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('document:mouseup', ['$event'])\n    public onMouseUp(event: KeyboardEvent) {\n        if (this.monthScrollDirection !== ScrollMonth.NONE) {\n            this.stopMonthScroll(event);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy(): void {\n        if (this._monthViewsChanges$) {\n            this._monthViewsChanges$.unsubscribe();\n        }\n    }\n\n    /**\n     * Helper method building and returning the context object inside\n     * the calendar templates.\n     * @hidden\n     */\n    private generateContext(value: Date, i?: number) {\n        const formatObject = {\n            index: i,\n            monthView: () => this.activeViewYear(value, event),\n            yearView: () => this.activeViewDecade(value),\n            ...this.calendarModel.formatToParts(value, this.locale, this.formatOptions,\n                ['era', 'year', 'month', 'day', 'weekday'])\n        };\n        return { $implicit: formatObject };\n    }\n\n    /**\n     * Helper method that sets references for prev/next months for each month in the view\n     * @hidden\n     */\n    private setSiblingMonths(monthViews: QueryList<IgxDaysViewComponent>) {\n        monthViews.forEach((item, index) => {\n            const prevMonthView = this.getMonthView(index - 1);\n            const nextMonthView = this.getMonthView(index + 1);\n            item.nextMonthView = nextMonthView;\n            item.prevMonthView = prevMonthView;\n        });\n    }\n\n    /**\n     * Helper method returning previous/next day views\n     * @hidden\n     */\n    private getMonthView(index: number): IgxDaysViewComponent {\n        if (index === -1 || index === this.monthViews.length ) {\n            return null;\n        } else {\n            return this.monthViews.toArray()[index];\n        }\n    }\n}\n","import {\n    Component,\n    HostListener,\n    ViewChild,\n    HostBinding,\n    Input\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { trigger, transition, useAnimation } from '@angular/animations';\nimport { fadeIn, scaleInCenter, slideInLeft, slideInRight } from '../../animations/main';\nimport { KEYS } from '../../core/utils';\nimport { IgxMonthsViewComponent } from '../months-view/months-view.component';\nimport { IgxMonthPickerBase, CalendarView } from '../month-picker-base';\nimport { IgxYearsViewComponent } from '../years-view/years-view.component';\nimport { IgxDaysViewComponent } from '../days-view/days-view.component';\n\nlet NEXT_ID = 0;\n@Component({\n    providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxMonthPickerComponent\n        }\n    ],\n    animations: [\n        trigger('animateView', [\n            transition('void => 0', useAnimation(fadeIn)),\n            transition('void => *', useAnimation(scaleInCenter, {\n                params: {\n                    duration: '.2s',\n                    fromScale: .9\n                }\n            }))\n        ]),\n        trigger('animateChange', [\n            transition('* => prev', useAnimation(slideInLeft, {\n                params: {\n                    fromPosition: 'translateX(-30%)'\n                }\n            })),\n            transition('* => next', useAnimation(slideInRight, {\n                params: {\n                    fromPosition: 'translateX(30%)'\n                }\n            }))\n        ])\n    ],\n    selector: 'igx-month-picker',\n    templateUrl: 'month-picker.component.html'\n})\nexport class IgxMonthPickerComponent extends IgxMonthPickerBase {\n    /**\n     * Sets/gets the `id` of the month picker.\n     * If not set, the `id` will have value `\"igx-month-picker-0\"`.\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-month-picker-${NEXT_ID++}`;\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('months', { read: IgxMonthsViewComponent, static: false })\n    public monthsView: IgxMonthsViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('decade', { read: IgxYearsViewComponent, static: false })\n    public dacadeView: IgxYearsViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('days', { read: IgxDaysViewComponent, static: false })\n    public daysView: IgxDaysViewComponent;\n\n    /**\n     * @hidden\n     */\n    public yearAction = '';\n\n    /**\n     * @hidden\n     */\n    public animationDone() {\n        this.yearAction = '';\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecadeKB(event) {\n        super.activeViewDecadeKB(event);\n\n        if (event.key === KEYS.RIGHT_ARROW || event.key === KEYS.RIGHT_ARROW_IE) {\n            event.preventDefault();\n            this.nextYear();\n        }\n\n        if (event.key === KEYS.LEFT_ARROW || event.key === KEYS.LEFT_ARROW_IE) {\n            event.preventDefault();\n            this.previousYear();\n        }\n\n        requestAnimationFrame(() => {\n            if (this.dacadeView) { this.dacadeView.el.nativeElement.focus(); }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecade() {\n        super.activeViewDecade();\n\n        requestAnimationFrame(() => {\n            this.dacadeView.el.nativeElement.focus();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public nextYear() {\n        this.yearAction = 'next';\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', 1);\n\n        this.selectDate(this.viewDate);\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    public nextYearKB(event) {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            this.nextYear();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public previousYear() {\n        this.yearAction = 'prev';\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', -1);\n\n        this.selectDate(this.viewDate);\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    public previousYearKB(event) {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            this.previousYear();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectYear(event: Date) {\n        this.viewDate = new Date(event.getFullYear(), event.getMonth(), event.getDate());\n        this.activeView = CalendarView.DEFAULT;\n\n        this.selectDate(event);\n        this.onSelection.emit(this.selectedDates);\n\n        requestAnimationFrame(() => {\n            if (this.yearsBtn) { this.yearsBtn.nativeElement.focus(); }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public selectMonth(event: Date) {\n        this.selectDate(event);\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * Selects a date.\n     *```typescript\n     * this.monPicker.selectDate(new Date(`2018-06-12`));\n     *```\n     */\n    public selectDate(value: Date) {\n        if (!value) {\n            return new Date();\n        }\n\n        // TO DO: to be refactored after discussion on the desired behavior\n        super.selectDate(value);\n        this.viewDate = value;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n\n        // TO DO: to be refactored after discussion on the desired behavior\n        if (value) {\n            this.viewDate = this.selectedDates = value;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.pageup', ['$event'])\n    public onKeydownPageUp(event: KeyboardEvent) {\n        event.preventDefault();\n        this.yearAction = 'prev';\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', -1);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.pagedown', ['$event'])\n    public onKeydownPageDown(event: KeyboardEvent) {\n        event.preventDefault();\n        this.yearAction = 'next';\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', 1);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        if (this.monthsView) {\n            this.monthsView.el.nativeElement.focus();\n            this.monthsView.onKeydownHome(event);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        if (this.monthsView) {\n            this.monthsView.el.nativeElement.focus();\n            this.monthsView.onKeydownEnd(event);\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxCalendarComponent } from './calendar.component';\nimport {\n    IgxCalendarHeaderTemplateDirective,\n    IgxCalendarMonthDirective,\n    IgxCalendarSubheaderTemplateDirective,\n    IgxCalendarYearDirective,\n    IgxCalendarScrollMonthDirective\n} from './calendar.directives';\nimport { IgxMonthsViewComponent } from './months-view/months-view.component';\nimport { IgxYearsViewComponent } from './years-view/years-view.component';\nimport { IgxDaysViewComponent } from './days-view/days-view.component';\nimport { IgxDayItemComponent } from './days-view/day-item.component';\nimport { IgxMonthPickerComponent } from './month-picker/month-picker.component';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxDayItemComponent,\n        IgxDaysViewComponent,\n        IgxCalendarComponent,\n        IgxCalendarHeaderTemplateDirective,\n        IgxCalendarMonthDirective,\n        IgxCalendarYearDirective,\n        IgxCalendarSubheaderTemplateDirective,\n        IgxCalendarScrollMonthDirective,\n        IgxMonthsViewComponent,\n        IgxYearsViewComponent,\n        IgxMonthPickerComponent\n    ],\n    exports: [\n        IgxCalendarComponent,\n        IgxDaysViewComponent,\n        IgxMonthsViewComponent,\n        IgxYearsViewComponent,\n        IgxMonthPickerComponent,\n        IgxCalendarHeaderTemplateDirective,\n        IgxCalendarMonthDirective,\n        IgxCalendarYearDirective,\n        IgxCalendarSubheaderTemplateDirective\n    ],\n    imports: [CommonModule, FormsModule, IgxIconModule]\n})\nexport class IgxCalendarModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    Directive,\n    HostBinding,\n    Optional,\n    Inject,\n    Input,\n    NgModule,\n    OnInit,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\nimport { IgxButtonModule } from '../directives/button/button.directive';\n\nlet NEXT_ID = 0;\n\n/**\n * IgxCardMedia is container for the card media section.\n * Use it to wrap images and videos.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-media'\n})\nexport class IgxCardMediaDirective {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card__media')\n    public cssClass = 'igx-card__media';\n\n    /**\n     * An @Input property that sets the `width` and `min-width` style property\n     * of the media container. If not provided it will be set to `auto`.\n     * ```html\n     * <igx-card-media width=\"300px\"></igx-card-media>\n     * ```\n     */\n    @HostBinding('style.width')\n    @HostBinding('style.min-width')\n    @Input()\n    public width = 'auto';\n\n    /**\n     * An @Input property that sets the `height` style property of the media container.\n     * If not provided it will be set to `auto`.\n     * ```html\n     * <igx-card-media height=\"50%\"></igx-card-media>\n     * ```\n     */\n    @HostBinding('style.height')\n    @Input()\n    public height = 'auto';\n\n    /**\n     * An @Input property that sets the `role` attribute of the media container.\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'img';\n}\n\n/**\n * IgxCardHeader is container for the card header\n */\n@Component({\n    selector: 'igx-card-header',\n    templateUrl: 'card-header.component.html'\n})\nexport class IgxCardHeaderComponent {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card-header')\n    public cssClass = 'igx-card-header';\n\n    /**\n     * An @Input property that sets the layout style of the header.\n     * By default the header elements(thumbnail and title/subtitle) are aligned horizontally.\n     * ```html\n     * <igx-card-header [vertical]=\"true\"></igx-card-header>\n     * ```\n     */\n    @HostBinding('class.igx-card-header--vertical')\n    @Input()\n    public vertical = false;\n\n    /**\n     * An @Input property that sets the value of the `role` attribute of the card header.\n     * By default the value is set to `header`.\n     * ```html\n     * <igx-card-header role=\"header\"></igx-card-header>\n     * ```\n     */\n    @HostBinding('attr.role')\n    public role = 'header';\n}\n\n/**\n * IgxCardThumbnail is container for the card thumbnail section.\n * Use it to wrap anything you want to be used as a thumbnail.\n */\n@Directive({\n    selector: '[igxCardThumbnail]'\n})\nexport class IgxCardThumbnailDirective { }\n\n/**\n * igxCardHeaderTitle is used to denote the header title in a card.\n * Use it to tag text nodes.\n */\n@Directive({\n    selector: '[igxCardHeaderTitle]'\n})\nexport class IgxCardHeaderTitleDirective {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card-header__title')\n    public cssClass = 'igx-card__header__title';\n}\n\n/**\n * igxCardHeaderSubtitle is used to denote the header subtitle in a card.\n * Use it to tag text nodes.\n */\n@Directive({\n    selector: '[igxCardHeaderSubtitle]'\n})\nexport class IgxCardHeaderSubtitleDirective {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card-header__subtitle')\n    public cssClass = 'igx-card-header__subtitle';\n}\n/**\n * IgxCardContent is container for the card content.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-content'\n})\nexport class IgxCardContentDirective {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card-content')\n    public cssClass = 'igx-card-content';\n}\n\n/**\n * IgxCardFooter is container for the card footer\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-footer'\n})\nexport class IgxCardFooterDirective {\n    /**\n     * An @Input property that sets the value of the `role` attribute of the card footer.\n     * By default the value is set to `footer`.\n     * ```html\n     * <igx-card-footer role=\"footer\"></igx-card-footer>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'footer';\n}\n\n/**\n * **Ignite UI for Angular Card** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/card.html)\n *\n * The Ignite UI Card serves as a container that allows custom content to be organized in an appealing way. There are\n * five sections in a card that you can use to organize your content. These are header, media, content, actions, and footer.\n *\n * Example:\n * ```html\n * <igx-card>\n *   <igx-card-header>\n *     <h3 igxCardHeaderTitle>{{title}}</h3>\n *     <h5 igxCardHeaderSubtitle>{{subtitle}}</h5>\n *   </igx-card-header>\n *   <igx-card-actions>\n *       <button igxButton igxRipple>Share</button>\n *       <button igxButton igxRipple>Play Album</button>\n *   </igx-card-actions>\n * </igx-card>\n * ```\n */\n\nexport enum IgxCardType {\n    DEFAULT = 'default',\n    OUTLINED = 'outlined'\n}\n\n@Component({\n    selector: 'igx-card',\n    templateUrl: 'card.component.html'\n})\nexport class IgxCardComponent {\n    /**\n     * Sets/gets the `id` of the card.\n     * If not set, `id` will have value `\"igx-card-0\"`;\n     * ```html\n     * <igx-card id = \"my-first-card\"></igx-card>\n     * ```\n     * ```typescript\n     * let cardId =  this.card.id;\n     * ```\n     * @memberof IgxCardComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-card-${NEXT_ID++}`;\n\n    /**\n     * An @Input property that sets the value of the `role` attribute of the card.\n     * By default the value is set to `group`.\n     * ```html\n     * <igx-card role=\"group\"></igx-card>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'group';\n\n    /**\n     * An @Input property that sets the value of the `type` attribute of the card.\n     * By default the value is set to `default`. You can make the card use the\n     * outlined style by setting the value to `outlined`.\n     * ```html\n     * <igx-card type=\"outlined\"></igx-card>\n     * ```\n     */\n    @HostBinding('class.igx-card')\n    @Input()\n    public type: IgxCardType | string = IgxCardType.DEFAULT;\n\n    /**\n     * A getter which will return true if the card type is `outlined`.\n     */\n    @HostBinding('class.igx-card--outlined')\n    get isOutlinedCard() {\n        return this.type === IgxCardType.OUTLINED;\n    }\n\n    /**\n     * An @Input property that sets the value of the `horizontal` attribute of the card.\n     * Setting this to `true` will make the different card sections align horizontally,\n     * essentially flipping the card to the side.\n     * ```html\n     * <igx-card [horizontal]=\"true\"></igx-card>\n     * ```\n     */\n    @HostBinding('class.igx-card--horizontal')\n    @Input()\n    public horizontal = false;\n}\n\nexport enum IgxCardActionsLayout {\n    DEFAULT = 'default',\n    JUSTIFY = 'justify',\n}\n\n/**\n * IgxCardActions is container for the card actions.\n */\n@Component({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-actions',\n    templateUrl: 'card-actions.component.html'\n})\nexport class IgxCardActionsComponent implements OnInit, OnChanges {\n    private isVerticalSet = false;\n\n    constructor(@Optional() @Inject(IgxCardComponent) public card: IgxCardComponent) { }\n\n    /**\n     * An @Input property that sets the layout style of the actions.\n     * By default icons and icon buttons, as well as regular buttons\n     * are split into two containers, which are then positioned on both ends\n     * of the card-actions area.\n     * You can justify the elements in those groups so they are positioned equally\n     * from one another taking up all the space available along the card actions axis.\n     * ```html\n     * <igx-card-actions layout=\"justify\"></igx-card-actions>\n     * ```\n     */\n    @HostBinding('class.igx-card-actions')\n    @Input()\n    public layout: IgxCardActionsLayout | string = 'default';\n\n    /**\n     * An @Input property that sets the vertical attribute of the actions.\n     * When set to `true` the actions will be layed out vertically.\n     */\n    @HostBinding('class.igx-card-actions--vertical')\n    @Input()\n    public vertical: boolean;\n\n    /**\n     * A getter that returns `true` when the layout has been\n     * set to `justify`.\n     */\n    @HostBinding('class.igx-card-actions--justify')\n    get isJustifyLayout() {\n        return this.layout === IgxCardActionsLayout.JUSTIFY;\n    }\n\n    /**\n     * An @Input property that sets order of the buttons the actions area.\n     * By default all icons/icon buttons are placed at the end of the action\n     * area. Any regular buttons(flat, raised) will appear before the icons/icon buttons\n     * placed in the actions area.\n     * If you want to reverse their positions so that icons appear first, use the `reverse`\n     * attribute.\n     * ```html\n     * <igx-card-actions [reverse]=\"true\"></igx-card-actions>\n     * ```\n     */\n    @HostBinding('class.igx-card-actions--reverse')\n    @Input()\n    public reverse = false;\n\n    ngOnChanges(changes: SimpleChanges) {\n        for (const prop in changes) {\n            if (prop === 'vertical') {\n                this.isVerticalSet = true;\n            }\n        }\n    }\n\n    ngOnInit() {\n        this.vertical = !this.isVerticalSet && this.card.horizontal;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxCardComponent,\n        IgxCardHeaderComponent,\n        IgxCardMediaDirective,\n        IgxCardContentDirective,\n        IgxCardActionsComponent,\n        IgxCardFooterDirective,\n        IgxCardHeaderTitleDirective,\n        IgxCardHeaderSubtitleDirective,\n        IgxCardThumbnailDirective,\n    ],\n    exports: [\n        IgxCardComponent,\n        IgxCardHeaderComponent,\n        IgxCardMediaDirective,\n        IgxCardContentDirective,\n        IgxCardActionsComponent,\n        IgxCardFooterDirective,\n        IgxCardHeaderTitleDirective,\n        IgxCardHeaderSubtitleDirective,\n        IgxCardThumbnailDirective,\n    ],\n    imports: [CommonModule, IgxButtonModule]\n})\nexport class IgxCardModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Output\n} from '@angular/core';\nimport { IgxIconModule } from '../icon/index';\nimport { IBaseEventArgs } from '../core/utils';\n\nlet NEXT_ID = 0;\n\nexport enum Direction { NONE, NEXT, PREV }\n\n/**\n * **Ignite UI for Angular Carousel** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/carousel.html)\n *\n * The Ignite UI Carousel is used to browse or navigate through a collection of slides. Slides can contain custom\n * content such as images or cards and be used for things such as on-boarding tutorials or page-based interfaces.\n * It can be used as a separate fullscreen element or inside another component.\n *\n * Example:\n * ```html\n * <igx-carousel>\n *   <igx-slide>\n *     <h3>First Slide Header</h3>\n *     <p>First slide Content</p>\n *   <igx-slide>\n *   <igx-slide>\n *     <h3>Second Slide Header</h3>\n *     <p>Second Slide Content</p>\n * </igx-carousel>\n * ```\n */\n@Component({\n    selector: 'igx-carousel',\n    templateUrl: 'carousel.component.html',\n    styles: [`\n    :host {\n        display: block;\n        outline-style: none;\n    }`]\n})\n\nexport class IgxCarouselComponent implements OnDestroy {\n    /**\n     * Returns the `role` attribute of the carousel.\n     * ```typescript\n     * let carouselRole =  this.carousel.role;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('attr.role') public role = 'region';\n\n    /**\n     * Sets the `id` of the carousel.\n     * If not set, the `id` of the first carousel component will be `\"igx-carousel-0\"`.\n     * ```html\n     * <igx-carousel id=\"my-first-carousel\"></igx-carousel>\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-carousel-${NEXT_ID++}`;\n\n    /**\n     * Sets whether the carousel should `loop` back to the first slide after reaching the last slide.\n     * Default value is `true`.\n     * ```html\n     * <igx-carousel [loop]=\"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public loop = true;\n\n    /**\n     * Sets whether the carousel will `pause` the slide transitions on user interactions.\n     * Default value is `true`.\n     * ```html\n     *  <igx-carousel [pause]=\"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public pause = true;\n\n    /**\n     * Returns the time `interval` in milliseconds before the slide changes.\n     * ```typescript\n     * let timeInterval = this.carousel.interval;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @Input()\n    get interval(): number {\n        return this._interval;\n    }\n\n    /**\n     * Sets the time `interval` in milliseconds before the slide changes.\n     * If not set, the carousel will not change `slides` automatically.\n     * ```html\n     * <igx-carousel [interval] = \"1000\"></igx-carousel>\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    set interval(value: number) {\n        this._interval = +value;\n        this._restartInterval();\n    }\n    /**\n     * Returns the `tabIndex` of the carousel component.\n     * ```typescript\n     * let tabIndex =  this.carousel.tabIndex;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('attr.tabindex')\n    get tabIndex() {\n        return 0;\n    }\n\n    /**\n     * Controls whether the carousel should render the left/right `navigation` buttons.\n     * Default value is `true`.\n     * ```html\n     * <igx-carousel [navigation] = \"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public navigation = true;\n\n    /**\n     * An event that is emitted after a slide transition has happened.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideChanged)=\"onSlideChanged($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onSlideChanged = new EventEmitter<ISlideEventArgs>();\n\n    /**\n     * An event that is emitted after a slide has been added to the carousel.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideAdded)=\"onSlideAdded($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onSlideAdded = new EventEmitter<ISlideEventArgs>();\n\n    /**\n     * An event that is emitted after a slide has been removed from the carousel.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideRemoved)=\"onSlideRemoved($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onSlideRemoved = new EventEmitter<ISlideEventArgs>();\n\n    /**\n     * An event that is emitted after the carousel has been paused.\n     * Provides a reference to the `IgxCarouselComponent` as an event argument.\n     * ```html\n     * <igx-carousel (onCarouselPaused)=\"onCarouselPaused($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onCarouselPaused = new EventEmitter<IgxCarouselComponent>();\n\n    /**\n     * An event that is emitted after the carousel has resumed transitioning between `slides`.\n     * Provides a reference to the `IgxCarouselComponent` as an event argument.\n     * ```html\n     * <igx-carousel (onCarouselPlaying)=\"onCarouselPlaying($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onCarouselPlaying = new EventEmitter<IgxCarouselComponent>();\n\n    /**\n     * The collection of `slides` currently in the carousel.\n     * ```typescript\n     * let slides: IgxSlideComponent[] = this.carousel.slides;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public slides: IgxSlideComponent[] = [];\n    private _interval: number;\n    private _lastInterval: any;\n    private _playing: boolean;\n    private _currentSlide: IgxSlideComponent;\n    private _destroyed: boolean;\n    private _total = 0;\n\n    constructor(private element: ElementRef) { }\n    /**\n     *@hidden\n     */\n    public ngOnDestroy() {\n        this._destroyed = true;\n        if (this._lastInterval) {\n            clearInterval(this._lastInterval);\n        }\n    }\n    /**\n     * @hidden\n     * @memberof IgxCarouselComponent\n     */\n    public setAriaLabel(slide) {\n        return `Item ${slide.index + 1} of ${this.total}`;\n    }\n\n    /**\n     * Returns the total number of `slides` in the carousel.\n     * ```typescript\n     * let slideCount =  this.carousel.total;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get total(): number {\n        return this._total;\n    }\n\n    /**\n     * The index of the slide being currently shown.\n     * ```typescript\n     * let currentSlideNumber =  this.carousel.current;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get current(): number {\n        return !this._currentSlide ? 0 : this._currentSlide.index;\n    }\n\n    /**\n     * Returns a boolean indicating if the carousel is playing.\n     * ```typescript\n     * let isPlaying =  this.carousel.isPlaying;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get isPlaying(): boolean {\n        return this._playing;\n    }\n\n    /**\n     * Returns Ð° boolean indicating if the carousel is destroyed.\n     * ```typescript\n     * let isDestroyed =  this.carousel.isDestroyed;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get isDestroyed(): boolean {\n        return this._destroyed;\n    }\n    /**\n     * Returns a reference to the carousel element in the DOM.\n     * ```typescript\n     * let nativeElement =  this.carousel.nativeElement;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    get nativeElement(): any {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Returns the slide corresponding to the provided `index` or null.\n     * ```typescript\n     * let slide1 =  this.carousel.get(1);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get(index: number): IgxSlideComponent {\n        for (const each of this.slides) {\n            if (each.index === index) {\n                return each;\n            }\n        }\n    }\n\n    /**\n     * Adds a new slide to the carousel.\n     * ```typescript\n     * this.carousel.add(newSlide);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public add(slide: IgxSlideComponent) {\n        slide.index = this.total;\n        this.slides.push(slide);\n        this._total += 1;\n\n        if (this.total === 1 || slide.active) {\n            this.select(slide);\n            if (this.total === 1) {\n                this.play();\n            }\n        } else {\n            slide.active = false;\n        }\n\n        this.onSlideAdded.emit({ carousel: this, slide });\n    }\n\n    /**\n     * Removes a slide from the carousel.\n     * ```typescript\n     * this.carousel.remove(slide);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public remove(slide: IgxSlideComponent) {\n        if (slide && slide === this.get(slide.index)) { // check if the requested slide for delete is present in the carousel\n            if (slide.index === this.current) {\n                slide.active = false;\n                this.next();\n            }\n\n            this.slides.splice(slide.index, 1);\n            this._total -= 1;\n\n            if (!this.total) {\n                this._currentSlide = null;\n                return;\n            }\n\n            for (let i = 0; i < this.total; i++) {\n                this.slides[i].index = i;\n            }\n\n            this.onSlideRemoved.emit({ carousel: this, slide });\n        }\n    }\n\n    /**\n     * Kicks in a transition for a given slide with a given `direction`.\n     * ```typescript\n     * this.carousel.select(this.carousel.get(2), Direction.NEXT);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public select(slide: IgxSlideComponent, direction: Direction = Direction.NONE) {\n        const newIndex = slide.index;\n        if (direction === Direction.NONE) {\n            direction = newIndex > this.current ? Direction.NEXT : Direction.PREV;\n        }\n\n        if (slide && slide !== this._currentSlide) {\n            this._moveTo(slide, direction);\n        }\n    }\n\n    /**\n     * Transitions to the next slide in the carousel.\n     * ```typescript\n     * this.carousel.next();\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public next() {\n        const index = (this.current + 1) % this.total;\n\n        if (index === 0 && !this.loop) {\n            this.stop();\n            return;\n        }\n        return this.select(this.get(index), Direction.NEXT);\n    }\n\n    /**\n     * Transitions to the previous slide in the carousel.\n     * ```typescript\n     * this.carousel.prev();\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public prev() {\n        const index = this.current - 1 < 0 ?\n            this.total - 1 : this.current - 1;\n\n        if (!this.loop && index === this.total - 1) {\n            this.stop();\n            return;\n        }\n        return this.select(this.get(index), Direction.PREV);\n    }\n\n    /**\n     * Resumes playing of the carousel if in paused state.\n     * No operation otherwise.\n     * ```typescript\n     * this.carousel.play();\n     * }\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public play() {\n        if (!this._playing) {\n            this._playing = true;\n            this.onCarouselPlaying.emit(this);\n            this._restartInterval();\n        }\n    }\n\n    /**\n     * Stops slide transitions if the `pause` option is set to `true`.\n     * No operation otherwise.\n     * ```typescript\n     *  this.carousel.stop();\n     * }\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public stop() {\n        if (this.pause) {\n            this._playing = false;\n            this.onCarouselPaused.emit(this);\n            this._resetInterval();\n        }\n    }\n    /**\n     *@hidden\n     */\n    private _moveTo(slide: IgxSlideComponent, direction: Direction) {\n        if (this._destroyed) {\n            return;\n        }\n\n        slide.direction = direction;\n        slide.active = true;\n\n        if (this._currentSlide) {\n            this._currentSlide.direction = direction;\n            this._currentSlide.active = false;\n        }\n\n        this._currentSlide = slide;\n\n        this.onSlideChanged.emit({ carousel: this, slide });\n        this._restartInterval();\n    }\n    /**\n     *@hidden\n     */\n    private _resetInterval() {\n        if (this._lastInterval) {\n            clearInterval(this._lastInterval);\n            this._lastInterval = null;\n        }\n    }\n    /**\n     *@hidden\n     */\n    private _restartInterval() {\n        this._resetInterval();\n\n        if (!isNaN(this.interval) && this.interval > 0) {\n            this._lastInterval = setInterval(() => {\n                const tick = +this.interval;\n                if (this._playing && this.total && !isNaN(tick) && tick > 0) {\n                    this.next();\n                } else {\n                    this.stop();\n                }\n            }, this.interval);\n        }\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('keydown.arrowright')\n    public onKeydownArrowRight() {\n        this.next();\n        requestAnimationFrame(() => this.nativeElement.focus());\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('keydown.arrowleft')\n    public onKeydownArrowLeft() {\n        this.prev();\n        requestAnimationFrame(() => this.nativeElement.focus());\n    }\n}\n\n/**\n * A slide component that usually holds an image and/or a caption text.\n * IgxSlideComponent is usually a child component of an IgxCarouselComponent.\n *\n * ```\n * <igx-slide [input bindings] >\n *    <ng-content></ng-content>\n * </igx-slide>\n * ```\n *\n * @export\n */\n@Component({\n    selector: 'igx-slide',\n    templateUrl: 'slide.component.html'\n})\n\nexport class IgxSlideComponent implements OnInit, OnDestroy {\n    private _active;\n    /**\n     * Gets/sets the `index` of the slide inside the carousel.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide index = \"1\"></igx-slide>\n     * <igx-carousel>\n     * ```\n     * @memberOf IgxSlideComponent\n     */\n    @Input() public index: number;\n\n    /**\n     * Gets/sets the target `direction` for the slide.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide direction=\"NEXT\"></igx-slide>\n     * <igx-carousel>\n     * ```\n     * @memberOf IgxSlideComponent\n     */\n    @Input() public direction: Direction;\n    /**\n     * Gets/sets the `active` state of the slide.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide [active] =\"false\"></igx-slide>\n     * <igx-carousel>\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide [(active)] =\"model.isActive\"></igx-slide>\n     * <igx-carousel>\n     * ```\n     * @memberof IgxSlideComponent\n     */\n    @HostBinding('class.active')\n    @Input()\n    public get active(): boolean {\n        return this._active;\n    }\n    public set active(value)  {\n        this._active = value;\n        this.activeChange.emit(this._active);\n    }\n    /**\n     *@hidden\n     */\n    @Output() public activeChange = new EventEmitter<boolean>();\n\n    constructor(private carousel: IgxCarouselComponent) { }\n    /**\n     *@hidden\n     */\n    public ngOnInit() {\n        this.carousel.add(this);\n    }\n    /**\n     *@hidden\n     */\n    public ngOnDestroy() {\n        this.carousel.remove(this);\n    }\n}\n\nexport interface ISlideEventArgs extends IBaseEventArgs {\n    carousel: IgxCarouselComponent;\n    slide: IgxSlideComponent;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxCarouselComponent, IgxSlideComponent],\n    exports: [IgxCarouselComponent, IgxSlideComponent],\n    imports: [CommonModule, IgxIconModule]\n})\nexport class IgxCarouselModule {\n}\n","import {\n    Component,\n    Directive,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Provider,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { CheckboxRequiredValidator, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { isIE, IBaseEventArgs } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport enum LabelPosition {\n    BEFORE = 'before',\n    AFTER = 'after'\n}\n\nexport interface IChangeCheckboxEventArgs extends IBaseEventArgs {\n    checked: boolean;\n    checkbox: IgxCheckboxComponent;\n}\n\nconst noop = () => { };\nlet nextId = 0;\n/**\n * **Ignite UI for Angular Checkbox** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/checkbox.html)\n *\n * The Ignite UI Checkbox is a selection control that allows users to make a binary choice. It behaves similarly\n * to the native browser checkbox.\n *\n * Example:\n * ```html\n * <igx-checkbox checked=\"true\">\n *   simple checkbox\n * </igx-checkbox>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxCheckboxComponent, multi: true }],\n    selector: 'igx-checkbox',\n    preserveWhitespaces: false,\n    templateUrl: 'checkbox.component.html'\n})\nexport class IgxCheckboxComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     *@hidden\n     */\n    protected _value: any;\n    /**\n     * Returns reference to the native checkbox element.\n     * ```typescript\n     * let checkboxElement =  this.checkbox.checkboxElement;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('checkbox', { static: true }) public nativeCheckbox: ElementRef;\n    /**\n     * Returns reference to the native label element.\n     * ```typescript\n     * let labelElement =  this.checkbox.nativeLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('label', { static: true }) public nativeLabel;\n    /**\n     * Returns reference to the label placeholder element.\n     * ```typescript\n     * let labelPlaceholder =  this.checkbox.placeholderLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('placeholderLabel', { static: true }) public placeholderLabel;\n    /**\n     * Sets/gets the `id` of the checkbox component.\n     * If not set, the `id` of the first checkbox component will be `\"igx-checkbox-0\"`.\n     * ```html\n     * <igx-checkbox id=\"my-first-checkbox\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let checkboxId =  this.checkbox.id;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-checkbox-${nextId++}`;\n    /**\n     * Sets/gets the id of the `label` element.\n     * If not set, the id of the `label` in the first checkbox component will be `\"igx-checkbox-0-label\"`.\n     * ```html\n     * <igx-checkbox labelId = \"Label1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let labelId =  this.checkbox.labelId;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public labelId = `${this.id}-label`;\n    /**\n     * Sets/gets the `value` attribute.\n     * ```html\n     * <igx-checkbox [value] = \"'CheckboxValue'\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let value =  this.checkbox.value;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public value: any;\n    /**\n     * Sets/gets the `name` attribute.\n     * ```html\n     * <igx-checkbox name = \"Checkbox1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let name =  this.checkbox.name;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public name: string;\n    /**\n     * Sets/gets the value of the `tabindex` attribute.\n     * ```html\n     * <igx-checkbox [tabindex] = \"1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let tabIndex =  this.checkbox.tabindex;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public tabindex: number = null;\n    /**\n     *  Sets/gets the position of the `label`.\n     *  If not set, the `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-checkbox labelPosition = \"before\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.checkbox.labelPosition;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public labelPosition: LabelPosition | string = LabelPosition.AFTER;\n    /**\n     * Enables/Disables the ripple effect.\n     * If not set, `disableRipple` will have value `false`.\n     * ```html\n     * <igx-checkbox [disableRipple] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isRippleDisabled = this.checkbox.desableRipple;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public disableRipple = false;\n    /**\n     * Sets/gets whether the checkbox is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-checkbox [required] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isRequired =  this.checkbox.required;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public required = false;\n    /**\n     * Sets/gets the `aria-labelledby` attribute.\n     * If not set, the `aria-labelledby` will be equal to the value of `labelId` attribute.\n     * ```html\n     * <igx-checkbox aria-labelledby = \"Checkbox1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let ariaLabelledBy =  this.checkbox.ariaLabelledBy;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input('aria-labelledby')\n    public ariaLabelledBy = this.labelId;\n    /**\n     * Sets/gets the value of the `aria-label` attribute.\n     * ```html\n     * <igx-checkbox aria-label = \"Checkbox1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let ariaLabel = this.checkbox.aruaLabel;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input('aria-label')\n    public ariaLabel: string | null = null;\n    /**\n     * An event that is emitted after the checkbox state is changed.\n     * Provides references to the `IgxCheckboxComponent` and the `checked` property as event arguments.\n     * @memberof IgxCheckboxComponent\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeCheckboxEventArgs> = new EventEmitter<IChangeCheckboxEventArgs>();\n    /**\n     * Returns the class of the checkbox component.\n     * ```typescript\n     * let class =  this.checkbox.cssClass;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox')\n    public cssClass = 'igx-checkbox';\n    /**\n     * Sets/gets whether the checkbox component is on focus.\n     * Default value is `false`.\n     * ```typescript\n     * this.checkbox.focused =  true;\n     * ```\n     * ```typescript\n     * let isFocused =  this.checkbox.focused;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--focused')\n    public focused = false;\n    /**\n     * Sets/gets the checkbox indeterminate visual state.\n     * Default value is `false`;\n     * ```html\n     * <igx-checkbox [indeterminate] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isIndeterminate = this.checkbox.indeterminate;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--indeterminate')\n    @Input() public indeterminate = false;\n    /**\n     * Sets/gets whether the checkbox is checked.\n     * Default value is `false`.\n     * ```html\n     * <igx-checkbox [checked] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isChecked =  this.checkbox.checked;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--checked')\n    @Input() public checked = false;\n    /**\n     * Sets/gets whether the checkbox is disabled.\n     * Default value is `false`.\n     * ```html\n     * <igx-checkbox [disabled] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isDisabled = this.checkbox.disabled;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--disabled')\n    @Input() public disabled = false;\n    /**\n     * Sets/gets whether the checkbox is readonly.\n     * Default value is `false`.\n     * ```html\n     * <igx-checkbox [readonly]=\"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let readonly = this.checkbox.readonly;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public readonly = false;\n    /**\n     * Sets/gets whether the checkbox should disable all css transitions.\n     * Default value is `false`.\n     * ```html\n     * <igx-checkbox [disableTransitions]=\"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let disableTransitions = this.checkbox.disableTransitions;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--plain')\n    @Input() public disableTransitions = false;\n    /**\n     *@hidden\n     */\n    public inputId = `${this.id}-input`;\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     * @hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     * If `disabled` is `false`, switches the `checked` state.\n     * ```typescript\n     * this.checkbox.toggle();\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    public toggle() {\n        if (this.disabled || this.readonly) {\n            return;\n        }\n\n        this.indeterminate = false;\n        this.focused = false;\n        this.checked = !this.checked;\n\n        this.change.emit({ checked: this.checked, checkbox: this });\n        this._onChangeCallback(this.checked);\n    }\n    /**\n     *@hidden\n     */\n    public _onCheckboxChange(event) {\n        // We have to stop the original checkbox change event\n        // from bubbling up since we emit our own change event\n        event.stopPropagation();\n    }\n    /**\n     *@hidden\n     */\n    public _onCheckboxClick(event) {\n        // Since the original checkbox is hidden and the label\n        // is used for styling and to change the checked state of the checkbox,\n        // we need to prevent the checkbox click event from bubbling up\n        // as it gets triggered on label click\n        event.stopPropagation();\n\n        if (this.readonly) {\n            // readonly prevents the component from changing state (see toggle() method).\n            // However, the native checkbox can still be activated through user interaction (focus + space, label click)\n            // Prevent the native change so the input remains in sync\n            event.preventDefault();\n        }\n\n        if (isIE()) {\n            this.nativeCheckbox.nativeElement.blur();\n        }\n\n        this.toggle();\n    }\n    /**\n     *@hidden\n     */\n    public _onLabelClick(event) {\n        // We use a span element as a placeholder label\n        // in place of the native label, we need to emit\n        // the change event separately here alongside\n        // the click event emitted on click\n        this.toggle();\n    }\n    /**\n     *@hidden\n     */\n    public onFocus(event) {\n        this.focused = true;\n    }\n    /**\n     *@hidden\n     */\n    public onBlur(event) {\n        this.focused = false;\n        this._onTouchedCallback();\n    }\n    /**\n     *@hidden\n     */\n    public writeValue(value) {\n        this._value = value;\n        this.checked = !!this._value;\n    }\n    /**\n     *@hidden\n     */\n    public get labelClass(): string {\n        switch (this.labelPosition) {\n            case LabelPosition.BEFORE:\n                return `${this.cssClass}__label--before`;\n            case LabelPosition.AFTER:\n            default:\n                return `${this.cssClass}__label`;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n\n    /** @hidden */\n    getEditElement() {\n        return this.nativeCheckbox.nativeElement;\n    }\n}\n\nexport const IGX_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => IgxCheckboxRequiredDirective),\n    multi: true\n};\n\n/* tslint:disable directive-selector */\n@Directive({\n    selector: `igx-checkbox[required][formControlName],\n    igx-checkbox[required][formControl],\n    igx-checkbox[required][ngModel]`,\n    providers: [IGX_CHECKBOX_REQUIRED_VALIDATOR]\n})\nexport class IgxCheckboxRequiredDirective extends CheckboxRequiredValidator { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxCheckboxComponent, IgxCheckboxRequiredDirective],\n    exports: [IgxCheckboxComponent, IgxCheckboxRequiredDirective],\n    imports: [IgxRippleModule]\n})\nexport class IgxCheckboxModule { }\n","import {\n    Component,\n    ChangeDetectorRef,\n    EventEmitter,\n    ElementRef,\n    HostBinding,\n    Input,\n    Output,\n    ViewChild,\n    Renderer2,\n    TemplateRef,\n    Inject,\n    Optional\n} from '@angular/core';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase } from '../core/displayDensity';\nimport {\n    IgxDragDirective,\n    IDragBaseEventArgs,\n    IDragStartEventArgs,\n    IDropBaseEventArgs,\n    IDropDroppedEventArgs\n} from '../directives/drag-drop/drag-drop.directive';\nimport { IBaseEventArgs } from '../core/utils';\n\n\nexport interface IBaseChipEventArgs extends IBaseEventArgs {\n    originalEvent: IDragBaseEventArgs | IDropBaseEventArgs | KeyboardEvent | MouseEvent | TouchEvent;\n    owner: IgxChipComponent;\n}\n\nexport interface IChipClickEventArgs extends IBaseChipEventArgs {\n    cancel: boolean;\n}\n\nexport interface IChipKeyDownEventArgs extends IBaseChipEventArgs {\n    originalEvent: KeyboardEvent;\n    cancel: boolean;\n}\n\nexport interface IChipEnterDragAreaEventArgs extends IBaseChipEventArgs {\n    dragChip: IgxChipComponent;\n}\n\nexport interface IChipSelectEventArgs extends IBaseChipEventArgs {\n    cancel: boolean;\n    selected: boolean;\n}\n\nlet CHIP_ID = 0;\n\n@Component({\n    selector: 'igx-chip',\n    templateUrl: 'chip.component.html'\n})\nexport class IgxChipComponent extends DisplayDensityBase {\n\n    /**\n     * An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\"></igx-chip>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-chip-${CHIP_ID++}`;\n\n    /**\n     * An @Input property that stores data related to the chip.\n     * ```html\n     * <igx-chip [data]=\"{ value: 'Country' }\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public data: any;\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` can be dragged in order to change it's position.\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public draggable = false;\n\n        /**\n     * An @Input property that enables/disables the draggable element animation when the element is released.\n     * By default it's set to true.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\" [animateOnRelease]=\"false\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public animateOnRelease = true;\n\n    /**\n     * An @Input property that enables/disables the hiding of the base element that has been dragged.\n     * By default it's set to true.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\" [hideBaseOnDrag]=\"false\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public hideBaseOnDrag = true;\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` should render remove button and throw remove events.\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\" [removable]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public removable = false;\n\n    /**\n     * An @Input property that overrides the default icon that the chip applies to the remove button.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [removable]=\"true\" [removeIcon]=\"iconTemplate\"></igx-chip>\n     * <ng-template #iconTemplate><igx-icon>delete</igx-icon></ng-template>\n     * ```\n     */\n    @Input()\n    public removeIcon: TemplateRef<any>;\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` can be selected on click or through navigation,\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [draggable]=\"true\" [removable]=\"true\" [selectable]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public selectable = false;\n\n    /**\n     * An @Input property that overrides the default icon that the chip applies when it is selected.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [selectable]=\"true\" [selectIcon]=\"iconTemplate\"></igx-chip>\n     * <ng-template #iconTemplate><igx-icon>done_outline</igx-icon></ng-template>\n     * ```\n     */\n    @Input()\n    public selectIcon: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public class = '';\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` is disabled. When disabled it restricts user interactions\n     * like focusing on click or tab, selection on click or Space, dragging.\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [disabled]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * Sets the `IgxChipComponent` selected state.\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [selectable]=\"true\" [selected]=\"true\">\n     * ```\n     *\n     * Two-way data binding:\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [selectable]=\"true\" [(selected)]=\"model.isSelected\">\n     * ```\n     */\n    @Input()\n    public set selected(newValue: boolean) {\n        this.changeSelection(newValue);\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public selectedChange = new EventEmitter<boolean>();\n\n    /**\n     * Returns if the `IgxChipComponent` is selected.\n     * ```typescript\n     * @ViewChild('myChip')\n     * public chip: IgxChipComponent;\n     * selectedChip(){\n     *     let selectedChip = this.chip.selected;\n     * }\n     * ```\n     */\n    public get selected() {\n        return this._selected;\n    }\n\n    /**\n     * An @Input property that sets the `IgxChipComponent` background color.\n     * The `color` property supports string, rgb, hex.\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [color]=\"'#ff0000'\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public set color(newColor) {\n        this.chipArea.nativeElement.style.backgroundColor = newColor;\n    }\n\n    /**\n     * Returns the background color of the `IgxChipComponent`.\n     * ```typescript\n     * @ViewChild('myChip')\n     * public chip: IgxChipComponent;\n     * ngAfterViewInit(){\n     *     let chipColor = this.chip.color;\n     * }\n     * ```\n     */\n    public get color() {\n        return this.chipArea.nativeElement.style.backgroundColor;\n    }\n\n    /**\n     * Emits an event when the `IgxChipComponent` moving starts.\n     * Returns the moving `IgxChipComponent`.\n     * ```typescript\n     * moveStarted(event: IBaseChipEventArgs){\n     *     let movingChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onMoveStart)=\"moveStarted($event)\">\n     * ```\n     */\n    @Output()\n    public onMoveStart = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` moving ends.\n     * Returns the moved `IgxChipComponent`.\n     * ```typescript\n     * moveEnded(event: IBaseChipEventArgs){\n     *     let movedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onMoveEnd)=\"moveEnded($event)\">\n     * ```\n     */\n    @Output()\n    public onMoveEnd = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` is removed.\n     * Returns the removed `IgxChipComponent`.\n     * ```typescript\n     * remove(event: IBaseChipEventArgs){\n     *     let removedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onRemove)=\"remove($event)\">\n     * ```\n     */\n    @Output()\n    public onRemove = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` is clicked.\n     * Returns the clicked `IgxChipComponent`, whether the event should be canceled.\n     * ```typescript\n     * chipClick(event: IChipClickEventArgs){\n     *     let clickedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onClick)=\"chipClick($event)\">\n     * ```\n     */\n    @Output()\n    public onClick = new EventEmitter<IChipClickEventArgs>();\n\n    /**\n     * Emits event when the `IgxChipComponent` is selected/deselected.\n     * Returns the selected chip reference, whether the event should be canceled, what is the next selection state and\n     * when the event is triggered by interaction `originalEvent` is provided, otherwise `originalEvent` is `null`.\n     * ```typescript\n     * chipSelect(event: IChipSelectEventArgs){\n     *     let selectedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [selectable]=\"true\" (onSelection)=\"chipSelect($event)\">\n     * ```\n     */\n    @Output()\n    public onSelection = new EventEmitter<IChipSelectEventArgs>();\n\n    /**\n     * Emits event when the `IgxChipComponent` is selected/deselected and any related animations and transitions also end.\n     * ```typescript\n     * chipSelectEnd(event: IBaseChipEventArgs){\n     *     let selectedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [selectable]=\"true\" (onSelectionDone)=\"chipSelectEnd($event)\">\n     * ```\n     */\n    @Output()\n    public onSelectionDone = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` keyboard navigation is being used.\n     * Returns the focused/selected `IgxChipComponent`, whether the event should be canceled,\n     * if the `alt`, `shift` or `control` key is pressed and the pressed key name.\n     * ```typescript\n     * chipKeyDown(event: IChipKeyDownEventArgs){\n     *     let keyDown = event.key;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onKeyDown)=\"chipKeyDown($event)\">\n     * ```\n     */\n    @Output()\n    public onKeyDown = new EventEmitter<IChipKeyDownEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` has entered the `IgxChipsAreaComponent`.\n     * Returns the target `IgxChipComponent`, the drag `IgxChipComponent`, as  well as\n     * the original drop event arguments.\n     * ```typescript\n     * chipEnter(event: IChipEnterDragAreaEventArgs){\n     *     let targetChip = event.targetChip;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onDragEnter)=\"chipEnter($event)\">\n     * ```\n     */\n    @Output()\n    public onDragEnter = new EventEmitter<IChipEnterDragAreaEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    get hostClass(): string {\n        const classes = [this.getComponentDensityClass('igx-chip')];\n        classes.push(this.disabled ? 'igx-chip--disabled' : '');\n        // The custom classes should be at the end.\n        classes.push(this.class);\n        return classes.join(' ');\n    }\n\n    /**\n     * Property that contains a reference to the `IgxDragDirective` the `IgxChipComponent` uses for dragging behavior.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [draggable]=\"true\"></igx-chip>\n     * ```\n     * ```typescript\n     * onMoveStart(event: IBaseChipEventArgs){\n     *     let dragDirective = event.owner.dragDirective;\n     * }\n     * ```\n     */\n    @ViewChild('chipArea', { read: IgxDragDirective, static: true })\n    public dragDirective: IgxDragDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('chipArea', { read: ElementRef, static: true })\n    public chipArea: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultRemoveIcon', { read: TemplateRef, static: true })\n    public defaultRemoveIcon: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultSelectIcon', { read: TemplateRef, static: true })\n    public defaultSelectIcon: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    public get removeButtonTemplate() {\n        return this.removeIcon || this.defaultRemoveIcon;\n    }\n\n    /**\n     * @hidden\n     */\n    public get selectIconTemplate() {\n        return this.selectIcon || this.defaultSelectIcon;\n    }\n\n    /**\n     * @hidden\n     */\n    public get ghostClass(): string {\n        return this.getComponentDensityClass('igx-chip__ghost');\n    }\n\n    public get chipTabindex() {\n        return !this.disabled ? 0 : '';\n    }\n\n    protected _selected = false;\n    protected _selectedItemClass = 'igx-chip__item--selected';\n    protected _movedWhileRemoving = false;\n\n    constructor(public cdr: ChangeDetectorRef, public elementRef: ElementRef, private renderer: Renderer2,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n        }\n\n    /**\n     * @hidden\n     */\n    public selectClass(condition: boolean): object {\n        const SELECT_CLASS = 'igx-chip__select';\n\n        return {\n            [SELECT_CLASS]: condition,\n            [`${SELECT_CLASS}--hidden`]: !condition\n        };\n    }\n\n    protected changeSelection(newValue: boolean, srcEvent = null) {\n        const onSelectArgs: IChipSelectEventArgs = {\n            originalEvent: srcEvent,\n            owner: this,\n            selected: false,\n            cancel: false\n        };\n\n        if (newValue && !this._selected) {\n            onSelectArgs.selected = true;\n            this.onSelection.emit(onSelectArgs);\n\n            if (!onSelectArgs.cancel) {\n                this.renderer.addClass(this.chipArea.nativeElement, this._selectedItemClass);\n                this._selected = newValue;\n                this.selectedChange.emit(this._selected);\n            }\n        } else if (!newValue && this._selected) {\n            this.onSelection.emit(onSelectArgs);\n\n            if (!onSelectArgs.cancel) {\n                this.renderer.removeClass(this.chipArea.nativeElement, this._selectedItemClass);\n                this._selected = newValue;\n                this.selectedChange.emit(this._selected);\n            }\n        }\n    }\n\n    public onSelectTransitionDone(event) {\n        if (event.propertyName === 'width' && !!event.target.tagName) {\n            // Trigger onSelectionDone on when `width` property is changed and the target is valid element(not comment).\n            this.onSelectionDone.emit({\n                owner: this,\n                originalEvent: event\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipKeyDown(event: KeyboardEvent) {\n        const keyDownArgs: IChipKeyDownEventArgs = {\n            originalEvent: event,\n            owner: this,\n            cancel: false\n        };\n\n        this.onKeyDown.emit(keyDownArgs);\n        if (keyDownArgs.cancel) {\n            return;\n        }\n\n        if ((event.key === 'Delete' || event.key === 'Del') && this.removable) {\n            this.onRemove.emit({\n                originalEvent: event,\n                owner: this\n            });\n        }\n\n        if ((event.key === ' ' || event.key === 'Spacebar') && this.selectable && !this.disabled) {\n            this.changeSelection(!this.selected, event);\n        }\n\n        if (event.key !== 'Tab') {\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveBtnKeyDown(event: KeyboardEvent) {\n        if (event.key === ' ' || event.key === 'Spacebar' || event.key === 'Enter') {\n            this.onRemove.emit({\n                originalEvent: event,\n                owner: this\n            });\n\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    public onRemoveMouseDown(event: PointerEvent | MouseEvent) {\n        event.stopPropagation();\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveClick(event: MouseEvent | TouchEvent) {\n        this.onRemove.emit({\n            originalEvent: event,\n            owner: this\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveTouchMove() {\n        // We don't remove chip if user starting touch interacting on the remove button moves the chip\n        this._movedWhileRemoving = true;\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveTouchEnd(event: TouchEvent) {\n        if (!this._movedWhileRemoving) {\n            this.onRemoveClick(event);\n        }\n        this._movedWhileRemoving = false;\n    }\n\n    /**\n     * @hidden\n     */\n    // -----------------------------\n    // Start chip igxDrag behavior\n    public onChipDragStart(event: IDragStartEventArgs) {\n        this.onMoveStart.emit({\n            originalEvent: event,\n            owner: this\n        });\n        event.cancel = !this.draggable || this.disabled;\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipDragEnd() {\n        if (this.animateOnRelease) {\n            this.dragDirective.transitionToOrigin();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipMoveEnd(event: IDragBaseEventArgs) {\n        // moveEnd is triggered after return animation has finished. This happen when we drag and release the chip.\n        this.onMoveEnd.emit({\n            originalEvent: event,\n            owner: this\n        });\n\n        if (this.selected) {\n            this.chipArea.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipDragClicked(event: IDragBaseEventArgs) {\n        const clickEventArgs: IChipClickEventArgs = {\n            originalEvent: event,\n            owner: this,\n            cancel: false\n        };\n        this.onClick.emit(clickEventArgs);\n\n        if (!clickEventArgs.cancel && this.selectable && !this.disabled) {\n            this.changeSelection(!this.selected, event);\n        }\n    }\n    // End chip igxDrag behavior\n\n    /**\n     * @hidden\n     */\n    // -----------------------------\n    // Start chip igxDrop behavior\n    public onChipDragEnterHandler(event: IDropBaseEventArgs) {\n        if (this.dragDirective === event.drag || !event.drag.data || !event.drag.data.chip) {\n            return;\n        }\n\n        const eventArgs: IChipEnterDragAreaEventArgs = {\n            owner: this,\n            dragChip: event.drag.data.chip,\n            originalEvent: event\n        };\n        this.onDragEnter.emit(eventArgs);\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipDrop(event: IDropDroppedEventArgs) {\n        // Cancel the default drop logic\n        event.cancel = true;\n    }\n    // End chip igxDrop behavior\n}\n","import {\n    Component,\n    ContentChildren,\n    ChangeDetectorRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    IterableDiffer,\n    IterableDiffers,\n    Output,\n    QueryList,\n    DoCheck,\n    AfterViewInit,\n    OnDestroy,\n    ElementRef\n} from '@angular/core';\nimport {\n    IgxChipComponent,\n    IChipSelectEventArgs,\n    IChipKeyDownEventArgs,\n    IChipEnterDragAreaEventArgs,\n    IBaseChipEventArgs\n} from './chip.component';\nimport { IDropBaseEventArgs, IDragBaseEventArgs } from '../directives/drag-drop/drag-drop.directive';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\nexport interface IBaseChipsAreaEventArgs {\n    originalEvent: IDragBaseEventArgs | IDropBaseEventArgs | KeyboardEvent | MouseEvent | TouchEvent;\n    owner: IgxChipsAreaComponent;\n}\n\nexport interface IChipsAreaReorderEventArgs extends IBaseChipsAreaEventArgs {\n    chipsArray: IgxChipComponent[];\n}\n\nexport interface IChipsAreaSelectEventArgs extends IBaseChipsAreaEventArgs {\n    newSelection: IgxChipComponent[];\n}\n\n@Component({\n    selector: 'igx-chips-area',\n    templateUrl: 'chips-area.component.html',\n})\nexport class IgxChipsAreaComponent implements DoCheck, AfterViewInit, OnDestroy {\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public class = '';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    get hostClass() {\n        const classes = ['igx-chip-area'];\n        classes.push(this.class);\n\n        return classes.join(' ');\n    }\n\n    /**\n     * An @Input property that sets the width of the `IgxChipsAreaComponent`.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"chipsOrderChanged($event)\"></igx-chips-area>\n     * ```\n     */\n    @HostBinding('style.width.px')\n    @Input()\n    public width: number;\n\n    /**\n     * An @Input property that sets the height of the `IgxChipsAreaComponent`.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"chipsOrderChanged($event)\"></igx-chips-area>\n     * ```\n     */\n    @HostBinding('style.height.px')\n    @Input()\n    public height: number;\n\n    /**\n     * Emits an event when `IgxChipComponent`s in the `IgxChipsAreaComponent` should be reordered.\n     * Returns an array of `IgxChipComponent`s.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"changedOrder($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * public changedOrder(event: IChipsAreaReorderEventArgs){\n     *      let chips: IgxChipComponent[] = event.chipsArray;\n     * }\n     * ```\n     */\n    @Output()\n    public onReorder = new EventEmitter<IChipsAreaReorderEventArgs>();\n\n    /**\n     * Emits an event when an `IgxChipComponent` in the `IgxChipsAreaComponent` is selected/deselected.\n     * Fired after the chips area is initialized if there are initially selected chips as well.\n     * Returns an array of selected `IgxChipComponent`s and the `IgxChipAreaComponent`.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onSelection)=\"selection($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * public selection(event: IChipsAreaSelectEventArgs){\n     *      let selectedChips: IgxChipComponent[] = event.newSelection;\n     * }\n     */\n    @Output()\n    public onSelection = new EventEmitter<IChipsAreaSelectEventArgs>();\n\n    /**\n     * Emits an event when an `IgxChipComponent` in the `IgxChipsAreaComponent` is moved.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onMoveStart)=\"moveStart($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * moveStart(event: IBaseChipsAreaEventArgs){\n     *      let chipArea = event.owner;\n     * }\n     * ```\n     */\n    @Output()\n    public onMoveStart = new EventEmitter<IBaseChipsAreaEventArgs>();\n\n    /**\n     * Emits an event after an `IgxChipComponent` in the `IgxChipsAreaComponent` is moved.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onMoveEnd)=\"moveEnd($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * moveEnd(event: IBaseChipsAreaEventArgs){\n     *      let chipArea = event.owner;\n     * }\n     * ```\n     */\n    @Output()\n    public onMoveEnd = new EventEmitter<IBaseChipsAreaEventArgs>();\n\n    /**\n     * Holds the `IgxChipComponent` in the `IgxChipsAreaComponent`.\n     * ```typescript\n     * ngAfterViewInit(){\n     *    let chips = this.chipsArea.chipsList;\n     * }\n     * ```\n     */\n    @ContentChildren(IgxChipComponent)\n    public chipsList: QueryList<IgxChipComponent>;\n\n    private modifiedChipsArray: IgxChipComponent[];\n    private _differ: IterableDiffer<IgxChipComponent> | null = null;\n    protected destroy$ = new Subject<boolean>();\n\n    constructor(public cdr: ChangeDetectorRef, public element: ElementRef,\n        private _iterableDiffers: IterableDiffers) {\n        this._differ = this._iterableDiffers.find([]).create(null);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        // If we have initially selected chips through their inputs, we need to get them, because we cannot listen to their events yet.\n        if (this.chipsList.length) {\n            const selectedChips = this.chipsList.filter((item: IgxChipComponent) => item.selected);\n            if (selectedChips.length) {\n                this.onSelection.emit({\n                    originalEvent: null,\n                    newSelection: selectedChips,\n                    owner: this\n                });\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck(): void {\n        if (this.chipsList) {\n            const changes = this._differ.diff(this.chipsList.toArray());\n            if (changes) {\n                changes.forEachAddedItem((addedChip) => {\n                    addedChip.item.onMoveStart.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipMoveStart(args);\n                    });\n                    addedChip.item.onMoveEnd.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipMoveEnd(args);\n                    });\n                    addedChip.item.onDragEnter.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipDragEnter(args);\n                    });\n                    addedChip.item.onKeyDown.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipKeyDown(args);\n                    });\n                    if (addedChip.item.selectable) {\n                        addedChip.item.onSelection.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                            this.onChipSelectionChange(args);\n                        });\n                    }\n                });\n                this.modifiedChipsArray = this.chipsList.toArray();\n            }\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipKeyDown(event: IChipKeyDownEventArgs) {\n        let orderChanged = false;\n        const chipsArray = this.chipsList.toArray();\n        const dragChipIndex = chipsArray.findIndex((el) => el === event.owner);\n        if (event.originalEvent.shiftKey === true) {\n            if (event.originalEvent.key === 'ArrowLeft' || event.originalEvent.key === 'Left') {\n                orderChanged = this.positionChipAtIndex(dragChipIndex, dragChipIndex - 1, false, event.originalEvent);\n                if (orderChanged) {\n                    setTimeout(() => {\n                        this.chipsList.toArray()[dragChipIndex - 1].chipArea.nativeElement.focus();\n                    });\n                }\n            } else if (event.originalEvent.key === 'ArrowRight' || event.originalEvent.key === 'Right') {\n                orderChanged = this.positionChipAtIndex(dragChipIndex, dragChipIndex + 1, true, event.originalEvent);\n            }\n        } else {\n            if ((event.originalEvent.key === 'ArrowLeft' || event.originalEvent.key === 'Left') && dragChipIndex > 0) {\n                chipsArray[dragChipIndex - 1].chipArea.nativeElement.focus();\n            } else if ((event.originalEvent.key === 'ArrowRight' || event.originalEvent.key === 'Right') &&\n                dragChipIndex < chipsArray.length - 1) {\n                chipsArray[dragChipIndex + 1].chipArea.nativeElement.focus();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipMoveStart(event: IBaseChipEventArgs) {\n        this.onMoveStart.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipMoveEnd(event: IBaseChipEventArgs) {\n        this.onMoveEnd.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipDragEnter(event: IChipEnterDragAreaEventArgs) {\n        const dropChipIndex = this.chipsList.toArray().findIndex((el) => el === event.owner);\n        const dragChipIndex = this.chipsList.toArray().findIndex((el) => el === event.dragChip);\n        if (dragChipIndex < dropChipIndex) {\n            // from the left to right\n            this.positionChipAtIndex(dragChipIndex, dropChipIndex, true, event.originalEvent);\n        } else {\n            // from the right to left\n            this.positionChipAtIndex(dragChipIndex, dropChipIndex, false, event.originalEvent);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected positionChipAtIndex(chipIndex, targetIndex, shiftRestLeft, originalEvent) {\n        if (chipIndex < 0 || this.chipsList.length <= chipIndex ||\n            targetIndex < 0 || this.chipsList.length <= targetIndex) {\n            return false;\n        }\n\n        const chipsArray = this.chipsList.toArray();\n        const result: IgxChipComponent[] = [];\n        for (let i = 0; i < chipsArray.length; i++) {\n            if (shiftRestLeft) {\n                if (chipIndex <= i && i < targetIndex) {\n                    result.push(chipsArray[i + 1]);\n                } else if (i === targetIndex) {\n                    result.push(chipsArray[chipIndex]);\n                } else {\n                    result.push(chipsArray[i]);\n                }\n            } else {\n                if (targetIndex < i && i <= chipIndex) {\n                    result.push(chipsArray[i - 1]);\n                } else if (i === targetIndex) {\n                    result.push(chipsArray[chipIndex]);\n                } else {\n                    result.push(chipsArray[i]);\n                }\n            }\n        }\n        this.modifiedChipsArray = result;\n\n        const eventData: IChipsAreaReorderEventArgs = {\n            chipsArray: this.modifiedChipsArray,\n            originalEvent: originalEvent,\n            owner: this\n        };\n        this.onReorder.emit(eventData);\n        return true;\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipSelectionChange(event: IChipSelectEventArgs) {\n        let selectedChips = this.chipsList.filter((chip) => chip.selected);\n        if (event.selected && !selectedChips.includes(event.owner)) {\n            selectedChips.push(event.owner);\n        } else if (!event.selected && selectedChips.includes(event.owner)) {\n            selectedChips = selectedChips.filter((chip) => {\n                return chip.id !== event.owner.id;\n            });\n        }\n        this.onSelection.emit({\n            originalEvent: event.originalEvent,\n            newSelection: selectedChips,\n            owner: this\n        });\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxAvatarModule } from '../avatar/avatar.component';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxChipComponent } from './chip.component';\nimport { IgxChipsAreaComponent } from './chips-area.component';\nimport { IgxDragDropModule } from '../directives/drag-drop/drag-drop.directive';\nimport { IgxPrefixModule, IgxPrefixDirective} from '../directives/prefix/prefix.directive';\nimport { IgxSuffixModule, IgxSuffixDirective } from '../directives/suffix/suffix.directive';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxChipsAreaComponent,\n    IgxChipComponent\n  ],\n  exports: [\n    IgxChipsAreaComponent,\n    IgxChipComponent,\n    IgxPrefixDirective,\n    IgxSuffixDirective\n  ],\n  imports: [\n    CommonModule,\n    IgxRippleModule,\n    IgxIconModule,\n    IgxButtonModule,\n    IgxAvatarModule,\n    IgxDragDropModule,\n    IgxPrefixModule,\n    IgxSuffixModule\n  ]\n})\nexport class IgxChipsModule { }\n","import { Directive } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboHeader]'\n})\nexport class IgxComboHeaderDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboFooter]'\n})\nexport class IgxComboFooterDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboItem]'\n})\nexport class IgxComboItemDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboEmpty]'\n})\nexport class IgxComboEmptyDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboHeaderItem]'\n})\n\nexport class IgxComboHeaderItemDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboAddItem]'\n})\nexport class IgxComboAddItemDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboToggleIcon]'\n})\nexport class IgxComboToggleIconDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboClearIcon]'\n})\nexport class IgxComboClearIconDirective {\n}\n\n","import { IgxComboBase } from './combo.common';\n\n/**\n * @hidden\n */\nexport class IgxComboAPIService {\n    protected combo: IgxComboBase;\n\n    public disableTransitions = false;\n\n    public register(combo: IgxComboBase) {\n        this.combo = combo;\n    }\n\n\n    public clear(): void {\n        this.combo = null;\n    }\n\n    public get valueKey() {\n        return this.combo.valueKey !== null && this.combo.valueKey !== undefined ? this.combo.valueKey : null;\n    }\n\n    public get item_focusable(): boolean {\n        return false;\n    }\n    public get isRemote(): boolean {\n        return this.combo.isRemote;\n    }\n\n    public add_custom_item(): void {\n        if (!this.combo) {\n            return;\n        }\n        this.combo.addItemToCollection();\n    }\n\n    public get comboID(): string {\n        return this.combo.id;\n    }\n\n    public set_selected_item(itemID: any, event?: Event): void {\n        const selected = this.combo.isItemSelected(itemID);\n        if (itemID === null || itemID === undefined) {\n            return;\n        }\n        if (!selected) {\n            this.combo.selectItems([itemID], false, event);\n        } else {\n            this.combo.deselectItems([itemID], event);\n        }\n    }\n\n    public is_item_selected(itemID: any): boolean {\n        return this.combo.isItemSelected(itemID);\n    }\n}\n","import {\n    Component,\n    ElementRef,\n    HostBinding,\n    Inject,\n    Input,\n    DoCheck,\n    HostListener\n} from '@angular/core';\nimport { IgxDropDownItemComponent } from '../drop-down/drop-down-item.component';\nimport { IGX_DROPDOWN_BASE, IDropDownBase, Navigate } from '../drop-down/drop-down.common';\nimport { IgxComboAPIService } from './combo.api';\nimport { IgxSelectionAPIService } from '../core/selection';\n\n/** @hidden */\n@Component({\n    selector: 'igx-combo-item',\n    templateUrl: 'combo-item.component.html'\n})\nexport class IgxComboItemComponent extends IgxDropDownItemComponent implements DoCheck {\n\n    /**\n     * Gets the height of a list item\n     * @hidden\n     */\n    @Input()\n    @HostBinding('style.height.px')\n    public itemHeight = '';\n\n    /**\n     * @hidden\n     */\n    public get itemID() {\n        const valueKey = this.comboAPI.valueKey;\n        return valueKey !== null ? this.value[valueKey] : this.value;\n    }\n\n    /**\n     * @hidden\n     */\n    public get comboID() {\n        return this.comboAPI.comboID;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get disableTransitions() {\n        return this.comboAPI.disableTransitions;\n    }\n\n    constructor(\n        protected comboAPI: IgxComboAPIService,\n        @Inject(IGX_DROPDOWN_BASE) protected dropDown: IDropDownBase,\n        protected elementRef: ElementRef,\n        @Inject(IgxSelectionAPIService) protected selection: IgxSelectionAPIService\n    ) {\n        super(dropDown, elementRef, null, selection);\n    }\n\n    /**\n     * @hidden\n     */\n    get selected(): boolean {\n        return this.comboAPI.is_item_selected(this.itemID);\n    }\n\n    set selected(value: boolean) {\n        if (this.isHeader) {\n            return;\n        }\n        this._selected = value;\n    }\n\n    /**\n     * @hidden\n     */\n    isVisible(direction: Navigate): boolean {\n        const rect = this.element.nativeElement.getBoundingClientRect();\n        const parentDiv = this.element.nativeElement.parentElement.parentElement.getBoundingClientRect();\n        if (direction === Navigate.Down) {\n            return rect.y + rect.height <= parentDiv.y + parentDiv.height;\n        }\n        return rect.y >= parentDiv.y;\n    }\n\n    @HostListener('click', ['$event'])\n    clicked(event) {\n        this.comboAPI.disableTransitions = false;\n        if (this.disabled || this.isHeader) {\n            const focusedItem = this.dropDown.items.find((item) => item.focused);\n            if (this.dropDown.allowItemsFocus && focusedItem) {\n                focusedItem.element.nativeElement.focus({ preventScroll: true });\n            }\n            return;\n        }\n        this.dropDown.navigateItem(this.index);\n        this.comboAPI.set_selected_item(this.itemID, event);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     * The event that is prevented is the click on the checkbox label element.\n     * That is the only visible element that a user can interact with.\n     * The click propagates to the host and the preventDefault is to stop it from\n     * switching focus to the input it's base on.\n     * The toggle happens in an internal handler in the drop-down on the next task queue cycle.\n     */\n    disableCheck(event: MouseEvent) {\n        event.preventDefault();\n    }\n\n    ngDoCheck() {\n    }\n}\n","import { IgxComboItemComponent } from './combo-item.component';\nimport { Component } from '@angular/core';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-combo-add-item',\n    template: '<ng-content></ng-content>',\n    providers: [{ provide: IgxComboItemComponent, useExisting: IgxComboAddItemComponent}]\n})\nexport class IgxComboAddItemComponent extends IgxComboItemComponent {\n    get selected(): boolean {\n        return false;\n    }\n    set selected(value: boolean) {\n    }\n\n    clicked(event?) {\n        this.comboAPI.disableTransitions = false;\n        this.comboAPI.add_custom_item();\n    }\n}\n","import {\n    ChangeDetectorRef, Component, ElementRef, Inject, QueryList, OnDestroy, AfterViewInit, ContentChildren, Optional\n} from '@angular/core';\nimport { IgxComboBase, IGX_COMBO_COMPONENT } from './combo.common';\nimport { IDropDownBase, IGX_DROPDOWN_BASE } from '../drop-down/drop-down.common';\nimport { IgxDropDownComponent } from '../drop-down/drop-down.component';\nimport { DropDownActionKey } from '../drop-down/drop-down.common';\nimport { IgxComboAddItemComponent } from './combo-add-item.component';\nimport { IgxComboAPIService } from './combo.api';\nimport { IgxDropDownItemBase } from '../drop-down/drop-down-item.base';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxComboItemComponent } from './combo-item.component';\nimport { DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\n\n/** @hidden */\n@Component({\n    selector: 'igx-combo-drop-down',\n    templateUrl: '../drop-down/drop-down.component.html',\n    providers: [{ provide: IGX_DROPDOWN_BASE, useExisting: IgxComboDropDownComponent }]\n})\nexport class IgxComboDropDownComponent extends IgxDropDownComponent implements IDropDownBase, OnDestroy, AfterViewInit {\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n        @Inject(IGX_COMBO_COMPONENT) public combo: IgxComboBase,\n        protected comboAPI: IgxComboAPIService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(elementRef, cdr, selection, _displayDensityOptions);\n    }\n\n    protected get scrollContainer() {\n        return this.virtDir.dc.location.nativeElement;\n    }\n\n    protected get isScrolledToLast(): boolean {\n        const scrollTop = this.virtDir.scrollPosition;\n        const scrollHeight = this.virtDir.getScroll().scrollHeight;\n        return Math.floor(scrollTop + this.virtDir.igxForContainerSize) === scrollHeight;\n    }\n\n    protected get lastVisibleIndex(): number {\n        return this.combo.totalItemCount ?\n            Math.floor(this.combo.itemsMaxHeight / this.combo.itemHeight) :\n            this.items.length - 1;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxComboItemComponent, { descendants: true })\n    public children: QueryList<IgxDropDownItemBase> = null;\n\n    /**\n     * @hidden @internal\n     */\n    public onFocus() {\n        this.focusedItem = this._focusedItem || this.items[0];\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onBlur(evt?) {\n        this.focusedItem = null;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleOpened() {\n        this.onOpened.emit();\n    }\n\n    /**\n     * @hidden\n     */\n    public navigateFirst() {\n        this.navigateItem(this.virtDir.igxForOf.findIndex(e => !e.isHeader));\n    }\n\n    /**\n     * @hidden\n     */\n    public navigatePrev() {\n        if (this._focusedItem && this._focusedItem.index === 0 && this.virtDir.state.startIndex === 0) {\n            this.combo.focusSearchInput(false);\n        } else {\n            super.navigatePrev();\n        }\n    }\n\n\n    /**\n     * @hidden\n     */\n    public navigateNext() {\n        const lastIndex = this.combo.totalItemCount ? this.combo.totalItemCount - 1 : this.virtDir.igxForOf.length - 1;\n        if (this._focusedItem && this._focusedItem.index === lastIndex) {\n            this.focusAddItemButton();\n        } else {\n            super.navigateNext();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public selectItem(item: IgxDropDownItemBase) {\n        if (item === null || item === undefined) {\n            return;\n        }\n        this.comboAPI.set_selected_item(item.itemID);\n        this._focusedItem = item;\n    }\n\n    private focusAddItemButton() {\n        if (this.combo.isAddButtonVisible()) {\n            this.focusedItem = this.items[this.items.length - 1];\n        }\n    }\n\n    protected scrollToHiddenItem(newItem: any): void { }\n\n    protected scrollHandler = () => {\n        this.comboAPI.disableTransitions = true;\n    }\n\n    protected get sortedChildren(): IgxDropDownItemBase[] {\n        if (this.children !== undefined) {\n            return this.children.toArray()\n                .sort((a: IgxDropDownItemBase, b: IgxDropDownItemBase) => {\n                    return a.index - b.index;\n                });\n        }\n        return null;\n    }\n\n    /**\n     * Get all non-header items\n     *\n     * ```typescript\n     * let myDropDownItems = this.dropdown.items;\n     * ```\n     */\n    public get items(): IgxComboItemComponent[] {\n        const items: IgxComboItemComponent[] = [];\n        if (this.children !== undefined) {\n            const sortedChildren = this.sortedChildren as IgxComboItemComponent[];\n            for (const child of sortedChildren) {\n                if (!child.isHeader) {\n                    items.push(child);\n                }\n            }\n        }\n\n        return items;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public updateScrollPosition() {\n        this.virtDir.getScroll().scrollTop = this._scrollPosition;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onItemActionKey(key: DropDownActionKey) {\n        switch (key) {\n            case DropDownActionKey.ENTER:\n                this.handleEnter();\n                break;\n            case DropDownActionKey.SPACE:\n                this.handleSpace();\n                break;\n            case DropDownActionKey.ESCAPE:\n                this.close();\n        }\n    }\n\n    private handleEnter() {\n        if (this.isAddItemFocused()) {\n            this.combo.addItemToCollection();\n        } else {\n            this.close();\n        }\n    }\n\n    private handleSpace() {\n        if (this.isAddItemFocused()) {\n            return;\n        } else {\n            this.selectItem(this.focusedItem);\n        }\n    }\n\n    private isAddItemFocused(): boolean {\n        return this.focusedItem instanceof IgxComboAddItemComponent;\n    }\n\n    public ngAfterViewInit() {\n        this.virtDir.getScroll().addEventListener('scroll', this.scrollHandler);\n    }\n\n    /**\n     *@hidden @internal\n     */\n    public ngOnDestroy(): void {\n        this.virtDir.getScroll().removeEventListener('scroll', this.scrollHandler);\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n","import { ElementRef, EventEmitter } from '@angular/core';\nimport { CancelableEventArgs, CancelableBrowserEventArgs } from '../core/utils';\nimport { IFilteringExpression } from '../data-operations/filtering-expression.interface';\n\nexport const IGX_COMBO_COMPONENT = 'IgxComboComponentToken';\n\n/** @hidden @internal TODO: Evaluate */\nexport interface IgxComboBase {\n    id: string;\n    data: any[];\n    valueKey: string;\n    groupKey: string;\n    isRemote: boolean;\n    filteredData: any[];\n    filteringExpressions: IFilteringExpression[];\n    totalItemCount: number;\n    itemsMaxHeight: number;\n    itemHeight: number;\n    searchValue: string;\n    searchInput: ElementRef<HTMLInputElement>;\n    comboInput: ElementRef<HTMLInputElement>;\n    onOpened: EventEmitter<void>;\n    onOpening: EventEmitter<CancelableEventArgs>;\n    onClosing: EventEmitter<CancelableBrowserEventArgs>;\n    onClosed: EventEmitter<void>;\n    focusSearchInput(opening?: boolean): void;\n    triggerCheck(): void;\n    addItemToCollection(): void;\n    isAddButtonVisible(): boolean;\n    handleInputChange(event?: string): void;\n    isItemSelected(itemID: any): boolean;\n    selectItems(itemIDs: any[], clearSelection?: boolean, event?: Event): void;\n    deselectItems(itemIDs: any[], event?: Event): void;\n}\n","import { Inject, Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray } from '../core/utils';\nimport { DataUtil } from '../data-operations/data-util';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { ISortingExpression } from '../data-operations/sorting-expression.interface';\nimport { IFilteringState } from '../data-operations/filtering-state.interface';\nimport { FilteringStrategy } from '../data-operations/filtering-strategy';\nimport { FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { IGX_COMBO_COMPONENT, IgxComboBase } from './combo.common';\n\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'comboFiltering'\n})\nexport class IgxComboFilteringPipe implements PipeTransform {\n\n    constructor(@Inject(IGX_COMBO_COMPONENT) public combo: IgxComboBase) { }\n\n    public transform(collection: any[], expressions: IFilteringExpression[],\n                     logic: FilteringLogic) {\n        const filteringExpressionsTree =  new FilteringExpressionsTree(logic);\n        filteringExpressionsTree.filteringOperands = expressions;\n        const state: IFilteringState = { expressionsTree: filteringExpressionsTree, strategy: new SimpleFilteringStrategy()};\n        state.expressionsTree.filteringOperands = this.combo.filteringExpressions;\n\n        if (!state.expressionsTree.filteringOperands.length) {\n            return collection;\n        }\n\n        const result = DataUtil.filter(cloneArray(collection), state);\n        return result;\n    }\n}\n\n/** @hidden */\nexport class SimpleFilteringStrategy extends FilteringStrategy {\n    public findMatchByExpression(rec: object, expr: IFilteringExpression): boolean {\n        const cond = expr.condition;\n        const val = expr.fieldName === undefined ? rec : rec[expr.fieldName];\n        return cond.logic(val, expr.searchVal, expr.ignoreCase);\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'comboSorting',\n    pure: true\n})\nexport class IgxComboSortingPipe implements PipeTransform {\n    constructor() { }\n\n    public transform(collection: any[], expressions: ISortingExpression []) {\n        if (!expressions.length) {\n            return collection;\n        }\n        const result = DataUtil.sort(cloneArray(collection), expressions);\n        return result;\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'comboGrouping'\n})\nexport class IgxComboGroupingPipe implements PipeTransform {\n\n    constructor(@Inject(IGX_COMBO_COMPONENT) public combo: IgxComboBase) { }\n\n    public transform(collection: any[], groupKey: any) {\n        this.combo.filteredData = collection;\n        if ((!groupKey && groupKey !== 0) || !collection.length) {\n            return collection;\n        }\n        const data = cloneArray(collection);\n        let inserts = 0;\n        let currentHeader = null;\n        for (let i = 0; i < collection.length; i++) {\n            let insertFlag = 0;\n            if (currentHeader !== collection[i][groupKey]) {\n                currentHeader = collection[i][groupKey];\n                insertFlag = 1;\n            }\n            if (insertFlag) {\n                data.splice(i + inserts, 0, {\n                    [this.combo.valueKey]: currentHeader,\n                    [this.combo.groupKey]: currentHeader,\n                    isHeader: true\n                });\n                inserts++;\n            }\n        }\n        return data;\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'filterCondition',\n    pure: true\n})\n\nexport class IgxComboFilterConditionPipe implements PipeTransform {\n\n    public transform(value: string): string {\n        return value.split(/(?=[A-Z])/).join(' ');\n    }\n}\n","import { ConnectedPositioningStrategy } from './../services/overlay/position/connected-positioning-strategy';\nimport { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit, ChangeDetectorRef, Component, ContentChild, ElementRef, EventEmitter, HostBinding, HostListener,\n    Input, NgModule, OnInit, OnDestroy, Output, TemplateRef, ViewChild, Optional, Inject, Injector, forwardRef, Type\n} from '@angular/core';\nimport {\n    IgxComboItemDirective,\n    IgxComboEmptyDirective,\n    IgxComboHeaderItemDirective,\n    IgxComboHeaderDirective,\n    IgxComboFooterDirective,\n    IgxComboAddItemDirective,\n    IgxComboToggleIconDirective,\n    IgxComboClearIconDirective\n} from './combo.directives';\nimport { FormsModule, ReactiveFormsModule, ControlValueAccessor, NG_VALUE_ACCESSOR, NgControl, AbstractControl } from '@angular/forms';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { cloneArray, CancelableEventArgs, CancelableBrowserEventArgs, IBaseEventArgs } from '../core/utils';\nimport { IgxStringFilteringOperand, IgxBooleanFilteringOperand } from '../data-operations/filtering-condition';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { SortingDirection, ISortingExpression } from '../data-operations/sorting-expression.interface';\nimport { IgxForOfModule, IForOfState, IgxForOfDirective } from '../directives/for-of/for_of.directive';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxToggleModule } from '../directives/toggle/toggle.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxDropDownModule } from '../drop-down/index';\nimport { IgxInputGroupModule, IgxInputGroupComponent } from '../input-group/input-group.component';\nimport { IgxComboItemComponent } from './combo-item.component';\nimport { IgxComboDropDownComponent } from './combo-dropdown.component';\nimport { IgxComboFilterConditionPipe, IgxComboFilteringPipe, IgxComboGroupingPipe, IgxComboSortingPipe } from './combo.pipes';\nimport { OverlaySettings, AbsoluteScrollStrategy } from '../services';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { DefaultSortingStrategy, ISortingStrategy } from '../data-operations/sorting-strategy';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\nimport { IGX_COMBO_COMPONENT, IgxComboBase } from './combo.common';\nimport { IgxComboAddItemComponent } from './combo-add-item.component';\nimport { IgxComboAPIService } from './combo.api';\nimport { EditorProvider } from '../core/edit-provider';\nimport { take } from 'rxjs/operators';\nimport { IgxInputState, IgxInputDirective } from '../directives/input/input.directive';\n\n/**\n * @hidden\n */\nenum DataTypes {\n    EMPTY = 'empty',\n    PRIMITIVE = 'primitive',\n    COMPLEX = 'complex',\n    PRIMARYKEY = 'valueKey'\n}\n\n/**\n * @hidden\n */\nconst ItemHeights = {\n    'comfortable': 40,\n    'cosy': 32,\n    'compact': 28,\n};\n\n/**\n * @hidden\n * The default number of items that should be in the combo's\n * drop-down list if no `[itemsMaxHeight]` is specified\n */\nconst itemsInContainer = 10;\n\nexport enum IgxComboState {\n    /**\n     * Combo with initial state.\n     */\n    INITIAL = IgxInputState.INITIAL,\n    /**\n     * Combo with valid state.\n     */\n    VALID = IgxInputState.VALID,\n    /**\n     * Combo with invalid state.\n     */\n    INVALID = IgxInputState.INVALID\n}\n\n/** Event emitted when an igx-combo's selection is changing */\nexport interface IComboSelectionChangeEventArgs extends CancelableEventArgs, IBaseEventArgs {\n    /** An array containing the values that are currently selected */\n    oldSelection: any[];\n    /** An array containing the values that will be selected after this event */\n    newSelection: any[];\n    /** An array containing the values that will be added to the selection (if any) */\n    added: any[];\n    /** An array containing the values that will be removed from the selection (if any) */\n    removed: any[];\n    /** The user interaction that triggered the selection change */\n    event?: Event;\n}\n\nexport interface IComboItemAdditionEvent extends IBaseEventArgs {\n    oldCollection: any[];\n    addedItem: any;\n    newCollection: any[];\n}\n\n/**\n * When called with sets A & B, returns A - B (as array);\n * @hidden\n */\nfunction diffInSets(set1: Set<any>, set2: Set<any>): any[] {\n    const results = [];\n    set1.forEach(entry => {\n        if (!set2.has(entry)) {\n            results.push(entry);\n        }\n    });\n    return results;\n}\n\nlet NEXT_ID = 0;\nconst noop = () => { };\n\n@Component({\n    selector: 'igx-combo',\n    templateUrl: 'combo.component.html',\n    providers: [\n        IgxComboAPIService,\n        { provide: IGX_COMBO_COMPONENT, useExisting: IgxComboComponent },\n        { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => IgxComboComponent), multi: true }\n    ]\n})\nexport class IgxComboComponent extends DisplayDensityBase implements IgxComboBase, AfterViewInit, ControlValueAccessor, OnInit,\n    OnDestroy, EditorProvider {\n    /**\n     * @hidden @internal\n     */\n    public customValueFlag = true;\n    /**\n     * @hidden @internal\n     */\n    public defaultFallbackGroup = 'Other';\n    protected stringFilters = IgxStringFilteringOperand;\n    protected booleanFilters = IgxBooleanFilteringOperand;\n    protected _filteringLogic = FilteringLogic.Or;\n    protected _filteringExpressions: IFilteringExpression[] = [];\n    protected _sortingExpressions: ISortingExpression[] = [];\n    protected _groupKey = '';\n    protected _displayKey: string;\n    protected _prevInputValue = '';\n    private _dataType = '';\n    private ngControl: NgControl = null;\n    private destroy$ = new Subject<any>();\n    private _data = [];\n    private _filteredData = [];\n    private _itemHeight = null;\n    private _itemsMaxHeight = null;\n    private _remoteSelection = {};\n    private _onChangeCallback: (_: any) => void = noop;\n    private _overlaySettings: OverlaySettings = {\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new ConnectedPositioningStrategy(),\n        modal: false,\n        closeOnOutsideClick: true,\n        excludePositionTarget: true\n    };\n    private _value = '';\n    private _valid = IgxComboState.INITIAL;\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n        protected comboAPI: IgxComboAPIService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions,\n        @Optional() private _injector: Injector) {\n        super(_displayDensityOptions);\n        this.comboAPI.register(this);\n    }\n\n    @ViewChild(IgxForOfDirective, { read: IgxForOfDirective, static: true })\n    protected virtDir: IgxForOfDirective<any>;\n\n    /**\n     * Set custom overlay settings that control how the combo's list of items is displayed.\n     * Set:\n     * ```html\n     * <igx-combo [overlaySettings] = \"customOverlaySettings\"></igx-combo>\n     * ```\n     *\n     * ```typescript\n     *  const customSettings = { positionStrategy: { settings: { target: myTarget } } };\n     *  combo.overlaySettings = customSettings;\n     * ```\n     * Get any custom overlay settings used by the combo:\n     * ```typescript\n     *  const comboOverlaySettings: OverlaySettings = myCombo.overlaySettings;\n     * ```\n     */\n\n    @Input()\n    public overlaySettings: OverlaySettings = null;\n\n    /** @hidden @internal */\n    @ViewChild('inputGroup', { read: IgxInputGroupComponent, static: true }) public inputGroup: IgxInputGroupComponent;\n\n    /** @hidden @internal */\n    @ViewChild('comboInput', { read: IgxInputDirective, static: true }) public comboInput: IgxInputDirective;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild(IgxComboDropDownComponent, { read: IgxComboDropDownComponent, static: true })\n    public dropdown: IgxComboDropDownComponent;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('searchInput', { static: false })\n    public searchInput: ElementRef<HTMLInputElement> = null;\n\n    /**\n     * @hidden @internal\n     */\n    get displaySearchInput(): boolean {\n        return this.filterable || this.allowCustomValues;\n    }\n\n    /**\n     * The custom template, if any, that should be used when rendering ITEMS in the combo list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.itemTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboItem>\n     *          <div class=\"custom-item\" let-item let-key=\"valueKey\">\n     *              <div class=\"custom-item__name\">{{ item[key] }}</div>\n     *              <div class=\"custom-item__cost\">{{ item.cost }}</div>\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboItemDirective, { read: TemplateRef, static: false })\n    public itemTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the HEADER for the combo items list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.headerTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboHeader>\n     *          <div class=\"combo__header\">\n     *              This is a custom header\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboHeaderDirective, { read: TemplateRef, static: false })\n    public headerTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the FOOTER for the combo items list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.footerTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboFooter>\n     *          <div class=\"combo__footer\">\n     *              This is a custom footer\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboFooterDirective, { read: TemplateRef, static: false })\n    public footerTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering HEADER ITEMS for groups in the combo list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.headerItemTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboHeaderItem let-item let-key=\"groupKey\">\n     *          <div class=\"custom-item--group\">Group header for {{ item[key] }}</div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboHeaderItemDirective, { read: TemplateRef, static: false })\n    public headerItemTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the ADD BUTTON in the combo drop down\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.addItemTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboAddItem>\n     *          <button class=\"combo__add-button\">\n     *              Click to add item\n     *          </button>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboAddItemDirective, { read: TemplateRef, static: false })\n    public addItemTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the ADD BUTTON in the combo drop down\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.emptyTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboEmpty>\n     *          <div class=\"combo--empty\">\n     *              There are no items to display\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboEmptyDirective, { read: TemplateRef, static: false })\n    public emptyTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the combo TOGGLE(open/close) button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.toggleIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboToggleIcon let-collapsed>\n     *          <igx-icon>{{ collapsed ? 'remove_circle' : 'remove_circle_outline'}}</igx-icon>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboToggleIconDirective, { read: TemplateRef, static: false })\n    public toggleIconTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the combo CLEAR button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.clearIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboClearIcon>\n     *          <igx-icon>clear</igx-icon>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboClearIconDirective, { read: TemplateRef, static: false })\n    public clearIconTemplate: TemplateRef<any> = null;\n\n    @ViewChild('primitive', { read: TemplateRef, static: true })\n    protected primitiveTemplate: TemplateRef<any>;\n\n    @ViewChild('complex', { read: TemplateRef, static: true })\n    protected complexTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild(IgxForOfDirective, { static: true })\n    public virtualScrollContainer: IgxForOfDirective<any>;\n\n    @ViewChild('dropdownItemContainer', { static: true })\n    protected dropdownContainer: ElementRef = null;\n\n    /**\n     * Emitted when item selection is changing, before the selection completes\n     *\n     * ```html\n     * <igx-combo (onSelectionChange)='handleSelection()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onSelectionChange = new EventEmitter<IComboSelectionChangeEventArgs>();\n\n    /**\n     * Emitted before the dropdown is opened\n     *\n     * ```html\n     * <igx-combo onOpening='handleOpening($event)'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<CancelableEventArgs & IBaseEventArgs>();\n\n    /**\n     * Emitted after the dropdown is opened\n     *\n     * ```html\n     * <igx-combo (onOpened)='handleOpened()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter<void>();\n\n    /**\n     * Emitted before the dropdown is closed\n     *\n     * ```html\n     * <igx-combo (onClosing)='handleClosing($event)'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs & IBaseEventArgs>();\n\n    /**\n     * Emitted after the dropdown is closed\n     *\n     * ```html\n     * <igx-combo (onClosed)='handleClosed()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter<void>();\n\n    /**\n     * Emitted when an item is being added to the data collection\n     *\n     * ```html\n     * <igx-combo (onAddition)='handleAdditionEvent()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onAddition = new EventEmitter<IComboItemAdditionEvent>();\n\n    /**\n     * Emitted when the value of the search input changes (e.g. typing, pasting, clear, etc.)\n     *\n     * ```html\n     * <igx-combo (onSearchInput)='handleSearchInputEvent()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onSearchInput = new EventEmitter();\n\n    /**\n     * Emitted when new chunk of data is loaded from the virtualization\n     *\n     * ```html\n     * <igx-combo (onDataPreLoad)='handleDataPreloadEvent()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onDataPreLoad = new EventEmitter<any>();\n\n    /**\n     * Gets/gets combo id.\n     *\n     * ```typescript\n     * // get\n     * let id = this.combo.id;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [id]='combo1'></igx-combo>\n     * ```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-combo-${NEXT_ID++}`;\n\n    /**\n     * Sets the style width of the element\n     *\n     * ```typescript\n     * // get\n     * let myComboWidth = this.combo.width;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [width]='250px'></igx-combo>\n     * ```\n     */\n    @HostBinding('style.width')\n    @Input()\n    public width: string;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-combo')\n    public cssClass = 'igx-combo'; // Independent of display density, at the time being\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding(`attr.role`)\n    public role = 'combobox';\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-expanded')\n    public get ariaExpanded(): boolean {\n        return !this.dropdown.collapsed;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-haspopup')\n    public get hasPopUp() {\n        return 'listbox';\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-owns')\n    public get ariaOwns() {\n        return this.dropdown.id;\n    }\n\n    /**\n     * Controls whether custom values can be added to the collection\n     *\n     * ```typescript\n     * // get\n     * let comboAllowsCustomValues = this.combo.allowCustomValues;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [allowCustomValues]='true'></igx-combo>\n     * ```\n     */\n    @Input()\n    public allowCustomValues = false;\n\n    /**\n     * Configures the drop down list height\n     *\n     * ```typescript\n     * // get\n     * let myComboItemsMaxHeight = this.combo.itemsMaxHeight;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemsMaxHeight]='320'></igx-combo>\n     * ```\n    */\n    @Input()\n    public get itemsMaxHeight(): number {\n        if (this._itemsMaxHeight === null || this._itemsMaxHeight === undefined) {\n            return this.itemHeight * itemsInContainer;\n        }\n        return this._itemsMaxHeight;\n    }\n\n    public set itemsMaxHeight(val: number) {\n        this._itemsMaxHeight = val;\n    }\n\n    /**\n     * Configures the drop down list width\n     *\n     * ```typescript\n     * // get\n     * let myComboItemsWidth = this.combo.itemsWidth;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemsWidth] = '\"180px\"'></igx-combo>\n     * ```\n     */\n    @Input()\n    public itemsWidth: string;\n\n    /**\n     * Configures the drop down list item height\n     *\n     * ```typescript\n     * // get\n     * let myComboItemHeight = this.combo.itemHeight;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemHeight]='32'></igx-combo>\n     * ```\n     */\n    @Input()\n    public get itemHeight(): number {\n        if (this._itemHeight === null || this._itemHeight === undefined) {\n            return ItemHeights[this.displayDensity];\n        }\n        return this._itemHeight;\n    }\n\n    public set itemHeight(val: number) {\n        this._itemHeight = val;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public filteringLogic = FilteringLogic.Or;\n\n    /**\n     * Defines the placeholder value for the combo value field\n     *\n     * ```typescript\n     * // get\n     * let myComboPlaceholder = this.combo.placeholder;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [placeholder]='newPlaceHolder'></igx-combo>\n     * ```\n     */\n    @Input()\n    public placeholder;\n\n    /**\n     * @hidden @internal\n     */\n    public get inputEmpty(): boolean {\n        return !this.value && !this.placeholder;\n    }\n\n    /**\n     * Defines the placeholder value for the combo dropdown search field\n     *\n     * ```typescript\n     * // get\n     * let myComboSearchPlaceholder = this.combo.searchPlaceholder;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [searchPlaceholder]='newPlaceHolder'></igx-combo>\n     * ```\n     */\n    @Input()\n    public searchPlaceholder = 'Enter a Search Term';\n\n    /**\n     * Combo data source.\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [data]='items'></igx-combo>\n     * ```\n     */\n    @Input()\n    get data(): any[] {\n        return this._data;\n    }\n    set data(val: any[]) {\n        this._data = (val) ? val : [];\n    }\n\n    /**\n     * Combo value data source property.\n     *\n     * ```typescript\n     * // get\n     * let myComboValueKey = this.combo.valueKey;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [valueKey]='myKey'></igx-combo>\n     * ```\n     */\n    @Input()\n    public valueKey: string = null;\n\n    @Input()\n    set displayKey(val: string) {\n        this._displayKey = val;\n    }\n\n    /**\n     * Combo text data source property.\n     *\n     * ```typescript\n     * // get\n     * let myComboDisplayKey = this.combo.displayKey;\n     *\n     * // set\n     * this.combo.displayKey = 'val';\n     *\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [displayKey]='myDisplayKey'></igx-combo>\n     * ```\n     */\n    get displayKey() {\n        return this._displayKey ? this._displayKey : this.valueKey;\n    }\n\n    /**\n     * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [groupKey]='newGroupKey'></igx-combo>\n     * ```\n     */\n    @Input()\n    public set groupKey(val: string) {\n        this.clearSorting(this._groupKey);\n        this._groupKey = val;\n        this.sort(this._groupKey);\n    }\n\n    /**\n     * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].\n     *\n     * ```typescript\n     * // get\n     * let currentGroupKey = this.combo.groupKey;\n     * ```\n     */\n    public get groupKey(): string {\n        return this._groupKey;\n    }\n\n    /**\n     * An @Input property that enabled/disables filtering in the list. The default is `true`.\n     * ```html\n     *<igx-combo [filterable]=\"'false'\">\n     * ```\n     */\n    @Input()\n    public filterable = true;\n\n    /**\n     * An @Input property that set aria-labelledby attribute\n     * ```html\n     *<igx-combo [ariaLabelledBy]=\"'label1'\">\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-labelledby')\n    public ariaLabelledBy: string;\n\n    /**\n     * An @Input property that enabled/disables combo. The default is `false`.\n     * ```html\n     *<igx-combo [disabled]=\"'true'\">\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * An @Input property that sets how the combo will be styled.\n     * The allowed values are `line`, `box`, `border` and `search`. The default is `box`.\n     * ```html\n     *<igx-combo [type]=\"'line'\">\n     * ```\n     */\n    @Input()\n    public type = 'box';\n\n    /**\n     * Gets if control is valid, when used in a form\n     *\n     * ```typescript\n     * // get\n     * let valid = this.combo.valid;\n     * ```\n     * */\n     public get valid(): IgxComboState {\n        return this._valid;\n    }\n\n     /**\n     * Sets if control is valid, when used in a form\n     *\n     * ```typescript\n     * // set\n     * this.combo.valid = IgxComboState.INVALID;\n     * ```\n    */\n    public set valid(valid: IgxComboState) {\n        this._valid = valid;\n        this.comboInput.valid = IgxInputState[IgxComboState[valid]];\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public searchValue = '';\n\n    /**\n     * @hidden @internal\n     */\n    @HostListener('keydown.ArrowDown', ['$event'])\n    @HostListener('keydown.Alt.ArrowDown', ['$event'])\n    onArrowDown(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.open();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    onInputClick(event: Event) {\n        event.stopPropagation();\n        event.preventDefault();\n        this.toggle();\n    }\n\n    /**\n     * Defines the current state of the virtualized data. It contains `startIndex` and `chunkSize`\n     *\n     * ```typescript\n     * // get\n     * let state = this.combo.virtualizationState;\n     * ```\n    */\n    get virtualizationState(): IForOfState {\n        return this.virtDir.state;\n    }\n    /**\n     * Sets the current state of the virtualized data.\n     *\n     * ```typescript\n     * // set\n     * this.combo.virtualizationState(state);\n     * ```\n     */\n    set virtualizationState(state: IForOfState) {\n        this.virtDir.state = state;\n    }\n\n    /**\n     * Gets total count of the virtual data items, when using remote service.\n     *\n     * ```typescript\n     * // get\n     * let count = this.combo.totalItemCount;\n     * ```\n    */\n    get totalItemCount(): number {\n        return this.virtDir.totalItemCount;\n    }\n    /**\n     * Sets total count of the virtual data items, when using remote service.\n     *\n     * ```typescript\n     * // set\n     * this.combo.totalItemCount(remoteService.count);\n     * ```\n     */\n    set totalItemCount(count: number) {\n        this.virtDir.totalItemCount = count;\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get filteringExpressions(): IFilteringExpression[] {\n        return this.filterable ? this._filteringExpressions : [];\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set filteringExpressions(value: IFilteringExpression[]) {\n        this._filteringExpressions = value;\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get sortingExpressions(): ISortingExpression[] {\n        return this._sortingExpressions;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set sortingExpressions(value: ISortingExpression[]) {\n        this._sortingExpressions = value;\n        this.cdr.markForCheck();\n    }\n\n    protected clearSorting(field?: string | number) {\n        if (field === undefined || field === null) {\n            this.sortingExpressions = [];\n            return;\n        }\n        const currentState = cloneArray(this.sortingExpressions);\n        const index = currentState.findIndex((expr) => expr.fieldName === field);\n        if (index > -1) {\n            currentState.splice(index, 1);\n            this.sortingExpressions = currentState;\n        }\n    }\n\n    /**\n     * The text displayed in the combo input\n     *\n     * ```typescript\n     * // get\n     * let comboValue = this.combo.value;\n     * ```\n     */\n    get value(): string {\n        return this._value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get filteredData(): any[] {\n        return this.filterable ? this._filteredData : this.data;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set filteredData(val: any[]) {\n        this._filteredData = this.groupKey ? (val || []).filter((e) => e.isHeader !== true) : val;\n        this.checkMatch();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleKeyUp(event: KeyboardEvent): void {\n        if (event.key === 'ArrowDown' || event.key === 'Down') {\n            this.dropdown.focusedItem = this.dropdown.items[0];\n            this.dropdownContainer.nativeElement.focus();\n        } else if (event.key === 'Escape' || event.key === 'Esc') {\n            this.toggle();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleKeyDown(event: KeyboardEvent) {\n        if (event.key === 'ArrowUp' || event.key === 'Up') {\n            event.preventDefault();\n            event.stopPropagation();\n            this.close();\n        }\n    }\n\n    private checkMatch(): void {\n        const displayKey = this.displayKey;\n        const matchFn = (e) => {\n            const value = displayKey ? e[displayKey] : e;\n            return value.toString().toLowerCase() === this.searchValue.trim().toLowerCase();\n        };\n        const itemMatch = this.filteredData.some(matchFn);\n        this.customValueFlag = this.allowCustomValues && !itemMatch;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleInputChange(event?: string) {\n        let cdrFlag = false;\n        const vContainer = this.virtDir;\n        if (event !== undefined && this._prevInputValue === event) {\n            // Nothing has changed\n            return;\n        } else {\n            this._prevInputValue = event !== undefined ? event : '';\n        }\n        if (event !== undefined) {\n            // Do not scroll if not scrollable\n            if (vContainer.isScrollable()) {\n                vContainer.scrollTo(0);\n            } else {\n                cdrFlag = true;\n            }\n            this.onSearchInput.emit(event);\n        } else {\n            cdrFlag = true;\n        }\n        if (this.filterable) {\n            this.filter();\n            // If there was no scroll before filtering, check if there is after and detect changes\n            if (cdrFlag) {\n                vContainer.onChunkLoad.pipe(take(1)).subscribe(() => {\n                    if (vContainer.isScrollable()) {\n                        this.cdr.detectChanges();\n                    }\n                });\n            }\n        } else {\n            this.checkMatch();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public sort(fieldName: string, dir: SortingDirection = SortingDirection.Asc, ignoreCase: boolean = true,\n        strategy: ISortingStrategy = DefaultSortingStrategy.instance()): void {\n        if (!fieldName) {\n            return;\n        }\n        const sortingState = cloneArray(this.sortingExpressions, true);\n\n        this.prepare_sorting_expression(sortingState, fieldName, dir, ignoreCase, strategy);\n        this.sortingExpressions = sortingState;\n    }\n\n    protected prepare_sorting_expression(state: ISortingExpression[], fieldName: string, dir: SortingDirection, ignoreCase: boolean,\n        strategy: ISortingStrategy) {\n\n        if (dir === SortingDirection.None) {\n            state.splice(state.findIndex((expr) => expr.fieldName === fieldName), 1);\n            return;\n        }\n\n        const expression = state.find((expr) => expr.fieldName === fieldName);\n\n        if (!expression) {\n            state.push({ fieldName, dir, ignoreCase, strategy });\n        } else {\n            Object.assign(expression, { fieldName, dir, ignoreCase });\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get dataType(): string {\n        if (this.displayKey) {\n            return DataTypes.COMPLEX;\n        }\n        return DataTypes.PRIMITIVE;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get isRemote() {\n        return this.totalItemCount > 0 &&\n            this.valueKey &&\n            this.dataType === DataTypes.COMPLEX;\n    }\n\n    /** Contains key-value pairs of the selected valueKeys and their resp. displayKeys */\n    private registerRemoteEntries(ids: any[], add = true) {\n        if (add) {\n            const selection = this.getValueDisplayPairs(ids);\n            for (const entry of selection) {\n                this._remoteSelection[entry[this.valueKey]] = entry[this.displayKey];\n            }\n        } else {\n            for (const entry of ids) {\n                delete this._remoteSelection[entry];\n            }\n        }\n    }\n\n    /** For `id: any[]` returns a mapped `{ [combo.valueKey]: any, [combo.displayKey]: any }[]`*/\n    private getValueDisplayPairs(ids: any[]) {\n        return this.data.filter(entry => ids.indexOf(entry[this.valueKey]) > -1).map(e => {\n            return {\n                [this.valueKey]: e[this.valueKey],\n                [this.displayKey]: e[this.displayKey]\n            };\n        });\n    }\n\n    /**\n     * Returns if the specified itemID is selected\n     * @hidden\n     * @internal\n     */\n    public isItemSelected(item: any): boolean {\n        return this.selection.is_item_selected(this.id, item);\n    }\n\n    /**\n     * Triggers change detection on the combo view\n     */\n    public triggerCheck() {\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public isAddButtonVisible(): boolean {\n        // This should always return a boolean value. If this.searchValue was '', it returns '' instead of false;\n        return this.searchValue !== '' && this.customValueFlag;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleSelectAll(evt) {\n        if (evt.checked) {\n            this.selectAllItems();\n        } else {\n            this.deselectAllItems();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public addItemToCollection() {\n        if (!this.searchValue) {\n            return;\n        }\n        const newValue = this.searchValue.trim();\n        const addedItem = this.displayKey ? {\n            [this.valueKey]: newValue,\n            [this.displayKey]: newValue\n        } : newValue;\n        if (this.groupKey) {\n            Object.assign(addedItem, { [this.groupKey]: this.defaultFallbackGroup });\n        }\n        const oldCollection = this.data;\n        const newCollection = [...this.data];\n        newCollection.push(addedItem);\n        const args: IComboItemAdditionEvent = {\n            oldCollection, addedItem, newCollection\n        };\n        this.onAddition.emit(args);\n        this.data.push(addedItem);\n        // If you mutate the array, no pipe is invoked and the display isn't updated;\n        // if you replace the array, the pipe executes and the display is updated.\n        this.data = cloneArray(this.data);\n        this.selectItems(this.comboAPI.valueKey !== null ? [addedItem[this.valueKey]] : [addedItem], false);\n        this.customValueFlag = false;\n        this.searchInput.nativeElement.focus();\n        this.dropdown.focusedItem = null;\n        this.handleInputChange();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public focusSearchInput(opening?: boolean): void {\n        if (this.displaySearchInput && this.searchInput) {\n            this.searchInput.nativeElement.focus();\n        } else {\n            if (opening) {\n                this.dropdownContainer.nativeElement.focus();\n            } else {\n                this.comboInput.nativeElement.focus();\n                this.toggle();\n            }\n        }\n    }\n\n\n    protected prepare_filtering_expression(searchVal, condition, ignoreCase, fieldName?) {\n        const newArray = [...this.filteringExpressions];\n        const expression = newArray.find((expr) => expr.fieldName === fieldName);\n        const newExpression = { fieldName, searchVal, condition, ignoreCase };\n        if (!expression) {\n            newArray.push(newExpression);\n        } else {\n            Object.assign(expression, newExpression);\n        }\n        if (this.groupKey) {\n            const expression2 = newArray.find((expr) => expr.fieldName === 'isHeader');\n            const headerExpression = {\n                fieldName: 'isHeader', searchVale: '',\n                condition: IgxBooleanFilteringOperand.instance().condition('true'), ignoreCase: true\n            };\n            if (!expression2) {\n                newArray.push(headerExpression);\n            } else {\n                Object.assign(expression2, headerExpression);\n            }\n        }\n        this.filteringExpressions = newArray;\n    }\n\n    protected onStatusChanged = () => {\n        if ((this.ngControl.control.touched || this.ngControl.control.dirty) &&\n            (this.ngControl.control.validator || this.ngControl.control.asyncValidator)) {\n                this.valid = this.ngControl.valid ? IgxComboState.VALID : IgxComboState.INVALID;\n        }\n        this.manageRequiredAsterisk();\n    }\n\n    protected manageRequiredAsterisk(): void {\n        if (this.ngControl && this.ngControl.control.validator) {\n            // Run the validation with empty object to check if required is enabled.\n            const error = this.ngControl.control.validator({} as AbstractControl);\n            this.inputGroup.isRequired = error && error.required;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onBlur() {\n        if (this.collapsed) {\n            if (this.ngControl && !this.ngControl.valid) {\n                this.valid = IgxComboState.INVALID;\n           } else {\n                this.valid = IgxComboState.INITIAL;\n           }\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public filter() {\n        this.prepare_filtering_expression(this.searchValue.trim(), IgxStringFilteringOperand.instance().condition('contains'),\n            true, this.dataType === DataTypes.PRIMITIVE ? undefined : this.displayKey);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnInit() {\n        this.ngControl = this._injector.get<NgControl>(NgControl as Type<NgControl>, null);\n        this._overlaySettings.positionStrategy.settings.target = this.elementRef.nativeElement;\n        this.selection.set(this.id, new Set());\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngAfterViewInit() {\n        this.filteredData = [...this.data];\n\n        if (this.ngControl) {\n            this.ngControl.statusChanges.pipe(takeUntil(this.destroy$)).subscribe(this.onStatusChanged);\n            this.manageRequiredAsterisk();\n            this.cdr.detectChanges();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n        this.comboAPI.clear();\n        this.selection.clear(this.id);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public dataLoading(event) {\n        this.onDataPreLoad.emit(event);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public writeValue(value: any[]): void {\n        this.selectItems(value, true);\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public registerOnChange(fn: any): void {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public registerOnTouched(fn: any): void { }\n\n    /**\n     * @hidden @internal\n     */\n    public setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /**\n     * @hidden\n     */\n    public getEditElement(): HTMLElement {\n        return this.comboInput.nativeElement;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get template(): TemplateRef<any> {\n        this._dataType = this.dataType;\n        if (this.itemTemplate) {\n            return this.itemTemplate;\n        }\n        if (this._dataType === DataTypes.COMPLEX) {\n            return this.complexTemplate;\n        }\n        return this.primitiveTemplate;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get context(): any {\n        return {\n            $implicit: this\n        };\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleClearItems(event: Event): void {\n        this.deselectAllItems(true, event);\n        event.stopPropagation();\n    }\n\n    /**\n     * A method that opens/closes the combo.\n     *\n     *```html\n     *<button (click)=\"combo.toggle()\">Toggle Combo</button>\n     *<igx-combo #combo></igx-combo>\n     *```\n     */\n    public toggle(): void {\n        const overlaySettings = Object.assign({}, this._overlaySettings, this.overlaySettings);\n        this.dropdown.toggle(overlaySettings);\n    }\n\n    /**\n     * A method that opens the combo.\n     *\n     *```html\n     *<button (click)=\"combo.open()\">Open Combo</button>\n     *<igx-combo #combo></igx-combo>\n     *```\n     */\n    public open(): void {\n        const overlaySettings = Object.assign({}, this._overlaySettings, this.overlaySettings);\n        this.dropdown.open(overlaySettings);\n    }\n\n    /**\n     * A method that closes the combo.\n     *\n     *```html\n     *<button (click)=\"combo.close()\">Close Combo</button>\n     *<igx-combo #combo></igx-combo>\n     *```\n     */\n    public close(): void {\n        this.dropdown.close();\n    }\n\n    /**\n     * Gets drop down state.\n     *\n     * ```typescript\n     * let state = this.combo.collapsed;\n     * ```\n    */\n    public get collapsed(): boolean {\n        return this.dropdown.collapsed;\n    }\n\n    /**\n     * Get current selection state\n     * @returns Array of selected items\n     * ```typescript\n     * let selectedItems = this.combo.selectedItems();\n     * ```\n     */\n    public selectedItems() {\n        const items = Array.from(this.selection.get(this.id));\n        return items;\n    }\n\n    /**\n     * Select defined items\n     * @param newItems new items to be selected\n     * @param clearCurrentSelection if true clear previous selected items\n     * ```typescript\n     * this.combo.selectItems([\"New York\", \"New Jersey\"]);\n     * ```\n     */\n    public selectItems(newItems: Array<any>, clearCurrentSelection?: boolean, event?: Event) {\n        if (newItems) {\n            const newSelection = this.selection.add_items(this.id, newItems, clearCurrentSelection);\n            this.setSelection(newSelection, event);\n        }\n    }\n\n    /**\n     * Deselect defined items\n     * @param items items to deselected\n     * ```typescript\n     * this.combo.deselectItems([\"New York\", \"New Jersey\"]);\n     * ```\n     */\n    public deselectItems(items: Array<any>, event?: Event) {\n        if (items) {\n            const newSelection = this.selection.delete_items(this.id, items);\n            this.setSelection(newSelection, event);\n        }\n    }\n\n    /**\n     * Select all (filtered) items\n     * @param ignoreFilter if set to true, selects all items, otherwise selects only the filtered ones.\n     * ```typescript\n     * this.combo.selectAllItems();\n     * ```\n     */\n    public selectAllItems(ignoreFilter?: boolean, event?: Event) {\n        const allVisible = this.selection.get_all_ids(ignoreFilter ? this.data : this.filteredData, this.valueKey);\n        const newSelection = this.selection.add_items(this.id, allVisible);\n        this.setSelection(newSelection, event);\n    }\n\n    /**\n     * Deselect all (filtered) items\n     * @param ignoreFilter if set to true, deselects all items, otherwise deselects only the filtered ones.\n     * ```typescript\n     * this.combo.deselectAllItems();\n     * ```\n     */\n    public deselectAllItems(ignoreFilter?: boolean, event?: Event): void {\n        let newSelection = this.selection.get_empty();\n        if (this.filteredData.length !== this.data.length && !ignoreFilter) {\n            newSelection = this.selection.delete_items(this.id, this.selection.get_all_ids(this.filteredData, this.valueKey));\n        }\n        this.setSelection(newSelection, event);\n    }\n\n    /**\n     * Selects/Deselects a single item\n     * @param itemID the itemID of the specific item\n     * @param select If the item should be selected (true) or deselected (false)\n     *\n     * Without specified valueKey;\n     * ```typescript\n     * this.combo.valueKey = null;\n     * const items: { field: string, region: string}[] = data;\n     * this.combo.setSelectedItem(items[0], true);\n     * ```\n     * With specified valueKey;\n     * ```typescript\n     * this.combo.valueKey = 'field';\n     * const items: { field: string, region: string}[] = data;\n     * this.combo.setSelectedItem('Connecticut', true);\n     * ```\n     */\n    public setSelectedItem(itemID: any, select = true, event?: Event): void {\n        if (itemID === null || itemID === undefined) {\n            return;\n        }\n        if (select) {\n            this.selectItems([itemID], false, event);\n        } else {\n            this.deselectItems([itemID], event);\n        }\n    }\n\n    protected setSelection(newSelection: Set<any>, event?: Event): void {\n        const removed = diffInSets(this.selection.get(this.id), newSelection);\n        const added = diffInSets(newSelection, this.selection.get(this.id));\n        const args: IComboSelectionChangeEventArgs = {\n            newSelection: Array.from(newSelection),\n            oldSelection: Array.from(this.selection.get(this.id) || []),\n            added,\n            removed,\n            event,\n            cancel: false\n        };\n        this.onSelectionChange.emit(args);\n        if (!args.cancel) {\n            this.selection.select_items(this.id, args.newSelection, true);\n            let value = '';\n            if (this.isRemote) {\n                if (args.newSelection.length) {\n                    const removedItems = args.oldSelection.filter(e => args.newSelection.indexOf(e) < 0);\n                    const addedItems = args.newSelection.filter(e => args.oldSelection.indexOf(e) < 0);\n                    this.registerRemoteEntries(addedItems);\n                    this.registerRemoteEntries(removedItems, false);\n                    value = Object.keys(this._remoteSelection).map(e => this._remoteSelection[e]).join(', ');\n                } else {\n                    // If new selection is empty, clear all items\n                    this.registerRemoteEntries(args.oldSelection, false);\n                }\n            } else {\n                value = this.displayKey !== null && this.displayKey !== undefined ?\n                    this.convertKeysToItems(args.newSelection).map(entry => entry[this.displayKey]).join(', ') :\n                    args.newSelection.join(', ');\n            }\n            this._value = value;\n            this._onChangeCallback(args.newSelection);\n        }\n    }\n\n    /** if there is a valueKey - map the keys to data items, else - just return the keys */\n    private convertKeysToItems(keys: any[]) {\n        if (this.comboAPI.valueKey === null) {\n            return keys;\n        }\n        // map keys vs. filter data to retain the order of the selected items\n        return keys.map(key => this.data.find(entry => entry[this.valueKey] === key)).filter(e => e !== undefined);\n    }\n    /**\n     * Event handlers\n     * @hidden\n     * @internal\n     */\n    public handleOpening(event: CancelableEventArgs) {\n        this.onOpening.emit(event);\n        if (event.cancel) {\n            return;\n        }\n        this.handleInputChange();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleOpened() {\n        this.triggerCheck();\n        this.focusSearchInput(true);\n        this.onOpened.emit();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleClosing(event) {\n        this.onClosing.emit(event);\n        if (event.cancel) {\n            return;\n        }\n        this.searchValue = '';\n        this.comboInput.nativeElement.focus();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleClosed() {\n        this.onClosed.emit();\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxComboComponent, IgxComboItemComponent, IgxComboFilterConditionPipe, IgxComboGroupingPipe,\n        IgxComboFilteringPipe, IgxComboSortingPipe, IgxComboDropDownComponent, IgxComboAddItemComponent,\n        IgxComboItemDirective,\n        IgxComboEmptyDirective,\n        IgxComboHeaderItemDirective,\n        IgxComboHeaderDirective,\n        IgxComboFooterDirective,\n        IgxComboAddItemDirective,\n        IgxComboToggleIconDirective,\n        IgxComboClearIconDirective],\n    exports: [IgxComboComponent, IgxComboItemComponent, IgxComboDropDownComponent, IgxComboAddItemComponent,\n        IgxComboItemDirective,\n        IgxComboEmptyDirective,\n        IgxComboHeaderItemDirective,\n        IgxComboHeaderDirective,\n        IgxComboFooterDirective,\n        IgxComboAddItemDirective,\n        IgxComboToggleIconDirective,\n        IgxComboClearIconDirective],\n    imports: [IgxRippleModule, CommonModule, IgxInputGroupModule, FormsModule, ReactiveFormsModule,\n        IgxForOfModule, IgxToggleModule, IgxCheckboxModule, IgxDropDownModule, IgxButtonModule, IgxIconModule],\n    providers: [IgxSelectionAPIService]\n})\nexport class IgxComboModule { }\n","import { isIE } from '../core/utils';\n\n/**\n * This enum is used to keep the date validation result.\n *\n *@hidden\n */\nexport const enum DateState {\n    Valid = 'valid',\n    Invalid = 'invalid',\n}\n\n/**\n *@hidden\n */\nconst enum FormatDesc {\n    Numeric = 'numeric',\n    TwoDigits = '2-digit'\n}\n\n/**\n *@hidden\n */\nconst enum DateChars {\n    YearChar = 'y',\n    MonthChar = 'M',\n    DayChar = 'd'\n}\n\n/**\n *@hidden\n */\nconst enum DateParts {\n    Day = 'day',\n    Month = 'month',\n    Year = 'year'\n}\n\n/**\n *@hidden\n */\nexport abstract class DatePickerUtil {\n    private static readonly SHORT_DATE_MASK = 'MM/dd/yy';\n    private static readonly SEPARATOR = 'literal';\n    private static readonly NUMBER_OF_MONTHS = 12;\n    private static readonly PROMPT_CHAR = '_';\n    private static readonly DEFAULT_LOCALE = 'en';\n\n    /**\n     * This method generates date parts structure based on editor mask and locale.\n     * @param maskValue: string\n     * @param locale: string\n     * @returns array containing information about date parts - type, position, format\n     */\n    public static parseDateFormat(maskValue: string, locale: string = DatePickerUtil.DEFAULT_LOCALE): any[] {\n        let dateStruct = [];\n        if (maskValue === undefined && !isIE()) {\n            dateStruct = DatePickerUtil.getDefaultLocaleMask(locale);\n        } else {\n            const mask = (maskValue) ? maskValue : DatePickerUtil.SHORT_DATE_MASK;\n            const maskArray = Array.from(mask);\n            const monthInitPosition = mask.indexOf(DateChars.MonthChar);\n            const dayInitPosition = mask.indexOf(DateChars.DayChar);\n            const yearInitPosition = mask.indexOf(DateChars.YearChar);\n\n            if (yearInitPosition !== -1) {\n                dateStruct.push({\n                    type: DateParts.Year,\n                    initialPosition: yearInitPosition,\n                    formatType: DatePickerUtil.getYearFormatType(mask)\n                });\n            }\n\n            if (monthInitPosition !== -1) {\n                dateStruct.push({\n                    type: DateParts.Month,\n                    initialPosition: monthInitPosition,\n                    formatType: DatePickerUtil.getMonthFormatType(mask)\n                });\n            }\n\n            if (dayInitPosition !== -1) {\n                dateStruct.push({\n                    type: DateParts.Day,\n                    initialPosition: dayInitPosition,\n                    formatType: DatePickerUtil.getDayFormatType(mask)\n                });\n            }\n\n            for (let i = 0; i < maskArray.length; i++) {\n                if (!DatePickerUtil.isDateChar(maskArray[i])) {\n                    dateStruct.push({\n                        type: DatePickerUtil.SEPARATOR,\n                        initialPosition: i,\n                        value: maskArray[i]\n                    });\n                }\n            }\n\n            dateStruct.sort((a, b) => a.initialPosition - b.initialPosition);\n            DatePickerUtil.fillDatePartsPositions(dateStruct);\n        }\n        return dateStruct;\n    }\n\n    /**\n     * This method generates input mask based on date parts.\n     * @param dateStruct array\n     * @returns input mask\n     */\n    public static getInputMask(dateStruct: any[]): string {\n        const inputMask = [];\n        for (let i = 0; i < dateStruct.length; i++) {\n            if (dateStruct[i].type === DatePickerUtil.SEPARATOR) {\n                inputMask.push(dateStruct[i].value);\n            } else if (dateStruct[i].type === DateParts.Day || dateStruct[i].type === DateParts.Month) {\n                inputMask.push('00');\n            } else if (dateStruct[i].type === DateParts.Year) {\n                switch (dateStruct[i].formatType) {\n                    case FormatDesc.Numeric: {\n                        inputMask.push('0000');\n                        break;\n                    }\n                    case FormatDesc.TwoDigits: {\n                        inputMask.push('00');\n                        break;\n                    }\n                }\n            }\n        }\n        return inputMask.join('');\n    }\n\n    /**\n     * This method generates editor mask.\n     * @param dateStruct\n     * @returns editor mask\n     */\n    public static getMask(dateStruct: any[]): string {\n        const mask = [];\n        for (let i = 0; i < dateStruct.length; i++) {\n            switch (dateStruct[i].formatType) {\n                case FormatDesc.Numeric: {\n                    if (dateStruct[i].type === DateParts.Day) {\n                        mask.push('d');\n                    } else if (dateStruct[i].type === DateParts.Month) {\n                        mask.push('M');\n                    } else {\n                        mask.push('yyyy');\n                    }\n                    break;\n                }\n                case FormatDesc.TwoDigits: {\n                    if (dateStruct[i].type === DateParts.Day) {\n                        mask.push('dd');\n                    } else if (dateStruct[i].type === DateParts.Month) {\n                        mask.push('MM');\n                    } else {\n                        mask.push('yy');\n                    }\n                }\n            }\n\n            if (dateStruct[i].type === DatePickerUtil.SEPARATOR) {\n                mask.push(dateStruct[i].value);\n            }\n        }\n\n        return mask.join('');\n    }\n    /**\n     * This method parses an input string base on date parts and returns a date and its validation state.\n     * @param dateFormatParts\n     * @param prevDateValue\n     * @param inputValue\n     * @returns object containing a date and its validation state\n     */\n    public static parseDateArray(dateFormatParts: any[], prevDateValue: Date, inputValue: string): any {\n        const dayStr = DatePickerUtil.getDayValueFromInput(dateFormatParts, inputValue);\n        const monthStr = DatePickerUtil.getMonthValueFromInput(dateFormatParts, inputValue);\n        const yearStr = DatePickerUtil.getYearValueFromInput(dateFormatParts, inputValue);\n        const yearFormat = DatePickerUtil.getDateFormatPart(dateFormatParts, DateParts.Year).formatType;\n        const day = (dayStr !== '') ? parseInt(dayStr, 10) : 1;\n        const month = (monthStr !== '') ? parseInt(monthStr, 10) - 1 : 0;\n\n        let year;\n        if (yearStr === '') {\n            year = (yearFormat === FormatDesc.TwoDigits) ? '00' : '2000';\n        } else {\n            year = yearStr;\n        }\n        let yearPrefix;\n        if (prevDateValue) {\n            const originalYear = prevDateValue.getFullYear().toString();\n            if (originalYear.length === 4) {\n                yearPrefix = originalYear.substring(0, 2);\n            }\n        } else {\n            yearPrefix = '20';\n        }\n        const fullYear = (yearFormat === FormatDesc.TwoDigits) ? yearPrefix.concat(year) : year;\n\n        if ((month < 0) || (month > 11) || (month === NaN)) {\n            return { state: DateState.Invalid, value: inputValue };\n        }\n\n        if ((day < 1) || (day > DatePickerUtil.daysInMonth(fullYear, month + 1)) || (day === NaN)) {\n            return { state: DateState.Invalid, value: inputValue };\n        }\n\n        return { state: DateState.Valid, date: new Date(fullYear, month, day) };\n    }\n\n    public static maskToPromptChars(mask: string): string {\n        const result = mask.replace(/0|L/g, DatePickerUtil.PROMPT_CHAR);\n        return result;\n    }\n\n    /**\n     * This method replaces prompt chars with empty string.\n     * @param value\n     */\n    public static trimUnderlines(value: string): string {\n        const result = value.replace(/_/g, '');\n        return result;\n    }\n\n    /**\n     * This method is used for spinning date parts.\n     * @param dateFormatParts\n     * @param inputValue\n     * @param position\n     * @param delta\n     * @param isSpinLoop\n     * @return modified text input\n     */\n    public static getModifiedDateInput(dateFormatParts: any[],\n        inputValue: string,\n        position: number,\n        delta: number,\n        isSpinLoop: boolean): string {\n        const datePart = DatePickerUtil.getDatePartOnPosition(dateFormatParts, position);\n        const datePartType = datePart.type;\n        const datePartFormatType = datePart.formatType;\n        let newValue;\n\n        const datePartValue = DatePickerUtil.getDateValueFromInput(dateFormatParts, datePartType, inputValue);\n        newValue = parseInt(datePartValue, 10);\n\n        let maxValue, minValue;\n        const minMax = DatePickerUtil.getMinMaxValue(dateFormatParts, datePart, inputValue);\n        minValue = minMax.min;\n        maxValue = minMax.max;\n\n        if (isNaN(newValue)) {\n            if (minValue === 'infinite') {\n                newValue = 2000;\n            } else {\n                newValue = minValue;\n            }\n        }\n        let tempValue = newValue;\n        tempValue += delta;\n\n        // Infinite loop for full years\n        if (maxValue === 'infinite' && minValue === 'infinite') {\n            newValue = tempValue;\n        }\n\n        if (isSpinLoop) {\n            if (tempValue > maxValue) {\n                tempValue = minValue;\n            }\n            if (tempValue < minValue) {\n                tempValue = maxValue;\n            }\n            newValue = tempValue;\n        } else {\n            if (tempValue <= maxValue && tempValue >= minValue) {\n                newValue = tempValue;\n            }\n        }\n\n        const startIdx = datePart.position[0];\n        const endIdx = datePart.position[1];\n        const start = inputValue.slice(0, startIdx);\n        const end = inputValue.slice(endIdx, inputValue.length);\n        let changedPart: string;\n\n        const prefix = DatePickerUtil.getNumericFormatPrefix(datePartFormatType);\n        changedPart = (newValue < 10) ? `${prefix}${newValue}` : `${newValue}`;\n\n        return `${start}${changedPart}${end}`;\n    }\n\n    /**\n     * This method returns date input with prompt chars.\n     * @param dateFormatParts\n     * @param date\n     * @param inputValue\n     * @returns date input including prompt chars\n     */\n    public static addPromptCharsEditMode(dateFormatParts: any[], date: Date, inputValue: string): string {\n        const dateArray = Array.from(inputValue);\n        for (let i = 0; i < dateFormatParts.length; i++) {\n            if (dateFormatParts[i].formatType === FormatDesc.Numeric) {\n                if ((dateFormatParts[i].type === DateParts.Day && date.getDate() < 10)\n                    || (dateFormatParts[i].type === DateParts.Month && date.getMonth() + 1 < 10)) {\n                    dateArray.splice(dateFormatParts[i].position[0], 0, DatePickerUtil.PROMPT_CHAR);\n                    dateArray.join('');\n                }\n            }\n        }\n        return dateArray.join('');\n    }\n\n    /**\n     * This method checks if date input is done.\n     * @param dateFormatParts\n     * @param input\n     * @returns input completeness\n     */\n    public static checkForCompleteDateInput(dateFormatParts: any[], input: string): string {\n        const dayValue = DatePickerUtil.getDayValueFromInput(dateFormatParts, input);\n        const monthValue = DatePickerUtil.getMonthValueFromInput(dateFormatParts, input);\n        const yearValue = DatePickerUtil.getYearValueFromInput(dateFormatParts, input);\n        const dayStr = DatePickerUtil.getDayValueFromInput(dateFormatParts, input, false);\n        const monthStr = DatePickerUtil.getMonthValueFromInput(dateFormatParts, input, false);\n\n        if (DatePickerUtil.isFullInput(dayValue, dayStr)\n            && DatePickerUtil.isFullInput(monthValue, monthStr)\n            && DatePickerUtil.isFullYearInput(dateFormatParts, yearValue)) {\n            return 'complete';\n        } else if (dayValue === '' && monthValue === '' && yearValue === '') {\n            return 'empty';\n        } else if (dayValue === '' || monthValue === '' || yearValue === '') {\n            return 'partial';\n        }\n        return '';\n    }\n\n    private static getYearFormatType(format: string): string {\n        switch (format.match(new RegExp(DateChars.YearChar, 'g')).length) {\n            case 1: {\n                // y (2020)\n                return FormatDesc.Numeric;\n            }\n            case 4: {\n                // yyyy (2020)\n                return FormatDesc.Numeric;\n            }\n            case 2: {\n                // yy (20)\n                return FormatDesc.TwoDigits;\n            }\n        }\n    }\n\n    private static getMonthFormatType(format: string): string {\n        switch (format.match(new RegExp(DateChars.MonthChar, 'g')).length) {\n            case 1: {\n                // M (8)\n                return FormatDesc.Numeric;\n            }\n            case 2: {\n                // MM (08)\n                return FormatDesc.TwoDigits;\n            }\n        }\n    }\n\n    private static getDayFormatType(format: string): string {\n        switch (format.match(new RegExp(DateChars.DayChar, 'g')).length) {\n            case 1: {\n                // d (6)\n                return FormatDesc.Numeric;\n            }\n            case 2: {\n                // dd (06)\n                return FormatDesc.TwoDigits;\n            }\n        }\n    }\n\n    private static getDefaultLocaleMask(locale: string) {\n        const dateStruct = [];\n        const formatter = new Intl.DateTimeFormat(locale);\n        const formatToParts = formatter.formatToParts(new Date());\n        for (let i = 0; i < formatToParts.length; i++) {\n            if (formatToParts[i].type === DatePickerUtil.SEPARATOR) {\n                dateStruct.push({\n                    type: DatePickerUtil.SEPARATOR,\n                    value: formatToParts[i].value\n                });\n            } else {\n                dateStruct.push({\n                    type: formatToParts[i].type,\n                });\n            }\n        }\n        const formatterOptions = formatter.resolvedOptions();\n        for (let i = 0; i < dateStruct.length; i++) {\n            switch (dateStruct[i].type) {\n                case DateParts.Day: {\n                    dateStruct[i].formatType = formatterOptions.day;\n                    break;\n                }\n                case DateParts.Month: {\n                    dateStruct[i].formatType = formatterOptions.month;\n                    break;\n                }\n                case DateParts.Year: {\n                    dateStruct[i].formatType = formatterOptions.month;\n                    break;\n                }\n            }\n        }\n        DatePickerUtil.fillDatePartsPositions(dateStruct);\n        return dateStruct;\n    }\n\n    private static isDateChar(char: string): boolean {\n        return (char === DateChars.YearChar || char === DateChars.MonthChar || char === DateChars.DayChar);\n    }\n\n    private static getNumericFormatPrefix(formatType: string): string {\n        switch (formatType) {\n            case FormatDesc.TwoDigits: {\n                return '0';\n            }\n            case FormatDesc.Numeric: {\n                return DatePickerUtil.PROMPT_CHAR;\n            }\n        }\n    }\n\n    private static getMinMaxValue(dateFormatParts: any[], datePart, inputValue: string): any {\n        let maxValue, minValue;\n        switch (datePart.type) {\n            case DateParts.Month: {\n                minValue = 1;\n                maxValue = DatePickerUtil.NUMBER_OF_MONTHS;\n                break;\n            }\n            case DateParts.Day: {\n                minValue = 1;\n                maxValue = DatePickerUtil.daysInMonth(\n                    DatePickerUtil.getFullYearFromString(DatePickerUtil.getDateFormatPart(dateFormatParts, DateParts.Year), inputValue),\n                    parseInt(DatePickerUtil.getMonthValueFromInput(dateFormatParts, inputValue), 10));\n                break;\n            }\n            case DateParts.Year: {\n                if (datePart.formatType === FormatDesc.TwoDigits) {\n                    minValue = 0;\n                    maxValue = 99;\n                } else {\n                    // Infinite loop\n                    minValue = 'infinite';\n                    maxValue = 'infinite';\n                }\n                break;\n            }\n        }\n        return { min: minValue, max: maxValue };\n    }\n\n    private static daysInMonth(fullYear: number, month: number): number {\n        return new Date(fullYear, month, 0).getDate();\n    }\n\n    private static getDateValueFromInput(dateFormatParts: any[], type: DateParts, inputValue: string, trim: boolean = true): string {\n        const partPosition = DatePickerUtil.getDateFormatPart(dateFormatParts, type).position;\n        const result = inputValue.substring(partPosition[0], partPosition[1]);\n        return (trim) ? DatePickerUtil.trimUnderlines(result) : result;\n    }\n\n    private static getDayValueFromInput(dateFormatParts: any[], inputValue: string, trim: boolean = true): string {\n        return DatePickerUtil.getDateValueFromInput(dateFormatParts, DateParts.Day, inputValue, trim);\n    }\n\n    private static getMonthValueFromInput(dateFormatParts: any[], inputValue: string, trim: boolean = true): string {\n        return DatePickerUtil.getDateValueFromInput(dateFormatParts, DateParts.Month, inputValue, trim);\n    }\n\n    private static getYearValueFromInput(dateFormatParts: any[], inputValue: string, trim: boolean = true): string {\n        return DatePickerUtil.getDateValueFromInput(dateFormatParts, DateParts.Year, inputValue, trim);\n    }\n\n    private static getDateFormatPart(dateFormatParts: any[], type: DateParts): any {\n        const result = dateFormatParts.filter((datePart) => (datePart.type === type))[0];\n        return result;\n    }\n\n    private static isFullInput(value: any, input: string): boolean {\n        return (value !== '' && input.length === 2 && input.charAt(1) !== DatePickerUtil.PROMPT_CHAR);\n    }\n\n    private static isFullYearInput(dateFormatParts: any[], value: any): boolean {\n        switch (DatePickerUtil.getDateFormatPart(dateFormatParts, DateParts.Year).formatType) {\n            case FormatDesc.Numeric: {\n                return (value !== '' && value.length === 4);\n            }\n            case FormatDesc.TwoDigits: {\n                return (value !== '' && value.length === 2);\n            }\n            default: {\n                return false;\n            }\n        }\n    }\n\n    private static getDatePartOnPosition(dateFormatParts: any[], position: number) {\n        const result = dateFormatParts.filter((element) =>\n            element.position[0] <= position && position <= element.position[1] && element.type !== DatePickerUtil.SEPARATOR)[0];\n        return result;\n    }\n\n    private static getFullYearFromString(yearPart, inputValue): number {\n        return parseInt(inputValue.substring(yearPart.position[0], yearPart.position[1]), 10);\n    }\n\n    private static fillDatePartsPositions(dateArray: any[]): void {\n        let currentPos = 0;\n\n        for (let i = 0; i < dateArray.length; i++) {\n            // Day|Month part positions\n            if (dateArray[i].type === DateParts.Day || dateArray[i].type === DateParts.Month) {\n                // Offset 2 positions for number\n                dateArray[i].position = [currentPos, currentPos + 2];\n                currentPos += 2;\n            } else if (dateArray[i].type === DateParts.Year) {\n                // Year part positions\n                switch (dateArray[i].formatType) {\n                    case FormatDesc.Numeric: {\n                        // Offset 4 positions for full year\n                        dateArray[i].position = [currentPos, currentPos + 4];\n                        currentPos += 4;\n                        break;\n                    }\n                    case FormatDesc.TwoDigits: {\n                        // Offset 2 positions for short year\n                        dateArray[i].position = [currentPos, currentPos + 2];\n                        currentPos += 2;\n                        break;\n                    }\n                }\n            } else if (dateArray[i].type === DatePickerUtil.SEPARATOR) {\n                // Separator positions\n                dateArray[i].position = [currentPos, currentPos + 1];\n                currentPos++;\n            }\n        }\n    }\n}\n\n\n","import { PipeTransform, Pipe, Inject } from '@angular/core';\nimport { IGX_DATE_PICKER_COMPONENT, IDatePicker } from './date-picker.common';\nimport { DatePickerUtil } from './date-picker.utils';\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'displayValue'\n})\nexport class DatePickerDisplayValuePipe implements PipeTransform {\n    constructor(@Inject(IGX_DATE_PICKER_COMPONENT) private _datePicker: IDatePicker) { }\n    transform(value: any, args?: any): any {\n        if (value !== '') {\n            if (value === DatePickerUtil.maskToPromptChars(this._datePicker.inputMask)) {\n                return '';\n            }\n            this._datePicker.rawDateString = value;\n            return DatePickerUtil.trimUnderlines(value);\n        }\n        return '';\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'inputValue'\n})\nexport class DatePickerInputValuePipe implements PipeTransform {\n    constructor(@Inject(IGX_DATE_PICKER_COMPONENT) private _datePicker: IDatePicker) { }\n    transform(value: any, args?: any): any {\n        if (this._datePicker.invalidDate !== '') {\n            return this._datePicker.invalidDate;\n        } else {\n            if (this._datePicker.value === null || this._datePicker.value === undefined) {\n                return DatePickerUtil.maskToPromptChars(this._datePicker.inputMask);\n            } else {\n                return DatePickerUtil.addPromptCharsEditMode(this._datePicker.dateFormatParts, this._datePicker.value, value);\n            }\n        }\n    }\n}\n","/** @hidden */\nexport const IGX_DATE_PICKER_COMPONENT = 'IgxDatePickerComponentToken';\n\n/** @hidden */\nexport interface IDatePicker {\n    value: Date;\n    mask: string;\n    inputMask: string;\n    rawDateString: string;\n    dateFormatParts: any[];\n    invalidDate: string;\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({\n    selector: '[igxDatePickerTemplate]'\n})\n\n/**\n * IgxDatePickerTemplateDirective can be used to re-template the date-picker input-group.\n *\n * @hidden\n */\nexport class IgxDatePickerTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n/**\n * IgxDatePickerActionsDirective can be used to re-template the dropdown/dialog action buttons.\n */\n@Directive({\n    selector: '[igxDatePickerActions]'\n})\nexport class IgxDatePickerActionsDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * This enumeration is used to configure whether the date/time picker has an editable input with drop down\n * or is readonly - the date/time is selected only through a dialog.\n */\nexport enum InteractionMode {\n    DropDown = 'dropdown',\n    Dialog = 'dialog'\n}\n","import { Component, ViewChild, Input, Output, EventEmitter, HostListener, HostBinding } from '@angular/core';\nimport { IgxCalendarComponent } from '../calendar';\nimport { InteractionMode } from '../core/enums';\nimport { IgxDatePickerActionsDirective } from './date-picker.directives';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-calendar-container',\n    styles: [':host {display: block;}'],\n    templateUrl: 'calendar-container.component.html'\n})\nexport class IgxCalendarContainerComponent {\n    @ViewChild('calendar', { static: true })\n    public calendar: IgxCalendarComponent;\n\n    @Input()\n    public mode: InteractionMode = InteractionMode.Dialog;\n\n    @Input()\n    public vertical = false;\n\n    @Input()\n    public cancelButtonLabel: string;\n\n    @Input()\n    public todayButtonLabel: string;\n\n    @Input()\n    public datePickerActions: IgxDatePickerActionsDirective;\n\n    @Output()\n    public onClose = new EventEmitter();\n\n    @Output()\n    public onTodaySelection = new EventEmitter();\n\n    @HostBinding('class.igx-date-picker')\n    public styleClass = 'igx-date-picker';\n\n    @HostBinding('class.igx-date-picker--dropdown')\n    get dropdownCSS(): boolean {\n        return this.mode === InteractionMode.DropDown;\n    }\n\n    @HostBinding('class.igx-date-picker--vertical')\n    get verticalCSS(): boolean {\n        return this.vertical && this.mode === InteractionMode.Dialog;\n    }\n\n    @HostListener('keydown.esc', ['$event'])\n    @HostListener('keydown.alt.arrowup', ['$event'])\n    public onEscape(event) {\n        event.preventDefault();\n        this.onClose.emit();\n    }\n\n    /**\n     * Returns whether the date-picker is in readonly dialog mode.\n     *\n     * @hidden\n    */\n    public get isReadonly() {\n        return this.mode === InteractionMode.Dialog;\n    }\n\n    /**\n     * Emits close event for the calendar.\n     */\n    public closeCalendar() {\n        this.onClose.emit();\n    }\n\n    /**\n    * Emits today selection event for the calendar.\n    */\n    public triggerTodaySelection() {\n        this.onTodaySelection.emit();\n    }\n}\n","import { CommonModule, formatDate } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    OnDestroy,\n    Output,\n    ViewChild,\n    ElementRef,\n    TemplateRef,\n    Inject,\n    ChangeDetectorRef,\n    HostListener,\n    NgModuleRef,\n    OnInit,\n    AfterViewInit\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n    IgxCalendarComponent,\n    IgxCalendarHeaderTemplateDirective,\n    IgxCalendarModule,\n    IgxCalendarSubheaderTemplateDirective,\n    WEEKDAYS,\n    isDateInRanges\n} from '../calendar/index';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxInputGroupModule, IgxInputDirective, IgxInputGroupComponent } from '../input-group/index';\nimport { Subject, fromEvent, animationFrameScheduler, interval } from 'rxjs';\nimport { filter, takeUntil, throttle } from 'rxjs/operators';\nimport { IgxOverlayOutletDirective } from '../directives/toggle/toggle.directive';\nimport { IgxTextSelectionModule} from '../directives/text-selection/text-selection.directive';\nimport {\n    OverlaySettings,\n    IgxOverlayService,\n    PositionSettings,\n    AbsoluteScrollStrategy,\n    AutoPositionStrategy,\n    OverlayCancelableEventArgs\n} from '../services/index';\nimport { DateRangeDescriptor } from '../core/dates/dateRange';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxMaskModule } from '../directives/mask/mask.directive';\nimport {\n    DatePickerUtil,\n    DateState\n} from './date-picker.utils';\nimport { DatePickerDisplayValuePipe, DatePickerInputValuePipe } from './date-picker.pipes';\nimport { IDatePicker } from './date-picker.common';\nimport { KEYS, CancelableBrowserEventArgs, isIE, isEqual, IBaseEventArgs } from '../core/utils';\nimport { IgxDatePickerTemplateDirective, IgxDatePickerActionsDirective } from './date-picker.directives';\nimport { IgxCalendarContainerComponent } from './calendar-container.component';\nimport { InteractionMode } from '../core/enums';\nimport { fadeIn, fadeOut } from '../animations/fade';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\n\nlet NEXT_ID = 0;\n\n/**\n * This interface is used to provide information about date picker reference and its current value\n * when onDisabledDate event is fired.\n */\nexport interface IDatePickerDisabledDateEventArgs extends IBaseEventArgs {\n    datePicker: IgxDatePickerComponent;\n    currentValue: Date;\n}\n\n/**\n * This interface is used to provide information about date picker reference and its previously valid value\n * when onValidationFailed event is fired.\n */\nexport interface IDatePickerValidationFailedEventArgs extends IBaseEventArgs {\n    datePicker: IgxDatePickerComponent;\n    prevValue: Date;\n}\n\n/**\n * This interface is used to configure calendar format view options.\n */\nexport interface IFormatViews {\n    day?: boolean;\n    month?: boolean;\n    year?: boolean;\n}\n\n/**\n * This interface is used to configure calendar format options.\n */\nexport interface IFormatOptions {\n    day?: string;\n    month?: string;\n    weekday?: string;\n    year?: string;\n}\n\n/**\n * This enumeration is used to configure the date picker to operate with pre-defined format option used in Angular DatePipe.\n * 'https://angular.io/api/common/DatePipe'\n * 'shortDate': equivalent to 'M/d/yy' (6/15/15).\n * 'mediumDate': equivalent to 'MMM d, y' (Jun 15, 2015).\n * 'longDate': equivalent to 'MMMM d, y' (June 15, 2015).\n * 'fullDate': equivalent to 'EEEE, MMMM d, y' (Monday, June 15, 2015).\n */\nexport enum PredefinedFormatOptions {\n    ShortDate = 'shortDate',\n    MediumDate = 'mediumDate',\n    LongDate = 'longDate',\n    FullDate = 'fullDate'\n}\n\n/**\n * **Ignite UI for Angular Date Picker** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/date_picker.html)\n *\n * The Ignite UI Date Picker displays a popup calendar that lets users select a single date.\n *\n * Example:\n * ```html\n * <igx-date-picker [(ngModel)]=\"selectedDate\"></igx-date-picker>\n * ```\n */\n@Component({\n    providers:\n        [{\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxDatePickerComponent,\n            multi: true\n        }],\n    // tslint:disable-next-line:component-selector\n    selector: 'igx-date-picker',\n    templateUrl: 'date-picker.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxDatePickerComponent implements IDatePicker, ControlValueAccessor, EditorProvider, OnInit, AfterViewInit, OnDestroy {\n    /**\n     * An @Input property that sets the `IgxDatePickerComponent` label.\n     * The default label is 'Date'.\n     * ```html\n     * <igx-date-picker [label]=\"Calendar\"></igx-date-picker>\n     * ```\n     */\n    @Input()\n    public label = 'Date';\n\n    /**\n     * An @Input property that sets the `IgxDatePickerComponent` label visibility.\n     * By default the visibility is set to true.\n     * <igx-date-picker [labelVisibility]=\"false\"></igx-date-picker>\n     */\n    @Input()\n    public labelVisibility = true;\n\n    /**\n     *An @Input property that sets locales. Default locale is en.\n     *```html\n     *<igx-date-picker locale=\"ja-JP\" [value]=\"date\"></igx-date-picker>\n     *```\n     */\n    @Input() public locale: 'en';\n\n    /**\n     *An @Input property that sets on which day the week starts.\n     *```html\n     *<igx-date-picker [weekStart]=\"WEEKDAYS.FRIDAY\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Input() public weekStart: WEEKDAYS | number = WEEKDAYS.SUNDAY;\n\n    /**\n     *Returns the format options of the `IgxDatePickerComponent`.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let formatOptions = this.datePicker.formatOptions;\n     *}\n     *```\n     */\n    @Input()\n    public get formatOptions(): IFormatOptions {\n        return this._formatOptions;\n    }\n\n    /**\n     * Sets/gets whether the inactive dates (dates that are out of the current month) will be hidden.\n     * Default value is `false`.\n     * ```html\n     * <igx-date-picker [hideOutsideDays]=\"true\"></igx-date-picker>\n     * ```\n     * ```typescript\n     * let hideOutsideDays = this.datePicker.hideOutsideDays;\n     * ```\n     */\n    @Input()\n    public hideOutsideDays: boolean;\n\n    /**\n     * Sets/gets the number of month views displayed.\n     * Default value is `1`.\n     * ```html\n     * <igx-date-picker [monthsViewNumber]=\"2\"></igx-date-picker>\n     * ```\n     * ```typescript\n     * let monthViewsDisplayed = this.datePicker.monthsViewNumber;\n     * ```\n     */\n    @Input()\n    public monthsViewNumber = 1;\n\n    /**\n     *Sets the format options of the `IgxDatePickerComponent`.\n     *```typescript\n     *public Options;\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.Options = {\n     *        day: \"numeric\",\n     *        month: \"long\",\n     *        weekday: \"long\",\n     *        year: \"numeric\"\n     *    }\n     *this.datePicker.formatOptions = this.Options;\n     *}\n     *```\n     */\n    public set formatOptions(formatOptions: IFormatOptions) {\n        this._formatOptions = Object.assign(this._formatOptions, formatOptions);\n    }\n\n    /**\n     *Returns the date display format of the `IgxDatePickerComponent` in dropdown mode.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let format = this.datePicker.format;\n     *}\n     *```\n     */\n    @Input()\n    public get format(): string {\n        return (this._format === undefined) ? PredefinedFormatOptions.ShortDate : this._format;\n    }\n\n    /**\n    *Sets the date format of the `IgxDatePickerComponent` when in editable dropdown mode.\n    *```typescript\n    *@ViewChild(\"MyDatePicker\")\n    *public datePicker: IgxDatePickerComponent;\n    *this.datePicker.format = 'yyyy-M-d';\n    *}\n    *```\n    */\n    public set format(format: string) {\n        this._format = format;\n    }\n\n    /**\n     *Returns the date mask of the `IgxDatePickerComponent` when in editable dropdown mode.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let mask = this.datePicker.mask;\n     *}\n     *```\n     */\n    @Input()\n    public mask: string;\n\n    /**\n     *Returns the format views of the `IgxDatePickerComponent`.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let formatViews = this.datePicker.formatViews;\n     *}\n     *```\n     */\n    @Input()\n    public get formatViews(): IFormatViews {\n        return this._formatViews;\n    }\n\n    /**\n     *Sets the format views of the `IgxDatePickerComponent`.\n     *```typescript\n     *public Views;\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.Views = {day:false, month: false, year:false};\n     *    this.datePicker.formatViews = this.Views;\n     *}\n     *```\n     */\n    public set formatViews(formatViews: IFormatViews) {\n        this._formatViews = Object.assign(this._formatViews, formatViews);\n    }\n\n    /**\n     * Gets the disabled dates descriptors.\n     * ```typescript\n     * let disabledDates = this.datepicker.disabledDates;\n     * ```\n     */\n    @Input()\n    public get disabledDates(): DateRangeDescriptor[] {\n        return this._disabledDates;\n    }\n\n    /**\n     * Sets the disabled dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.datePicker.disabledDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     *}\n     *```\n     */\n    public set disabledDates(value: DateRangeDescriptor[]) {\n        this._disabledDates = value;\n    }\n\n    /**\n     * Gets the special dates descriptors.\n     * ```typescript\n     * let specialDates = this.datepicker.specialDates;\n     * ```\n     */\n    @Input()\n    public get specialDates(): DateRangeDescriptor[] {\n        return this._specialDates;\n    }\n\n    /**\n     * Sets the special dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.datePicker.specialDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     *}\n     *```\n     */\n    public set specialDates(value: DateRangeDescriptor[]) {\n        this._specialDates = value;\n    }\n\n    @Input()\n    public get modalOverlaySettings(): OverlaySettings {\n        return this._modalOverlay;\n    }\n\n    public set modalOverlaySettings(value: OverlaySettings) {\n        this._modalOverlay = value;\n    }\n\n    @Input()\n    public get dropDownOverlaySettings(): OverlaySettings {\n        return this._dropDownOverlaySettings || this._defaultDropDownOverlaySettings;\n    }\n\n    public set dropDownOverlaySettings(value: OverlaySettings) {\n        this._dropDownOverlaySettings = value;\n    }\n\n    /**\n     *Returns the formatted date when `IgxDatePickerComponent` is in dialog mode.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *public selection(event){\n     *    let selectedDate = this.datePicker.displayData;\n     *    alert(selectedDate);\n     *}\n     *```\n     *```html\n     *<igx-date-picker #MyDatePicker (onSelection)=\"selection()\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    public get displayData(): string {\n        if (this.value) {\n            return this._customFormatChecker(this.formatter, this.value);\n        }\n        return '';\n    }\n\n    /**\n     hidden\n     */\n    public get transformedDate(): string {\n        if (this._value) {\n            this._transformedDate = (this._isInEditMode) ? this._getEditorDate(this._value) : this._getDisplayDate(this._value);\n            this.isEmpty = false;\n        } else {\n            this._transformedDate = (this._isInEditMode) ? DatePickerUtil.maskToPromptChars(this.inputMask) : '';\n        }\n        return this._transformedDate;\n    }\n\n    public set transformedDate(value) {\n        this._transformedDate = value;\n    }\n\n    constructor(@Inject(IgxOverlayService) private _overlayService: IgxOverlayService, public element: ElementRef,\n        private _cdr: ChangeDetectorRef, private _moduleRef: NgModuleRef<any>) { }\n\n    /**\n     * Gets the input group template.\n     * ```typescript\n     * let template = this.template();\n     * ```\n     * @memberof IgxDatePickerComponent\n     */\n    get template(): TemplateRef<any> {\n        if (this.datePickerTemplateDirective) {\n            return this.datePickerTemplateDirective.template;\n        }\n        return (this.mode === InteractionMode.Dialog) ? this.readOnlyDatePickerTemplate : this.editableDatePickerTemplate;\n    }\n\n    /**\n     * Gets the context passed to the input group template.\n     * @memberof IgxDatePickerComponent\n     */\n    get context() {\n        return {\n            disabled: this.disabled,\n            disabledDates: this.disabledDates,\n            displayData: this.displayData,\n            format: this.format,\n            isSpinLoop: this.isSpinLoop,\n            label: this.label,\n            labelVisibility: this.labelVisibility,\n            locale: this.locale,\n            mask: this.mask,\n            mode: this.mode,\n            specialDates: this.specialDates,\n            value: this.value,\n            openDialog: (target?: HTMLElement) => this.openDialog(target)\n        };\n    }\n\n    /**\n     *An @Input property that gets/sets the selected date.\n     *```typescript\n     *public date: Date = new Date();\n     *```\n     *```html\n     *<igx-date-picker [value]=\"date\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public get value(): Date {\n        return this._value;\n    }\n\n    public set value(date: Date) {\n        this._value = date;\n        this._onChangeCallback(date);\n    }\n\n    /**\n     *An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     *```html\n     *<igx-date-picker [id]=\"'igx-date-picker-3'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-date-picker-${NEXT_ID++}`;\n\n    /**\n     *An @Input property that applies a custom formatter function on the selected or passed date.\n     *```typescript\n     *public date: Date = new Date();\n     *private dayFormatter = new Intl.DateTimeFormat(\"en\", { weekday: \"long\" });\n     *private monthFormatter = new Intl.DateTimeFormat(\"en\", { month: \"long\" });\n     *public formatter = (date: Date) => { return `You selected\n     *                     ${this.dayFormatter.format(date)},\n     *                     ${date.getDate()} ${this.monthFormatter.format(date)},\n     *                     ${date.getFullYear()}`;\n     *}\n     *```\n     *```html\n     *<igx-date-picker [value]=\"date\" [formatter]=\"formatter\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public formatter: (val: Date) => string;\n\n    /**\n     *An @Input property that disables the `IgxDatePickerComponent`.\n     *```html\n     *<igx-date-picker [disabled]=\"'true'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     * ```\n     */\n    @Input()\n    public disabled: boolean;\n\n    /**\n     *An @Input property that sets the orientation of the `IgxDatePickerComponent` header.\n     *```html\n     *<igx-date-picker [vertical]=\"'true'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public vertical = false;\n\n    /**\n     *An @Input property that renders today button with custom label.\n     *```html\n     *<igx-date-picker cancelButtonLabel=\"cancel\" todayButtonLabel=\"Tomorrow\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public todayButtonLabel: string;\n\n    /**\n     *An @Input property that renders cancel button with custom label.\n     *```html\n     *<igx-date-picker cancelButtonLabel=\"Close\" todayButtonLabel=\"Today\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public cancelButtonLabel: string;\n\n    /**\n     *An @Input property that sets whether `IgxDatePickerComponent` is in dialog or drop down mode.\n     *```html\n     *<igx-date-picker mode=\"dropdown\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public mode = InteractionMode.Dialog;\n\n    /**\n     *An @Input property that sets whether the `IgxDatePickerComponent` date parts would spin continuously or stop when min/max is reached.\n     *```html\n     *<igx-date-picker [isSpinLoop]=\"false\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public isSpinLoop = true;\n\n    /**\n     * Determines the container the popup element should be attached to.\n     *\n     * ```html\n     * <div igxOverlayOutlet #outlet=\"overlay-outlet\"></div>\n     * //..\n     * <igx-date-picker [outlet]=\"outlet\"></igx-date-picker>\n     * //..\n     * ```\n     * Where `outlet` is an instance of `IgxOverlayOutletDirective` or an `ElementRef`.\n     */\n    @Input()\n    public outlet: IgxOverlayOutletDirective | ElementRef;\n\n    /**\n     * @deprecated Use 'onOpened' instead.\n     *An event that is emitted when the `IgxDatePickerComponent` calendar is opened.\n     *```typescript\n     *public open(event){\n     *    alert(\"The date-picker calendar has been opened!\");\n     *}\n     *```\n     *```html\n     *<igx-date-picker (onOpen)=\"open($event)\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @DeprecateProperty(`'onOpen' @Output property is deprecated. Use 'onOpened' instead.`)\n    @Output()\n    public get onOpen(): EventEmitter<IgxDatePickerComponent> {\n        return this._onOpen;\n    }\n\n    public set onOpen(val: EventEmitter<IgxDatePickerComponent>) {\n        this._onOpen = val;\n    }\n\n    /**\n     *An event that is emitted when the `IgxDatePickerComponent` calendar is opened.\n    */\n    @Output()\n    public onOpened = new EventEmitter<IgxDatePickerComponent>();\n\n    /**\n     * @deprecated Use 'onClosed' instead.\n     *\"An event that is emitted when the `IgxDatePickerComponent` is closed.\n     *```typescript\n     *public close(event){\n     *    alert(\"The date-picker has been closed!\");\n     *}\n     *```\n     *```html\n     *<igx-date-picker (onClose)=\"close($event)\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @DeprecateProperty(`'onClose' @Output property is deprecated. Use 'onClosed' instead.`)\n    @Output()\n    public get onClose(): EventEmitter<IgxDatePickerComponent> {\n        return this._onClose;\n    }\n\n    public set onClose(val: EventEmitter<IgxDatePickerComponent>) {\n        this._onClose = val;\n    }\n\n    /**\n     *An event that is emitted after the `IgxDatePickerComponent` is closed.\n    */\n    @Output()\n    public onClosed = new EventEmitter<IgxDatePickerComponent>();\n\n    /**\n     * An event that is emitted when the `IgxDatePickerComponent` is being closed.\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs & IBaseEventArgs>();\n\n    /**\n     *An @Output property that is fired when selection is made in the calendar.\n     *```typescript\n     *public selection(event){\n     *    alert(\"A date has been selected!\");\n     *}\n     *```\n     *```html\n     *<igx-date-picker (onSelection)=\"selection($event)\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date>();\n\n    /**\n     *An @Output property that is fired when date picker value is changed.\n     *```typescript\n     *public valueChanged(event){\n        *    alert(\"Date picker value is changed\");\n        *}\n        *```\n        *```html\n        *<igx-date-picker (valueChange)=\"valueChanged($event)\" mode=\"dropdown\"></igx-date-picker>\n        *```\n    */\n    @Output()\n    public valueChange = new EventEmitter<Date>();\n\n    /**\n    *An @Output property that fires when the user types/spins to a disabled date in the date-picker editor.\n    *```typescript\n    *public onDisabledDate(event){\n    *    alert(\"This date is disabled!\");\n    *}\n    *```\n    *```html\n    *<igx-date-picker (onDisabledDate)=\"onDisabledDate($event)\"></igx-date-picker>\n    *```\n    */\n    @Output()\n    public onDisabledDate = new EventEmitter<IDatePickerDisabledDateEventArgs>();\n\n    /**\n    *An @Output property that fires when the user types/spins invalid date in the date-picker editor.\n    *```typescript\n    *public onValidationFailed(event){\n        *    alert(\"This date is not valid!\");\n        *}\n        *```\n        *```html\n        *<igx-date-picker (onValidationFailed)=\"onValidationFailed($event)\"></igx-date-picker>\n        *```\n        */\n    @Output()\n    public onValidationFailed = new EventEmitter<IDatePickerValidationFailedEventArgs>();\n\n    /*\n     * @hidden\n     */\n    @ViewChild('readOnlyDatePickerTemplate', { read: TemplateRef, static: true })\n    protected readOnlyDatePickerTemplate: TemplateRef<any>;\n\n    /*\n     * @hidden\n     */\n    @ViewChild('editableDatePickerTemplate', { read: TemplateRef, static: true })\n    protected editableDatePickerTemplate: TemplateRef<any>;\n\n    /*\n     * @hidden\n     */\n    @ViewChild(IgxInputGroupComponent, { static: false })\n    protected inputGroup: IgxInputGroupComponent;\n\n    /*\n     * @hidden\n     */\n    @ViewChild('editableInput', { read: ElementRef, static: false })\n    protected editableInput: ElementRef;\n\n    /*\n    * @hidden\n    */\n    @ViewChild('readonlyInput', { read: ElementRef, static: false })\n    protected readonlyInput: ElementRef;\n\n    /*\n    * @hidden\n    */\n    @ContentChild(IgxInputDirective, { static: false })\n    protected input: IgxInputDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxDatePickerTemplateDirective, { read: IgxDatePickerTemplateDirective, static: false })\n    protected datePickerTemplateDirective: IgxDatePickerTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCalendarHeaderTemplateDirective, { read: IgxCalendarHeaderTemplateDirective, static: false })\n    public headerTemplate: IgxCalendarHeaderTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCalendarSubheaderTemplateDirective, { read: IgxCalendarSubheaderTemplateDirective, static: false })\n    public subheaderTemplate: IgxCalendarSubheaderTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxDatePickerActionsDirective, { read: IgxDatePickerActionsDirective, static: false })\n    public datePickerActionsDirective: IgxDatePickerActionsDirective;\n\n    public calendar: IgxCalendarComponent;\n    public hasHeader = true;\n    public collapsed = true;\n    public displayValuePipe = new DatePickerDisplayValuePipe(this);\n    public inputValuePipe = new DatePickerInputValuePipe(this);\n    public dateFormatParts = [];\n    public rawDateString: string;\n    public inputMask: string;\n    public isEmpty = true;\n    public invalidDate = '';\n\n    private readonly spinDelta = 1;\n    private readonly defaultLocale = 'en';\n\n    private _formatOptions = {\n        day: 'numeric',\n        month: 'short',\n        weekday: 'short',\n        year: 'numeric'\n    };\n    private _formatViews = {\n        day: false,\n        month: true,\n        year: false\n    };\n    private _destroy$ = new Subject<boolean>();\n    private _componentID: string;\n    private _format: string;\n    private _value: Date;\n    private _isInEditMode: boolean;\n    private _disabledDates: DateRangeDescriptor[] = null;\n    private _specialDates: DateRangeDescriptor[] = null;\n    private _modalOverlay: OverlaySettings;\n    private _dropDownOverlaySettings: OverlaySettings;\n    private _positionSettings: PositionSettings;\n    private _defaultDropDownOverlaySettings: OverlaySettings;\n    private _modalOverlaySettings: OverlaySettings;\n    private _transformedDate;\n    private _onOpen = new EventEmitter<IgxDatePickerComponent>();\n    private _onClose = new EventEmitter<IgxDatePickerComponent>();\n\n    /**\n    * @hidden\n    */\n    @HostListener('keydown.spacebar', ['$event'])\n    @HostListener('keydown.space', ['$event'])\n    public onSpaceClick(event: KeyboardEvent) {\n        this.openDialog(this.getInputGroupElement());\n        event.preventDefault();\n    }\n\n    /**\n     *Method that sets the selected date.\n     *```typescript\n     *public date = new Date();\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.datePicker.writeValue(this.date);\n     *}\n     *```\n     *@param value The date you want to select.\n     *@memberOf {@link IgxDatePickerComponent}\n     */\n    public writeValue(value: Date) {\n        this.value = value;\n        this._cdr.markForCheck();\n    }\n\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: Date) => void) { this._onChangeCallback = fn; }\n\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n\n    /**\n     *@hidden\n     */\n    public setDisabledState(isDisabled: boolean): void { this.disabled = isDisabled; }\n\n    /** @hidden */\n    public getEditElement() {\n        const inputElement = this.editableInput || this.readonlyInput || this.input;\n        return (inputElement) ? inputElement.nativeElement : null;\n    }\n\n    /** @hidden */\n    public getInputGroupElement() {\n        return this.inputGroup ? this.inputGroup.element.nativeElement : null;\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnInit(): void {\n        this._positionSettings = {\n            openAnimation: fadeIn,\n            closeAnimation: fadeOut\n        };\n\n        this._defaultDropDownOverlaySettings = {\n            closeOnOutsideClick: true,\n            modal: false,\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            positionStrategy: new AutoPositionStrategy(this._positionSettings),\n            outlet: this.outlet\n        };\n\n        this._modalOverlaySettings = {\n            closeOnOutsideClick: true,\n            modal: true,\n            outlet: this.outlet\n        };\n\n        this._overlayService.onOpening.pipe(\n            filter((overlay) => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe((eventArgs) => {\n                this._onOpening(eventArgs);\n            });\n\n        this._overlayService.onOpened.pipe(\n            filter((overlay) => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe(() => {\n                this._onOpened();\n            });\n\n        this._overlayService.onClosed.pipe(\n            filter(overlay => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe(() => {\n                this._onClosed();\n            });\n\n        this._overlayService.onClosing.pipe(\n            filter(overlay => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe((event) => {\n                this.onClosing.emit(event);\n            });\n\n        if (this.mode === InteractionMode.DropDown) {\n            this.dateFormatParts = DatePickerUtil.parseDateFormat(this.mask, this.locale);\n            if (this.mask === undefined) {\n                this.mask = DatePickerUtil.getMask(this.dateFormatParts);\n            }\n            this.inputMask = DatePickerUtil.getInputMask(this.dateFormatParts);\n        }\n    }\n\n    ngAfterViewInit() {\n        if (this.mode === InteractionMode.DropDown && this.editableInput) {\n            fromEvent(this.editableInput.nativeElement, 'keydown').pipe(\n                throttle(() => interval(0, animationFrameScheduler)),\n                takeUntil(this._destroy$)\n            ).subscribe((res) => this.onKeyDown(res));\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        if (this._componentID) {\n            this._overlayService.hide(this._componentID);\n        }\n        this._destroy$.next(true);\n        this._destroy$.complete();\n    }\n\n    /**\n     *Selects today's date from calendar and change the input field value, @calendar.viewDate and @calendar.value.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *this.datePicker.triggerTodaySelection();\n     *}\n     *```\n     *@memberOf {@link IgxDatePickerComponent}\n     */\n    public triggerTodaySelection(): void {\n        const today = new Date(Date.now());\n        this.handleSelection(today);\n    }\n\n    /**\n     * Change the calendar selection and calling this method will emit the @calendar.onSelection event,\n     * which will fire @handleSelection method.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *this.datePicker.selectDate(this.date);\n     *}\n     * ```\n     * @param date passed date that has to be set to the calendar.\n     * @memberOf {@link IgxDatePickerComponent}\n     */\n    public selectDate(date: Date): void {\n        const oldValue =  this.value;\n        this.value = date;\n\n        this.emitValueChangeEvent(oldValue, this.value );\n        this.onSelection.emit(date);\n    }\n\n    /**\n     * Deselects the calendar date.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *this.datePicker.deselectDate();\n     *}\n     * ```\n     * @memberOf {@link IgxDatePickerComponent}\n     */\n    public deselectDate(): void {\n        const oldValue =  this.value;\n        this.value = null;\n        this.emitValueChangeEvent(oldValue, this.value );\n        if (this.calendar) {\n            this.calendar.deselectDate();\n        }\n    }\n\n    /**\n     * Opens the date picker drop down or dialog.\n     * @param target HTMLElement - the target element to use for positioning the drop down container according to\n     * ```html\n     * <igx-date-picker [value]=\"date\" mode=\"dropdown\" #retemplated>\n     *   <ng-template igxDatePickerTemplate let-openDialog=\"openDialog\"\n     *                let-displayData=\"displayData\">\n     *     <igx-input-group>\n     *       <input #dropDownTarget igxInput [value]=\"displayData\" />\n     *       <igx-suffix (click)=\"openDialog(dropDownTarget)\">\n     *         <igx-icon>alarm</igx-icon>\n     *       </igx-suffix>\n     *     </igx-input-group>\n     *   </ng-template>\n     * </igx-date-picker>\n     * ```\n     */\n    public openDialog(target?: HTMLElement): void {\n        if (!this.collapsed) {\n            return;\n        }\n        switch (this.mode) {\n            case InteractionMode.Dialog: {\n                this.hasHeader = true;\n                const modalOverlay = (this.modalOverlaySettings !== undefined) ? this._modalOverlay : this._modalOverlaySettings;\n                this._componentID = this._overlayService.attach(IgxCalendarContainerComponent, modalOverlay, this._moduleRef);\n                this._overlayService.show(this._componentID);\n                break;\n            }\n            case InteractionMode.DropDown: {\n                this.hasHeader = false;\n                if (target) {\n                    this.dropDownOverlaySettings.positionStrategy.settings.target = target;\n                }\n                this._componentID = this._overlayService.attach(IgxCalendarContainerComponent,\n                    this.dropDownOverlaySettings, this._moduleRef);\n                this._overlayService.show(this._componentID);\n                break;\n            }\n        }\n    }\n\n    /**\n     * Close the calendar.\n     *\n     * @hidden\n     */\n    public closeCalendar(): void {\n        this._overlayService.hide(this._componentID);\n    }\n\n    /**\n     * Clear the input field, date picker value and calendar selection.\n     *\n     * @hidden\n     */\n    public clear(): void {\n        this.isEmpty = true;\n        this.invalidDate = '';\n        this.deselectDate();\n        this._setCursorPosition(0);\n    }\n\n    /**\n     * Evaluates when @calendar.onSelection event was fired\n     * and update the input value.\n     *\n     * @param event selected value from calendar.\n     *\n     * @hidden\n     */\n    public handleSelection(date: Date): void {\n        if (this.value) {\n            date.setHours(this.value.getHours());\n            date.setMinutes(this.value.getMinutes());\n            date.setSeconds(this.value.getSeconds());\n            date.setMilliseconds(this.value.getMilliseconds());\n        }\n        const oldValue =  this.value;\n        this.value = date;\n\n        this.emitValueChangeEvent(oldValue, this.value );\n        this.calendar.viewDate = date;\n        this.closeCalendar();\n        this.onSelection.emit(date);\n    }\n\n    /**\n    * Evaluates when the input blur event was fired\n    * and re-calculate the date picker value.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    public onBlur(event): void {\n        this._isInEditMode = false;\n        this.calculateDate(event.target.value, event.type);\n    }\n\n    /**\n    * Evaluates when the input focus event was fired\n    * and re-calculate the editor text.\n    *\n    * @param event\n    * @hidden\n    */\n    public onFocus(): void {\n        this._isInEditMode = true;\n        if (this.value && this.invalidDate === '') {\n            this._transformedDate = this._getEditorDate(this.value);\n        }\n    }\n\n    /**\n    * Evaluates when the keydown event was fired for up/down keys\n    * to provide spinning of date parts.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    public onKeyDown(event) {\n        switch (event.key) {\n            case KEYS.UP_ARROW:\n            case KEYS.UP_ARROW_IE:\n                event.preventDefault();\n                event.stopPropagation();\n                this.spinValue(event.target.value, 1, event.type);\n                break;\n            case KEYS.DOWN_ARROW:\n            case KEYS.DOWN_ARROW_IE:\n                if (event.altKey) {\n                    this.openDialog(this.getInputGroupElement());\n                } else {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.spinValue(event.target.value, -1, event.type);\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n    * Evaluates when the mouse wheel event was fired\n    * to provide spinning of date parts.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    public onWheel(event) {\n        if (this._isInEditMode) {\n            event.preventDefault();\n            event.stopPropagation();\n            const sign = (event.deltaY > 0) ? -1 : 1;\n            this.spinValue(event.target.value, sign, event.type);\n        }\n    }\n\n    /**\n    * Evaluates when input event was fired in editor.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    public onInput(event) {\n        const targetValue = event.target.value;\n        const cursorPosition = this._getCursorPosition();\n        const checkInput = DatePickerUtil.checkForCompleteDateInput(this.dateFormatParts, targetValue);\n        this._isInEditMode = true;\n\n        if (targetValue !== DatePickerUtil.maskToPromptChars(this.inputMask)) {\n            this.isEmpty = false;\n        }\n\n        // If all date parts are completed, change the date-picker value, stay in edit mode\n        if (checkInput === 'complete' && event.inputType !== 'deleteContentBackward') {\n            this._transformedDate = targetValue;\n            this.calculateDate(targetValue, event.type);\n            this._setCursorPosition(cursorPosition);\n        } else if (checkInput === 'partial') {\n            // While editing, if one date part is deleted, date-picker value is set to null, the remaining input stays intact.\n            this.deselectDate();\n            requestAnimationFrame(() => {\n                this.getEditElement().value = targetValue;\n                this._setCursorPosition(cursorPosition);\n            });\n        } else if (checkInput === 'empty') {\n            // Total clean-up as input is deleted.\n            this.isEmpty = true;\n            this.deselectDate();\n        }\n    }\n\n    private emitValueChangeEvent(oldValue: Date, newValue: Date) {\n        if (!isEqual(oldValue, newValue)) {\n            this.valueChange.emit(newValue);\n        }\n    }\n\n    private calculateDate(dateString: string, invokedByEvent: string): void {\n        if (dateString !== '') {\n            const prevDateValue = this.value;\n            const inputValue = (invokedByEvent === 'blur') ? this.rawDateString : dateString;\n            const newDateArray = DatePickerUtil.parseDateArray(this.dateFormatParts, prevDateValue, inputValue);\n\n            if (newDateArray.state === DateState.Valid) {\n                const newValue = newDateArray.date;\n                // Restore the time part if any\n                if (prevDateValue) {\n                    newValue.setHours(prevDateValue.getHours());\n                    newValue.setMinutes(prevDateValue.getMinutes());\n                    newValue.setSeconds(prevDateValue.getSeconds());\n                    newValue.setMilliseconds(prevDateValue.getMilliseconds());\n                }\n\n                if (this.disabledDates === null\n                    || (this.disabledDates !== null && !isDateInRanges(newValue, this.disabledDates))) {\n                        const oldValue =  this.value;\n                        this.value = newValue;\n\n                        this.emitValueChangeEvent(oldValue, this.value );\n                        this.invalidDate = '';\n                } else {\n                    const args: IDatePickerDisabledDateEventArgs = {\n                        datePicker: this,\n                        currentValue: newValue,\n                    };\n                    this.onDisabledDate.emit(args);\n                }\n            } else {\n                const args: IDatePickerValidationFailedEventArgs = {\n                    datePicker: this,\n                    prevValue: prevDateValue\n                };\n                this.invalidDate = dateString;\n                this.onValidationFailed.emit(args);\n            }\n        }\n    }\n\n    private spinValue(inputValue: string, sign: number, eventType: string): void {\n        this._isInEditMode = true;\n        this.isEmpty = false;\n        const cursorPosition = this._getCursorPosition();\n\n        const modifiedInputValue =\n            DatePickerUtil.getModifiedDateInput(this.dateFormatParts, inputValue, cursorPosition, this.spinDelta * sign, this.isSpinLoop);\n\n        this.getEditElement().value = modifiedInputValue;\n        this._setCursorPosition(cursorPosition);\n\n        const checkInput = DatePickerUtil.checkForCompleteDateInput(this.dateFormatParts, modifiedInputValue);\n        if (checkInput === 'complete') {\n            this._isInEditMode = true;\n            this.calculateDate(modifiedInputValue, eventType);\n            this._setCursorPosition(cursorPosition);\n        }\n    }\n\n    private _onOpening(event: OverlayCancelableEventArgs) {\n        this._initializeCalendarContainer(event.componentRef.instance as IgxCalendarContainerComponent);\n        this.collapsed = false;\n    }\n\n    private _onOpened(): void {\n        this._onTouchedCallback();\n        this.onOpened.emit(this);\n\n        // TODO: remove this line after deprecating 'onOpen'\n        this._onOpen.emit(this);\n\n        if (this.calendar) {\n            this._focusCalendarDate();\n        }\n    }\n\n    private _onClosed(): void {\n        this.collapsed = true;\n        this._componentID = null;\n        this.onClosed.emit(this);\n\n        // TODO: remove this line after deprecating 'onClose'\n        this.onClose.emit(this);\n\n        if (this.getEditElement()) {\n            this.getEditElement().focus();\n        }\n    }\n\n    private _initializeCalendarContainer(componentInstance: IgxCalendarContainerComponent) {\n        this.calendar = componentInstance.calendar;\n        const isVertical = (this.vertical && this.mode === InteractionMode.Dialog);\n        this.calendar.hasHeader = this.hasHeader;\n        this.calendar.formatOptions = this.formatOptions;\n        this.calendar.formatViews = this.formatViews;\n        this.calendar.locale = this.locale;\n        this.calendar.vertical = isVertical;\n        this.calendar.weekStart = this.weekStart;\n        this.calendar.specialDates = this.specialDates;\n        this.calendar.disabledDates = this.disabledDates;\n        this.calendar.headerTemplate = this.headerTemplate;\n        this.calendar.subheaderTemplate = this.subheaderTemplate;\n        this.calendar.hideOutsideDays = this.hideOutsideDays;\n        this.calendar.monthsViewNumber = this.monthsViewNumber;\n        this.calendar.onSelection.pipe(takeUntil(this._destroy$)).subscribe((ev: Date) => this.handleSelection(ev));\n\n        if (this.value) {\n            this.calendar.value = this.value;\n            this.calendar.viewDate = this.value;\n        }\n\n        componentInstance.mode = this.mode;\n        componentInstance.vertical = isVertical;\n        componentInstance.cancelButtonLabel = this.cancelButtonLabel;\n        componentInstance.todayButtonLabel = this.todayButtonLabel;\n        componentInstance.datePickerActions = this.datePickerActionsDirective;\n\n        componentInstance.onClose.pipe(takeUntil(this._destroy$)).subscribe(() => this.closeCalendar());\n        componentInstance.onTodaySelection.pipe(takeUntil(this._destroy$)).subscribe(() => this.triggerTodaySelection());\n    }\n\n    // Focus a date, after the calendar appearance into DOM.\n    private _focusCalendarDate(): void {\n        requestAnimationFrame(() => {\n            this.calendar.daysView.focusActiveDate();\n        });\n    }\n\n    private _setLocaleToDate(value: Date): string {\n        if (isIE()) {\n            // this is a workaround fixing the following IE11 issue:\n            // IE11 has added character code 8206 (mark for RTL) to the output of toLocaleDateString() that\n            // precedes each portion that comprises the total date... For more information read this article:\n            // tslint:disable-next-line: max-line-length\n            // https://www.csgpro.com/blog/2016/08/a-bad-date-with-internet-explorer-11-trouble-with-new-unicode-characters-in-javascript-date-strings/\n            const localeDateStrIE = new Date(value.getFullYear(), value.getMonth(), value.getDate(),\n                value.getHours(), value.getMinutes(), value.getSeconds(), value.getMilliseconds());\n            return localeDateStrIE.toLocaleDateString(this.locale);\n        }\n\n        return value.toLocaleDateString(this.locale);\n    }\n\n    private _getCursorPosition(): number {\n        return this.getEditElement().selectionStart;\n    }\n\n    private _setCursorPosition(start: number, end: number = start): void {\n        requestAnimationFrame(() => {\n            this.getEditElement().setSelectionRange(start, end);\n        });\n    }\n\n    /**\n     * Apply custom user formatter upon date.\n     * @param formatter custom formatter function.\n     * @param date passed date\n     */\n    private _customFormatChecker(formatter: (_: Date) => string, date: Date) {\n        return this.formatter ? this.formatter(date) : this._setLocaleToDate(date);\n    }\n\n    /*\n    * Transforms the date according to the specified format when `IgxDatePickerComponent` is in edit mode\n    * using @angular/common formatDate method: https://angular.io/api/common/formatDate\n    * @param  value: string | number | Date\n    * @returns formatted string\n    */\n    private _getDisplayDate(value: any): string {\n        if (this.format && !this.formatter) {\n            const locale = this.locale || this.defaultLocale;\n            return formatDate(value, this.format, locale);\n        } else {\n            return this._customFormatChecker(this.formatter, value);\n        }\n    }\n\n    private _getEditorDate(value: any) {\n        const locale = this.locale || this.defaultLocale;\n        const changedValue = (value) ? formatDate(value, this.mask, locale) : '';\n        return DatePickerUtil.addPromptCharsEditMode(this.dateFormatParts, this.value, changedValue);\n    }\n\n    private _onTouchedCallback: () => void = () => { };\n\n    private _onChangeCallback: (_: Date) => void = () => { };\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDatePickerComponent, IgxCalendarContainerComponent, IgxDatePickerActionsDirective,\n        IgxDatePickerTemplateDirective, DatePickerDisplayValuePipe, DatePickerInputValuePipe],\n    exports: [IgxDatePickerComponent, IgxDatePickerTemplateDirective, IgxDatePickerActionsDirective,\n        DatePickerDisplayValuePipe, DatePickerInputValuePipe],\n    imports: [CommonModule, IgxIconModule, IgxInputGroupModule, IgxCalendarModule, IgxButtonModule,\n                IgxRippleModule, IgxMaskModule, IgxTextSelectionModule],\n    entryComponents: [IgxCalendarContainerComponent]\n})\nexport class IgxDatePickerModule { }\n","import { DOCUMENT } from '@angular/common';\nimport { Directive, HostBinding } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-dialog-title,[igxDialogTitle]'\n})\nexport class IgxDialogTitleDirective {\n\n    @HostBinding('class.igx-dialog__window-title')\n    public defaultStyle = true;\n }\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-dialog-actions,[igxDialogActions]'\n})\nexport class IgxDialogActionsDirective {\n\n    @HostBinding('class.igx-dialog__window-actions')\n    public defaultClass = true;\n }\n","import { useAnimation } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    ViewChild,\n    AfterContentInit\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxDialogActionsDirective, IgxDialogTitleDirective } from './dialog.directives';\nimport { IgxToggleModule, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { OverlaySettings, GlobalPositionStrategy, NoOpScrollStrategy, PositionSettings } from '../services';\nimport { slideInBottom, slideOutTop } from '../animations/slide/index';\nimport { IgxFocusModule } from '../directives/focus/focus.directive';\nimport { IBaseEventArgs } from '../core/utils';\n\nlet DIALOG_ID = 0;\n/**\n * **Ignite UI for Angular Dialog Window** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/dialog.html)\n *\n * The Ignite UI Dialog Window presents a dialog window to the user which can simply display messages or display\n * more complicated visuals such as a user sign-in form.  It also provides a right and left button\n * which can be used for custom actions.\n *\n * Example:\n * ```html\n * <button (click)=\"form.open()\">Show Dialog</button>\n * <igx-dialog #form title=\"Sign In\" rightButtonLabel=\"OK\">\n *   <div>\n *     <input type=\"text\" igxInput/>\n *     <label igxLabel>Username</label>\n *   </div>\n *   <div>\n *     <input type=\"password\" igxInput/>\n *     <label igxLabel>Password</label>\n *   </div>\n * </igx-dialog>\n * ```\n */\n@Component({\n    selector: 'igx-dialog',\n    templateUrl: 'dialog-content.component.html'\n})\nexport class IgxDialogComponent implements IToggleView, OnInit, OnDestroy, AfterContentInit {\n    private static NEXT_ID = 1;\n    private static readonly DIALOG_CLASS = 'igx-dialog';\n\n    @ViewChild(IgxToggleDirective, { static: true })\n    public toggleRef: IgxToggleDirective;\n\n    /**\n    * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n    *```html\n    *<igx-dialog [id]=\"'igx-dialog-56'\" #alert title=\"Notification\" leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n    *```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-dialog-${DIALOG_ID++}`;\n\n    @Input()\n    get isModal() {\n        return this._isModal;\n    }\n\n    set isModal(val: boolean) {\n        this._overlayDefaultSettings.modal = val;\n        this._isModal = val;\n    }\n\n    /**\n    * An @Input property controlling the `title` of the dialog.\n    *```html\n    *<igx-dialog title=\"Notification\" #alert leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n    *```\n    */\n    @Input()\n    public title = '';\n\n    /**\n     *  An @Input property controlling the `message` of the dialog.\n     *```html\n     *<igx-dialog message=\"Your email was sent!\" #alert leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public message = '';\n\n    /**\n     * An @Input property to set the `label` of the left button of the dialog.\n     *```html\n     *<igx-dialog leftButtonLabel=\"OKAY\" #alert title=\"Notification\"  (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonLabel = '';\n\n    /**\n     * An @Input property to set the left button `type`. The types are `flat`, `raised` and `fab`.\n     * The `flat` type button is a rectangle and doesn't have a shadow. <br>\n     * The `raised` type button is also a rectangle but has a shadow. <br>\n     * The `fab` type button is a circle with a shadow. <br>\n     * The default value is `flat`.\n     *```html\n     *<igx-dialog leftButtonType=\"raised\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonType = 'flat';\n    /**\n     * An @Input property to set the left button color. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog leftButtonColor=\"yellow\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonColor = '';\n\n    /**\n     * An @Input property to set the left button `background-color`. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog leftButtonBackgroundColor=\"black\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonBackgroundColor = '';\n\n    /**\n     * An @Input property to set the left button `ripple`. The `ripple` animates a click/tap to a component as a series of fading waves.\n     * The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog leftButtonRipple=\"green\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonRipple = '';\n\n    /**\n     * An @Input property to set the `label` of the right button of the dialog.\n     *```html\n     *<igx-dialog rightButtonLabel=\"OKAY\" #alert title=\"Notification\"  (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonLabel = '';\n\n    /**\n     * An @Input property to set the right button `type`. The types are `flat`, `raised` and `fab`.\n     * The `flat` type button is a rectangle and doesn't have a shadow. <br>\n     * The `raised` type button is also a rectangle but has a shadow. <br>\n     * The `fab` type button is a circle with a shadow. <br>\n     * The default value is `flat`.\n     *```html\n     *<igx-dialog rightButtonType=\"fab\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonType = 'flat';\n\n    /**\n     * An @Input property to set the right button `color`. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog rightButtonColor=\"yellow\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonColor = '';\n\n    /**\n     * An @Input property to set the right button `background-color`. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog rightButtonBackgroundColor=\"black\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonBackgroundColor = '';\n\n    /**\n     * An @Input property to set the right button `ripple`.\n     *```html\n     *<igx-dialog rightButtonRipple=\"green\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonRipple = '';\n\n    /**\n     * An @Input property that allows you to enable the \"close on click outside the dialog\". By default it's disabled.\n     *```html\n     *<igx-dialog closeOnOutsideSelect=\"true\" leftButtonLabel=\"Cancel\" (onLeftButtonSelect)=\"dialog.close()\"\n     *rightButtonLabel=\"OK\" rightButtonRipple=\"#4CAF50\" (onRightButtonSelect)=\"onDialogOKSelected($event)\">\n     *</igx-dialog>\n     *```\n     */\n    @Input()\n    get closeOnOutsideSelect() {\n        return this._closeOnOutsideSelect;\n    }\n\n    set closeOnOutsideSelect(val: boolean) {\n        this._overlayDefaultSettings.closeOnOutsideClick = val;\n        this._closeOnOutsideSelect = val;\n    }\n\n    /**\n     * Get the position and animation settings used by the dialog.\n     * ```typescript\n     * @ViewChild('alert', { static: true }) public alert: IgxDialogComponent;\n     * let currentPosition: PositionSettings = this.alert.positionSettings\n     * ```\n     */\n    @Input()\n    public get positionSettings(): PositionSettings {\n        return this._positionSettings;\n    }\n\n    /**\n     * Set the position and animation settings used by the dialog.\n     * ```typescript\n     * import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     * ...\n     * @ViewChild('alert', { static: true }) public alert: IgxDialogComponent;\n     *  public newPositionSettings: PositionSettings = {\n     *      openAnimation: useAnimation(slideInTop, { params: { duration: '2000ms' } }),\n     *      closeAnimation: useAnimation(slideOutBottom, { params: { duration: '2000ms'} }),\n     *      horizontalDirection: HorizontalAlignment.Left,\n     *      verticalDirection: VerticalAlignment.Middle,\n     *      horizontalStartPoint: HorizontalAlignment.Left,\n     *      verticalStartPoint: VerticalAlignment.Middle,\n     *      minSize: { height: 100, width: 100 }\n     *  };\n     * this.alert.positionSettings = this.newPositionSettings;\n     * ```\n     */\n    public set positionSettings(settings: PositionSettings) {\n        this._positionSettings = settings;\n        this._overlayDefaultSettings.positionStrategy = new GlobalPositionStrategy(this._positionSettings);\n    }\n\n    /**\n     * An event that is emitted when the dialog is opened.\n     *```html\n     *<igx-dialog (onOpen)=\"onDialogOpenHandler($event)\" (onLeftButtonSelect)=\"dialog.close()\" rightButtonLabel=\"OK\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onOpen = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * An event that is emitted when the dialog is closed.\n     *```html\n     *<igx-dialog (onClose)=\"onDialogCloseHandler($event)\" title=\"Confirmation\" leftButtonLabel=\"Cancel\" rightButtonLabel=\"OK\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onClose = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * An event that is emitted when the left button is clicked.\n     *```html\n     *<igx-dialog (onLeftButtonSelect)=\"onDialogOKSelected($event)\" #dialog leftButtonLabel=\"OK\" rightButtonLabel=\"Cancel\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onLeftButtonSelect = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * An event that is emitted when the right button is clicked.\n     * ```html\n     *<igx-dialog (onRightButtonSelect)=\"onDialogOKSelected($event)\"\n     *#dialog title=\"Confirmation\" (onLeftButtonSelect)=\"dialog.close()\" rightButtonLabel=\"OK\"\n     *rightButtonRipple=\"#4CAF50\" closeOnOutsideSelect=\"true\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onRightButtonSelect = new EventEmitter<IDialogEventArgs>();\n\n    private _positionSettings: PositionSettings = {\n        openAnimation: useAnimation(slideInBottom, { params: { fromPosition: 'translateY(100%)' } }),\n        closeAnimation: useAnimation(slideOutTop, { params: { toPosition: 'translateY(-100%)' } })\n    };\n\n    private _overlayDefaultSettings: OverlaySettings;\n    private _closeOnOutsideSelect = false;\n    private _isModal = true;\n    protected destroy$ = new Subject<boolean>();\n\n    /**\n     * @hidden\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * The default `tabindex` attribute for the component\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = -1;\n\n    private _titleId: string;\n\n    /**\n     * Returns the value of state. Possible state values are \"open\" or \"close\".\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogState = this.dialog.state;\n     *}\n     *```\n     */\n    get state(): string {\n        return this.isOpen ? 'open' : 'close';\n    }\n\n    /**\n     * Returns whether the dialog is visible to the end user.\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogOpen = this.dialog.isOpen;\n     *}\n     * ```\n     */\n    @Input()\n    get isOpen() {\n        return !this.toggleRef.collapsed;\n    }\n\n    @HostBinding('class.igx-dialog--hidden')\n    get isCollapsed() {\n        return this.toggleRef.collapsed;\n    }\n\n    /**\n     *Returns the value of the role of the dialog. The valid values are `dialog`, `alertdialog`, `alert`.\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogRole = this.dialog.role;\n     *}\n     * ```\n     */\n    @Input()\n    get role() {\n        if (this.leftButtonLabel !== '' && this.rightButtonLabel !== '') {\n            return 'dialog';\n        } else if (\n            this.leftButtonLabel !== '' ||\n            this.rightButtonLabel !== ''\n        ) {\n            return 'alertdialog';\n        } else {\n            return 'alert';\n        }\n    }\n\n    /**\n     *Returns the value of the title id.\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogTitle = this.dialog.titleId;\n     *}\n     * ```\n     */\n    @Input()\n    get titleId() {\n        return this._titleId;\n    }\n\n    constructor(\n        private elementRef: ElementRef,\n        @Optional() private navService: IgxNavigationService\n    ) {\n        this._titleId = IgxDialogComponent.NEXT_ID++ + '_title';\n\n        this._overlayDefaultSettings = {\n            positionStrategy: new GlobalPositionStrategy(this._positionSettings),\n            scrollStrategy: new NoOpScrollStrategy(),\n            modal: this.isModal,\n            closeOnOutsideClick: this.closeOnOutsideSelect\n        };\n    }\n\n    ngAfterContentInit() {\n        this.toggleRef.onClosing.pipe(takeUntil(this.destroy$)).subscribe(() => this.emitCloseFromDialog());\n    }\n\n    private emitCloseFromDialog() {\n        this.onClose.emit({ dialog: this, event: null });\n    }\n\n    /**\n     * A method that opens the dialog.\n     * @memberOf {@link IgxDialogComponent}\n     *```html\n     *<button (click)=\"dialog.open() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     *<igx-dialog #dialog></igx-dialog>\n     *```\n     */\n    public open(overlaySettings: OverlaySettings = this._overlayDefaultSettings) {\n        this.toggleRef.open(overlaySettings);\n        this.onOpen.emit({ dialog: this, event: null });\n        if (!this.leftButtonLabel && !this.rightButtonLabel) {\n            this.toggleRef.element.focus();\n        }\n    }\n\n    /**\n     *A method that that closes the dialog.\n     *@memberOf {@link IgxDialogComponent}\n     *```html\n     *<button (click)=\"dialog.close() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     *<igx-dialog #dialog></igx-dialog>\n     *```\n     */\n    public close() {\n        // `onClose` will emit from `toggleRef.onClosing` subscription\n        this.toggleRef.close();\n    }\n\n\n    /**\n     * A method that opens/closes the dialog.\n     *@memberOf {@link IgxDialogComponent}\n     *```html\n     *<button (click)=\"dialog.toggle() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     *<igx-dialog #dialog></igx-dialog>\n     *```\n     */\n    public toggle() {\n        this.isOpen ? this.close() : this.open();\n    }\n\n    /**\n     * @hidden\n     */\n    public onDialogSelected(event) {\n        event.stopPropagation();\n        if (\n            this.isOpen &&\n            this.closeOnOutsideSelect &&\n            event.target.classList.contains(IgxDialogComponent.DIALOG_CLASS)\n        ) {\n            this.close();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onInternalLeftButtonSelect(event) {\n        this.onLeftButtonSelect.emit({ dialog: this, event });\n    }\n\n    /**\n     * @hidden\n     */\n    public onInternalRightButtonSelect(event) {\n        this.onRightButtonSelect.emit({ dialog: this, event });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        if (this.navService && this.id) {\n            this.navService.add(this.id, this);\n        }\n    }\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        if (this.navService && this.id) {\n            this.navService.remove(this.id);\n        }\n\n    }\n\n}\n\nexport interface IDialogEventArgs extends IBaseEventArgs {\n    dialog: IgxDialogComponent;\n    event: Event;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDialogComponent, IgxDialogTitleDirective, IgxDialogActionsDirective],\n    exports: [IgxDialogComponent, IgxDialogTitleDirective, IgxDialogActionsDirective],\n    imports: [CommonModule, IgxToggleModule, IgxButtonModule, IgxRippleModule, IgxFocusModule]\n})\nexport class IgxDialogModule { }\n","import { Injectable, EventEmitter, NgZone } from '@angular/core';\nimport { IGridEditEventArgs } from '../grids/grid-base.component';\n\nexport interface GridSelectionRange {\n    rowStart: number;\n    rowEnd: number;\n    columnStart: string | number;\n    columnEnd: string | number;\n}\n\nexport interface ISelectionNode {\n    row: number;\n    column: number;\n    layout?: IMultiRowLayoutNode;\n    isSummaryRow?: boolean;\n}\n\nexport interface IMultiRowLayoutNode {\n    rowStart: number;\n    colStart: number;\n    rowEnd: number;\n    colEnd: number;\n    columnVisibleIndex: number;\n}\n\ninterface ISelectionKeyboardState {\n    node: null | ISelectionNode;\n    shift: boolean;\n    range: GridSelectionRange;\n    active: boolean;\n}\n\ninterface ISelectionPointerState extends ISelectionKeyboardState {\n    ctrl: boolean;\n    primaryButton: boolean;\n}\n\ntype SelectionState = ISelectionKeyboardState | ISelectionPointerState;\n\n\n// TODO: Refactor - export in a separate file\n\nexport class IgxRow {\n    transactionState: any;\n    state: any;\n    newData: any;\n\n    constructor(public id: any, public index: number, public data: any) {}\n\n    createEditEventArgs(): IGridEditEventArgs {\n        return {\n            rowID: this.id,\n            oldValue: { ... this.data },\n            newValue: this.newData,\n            cancel: false\n        };\n    }\n}\n\nexport class IgxCell {\n\n    primaryKey: any;\n    state: any;\n\n    constructor(\n        public id,\n        public rowIndex: number,\n        public column,\n        public value: any,\n        public editValue: any,\n        public rowData: any) {}\n\n    castToNumber(value: any): any {\n        if (this.column.dataType === 'number' && !this.column.inlineEditorTemplate) {\n            const v = parseFloat(value);\n            return !isNaN(v) && isFinite(v) ? v : 0;\n        }\n        return value;\n    }\n\n    createEditEventArgs(): IGridEditEventArgs {\n        return {\n            rowID: this.id.rowID,\n            cellID: this.id,\n            oldValue: this.value,\n            newValue: this.editValue,\n            cancel: false\n        };\n    }\n}\n\n@Injectable()\nexport class IgxGridCRUDService {\n\n    grid;\n    cell: IgxCell | null = null;\n    row: IgxRow | null = null;\n\n    createCell(cell): IgxCell {\n        return new IgxCell(cell.cellID, cell.rowIndex, cell.column, cell.value, cell.value, cell.row.rowData);\n    }\n\n    createRow(cell: IgxCell): IgxRow {\n        return new IgxRow(cell.id.rowID, cell.rowIndex, cell.rowData);\n    }\n\n    sameRow(rowID): boolean {\n        return this.row && this.row.id === rowID;\n    }\n\n    sameCell(cell: IgxCell): boolean {\n        return (this.cell.id.rowID === cell.id.rowID &&\n            this.cell.id.columnID === cell.id.columnID);\n    }\n\n    get inEditMode(): boolean {\n        return !!this.cell;\n    }\n\n    get rowEditing(): boolean {\n        return this.grid.rowEditable;\n    }\n\n    get primaryKey(): any {\n        return this.grid.primaryKey;\n    }\n\n    beginRowEdit() {\n        if (this.grid.rowEditable && (this.grid.primaryKey === undefined || this.grid.primaryKey === null)) {\n            console.warn('The grid must have a `primaryKey` specified when using `rowEditable`!');\n        }\n        this.row = this.createRow(this.cell);\n        const args = {\n            rowID: this.row.id,\n            oldValue: this.row.data,\n            cancel: false\n        };\n        this.grid.onRowEditEnter.emit(args);\n        if (args.cancel) {\n            this.endRowEdit();\n            return;\n        }\n        this.row.transactionState = this.grid.transactions.getAggregatedValue(this.row.id, true);\n        this.grid.transactions.startPending();\n        this.grid.openRowOverlay(this.row.id);\n    }\n\n\n    endRowEdit() {\n        this.row = null;\n    }\n\n    begin(cell): void {\n        const newCell = this.createCell(cell);\n        newCell.primaryKey = this.primaryKey;\n        const args = {\n            cellID: newCell.id,\n            rowID: newCell.id.rowID,\n            oldValue: newCell.value,\n            cancel: false\n        };\n\n        this.grid.onCellEditEnter.emit(args);\n\n        if (args.cancel) {\n            this.end();\n            return;\n        }\n\n        if (this.rowEditing) {\n            if (this.row && !this.sameRow(newCell.id.rowID)) {\n                this.grid.endEdit(true);\n                this.cell = newCell;\n                this.beginRowEdit();\n                return;\n            }\n\n            this.cell = newCell;\n\n            if (!this.row) {\n                this.beginRowEdit();\n                return;\n            }\n        } else {\n            this.cell = newCell;\n            this.endRowEdit();\n        }\n    }\n\n    end(): void {\n        this.cell = null;\n    }\n\n\n    isInEditMode(rowIndex: number, columnIndex: number): boolean {\n        if (!this.cell) {\n            return false;\n        }\n        return this.cell.column.index === columnIndex && this.cell.rowIndex === rowIndex;\n    }\n}\n\n\n@Injectable()\nexport class IgxGridSelectionService {\n    grid;\n    dragMode = false;\n    activeElement: ISelectionNode | null;\n    keyboardState = {} as ISelectionKeyboardState;\n    pointerState = {} as ISelectionPointerState;\n\n\n    selection = new Map<number, Set<number>>();\n    temp = new Map<number, Set<number>>();\n    _ranges: Set<string> = new Set<string>();\n    _selectionRange: Range;\n    rowSelection: Set<any> = new Set<any>();\n    private allRowsSelected: boolean;\n\n    /**\n     * Returns the current selected ranges in the grid from both\n     * keyboard and pointer interactions\n     */\n    get ranges(): GridSelectionRange[] {\n\n        // The last action was keyboard + shift selection -> add it\n        this.addKeyboardRange();\n\n        const ranges = Array.from(this._ranges).map(range => JSON.parse(range));\n\n        // No ranges but we have a focused cell -> add it\n        if (!ranges.length && this.activeElement && this.grid.isCellSelectable) {\n            ranges.push(this.generateRange(this.activeElement));\n        }\n\n        return ranges;\n    }\n\n    get primaryButton(): boolean {\n        return this.pointerState.primaryButton;\n    }\n\n    set primaryButton(value: boolean) {\n        this.pointerState.primaryButton = value;\n    }\n\n    constructor(private zone: NgZone) {\n        this.initPointerState();\n        this.initKeyboardState();\n    }\n\n    /**\n     * Resets the keyboard state\n     */\n    initKeyboardState(): void {\n        this.keyboardState.node = null;\n        this.keyboardState.shift = false;\n        this.keyboardState.range = null;\n        this.keyboardState.active = false;\n    }\n\n    /**\n     * Resets the pointer state\n     */\n    initPointerState(): void {\n        this.pointerState.node = null;\n        this.pointerState.ctrl = false;\n        this.pointerState.shift = false;\n        this.pointerState.range = null;\n        this.pointerState.primaryButton = true;\n    }\n\n    /**\n     * Adds a single node.\n     * Single clicks | Ctrl + single clicks on cells is the usual case.\n     */\n    add(node: ISelectionNode, addToRange = true): void {\n        this.selection.has(node.row) ? this.selection.get(node.row).add(node.column) :\n            this.selection.set(node.row, new Set<number>()).get(node.row).add(node.column);\n\n        if (addToRange) { this._ranges.add(JSON.stringify(this.generateRange(node))); }\n    }\n\n    /**\n     * Adds the active keyboard range selection (if any) to the `ranges` meta.\n     */\n    addKeyboardRange(): void {\n        if (this.keyboardState.range) {\n            this._ranges.add(JSON.stringify(this.keyboardState.range));\n        }\n    }\n\n    remove(node: ISelectionNode): void {\n        if (this.selection.has(node.row)) {\n            this.selection.get(node.row).delete(node.column);\n        }\n        if (this.isActiveNode(node)) {\n            this.activeElement = null;\n        }\n        this._ranges.delete(JSON.stringify(this.generateRange(node)));\n    }\n\n    isInMap(node: ISelectionNode): boolean {\n        return (this.selection.has(node.row) && this.selection.get(node.row).has(node.column)) ||\n            (this.temp.has(node.row) && this.temp.get(node.row).has(node.column));\n    }\n\n    selected(node: ISelectionNode): boolean {\n        return (this.isActiveNode(node) && this.grid.isCellSelectable) || this.isInMap(node);\n    }\n\n    isActiveNode(node: ISelectionNode): boolean {\n        if (this.activeElement) {\n            const isActive = this.activeElement.column === node.column && this.activeElement.row === node.row;\n            if (this.grid.hasColumnLayouts) {\n                const layout = this.activeElement.layout;\n                return isActive && this.isActiveLayout(layout, node.layout);\n            }\n            return isActive;\n        }\n        return false;\n    }\n\n    isActiveLayout(current: IMultiRowLayoutNode, target: IMultiRowLayoutNode): boolean {\n        return current.columnVisibleIndex === target.columnVisibleIndex;\n    }\n\n    addRangeMeta(node: ISelectionNode, state?: SelectionState): void {\n        this._ranges.add(JSON.stringify(this.generateRange(node, state)));\n    }\n\n    removeRangeMeta(node: ISelectionNode, state?: SelectionState): void {\n        this._ranges.delete(JSON.stringify(this.generateRange(node, state)));\n    }\n\n    /**\n     * Generates a new selection range from the given `node`.\n     * If `state` is passed instead it will generate the range based on the passed `node`\n     * and the start node of the `state`.\n     */\n    generateRange(node: ISelectionNode, state?: SelectionState): GridSelectionRange {\n        if (!state) {\n            return {\n                rowStart: node.row,\n                rowEnd: node.row,\n                columnStart: node.column,\n                columnEnd: node.column\n            };\n        }\n\n        const { row, column } = state.node;\n        const rowStart = Math.min(node.row, row);\n        const rowEnd = Math.max(node.row, row);\n        const columnStart = Math.min(node.column, column);\n        const columnEnd = Math.max(node.column, column);\n\n        return { rowStart, rowEnd, columnStart, columnEnd };\n    }\n\n    /**\n     *\n     */\n    keyboardStateOnKeydown(node: ISelectionNode, shift: boolean, shiftTab: boolean): void {\n        this.keyboardState.active = true;\n        this.initPointerState();\n        this.keyboardState.shift = shift && !shiftTab;\n\n        // Kb navigation with shift and no previous node.\n        // Clear the current selection init the start node.\n        if (this.keyboardState.shift && !this.keyboardState.node) {\n            this.clear();\n            this.keyboardState.node = node;\n        }\n    }\n\n    keyboardStateOnFocus(node: ISelectionNode, emitter: EventEmitter<GridSelectionRange>, dom): void {\n        const kbState = this.keyboardState;\n\n        // Focus triggered by keyboard navigation\n        if (kbState.active) {\n            if (isChromium()) {\n                this._moveSelectionChrome(dom);\n            }\n            // Start generating a range if shift is hold\n            if (kbState.shift) {\n                this.dragSelect(node, kbState);\n                kbState.range = this.generateRange(node, kbState);\n                emitter.emit(this.generateRange(node, kbState));\n                return;\n            }\n\n            this.initKeyboardState();\n            this.clear();\n            this.add(node);\n        }\n    }\n\n    pointerDown(node: ISelectionNode, shift: boolean, ctrl: boolean): void {\n        this.addKeyboardRange();\n        this.initKeyboardState();\n        this.pointerState.ctrl = ctrl;\n        this.pointerState.shift = shift;\n\n        // No ctrl key pressed - no multiple selection\n        if (!ctrl) {\n            this.clear();\n        }\n\n        if (shift) {\n            // No previously 'clicked' node. Use the last active node.\n            if (!this.pointerState.node) {\n                this.pointerState.node = this.activeElement || node;\n            }\n            this.pointerDownShiftKey(node);\n            this.clearTextSelection();\n            return;\n        }\n\n        this.removeRangeMeta(node);\n        this.pointerState.node = node;\n    }\n\n    pointerDownShiftKey(node: ISelectionNode): void {\n        this.clear();\n        this.selectRange(node, this.pointerState);\n    }\n\n    mergeMap(target: Map<number, Set<number>>, source: Map<number, Set<number>>): void {\n        const iterator = source.entries();\n        let pair = iterator.next();\n        let key: number;\n        let value: Set<number>;\n\n        while (!pair.done) {\n            [key, value] = pair.value;\n            if (target.has(key)) {\n                const newValue = target.get(key);\n                value.forEach(record => newValue.add(record));\n                target.set(key, newValue);\n            } else {\n                target.set(key, value);\n            }\n            pair = iterator.next();\n        }\n    }\n\n    pointerEnter(node: ISelectionNode, event: PointerEvent): boolean {\n        // https://www.w3.org/TR/pointerevents/#the-button-property\n        this.dragMode = event.buttons === 1 && event.button === -1;\n        if (!this.dragMode) {\n            return false;\n        }\n        this.clearTextSelection();\n\n        // If the users triggers a drag-like event by first clicking outside the grid cells\n        // and then enters in the grid body we may not have a initial pointer starting node.\n        // Assume the first pointerenter node is where we start.\n        if (!this.pointerState.node) {\n            this.pointerState.node = node;\n        }\n\n        this.pointerState.ctrl ? this.selectRange(node, this.pointerState, this.temp) :\n            this.dragSelect(node, this.pointerState);\n        return true;\n    }\n\n    pointerUp(node: ISelectionNode, emitter: EventEmitter<GridSelectionRange>): boolean {\n        if (this.dragMode) {\n            this.restoreTextSelection();\n            this.addRangeMeta(node, this.pointerState);\n            this.mergeMap(this.selection, this.temp);\n            this.zone.runTask(() => emitter.emit(this.generateRange(node, this.pointerState)));\n            this.temp.clear();\n            this.dragMode = false;\n            return true;\n        }\n\n        if (this.pointerState.shift) {\n            this.clearTextSelection();\n            this.restoreTextSelection();\n            this.addRangeMeta(node, this.pointerState);\n            emitter.emit(this.generateRange(node, this.pointerState));\n            return true;\n        }\n\n        this.add(node);\n        return false;\n    }\n\n    selectRange(node: ISelectionNode, state: SelectionState, collection: Map<number, Set<number>> = this.selection): void {\n        if (collection === this.temp) {\n            collection.clear();\n        }\n        const { rowStart, rowEnd, columnStart, columnEnd } = this.generateRange(node, state);\n        for (let i = rowStart; i <= rowEnd; i++) {\n            for (let j = columnStart as number; j <= columnEnd; j++) {\n                collection.has(i) ? collection.get(i).add(j) :\n                    collection.set(i, new Set<number>()).get(i).add(j);\n            }\n        }\n    }\n\n    dragSelect(node: ISelectionNode, state: SelectionState): void {\n        if (!this.pointerState.ctrl) {\n            this.selection.clear();\n        }\n        this.selectRange(node, state);\n    }\n\n    clear(clearAcriveEl = false): void {\n        if (clearAcriveEl) { this.activeElement = null; }\n        this.selection.clear();\n        this.temp.clear();\n        this._ranges.clear();\n    }\n\n    clearTextSelection(): void {\n        const selection = window.getSelection();\n        if (selection.rangeCount) {\n            this._selectionRange = selection.getRangeAt(0);\n            this._selectionRange.collapse(true);\n            selection.removeAllRanges();\n        }\n    }\n\n    restoreTextSelection(): void {\n        const selection = window.getSelection();\n        if (!selection.rangeCount) {\n            selection.addRange(this._selectionRange || document.createRange());\n        }\n    }\n\n    /**\n     * (â¯Â°â¡Â°ï¼â¯ï¸µ â»ââ»\n     * Chrome and Chromium don't care about the active\n     * range after keyboard navigation, thus this.\n     */\n    _moveSelectionChrome(node: Node) {\n        const selection = window.getSelection();\n        selection.removeAllRanges();\n        const range = new Range();\n        range.selectNode(node);\n        range.collapse(true);\n        selection.addRange(range);\n    }\n\n    /** Returns array of the selected row id's. */\n    getSelectedRows(): Array<any> {\n        return this.rowSelection.size ? Array.from(this.rowSelection.keys()) : [];\n    }\n\n    /** Clears row selection, if filtering is applied clears only selected rows from filtered data. */\n    clearRowSelection(event?): void {\n        const removedRec = this.isFilteringApplied() ?\n            this.getRowIDs(this.allData).filter(rID => this.isRowSelected(rID)) : this.getSelectedRows();\n        const newSelection = this.isFilteringApplied() ? this.getSelectedRows().filter(x => !removedRec.includes(x)) : [];\n        this.emitRowSelectionEvent(newSelection, [], removedRec, event);\n    }\n\n    /** Select all rows, if filtering is applied select only from filtered data. */\n    selectAllRows(event?) {\n        const allRowIDs = this.getRowIDs(this.allData);\n        const addedRows =  allRowIDs.filter((rID) => !this.isRowSelected(rID));\n        const newSelection = this.rowSelection.size ? this.getSelectedRows().concat(addedRows) : addedRows;\n\n        this.emitRowSelectionEvent(newSelection, addedRows, [], event);\n    }\n\n    /** Select the specified row and emit event. */\n    selectRowById(rowID, clearPrevSelection?, event?): void {\n        if (!this.grid.isRowSelectable || this.isRowDeleted(rowID)) { return; }\n        clearPrevSelection = !this.grid.isMultiRowSelectionEnabled || clearPrevSelection;\n\n        const newSelection = clearPrevSelection ? [rowID] : this.getSelectedRows().indexOf(rowID) !== -1 ?\n            this.getSelectedRows() : [...this.getSelectedRows(), rowID];\n        const removed = clearPrevSelection ? this.getSelectedRows() : [];\n        this.emitRowSelectionEvent(newSelection, [rowID], removed, event);\n    }\n\n    /** Deselect the specified row and emit event. */\n    deselectRow(rowID, event?): void {\n        if (!this.isRowSelected(rowID)) { return; }\n        const newSelection = this.getSelectedRows().filter(r => r !== rowID);\n        if (this.rowSelection.size && this.rowSelection.has(rowID)) {\n            this.emitRowSelectionEvent(newSelection, [], [rowID], event);\n        }\n    }\n\n    /** Select specified rows. No event is emitted. */\n    selectRowsWithNoEvent(rowIDs: any[], clearPrevSelection?): void {\n        if (clearPrevSelection) { this.rowSelection.clear(); }\n        rowIDs.forEach(rowID => { this.rowSelection.add(rowID); });\n        this.allRowsSelected = undefined;\n    }\n\n    /** Deselect specified rows. No event is emitted. */\n    deselectRowsWithNoEvent(rowIDs: any[]): void  {\n        rowIDs.forEach(rowID => this.rowSelection.delete(rowID));\n        this.allRowsSelected = undefined;\n    }\n\n    isRowSelected(rowID): boolean {\n        return this.rowSelection.size > 0 && this.rowSelection.has(rowID);\n    }\n\n    /** Select range from last selected row to the current specified row.*/\n    selectMultipleRows(rowID, rowData, event?): void  {\n        this.allRowsSelected = undefined;\n        if (!this.rowSelection.size || this.isRowDeleted(rowID)) {\n            this.selectRowById(rowID);\n            return;\n        }\n        const gridData = this.allData;\n        const lastRowID = this.getSelectedRows()[this.rowSelection.size - 1];\n        const currIndex = gridData.indexOf(this.getRowDataById(lastRowID));\n        const newIndex = gridData.indexOf(rowData);\n        const rows = gridData.slice(Math.min(currIndex, newIndex), Math.max(currIndex, newIndex) + 1);\n\n        const added = this.getRowIDs(rows).filter(rID => !this.isRowSelected(rID));\n        const newSelection = this.getSelectedRows().concat(added);\n\n        this.emitRowSelectionEvent(newSelection, added, [], event);\n    }\n\n    areAllRowSelected(): boolean {\n        if (!this.grid.data) { return false; }\n        if (this.allRowsSelected !== undefined) { return this.allRowsSelected; }\n\n        const dataItemsID = this.getRowIDs(this.allData);\n        return this.allRowsSelected = Math.min(this.rowSelection.size, dataItemsID.length) > 0 &&\n            new Set(Array.from(this.rowSelection.values()).concat(dataItemsID)).size === this.rowSelection.size;\n    }\n\n    hasSomeRowSelected(): boolean {\n        const filteredData = this.isFilteringApplied() ?\n            this.getRowIDs(this.grid.filteredData).some(rID => this.isRowSelected(rID)) : true;\n        return this.rowSelection.size > 0 && filteredData && !this.areAllRowSelected();\n    }\n\n    public get filteredSelectedRowIds(): any[] {\n        return this.isFilteringApplied() ?\n            this.getRowIDs(this.allData).filter(rowID => this.isRowSelected(rowID)) :\n            this.getSelectedRows().filter(rowID => !this.isRowDeleted(rowID));\n    }\n\n    public emitRowSelectionEvent(newSelection, added, removed, event?): boolean {\n        const currSelection = this.getSelectedRows();\n        if (this.areEqualCollections(currSelection, newSelection)) { return; }\n\n        const args = {\n            oldSelection: currSelection, newSelection: newSelection,\n            added: added, removed: removed, event: event, cancel: false\n        };\n        this.grid.onRowSelectionChange.emit(args);\n        if (args.cancel) { return; }\n        this.selectRowsWithNoEvent(args.newSelection, true);\n    }\n\n    public getRowDataById(rowID): Object {\n        if (!this.grid.primaryKey) { return rowID; }\n        const rowIndex = this.getRowIDs(this.grid.gridAPI.get_all_data(true)).indexOf(rowID);\n        return rowIndex < 0 ? {} : this.grid.gridAPI.get_all_data(true)[rowIndex];\n    }\n\n    public getRowIDs(data): Array<any> {\n        return this.grid.primaryKey && data.length ? data.map(rec => rec[this.grid.primaryKey]) : data;\n    }\n\n    public clearHeaderCBState(): void  {\n        this.allRowsSelected = undefined;\n    }\n\n    /**Clear rowSelection and update checkbox state*/\n    public clearAllSelectedRows(): void {\n        this.rowSelection.clear();\n        this.clearHeaderCBState();\n    }\n\n    /** Returns all data in the grid, with applied filtering and sorting and without deleted rows. */\n    public get allData(): Array<any> {\n        const allData = this.isFilteringApplied() || this.grid.sortingExpressions.length ?\n            this.grid.filteredSortedData : this.grid.gridAPI.get_all_data(true);\n        return allData.filter(rData => !this.isRowDeleted(this.grid.gridAPI.get_row_id(rData)));\n    }\n\n    private areEqualCollections(first, second): boolean {\n        return first.length === second.length && new Set(first.concat(second)).size === first.length;\n    }\n\n    private isFilteringApplied(): boolean {\n        return this.grid.filteringExpressionsTree.filteringOperands.length > 0;\n    }\n\n    private isRowDeleted(rowID): boolean {\n        return this.grid.gridAPI.row_deleted_transaction(rowID);\n    }\n}\n\nexport function isChromium(): boolean {\n    return (/Chrom|e?ium/g.test(navigator.userAgent) || /Google Inc/g.test(navigator.vendor)) && !/Edge/g.test(navigator.userAgent);\n}\n","import { Inject, Injectable, NgZone } from '@angular/core';\nimport { ÉµgetDOM as getDOM } from '@angular/platform-browser';\nimport { DOCUMENT } from '@angular/common';\nimport { PlatformUtil } from './utils';\n\nconst EVENT_SUFFIX = 'precise';\n\n/**\n * Touch gestures manager based on Hammer.js\n * Use with caution, this will track references for single manager per element. Very TBD. Much TODO.\n * @hidden\n */\n@Injectable()\nexport class HammerGesturesManager {\n    private platformBrowser: boolean;\n    /**\n     * Event option defaults for each recognizer, see http://hammerjs.github.io/api/ for API listing.\n     */\n    protected hammerOptions: HammerOptions = {};\n\n    private _hammerManagers: Array<{ element: EventTarget, manager: HammerManager; }> = [];\n\n    constructor(private _zone: NgZone, @Inject(DOCUMENT) private doc: any, private platformUtil: PlatformUtil) {\n        this.platformBrowser = this.platformUtil.isBrowser;\n        if (this.platformBrowser) {\n            this.hammerOptions = {\n                // D.P. #447 Force TouchInput due to PointerEventInput bug (https://github.com/hammerjs/hammer.js/issues/1065)\n                // see https://github.com/IgniteUI/igniteui-angular/issues/447#issuecomment-324601803\n                inputClass: Hammer.TouchInput,\n                recognizers: [\n                    [Hammer.Pan, { threshold: 0 }],\n                    [Hammer.Swipe, {\n                        direction: Hammer.DIRECTION_HORIZONTAL\n                    }],\n                    [Hammer.Tap],\n                    [Hammer.Tap, { event: 'doubletap', taps: 2 }, ['tap']]\n                ]\n            };\n        }\n    }\n\n    public supports(eventName: string): boolean {\n        return eventName.toLowerCase().endsWith('.' + EVENT_SUFFIX);\n    }\n\n    /**\n     * Add listener extended with options for Hammer.js. Will use defaults if none are provided.\n     * Modeling after other event plugins for easy future modifications.\n     */\n    public addEventListener(\n        element: HTMLElement,\n        eventName: string,\n        eventHandler: (eventObj) => void,\n        options: HammerOptions = null): () => void {\n        if (!this.platformBrowser) {\n            return;\n        }\n\n        // Creating the manager bind events, must be done outside of angular\n        return this._zone.runOutsideAngular(() => {\n            let mc: HammerManager = this.getManagerForElement(element);\n            if (mc === null) {\n                // new Hammer is a shortcut for Manager with defaults\n                mc = new Hammer(element, Object.assign(this.hammerOptions, options));\n                this.addManagerForElement(element, mc);\n            }\n            const handler = (eventObj) => { this._zone.run(() => { eventHandler(eventObj); }); };\n            mc.on(eventName, handler);\n            return () => { mc.off(eventName, handler); };\n        });\n    }\n\n    /**\n     * Add listener extended with options for Hammer.js. Will use defaults if none are provided.\n     * Modeling after other event plugins for easy future modifications.\n     *\n     * @param target Can be one of either window, body or document(fallback default).\n     */\n    public addGlobalEventListener(target: string, eventName: string, eventHandler: (eventObj) => void): () => void {\n        if (!this.platformBrowser) {\n            return;\n        }\n\n        const element = this.getGlobalEventTarget(target);\n\n        // Creating the manager bind events, must be done outside of angular\n        return this.addEventListener(element as HTMLElement, eventName, eventHandler);\n    }\n\n    /**\n     * Exposes [Dom]Adapter.getGlobalEventTarget to get global event targets.\n     * Supported: window, document, body. Defaults to document for invalid args.\n     * @param target Target name\n     */\n    public getGlobalEventTarget(target: string): EventTarget {\n        return getDOM().getGlobalEventTarget(this.doc, target);\n    }\n\n    /**\n     * Set HammerManager options.\n     *\n     * @param element The DOM element used to create the manager on.\n     *\n     * ### Example\n     *\n     * ```ts\n     * manager.setManagerOption(myElem, \"pan\", { pointers: 1 });\n     * ```\n     */\n    public setManagerOption(element: EventTarget, event: string, options: any) {\n        const manager = this.getManagerForElement(element);\n        manager.get(event).set(options);\n    }\n\n    /**\n     * Add an element and manager map to the internal collection.\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    public addManagerForElement(element: EventTarget, manager: HammerManager) {\n        this._hammerManagers.push({element, manager});\n    }\n\n    /**\n     * Get HammerManager for the element or null\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    public getManagerForElement(element: EventTarget): HammerManager {\n        const result =  this._hammerManagers.filter((value, index, array) => {\n            return value.element === element;\n        });\n        return result.length ? result[0].manager : null;\n    }\n\n    /**\n     * Destroys the HammerManager for the element, removing event listeners in the process.\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    public removeManagerForElement(element: HTMLElement) {\n        let index: number = null;\n        for (let i = 0; i < this._hammerManagers.length; i++) {\n            if (element === this._hammerManagers[i].element) {\n                index = i;\n                break;\n            }\n        }\n        if (index !== null) {\n            const item = this._hammerManagers.splice(index, 1)[0];\n            // destroy also\n            item.manager.destroy();\n        }\n    }\n\n    /** Destroys all internally tracked HammerManagers, removing event listeners in the process. */\n    public destroy() {\n        for (const item of this._hammerManagers) {\n            item.manager.destroy();\n        }\n        this._hammerManagers = [];\n    }\n}\n","\nexport enum FilterMode {\n    quickFilter = 'quickFilter',\n    excelStyleFilter = 'excelStyleFilter'\n}\n\nexport enum GridSummaryPosition {\n    top = 'top',\n    bottom = 'bottom'\n}\n\nexport enum GridSummaryCalculationMode {\n    rootLevelOnly = 'rootLevelOnly',\n    childLevelsOnly = 'childLevelsOnly',\n    rootAndChildLevels = 'rootAndChildLevels'\n}\n\nexport enum GridKeydownTargetType {\n    dataCell = 'dataCell',\n    summaryCell = 'summaryCell',\n    groupRow = 'groupRow',\n    hierarchicalRow = 'hierarchicalRow'\n}\n\nexport enum GridSelectionMode {\n    none = 'none',\n    single = 'single',\n    multiple = 'multiple',\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    TemplateRef,\n    ViewChild,\n    NgZone,\n    OnInit,\n    OnDestroy,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\nimport { IgxTextHighlightDirective } from '../directives/text-highlight/text-highlight.directive';\nimport { GridBaseAPIService } from './api.service';\nimport {\n    getNodeSizeViaRange, ROW_COLLAPSE_KEYS, ROW_EXPAND_KEYS, SUPPORTED_KEYS, NAVIGATION_KEYS, isIE, isLeftClick, PlatformUtil\n} from '../core/utils';\nimport { State } from '../services/index';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxGridSelectionService, ISelectionNode, IgxGridCRUDService } from '../core/grid-selection';\nimport { DeprecateProperty, DeprecateMethod } from '../core/deprecateDecorators';\nimport { HammerGesturesManager } from '../core/touch';\nimport { ColumnType } from './common/column.interface';\nimport { RowType } from './common/row.interface';\nimport { GridSelectionMode } from './common/enums';\n\n/**\n * Providing reference to `IgxGridCellComponent`:\n * ```typescript\n * @ViewChild('grid', { read: IgxGridComponent })\n *  public grid: IgxGridComponent;\n * ```\n * ```typescript\n *  let column = this.grid.columnList.first;\n * ```\n * ```typescript\n *  let cell = column.cells[0];\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-grid-cell',\n    templateUrl: './cell.component.html',\n    providers: [HammerGesturesManager]\n})\nexport class IgxGridCellComponent implements OnInit, OnChanges, OnDestroy {\n    private _vIndex = -1;\n\n    /**\n     * Gets the column of the cell.\n     * ```typescript\n     *  let cellColumn = this.cell.column;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public column: ColumnType;\n\n    /**\n     * Gets the row of the cell.\n     * ```typescript\n     * let cellRow = this.cell.row;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public row: RowType;\n\n    /**\n     * Gets the data of the row of the cell.\n     * ```typescript\n     * let rowData = this.cell.rowData;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public rowData: any;\n\n    /**\n     * Sets/gets the template of the cell.\n     * ```html\n     * <ng-template #cellTemplate igxCell let-value>\n     *   <div style=\"font-style: oblique; color:blueviolet; background:red\">\n     *       <span>{{value}}</span>\n     *   </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild('cellTemplate',{read: TemplateRef})\n     * cellTemplate: TemplateRef<any>;\n     * ```\n     * ```typescript\n     * this.cell.cellTemplate = this.cellTemplate;\n     * ```\n     * ```typescript\n     * let template =  this.cell.cellTemplate;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public cellTemplate: TemplateRef<any>;\n\n    /**\n     * Sets/gets the cell value.\n     * ```typescript\n     * this.cell.value = \"Cell Value\";\n     * ```\n     * ```typescript\n     * let cellValue = this.cell.value;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public value: any;\n\n    /**\n     * Sets/gets the highlight class of the cell.\n     * Default value is `\"igx-highlight\"`.\n     * ```typescript\n     * let highlightClass = this.cell.highlightClass;\n     * ```\n     * ```typescript\n     * this.cell.highlightClass = 'igx-cell-highlight';\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public highlightClass = 'igx-highlight';\n\n    /**\n     * Sets/gets the active highlight class class of the cell.\n     * Default value is `\"igx-highlight__active\"`.\n     * ```typescript\n     * let activeHighlightClass = this.cell.activeHighlightClass;\n     * ```\n     * ```typescript\n     * this.cell.activeHighlightClass = 'igx-cell-highlight_active';\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public activeHighlightClass = 'igx-highlight__active';\n\n    /**\n     * Gets the cell formatter.\n     * ```typescript\n     * let cellForamatter = this.cell.formatter;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    formatter: (value: any) => any;\n\n    /**\n     * Gets the cell template context object.\n     * ```typescript\n     *  let context = this.cell.context();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get context(): any {\n        return {\n            $implicit: this.value,\n            cell: this\n        };\n    }\n\n    /**\n     * Gets the cell template.\n     * ```typescript\n     * let template = this.cell.template;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get template(): TemplateRef<any> {\n        if (this.editMode) {\n            const inlineEditorTemplate = this.column.inlineEditorTemplate;\n            return inlineEditorTemplate ? inlineEditorTemplate : this.inlineEditorTemplate;\n        }\n        if (this.cellTemplate) {\n            return this.cellTemplate;\n        }\n        return this.defaultCellTemplate;\n    }\n\n    /**\n     * Gets the `id` of the grid in which the cell is stored.\n     * ```typescript\n     * let gridId = this.cell.gridID;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get gridID(): any {\n        return this.row.gridID;\n    }\n\n    /**\n     * Gets the grid of the cell.\n     * ```typescript\n     * let grid = this.cell.grid;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Gets the `index` of the row where the cell is stored.\n     * ```typescript\n     * let rowIndex = this.cell.rowIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.data-rowIndex')\n    get rowIndex(): number {\n        return this.row.index;\n    }\n\n    /**\n     * Gets the `index` of the cell column.\n     * ```typescript\n     * let columnIndex = this.cell.columnIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get columnIndex(): number {\n        return this.column.index;\n    }\n\n    /**\n     * Gets the visible `index` of the in which the cell is stored.\n     * ```typescript\n     * let visibleColumnIndex = this.cell.visibleColumnIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.data-visibleIndex')\n    @Input()\n    get visibleColumnIndex() {\n        return this.column.columnLayoutChild ? this.column.visibleIndex : this._vIndex;\n    }\n\n    set visibleColumnIndex(val) {\n        this._vIndex = val;\n    }\n\n    /**\n     * Gets the ID of the cell.\n     * ```typescript\n     * let cellID = this.cell.cellID;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public get cellID() {\n        const primaryKey = this.grid.primaryKey;\n        const rowID = primaryKey ? this.rowData[primaryKey] : this.rowData;\n        return { rowID, columnID: this.columnIndex, rowIndex: this.rowIndex };\n    }\n\n    /**\n     * Returns a reference to the nativeElement of the cell.\n     * ```typescript\n     * let cellNativeElement = this.cell.nativeElement;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get nativeElement(): HTMLElement {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * @deprecated\n     * Use `cell.editMode` as a getter and\n     * `cell.setEditMode(true | false)` to start/exit edit mode.\n     *\n     * Gets/sets whether the cell is in edit mode.\n     * ```typescript\n     * let isCellInEditMode = this.cell.inEditMode;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @DeprecateProperty(`'inEditMode' is deprecated\\nUse 'editMode' to get the current state and 'setEditMode(boolean)' as a setter`)\n    get inEditMode(): boolean {\n        return this.editMode;\n    }\n\n    set inEditMode(value: boolean) {\n        this.setEditMode(value);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @Input()\n    get cellSelectionMode() {\n        return this._cellSelection;\n    }\n\n    set cellSelectionMode(value) {\n        if (this._cellSelection === value) { return; }\n         this.zone.runOutsideAngular(() => {\n            value === GridSelectionMode.multiple ?\n            this.addPointerListeners(value) : this.removePointerListeners(this._cellSelection);\n        });\n        this._cellSelection = value;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @Input()\n    @HostBinding('class.igx-grid__td--pinned-last')\n    lastPinned = false;\n\n    /**\n     * Returns whether the cell is in edit mode.\n     */\n    @Input()\n    @HostBinding('class.igx-grid__td--editing')\n    editMode = false;\n\n    /**\n     * Sets/get the `tabindex` property of the cell.\n     * Default value is `0`.\n     * ```typescript\n     * this.cell.tabindex = 1;\n     * ```\n     * ```typescript\n     * let cellTabIndex = this.cell.tabindex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * Sets/get the `role` property of the cell.\n     * Default value is `\"gridcell\"`.\n     * ```typescript\n     * this.cell.role = 'grid-cell';\n     * ```\n     * ```typescript\n     * let cellRole = this.cell.role;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.role')\n    public role = 'gridcell';\n\n    /**\n     * Gets whether the cell is editable.\n     * ```typescript\n     * let isCellReadonly = this.cell.readonly;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.aria-readonly')\n    get readonly(): boolean {\n        return !this.column.editable;\n    }\n\n    @HostBinding('style.-ms-grid-row-span')\n    get gridRowSpan(): number {\n        return this.column.gridRowSpan;\n    }\n\n    @HostBinding('style.-ms-grid-column-span')\n    get gridColumnSpan(): number {\n        return this.column.gridColumnSpan;\n    }\n\n\n    @HostBinding('style.grid-row-end')\n    get rowEnd(): number {\n        return this.column.rowEnd;\n    }\n\n    @HostBinding('style.grid-column-end')\n    get colEnd(): number {\n        return this.column.colEnd;\n    }\n\n    @HostBinding('style.-ms-grid-row')\n    @HostBinding('style.grid-row-start')\n    get rowStart(): number {\n        return this.column.rowStart;\n    }\n\n    @HostBinding('style.-ms-grid-column')\n    @HostBinding('style.grid-column-start')\n    get colStart(): number {\n        return this.column.colStart;\n    }\n\n    /**\n     * Returns a string containing the grid `id` and the column `field` concatenated by \"_\".\n     * ```typescript\n     * let describedBy = this.cell.describedBy;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.aria-describedby')\n    get describedby(): string {\n        return `${this.row.gridID}_${this.column.field}`;\n    }\n\n    /**\n     * Gets the width of the cell.\n     * ```typescript\n     * let cellWidth = this.cell.width;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('style.min-width')\n    @HostBinding('style.max-width')\n    @HostBinding('style.flex-basis')\n    @Input()\n    width = '';\n\n    /**\n     * Gets whether the cell is selected.\n     * ```typescript\n     * let isSelected = this.cell.selected;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.aria-selected')\n    @HostBinding('class.igx-grid__td--selected')\n    get selected() {\n        return this.selectionService.selected(this.selectionNode);\n    }\n\n    /**\n     * Selects/deselects the cell.\n     * ```typescript\n     * this.cell.selected = true.\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    set selected(val: boolean) {\n        const node = this.selectionNode;\n        val ? this.selectionService.add(node) : this.selectionService.remove(node);\n        this.grid.notifyChanges();\n    }\n\n    @HostBinding('class.igx-grid__td--edited')\n    get dirty() {\n        if (this.grid.rowEditable) {\n            const rowCurrentState = this.grid.transactions.getAggregatedValue(this.row.rowID, false);\n            if (rowCurrentState) {\n                return rowCurrentState[this.column.field] !== undefined && rowCurrentState[this.column.field] !== null;\n            }\n        } else {\n            const rowTransaction: State = this.grid.transactions.getState(this.row.rowID);\n                return rowTransaction && rowTransaction.value &&\n                (rowTransaction.value[this.column.field] ||\n                 rowTransaction.value[this.column.field] === 0 ||\n                 rowTransaction.value[this.column.field] === false);\n        }\n\n        return false;\n    }\n\n    /**\n     * Sets the current edit value while a cell is in edit mode.\n     * Only for cell editing mode.\n     * ```typescript\n     * this.cell.editValue = value;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public set editValue(value) {\n        if (this.crudService.inEditMode) {\n            this.crudService.cell.editValue = value;\n        }\n    }\n\n    /**\n     * Gets the current edit value while a cell is in edit mode.\n     * Only for cell editing mode.\n     * ```typescript\n     * let editValue = this.cell.editValue;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public get editValue() {\n        if (this.crudService.inEditMode) {\n            return this.crudService.cell.editValue;\n        }\n    }\n\n    /**\n     * Returns whether the cell is editable.\n     */\n    get editable(): boolean {\n        return this.column.editable;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-grid__td--active')\n    public focused = false;\n\n    @ViewChild('defaultCell', { read: TemplateRef, static: true })\n    protected defaultCellTemplate: TemplateRef<any>;\n\n    @ViewChild('inlineEditor', { read: TemplateRef, static: true })\n    protected inlineEditorTemplate: TemplateRef<any>;\n\n    @ViewChild(IgxTextHighlightDirective, { read: IgxTextHighlightDirective, static: false })\n    protected set highlight(value: IgxTextHighlightDirective) {\n        this._highlight = value;\n\n        if (this._highlight && this.grid.lastSearchInfo.searchText) {\n            this._highlight.highlight(this.grid.lastSearchInfo.searchText,\n                this.grid.lastSearchInfo.caseSensitive,\n                this.grid.lastSearchInfo.exactMatch);\n            this._highlight.activateIfNecessary();\n        }\n    }\n\n    protected get highlight() {\n        return this._highlight;\n    }\n\n    protected get selectionNode(): ISelectionNode {\n        return {\n            row: this.rowIndex,\n            column: this.column.columnLayoutChild ? this.column.parent.visibleIndex : this.visibleColumnIndex,\n            layout: this.column.columnLayoutChild ? {\n                rowStart: this.column.rowStart,\n                colStart: this.column.colStart,\n                rowEnd: this.column.rowEnd,\n                colEnd: this.column.colEnd,\n                columnVisibleIndex: this.visibleColumnIndex\n            } : null\n            };\n    }\n\n    protected isInCompositionMode = false;\n    protected compositionStartHandler;\n    protected compositionEndHandler;\n    private _highlight: IgxTextHighlightDirective;\n    private _cellSelection = GridSelectionMode.multiple;\n\n\n    constructor(\n        protected selectionService: IgxGridSelectionService,\n        protected crudService: IgxGridCRUDService,\n        public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        public cdr: ChangeDetectorRef,\n        private element: ElementRef,\n        protected zone: NgZone,\n        private touchManager: HammerGesturesManager,\n        protected platformUtil: PlatformUtil) { }\n\n    private addPointerListeners(selection) {\n        if (selection !== GridSelectionMode.multiple) { return; }\n        this.nativeElement.addEventListener('pointerdown', this.pointerdown);\n        this.nativeElement.addEventListener('pointerenter', this.pointerenter);\n        this.nativeElement.addEventListener('pointerup', this.pointerup);\n    }\n\n    private  removePointerListeners(selection) {\n        if (selection !== GridSelectionMode.multiple) { return; }\n        this.nativeElement.removeEventListener('pointerdown', this.pointerdown);\n        this.nativeElement.removeEventListener('pointerenter', this.pointerenter);\n        this.nativeElement.removeEventListener('pointerup', this.pointerup);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            this.addPointerListeners(this.cellSelectionMode);\n            // IE 11 workarounds\n            if (isIE()) {\n                this.compositionStartHandler = () => this.isInCompositionMode = true;\n                this.compositionEndHandler = () => this.isInCompositionMode = false;\n                // Hitting Enter with IME submits and exits from edit mode instead of first closing the IME dialog\n                this.nativeElement.addEventListener('compositionstart', this.compositionStartHandler);\n                this.nativeElement.addEventListener('compositionend', this.compositionEndHandler);\n            }\n        });\n        if (this.platformUtil.isIOS) {\n            this.touchManager.addEventListener(this.nativeElement, 'doubletap', this.onDoubleClick, {\n                cssProps: { } /* don't disable user-select, etc */\n            } as HammerOptions);\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    ngOnDestroy() {\n        this.zone.runOutsideAngular(() => {\n            this.removePointerListeners(this.cellSelectionMode);\n            if (isIE()) {\n                this.nativeElement.removeEventListener('compositionstart', this.compositionStartHandler);\n                this.nativeElement.removeEventListener('compositionend', this.compositionEndHandler);\n            }\n        });\n        this.touchManager.destroy();\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    _updateCRUDStatus() {\n        if (this.editMode) {\n            return;\n        }\n\n        const crud = this.crudService;\n        const editableCell = this.crudService.cell;\n        const editMode = !!(crud.row || crud.cell);\n\n        if (this.editable && editMode && !this.row.deleted) {\n            if (editableCell) {\n                this.gridAPI.update_cell(editableCell, editableCell.editValue);\n            }\n            crud.end();\n            this.grid.notifyChanges();\n            crud.begin(this);\n            return;\n        }\n\n        if (editableCell && crud.sameRow(this.cellID.rowID)) {\n            this.gridAPI.submit_value();\n        } else if (editMode && !crud.sameRow(this.cellID.rowID)) {\n            this.grid.endEdit(true);\n        }\n    }\n\n    /**\n     * @deprecated\n     * Gets whether the cell is selected.\n     * ```typescript\n     * let isCellSelected = thid.cell.isCellSelected();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @DeprecateMethod(`'isCellSelected' is deprecated. Use 'selected' property instead.`)\n    public isCellSelected() {\n        return this.selectionService.selected(this.selectionNode);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.value && !changes.value.firstChange) {\n            if (this.highlight) {\n                this.highlight.lastSearchInfo.searchedText = this.grid.lastSearchInfo.searchText;\n                this.highlight.lastSearchInfo.caseSensitive = this.grid.lastSearchInfo.caseSensitive;\n                this.highlight.lastSearchInfo.exactMatch = this.grid.lastSearchInfo.exactMatch;\n            }\n        }\n    }\n\n    /**\n     * Starts/ends edit mode for the cell.\n     *\n     * ```typescript\n     * cell.setEditMode(true);\n     * ```\n     */\n    setEditMode(value: boolean): void {\n        if (this.row.deleted) {\n            return;\n        }\n        if (this.editable && value) {\n            this.gridAPI.submit_value();\n            this.crudService.begin(this);\n        } else {\n            this.gridAPI.escape_editMode();\n        }\n        this.grid.notifyChanges();\n    }\n\n    /**\n     * Sets new value to the cell.\n     * ```typescript\n     * this.cell.update('New Value');\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    // TODO: Refactor\n    public update(val: any) {\n        if (this.row.deleted) {\n            return;\n        }\n        const cell = this.crudService.createCell(this);\n        const args = this.gridAPI.update_cell(cell, val);\n        if (this.crudService.cell && this.crudService.sameCell(cell)) {\n            if (args.cancel) {\n                return;\n            }\n            this.gridAPI.escape_editMode();\n        }\n        this.cdr.markForCheck();\n    }\n\n    /**\n     *\n     * @hidden\n     * @internal\n     */\n    pointerdown = (event: PointerEvent) => {\n        if (!isLeftClick(event)) {\n            this.selectionService.addKeyboardRange();\n            this.selectionService.initKeyboardState();\n            this.selectionService.primaryButton = false;\n            return;\n        }\n        this.selectionService.pointerDown(this.selectionNode, event.shiftKey, event.ctrlKey);\n    }\n\n    /**\n     *\n     * @hidden\n     * @internal\n     */\n    pointerenter = (event: PointerEvent) => {\n        const dragMode = this.selectionService.pointerEnter(this.selectionNode, event);\n        if (dragMode) {\n            this.grid.cdr.detectChanges();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    pointerup = (event: PointerEvent) => {\n        if (this.grid.hasColumnLayouts) {\n            this.grid.navigation.setStartNavigationCell(this.colStart, this.rowStart, null);\n        }\n        if (!isLeftClick(event)) { return; }\n        if (this.selectionService.pointerUp(this.selectionNode, this.grid.onRangeSelection)) {\n            this.grid.cdr.detectChanges();\n        }\n        this._updateCRUDStatus();\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('dblclick', ['$event'])\n    public onDoubleClick = (event: MouseEvent | HammerInput) => {\n        if (event.type === 'doubletap') {\n            // prevent double-tap to zoom on iOS\n            (event as HammerInput).preventDefault();\n        }\n        if (this.editable && !this.editMode && !this.row.deleted) {\n            this.crudService.begin(this);\n        }\n\n        this.grid.onDoubleClick.emit({\n            cell: this,\n            event\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event: MouseEvent) {\n        this.grid.onCellClick.emit({\n            cell: this,\n            event\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('contextmenu', ['$event'])\n    public onContextMenu(event: MouseEvent) {\n        this.grid.onContextMenu.emit({\n            cell: this,\n            event\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('focus', ['$event'])\n    public onFocus(event: FocusEvent) {\n        if (this.focused) {\n            return;\n        }\n        this.focused = true;\n        this.row.focused = true;\n        const node = this.selectionNode;\n        const shouldEmitSelection = !this.selectionService.isActiveNode(node);\n\n        if (this.selectionService.primaryButton) {\n            this._updateCRUDStatus();\n            this.selectionService.activeElement = node;\n        } else {\n            this.selectionService.activeElement = null;\n            if (this.crudService.inEditMode && !this.editMode) {\n                this.gridAPI.submit_value();\n            }\n        }\n\n        this.selectionService.primaryButton = true;\n        if (this.cellSelectionMode === GridSelectionMode.multiple && this.selectionService.activeElement) {\n            this.selectionService.add(this.selectionService.activeElement, false); // pointer events handle range generation\n            this.selectionService.keyboardStateOnFocus(node, this.grid.onRangeSelection, this.nativeElement);\n        }\n        if (this.grid.isCellSelectable && shouldEmitSelection) {\n            this.grid.onSelection.emit({ cell: this, event });\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('blur')\n    public onBlur() {\n        this.focused = false;\n        this.row.focused = false;\n    }\n\n    protected handleAlt(key: string, event: KeyboardEvent) {\n        if (this.row.nativeElement.tagName.toLowerCase() === 'igx-tree-grid-row' && this.isToggleKey(key)) {\n            const collapse = (this.row as any).expanded && ROW_COLLAPSE_KEYS.has(key);\n            const expand = !(this.row as any).expanded && ROW_EXPAND_KEYS.has(key);\n            if (collapse) {\n                (this.gridAPI as any).trigger_row_expansion_toggle(this.row.treeRow, !this.row.expanded, event, this.visibleColumnIndex);\n            } else if (expand) {\n                (this.gridAPI as any).trigger_row_expansion_toggle(this.row.treeRow, !this.row.expanded, event, this.visibleColumnIndex);\n            }\n        }\n    }\n\n    protected handleTab(shift: boolean) {\n        if (shift) {\n            this.grid.navigation.performShiftTabKey(this.row.nativeElement, this.selectionNode);\n        } else {\n            this.grid.navigation.performTab(this.row.nativeElement, this.selectionNode);\n        }\n    }\n\n    protected handleEnd(ctrl: boolean) {\n        if (ctrl) {\n            this.grid.navigation.goToLastCell();\n        } else {\n            this.grid.navigation.onKeydownEnd(this.rowIndex, false, this.rowStart);\n        }\n    }\n\n    protected handleHome(ctrl: boolean) {\n        if (ctrl) {\n            this.grid.navigation.goToFirstCell();\n        } else {\n            this.grid.navigation.onKeydownHome(this.rowIndex, false, this.rowStart);\n        }\n    }\n\n    // TODO: Refactor\n    /**\n     *\n     * @hidden\n     * @internal\n     */\n    @HostListener('keydown', ['$event'])\n    dispatchEvent(event: KeyboardEvent) {\n        const key = event.key.toLowerCase();\n        const shift = event.shiftKey;\n        const ctrl = event.ctrlKey;\n        const node = this.selectionNode;\n\n        if (!SUPPORTED_KEYS.has(key)) {\n            return;\n        }\n        event.stopPropagation();\n\n        const keydownArgs = { targetType: 'dataCell', target: this, event: event, cancel: false };\n        this.grid.onGridKeydown.emit(keydownArgs);\n        if (keydownArgs.cancel) {\n            this.selectionService.clear();\n            this.selectionService.keyboardState.active = true;\n            return;\n        }\n\n        if (event.altKey) {\n            event.preventDefault();\n            this.handleAlt(key, event);\n            return;\n        }\n\n        this.selectionService.keyboardStateOnKeydown(node, shift, shift && key === 'tab');\n\n\n        if (key === 'tab') {\n            event.preventDefault();\n        }\n\n        if (this.editMode) {\n            if (NAVIGATION_KEYS.has(key)) {\n                if (this.column.inlineEditorTemplate) { return; }\n                if (['date', 'boolean'].indexOf(this.column.dataType) > -1) { return; }\n                return;\n            }\n        }\n\n        if (NAVIGATION_KEYS.has(key)) {\n            event.preventDefault();\n        }\n\n        switch (key) {\n            case 'tab':\n                this.handleTab(shift);\n                break;\n            case 'end':\n                this.handleEnd(ctrl);\n                break;\n            case 'home':\n                this.handleHome(ctrl);\n                break;\n            case 'arrowleft':\n            case 'left':\n                if (ctrl) {\n                    this.grid.navigation.onKeydownHome(node.row, false, this.rowStart);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowLeft(this.nativeElement, this.selectionNode);\n                break;\n            case 'arrowright':\n            case 'right':\n                if (ctrl) {\n                    this.grid.navigation.onKeydownEnd(node.row, false, this.rowStart);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowRight(this.nativeElement, this.selectionNode);\n                break;\n            case 'arrowup':\n            case 'up':\n                if (ctrl) {\n                    this.grid.navigation.navigateTop(this.visibleColumnIndex);\n                    break;\n                }\n                this.grid.navigation.navigateUp(this.row.nativeElement, this.selectionNode);\n                break;\n            case 'arrowdown':\n            case 'down':\n                if (ctrl) {\n                    this.grid.navigation.navigateBottom(this.visibleColumnIndex);\n                    break;\n                }\n                this.grid.navigation.navigateDown(this.row.nativeElement, this.selectionNode);\n                break;\n            case 'enter':\n            case 'f2':\n                this.onKeydownEnterEditMode();\n                break;\n            case 'escape':\n            case 'esc':\n                this.onKeydownExitEditMode();\n                break;\n            case ' ':\n            case 'spacebar':\n            case 'space':\n                if (this.grid.isRowSelectable) {\n                    this.row.selected ? this.selectionService.deselectRow(this.row.rowID, event) :\n                    this.selectionService.selectRowById(this.row.rowID, false, event);\n                }\n                break;\n            default:\n                return;\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onKeydownEnterEditMode() {\n        if (this.isInCompositionMode) {\n            return;\n        }\n        if (this.column.editable && !this.row.deleted) {\n            if (this.editMode) {\n                this.grid.endEdit(true);\n                this.nativeElement.focus();\n            } else {\n                this.crudService.begin(this);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onKeydownExitEditMode() {\n        if (this.isInCompositionMode) {\n            return;\n        }\n\n        if (this.editMode) {\n            const args = this.crudService.cell.createEditEventArgs();\n            this.grid.onCellEditCancel.emit(args);\n            if (args.cancel) {\n                return;\n            }\n            this.grid.endEdit(false);\n            this.nativeElement.focus();\n        }\n    }\n\n    /**\n     * If the provided string matches the text in the cell, the text gets highlighted.\n     * ```typescript\n     * this.cell.highlightText('Cell Value', true);\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public highlightText(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return this.highlight && this.column.searchable ? this.highlight.highlight(text, caseSensitive, exactMatch) : 0;\n    }\n\n    /**\n     * Clears the highlight of the text in the cell.\n     * ```typescript\n     * this.cell.clearHighLight();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public clearHighlight() {\n        if (this.highlight && this.column.searchable) {\n            this.highlight.clearHighlight();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public calculateSizeToFit(range: any): number {\n        return Math.max(...Array.from(this.nativeElement.children)\n            .map((child) => getNodeSizeViaRange(range, child)));\n    }\n\n    private isToggleKey(key: string): boolean {\n        return ROW_COLLAPSE_KEYS.has(key) || ROW_EXPAND_KEYS.has(key);\n    }\n}\n","import {\n    ChangeDetectorRef,\n    DoCheck,\n    ElementRef,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    QueryList,\n    ViewChild,\n    ViewChildren,\n    Injectable\n} from '@angular/core';\nimport { IgxCheckboxComponent } from '../checkbox/checkbox.component';\nimport { IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxColumnComponent } from './column.component';\nimport { TransactionType } from '../services';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxGridSelectionService, IgxGridCRUDService, IgxRow } from '../core/grid-selection';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\n\n@Injectable()\nexport abstract class IgxRowComponent<T extends IgxGridBaseComponent & IGridDataBindable> implements DoCheck {\n\n    private _rowData: any;\n    /**\n     *  The data passed to the row component.\n     *\n     * ```typescript\n     * // get the row data for the first selected row\n     * let selectedRowData = this.grid.selectedRows[0].rowData;\n     * ```\n     */\n    @Input()\n    public get rowData(): any {\n        if (this.inEditMode) {\n            return Object.assign({}, this._rowData, this.grid.transactions.getAggregatedValue(this.rowID, false));\n        }\n        return this._rowData;\n    }\n\n    public set rowData(v: any) {\n        this._rowData = v;\n    }\n    /**\n     * The index of the row.\n     *\n     * ```typescript\n     * // get the index of the second selected row\n     * let selectedRowIndex = this.grid.selectedRows[1].index;\n     * ```\n     */\n    @Input()\n    public index: number;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public gridID: string;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxDirRef', { read: IgxGridForOfDirective, static: false })\n    public virtDirRow: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(forwardRef(() => IgxCheckboxComponent), { read: IgxCheckboxComponent, static: false })\n    public checkboxElement: IgxCheckboxComponent;\n\n    /**\n     * The rendered cells in the row component.\n     *\n     * ```typescript\n     * // get the cells of the third selected row\n     * let selectedRowCells = this.grid.selectedRows[2].cells;\n     * ```\n     */\n    @ViewChildren(forwardRef(() => IgxGridCellComponent))\n    public cells: QueryList<IgxGridCellComponent>;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'row';\n\n    @HostBinding('attr.data-rowIndex')\n    get dataRowIndex() {\n        return this.index;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class')\n    get styleClasses(): string {\n        return this.resolveClasses();\n    }\n\n    /**\n     * @hidden\n     */\n    @Input()\n    @HostBinding('attr.aria-selected')\n    get selected(): boolean {\n        return this.selectionService.isRowSelected(this.rowID);\n    }\n\n    set selected(value: boolean) {\n        value ? this.selectionService.selectRowsWithNoEvent([this.rowID]) :\n        this.selectionService.deselectRowsWithNoEvent([this.rowID]);\n        this.grid.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    get columns(): IgxColumnComponent[] {\n        return this.grid.visibleColumns;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    get viewIndex(): number {\n        if ((this.grid as any).groupingExpressions.length) {\n            return this.grid.filteredSortedData.indexOf(this.rowData);\n        }\n        return this.index + this.grid.page * this.grid.perPage;\n    }\n\n    /**\n     * @hidden\n     */\n    get pinnedColumns(): IgxColumnComponent[] {\n        return this.grid.pinnedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    get unpinnedColumns(): IgxColumnComponent[] {\n        return this.grid.unpinnedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    public get showRowSelectors(): boolean {\n        return this.grid.showRowSelectors;\n    }\n\n    /** @hidden */\n    public get dirty(): boolean {\n        const row = this.grid.transactions.getState(this.rowID);\n        if (row) {\n            return row.type === TransactionType.ADD || row.type === TransactionType.UPDATE;\n        }\n\n        return false;\n    }\n\n    @DeprecateProperty('isSelected property is deprecated. Use selected property instead.')\n    public get isSelected() {\n        return this.selectionService.isRowSelected(this.rowID);\n    }\n\n    /**\n     * @hidden\n     */\n    public get rowDraggable(): boolean {\n        return this.grid.rowDraggable;\n    }\n\n    /** @hidden */\n    public get added(): boolean {\n        const row = this.grid.transactions.getState(this.rowID);\n        if (row) {\n            return row.type === TransactionType.ADD;\n        }\n\n         return false;\n    }\n\n    /** @hidden */\n    public get deleted(): boolean {\n        return this.gridAPI.row_deleted_transaction(this.rowID);\n    }\n\n    /**\n     * @hidden\n     */\n    public dragging = false;\n\n    // TODO: Refactor\n    public get inEditMode(): boolean {\n        if (this.grid.rowEditable) {\n            const editRowState = this.crudService.row;\n            return (editRowState && editRowState.id === this.rowID) || false;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Get a reference to the grid that contains the selected row.\n     *\n     * ```typescript\n     * handleRowSelection(event) {\n     *  // the grid on which the onRowSelectionChange event was triggered\n     *  const grid = event.row.grid;\n     * }\n     * ```\n     *\n     * ```html\n     *  <igx-grid\n     *    [data]=\"data\"\n     *    (onRowSelectionChange)=\"handleRowSelection($event)\">\n     *  </igx-grid>\n     * ```\n     */\n    get grid(): T {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Gets the ID of the row.\n     * A row in the grid is identified either by:\n     * - primaryKey data value,\n     * - the whole rowData, if the primaryKey is omitted.\n     *\n     * ```typescript\n     * let rowID = this.grid.selectedRows[2].rowID;\n     * ```\n     */\n    public get rowID() {\n        const primaryKey = this.grid.primaryKey;\n        return primaryKey ? this._rowData[primaryKey] : this._rowData;\n    }\n\n    /**\n     * The native DOM element representing the row. Could be null in certain environments.\n     *\n     * ```typescript\n     * // get the nativeElement of the second selected row\n     * let selectedRowNativeElement = this.grid.selectedRows[1].nativeElement;\n     * ```\n     */\n    get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    public focused = false;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public defaultCssClass = 'igx-grid__tr';\n\n\n    constructor(\n        public gridAPI: GridBaseAPIService<T>,\n        public crudService: IgxGridCRUDService,\n        public selectionService: IgxGridSelectionService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) {}\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event: MouseEvent) {\n        if (this.grid.rowSelection === 'none' || this.deleted) { return; }\n        if (event.shiftKey && this.grid.rowSelection === 'multiple') {\n            this.selectionService.selectMultipleRows(this.rowID, this.rowData, event);\n            return;\n        }\n        this.selectionService.selectRowById(this.rowID, !event.ctrlKey, event);\n    }\n\n    /**\n     * @hidden\n     */\n    public onRowSelectorClick(event) {\n        event.stopPropagation();\n        if (event.shiftKey && this.grid.rowSelection === 'multiple') {\n            this.selectionService.selectMultipleRows(this.rowID, this.rowData, event);\n            return;\n        }\n        this.selected ? this.selectionService.deselectRow(this.rowID, event) :\n        this.selectionService.selectRowById(this.rowID, false, event);\n    }\n\n    /**\n     * Updates the specified row object and the data source record with the passed value.\n     * This method emits `onEditDone` event.\n     *\n     * ```typescript\n     * // update the second selected row's value\n     * let newValue = \"Apple\";\n     * this.grid.selectedRows[1].update(newValue);\n     * ```\n     */\n    public update(value: any) {\n        const crudService = this.crudService;\n        if (crudService.inEditMode && crudService.cell.id.rowID === this.rowID) {\n            this.grid.endEdit(false);\n        }\n        const row = new IgxRow(this.rowID, this.index, this.rowData);\n        this.gridAPI.update_row(row, value);\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Removes the specified row from the grid's data source.\n     * This method emits `onRowDeleted` event.\n     *\n     * ```typescript\n     * // delete the third selected row from the grid\n     * this.grid.selectedRows[2].delete();\n     * ```\n     */\n    public delete() {\n        this.grid.deleteRowById(this.rowID);\n    }\n\n    /**\n     * @hidden\n     */\n    get rowCheckboxAriaLabel() {\n        return this.grid.primaryKey ?\n            this.selected ? 'Deselect row with key ' + this.rowID : 'Select row with key ' + this.rowID :\n            this.selected ? 'Deselect row' : 'Select row';\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck() {\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveClasses(): string {\n        const indexClass = this.index % 2 ? this.grid.evenRowCSS : this.grid.oddRowCSS;\n        const selectedClass = this.selected ? 'igx-grid__tr--selected' : '';\n        const editClass = this.inEditMode ? 'igx-grid__tr--edit' : '';\n        const dirtyClass = this.dirty ? 'igx-grid__tr--edited' : '';\n        const deletedClass = this.deleted ? 'igx-grid__tr--deleted' : '';\n        const mrlClass = this.grid.hasColumnLayouts ? 'igx-grid__tr--mrl' : '';\n        const dragClass = this.dragging ? 'igx-grid__tr--drag' : '';\n        return `${this.defaultCssClass} ${indexClass} ${selectedClass} ${editClass} ${dirtyClass}\n         ${deletedClass} ${mrlClass} ${dragClass}`.trim();\n    }\n\n    /**\n     * @hidden\n     */\n    public get resolveDragIndicatorClasses(): string {\n        const defaultDragIndicatorCssClass = 'igx-grid__drag-indicator';\n        const dragIndicatorOff = this.grid.rowDragging && !this.dragging ? 'igx-grid__drag-indicator--off' : '';\n        return `${defaultDragIndicatorCssClass} ${dragIndicatorOff}`;\n    }\n}\n","import { SimpleChanges, SimpleChange } from '@angular/core';\n\n/**\n* @hidden\n*/\nexport function WatchChanges(): PropertyDecorator {\n    return (target: any, key: string, propDesc?: PropertyDescriptor) => {\n        const privateKey = '_' + key.toString();\n        propDesc = propDesc || {\n            configurable: true,\n            enumerable: true,\n        };\n        propDesc.get = propDesc.get || (function (this: any) { return this[privateKey]; });\n        const originalSetter = propDesc.set || (function (this: any, val: any) { this[privateKey] = val; });\n\n        propDesc.set = function (this: any, val: any) {\n            const init = this._init;\n            const oldValue = this[key];\n            if (val !== oldValue || (typeof val === 'object' && val === oldValue)) {\n                originalSetter.call(this, val);\n                if (this.ngOnChanges && !init) {\n                    // in case wacthed prop changes trigger ngOnChanges manually\n                    const changes: SimpleChanges = {\n                        [key]: new SimpleChange(oldValue, val, false)\n                    };\n                    this.ngOnChanges(changes);\n               }\n            }\n        };\n        return propDesc;\n    };\n}\n\nexport function WatchColumnChanges(): PropertyDecorator {\n    return (target: any, key: string, propDesc?: PropertyDescriptor) => {\n        const privateKey = '_' + key.toString();\n        propDesc = propDesc || {\n            configurable: true,\n            enumerable: true,\n        };\n        propDesc.get = propDesc.get || (function (this: any) { return this[privateKey]; });\n        const originalSetter = propDesc.set || (function (this: any, val: any) { this[privateKey] = val; });\n\n        propDesc.set = function (this: any, val: any) {\n            const init = this._init;\n            const oldValue = this[key];\n            originalSetter.call(this, val);\n            if (val !== oldValue || (typeof val === 'object' && val === oldValue)) {\n                if (this.rowIslandAPI.rowIsland) {\n                    this.rowIslandAPI.rowIsland.updateColumnList();\n               }\n            }\n        };\n        return propDesc;\n    };\n}\n\nexport function notifyChanges(repaint = false) {\n    return (_: any, key: string, propDesc?: PropertyDescriptor) => {\n\n        const privateKey = `__${key}`;\n\n        propDesc = propDesc || {\n            enumerable: true,\n            configurable: true\n        };\n\n\n        const originalSetter = propDesc ? propDesc.set : null;\n\n        propDesc.get = propDesc.get || (function(this) { return this[privateKey]; });\n\n        propDesc.set = function(this, newValue) {\n            if (originalSetter) {\n                originalSetter.call(this, newValue);\n                if (this.grid) {\n                    this.grid.notifyChanges(repaint);\n                }\n            } else {\n                if (newValue === this[key]) { return; }\n                this[privateKey] = newValue;\n                if (this.grid) {\n                    this.grid.notifyChanges(repaint);\n                }\n            }\n        };\n        return propDesc as any;\n    };\n}\n","import { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { Subject } from 'rxjs';\n\nexport class IgxRowIslandAPIService {\n    public rowIsland: IgxRowIslandComponent;\n    public change: Subject<any> = new Subject<any>();\n    protected state: Map<string, IgxRowIslandComponent> = new Map<string, IgxRowIslandComponent>();\n    protected destroyMap: Map<string, Subject<boolean>> = new Map<string, Subject<boolean>>();\n\n    protected childRowIslands: Map<string, IgxRowIslandComponent> = new Map<string, IgxRowIslandComponent>();\n    protected childGrids:  Map<any, IgxHierarchicalGridComponent> = new Map<any, IgxHierarchicalGridComponent>();\n\n    public register(rowIsland: IgxRowIslandComponent) {\n        this.state.set(rowIsland.id, rowIsland);\n        this.destroyMap.set(rowIsland.id, new Subject<boolean>());\n    }\n\n    public unsubscribe(rowIsland: IgxRowIslandComponent) {\n        this.state.delete(rowIsland.id);\n    }\n\n    public get(id: string): IgxRowIslandComponent {\n        return this.state.get(id);\n    }\n\n    public unset(id: string) {\n        this.state.delete(id);\n        this.destroyMap.delete(id);\n    }\n\n    public reset(oldId: string, newId: string) {\n        const destroy = this.destroyMap.get(oldId);\n        const rowIsland = this.get(oldId);\n\n        this.unset(oldId);\n\n        if (rowIsland) {\n            this.state.set(newId, rowIsland);\n        }\n\n        if (destroy) {\n            this.destroyMap.set(newId, destroy);\n        }\n    }\n\n    registerChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childRowIslands.set(rowIsland.key, rowIsland);\n        this.destroyMap.set(rowIsland.key, new Subject<boolean>());\n    }\n\n    unsetChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childRowIslands.delete(rowIsland.key);\n        this.destroyMap.delete(rowIsland.key);\n    }\n\n    getChildRowIsland(rowIslandKey: string) {\n        return this.childRowIslands.get(rowIslandKey);\n    }\n\n    registerChildGrid(parentRowID: string|object, grid: IgxHierarchicalGridComponent) {\n        this.childGrids.set(parentRowID, grid);\n    }\n\n    getChildGrids(inDepth?: boolean) {\n        let allChildren = [];\n        this.childGrids.forEach((grid) => {\n            allChildren.push(grid);\n        });\n        if (inDepth) {\n            this.childRowIslands.forEach((layout) => {\n                allChildren = allChildren.concat(layout.rowIslandAPI.getChildGrids(inDepth));\n            });\n        }\n\n        return allChildren;\n    }\n\n    getChildGridByID(rowID) {\n        return this.childGrids.get(rowID);\n    }\n}\n","export interface ISummaryExpression {\n    fieldName: string;\n    customSummary?: any;\n}\nexport interface IgxSummaryResult {\n    key: string;\n    label: string;\n    summaryResult: any;\n}\n\nexport interface ISummaryRecord {\n    summaries: Map<string, IgxSummaryResult[]>;\n    max?: number;\n    cellIndentation?: number;\n}\n\nconst clear = (el) => el === 0 || Boolean(el);\nconst first = (arr) => arr[0];\nconst last = (arr) => arr[arr.length - 1];\n\nexport class IgxSummaryOperand {\n    /**\n     * Counts all the records in the data source.\n     * If filtering is applied, counts only the filtered records.\n     * ```typescript\n     * IgxSummaryOperand.count(dataSource);\n     * ```\n     * @memberof IgxSummaryOperand\n     */\n    public static count(data: any[]): number {\n        return data.length;\n    }\n    /**\n     * Executes the static `count` method and returns `IgxSummaryResult[]`.\n     * ```typescript\n     * interface IgxSummaryResult {\n     *   key: string;\n     *   label: string;\n     *   summaryResult: any;\n     * }\n     * ```\n     * Can be overridden in the inherited classes to provide customization for the `summary`.\n     * ```typescript\n     * class CustomSummary extends IgxSummaryOperand {\n     *   constructor() {\n     *     super();\n     *   }\n     *   public operate(data: any[], allData: any[], fieldName: string): IgxSummaryResult[] {\n     *     const result = [];\n     *     result.push({\n     *       key: \"test\",\n     *       label: \"Test\",\n     *       summaryResult: IgxSummaryOperand.count(data)\n     *     });\n     *     return result;\n     *   }\n     * }\n     * this.grid.getColumnByName('ColumnName').summaries = CustomSummary;\n     * ```\n     * @memberof IgxSummaryOperand\n     */\n    public operate(data: any[] = [], allData: any[] = [], fieldName?: string): IgxSummaryResult[] {\n        return [{\n            key: 'count',\n            label: 'Count',\n            summaryResult: IgxSummaryOperand.count(data)\n        }];\n    }\n}\n\n// @dynamic\nexport class IgxNumberSummaryOperand extends IgxSummaryOperand {\n    /**\n     * Returns the minimum numeric value in the provided data records.\n     * If filtering is applied, returns the minimum value in the filtered data records.\n     * ```typescript\n     * IgxNumberSummaryOperand.min(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static min(data: any[]): number {\n        return data.length && data.filter(clear).length ? data.filter(clear).reduce((a, b) => Math.min(a, b)) : 0;\n    }\n    /**\n     * Returns the maximum numeric value in the provided data records.\n     * If filtering is applied, returns the maximum value in the filtered data records.\n     * ```typescript\n     * IgxNumberSummaryOperand.max(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static max(data: any[]): number {\n        return data.length && data.filter(clear).length ? data.filter(clear).reduce((a, b) => Math.max(a, b)) : 0;\n    }\n    /**\n     * Returns the sum of the numeric values in the provided data records.\n     * If filtering is applied, returns the sum of the numeric values in the data records.\n     * ```typescript\n     * IgxNumberSummaryOperand.sum(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static sum(data: any[]): number {\n        return data.length && data.filter(clear).length ? data.filter(clear).reduce((a, b) => +a + +b) : 0;\n    }\n    /**\n     * Returns the average numeric value in the data provided data records.\n     * If filtering is applied, returns the average numeric value in the filtered data records.\n     * ```typescript\n     * IgxSummaryOperand.average(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static average(data: any[]): number {\n        return data.length && data.filter(clear).length ? this.sum(data) / this.count(data) : 0;\n    }\n    /**\n     * Executes the static methods and returns `IgxSummaryResult[]`.\n     * ```typescript\n     * interface IgxSummaryResult {\n     *   key: string;\n     *   label: string;\n     *   summaryResult: any;\n     * }\n     * ```\n     * Can be overridden in the inherited classes to provide customization for the `summary`.\n     * ```typescript\n     * class CustomNumberSummary extends IgxNumberSummaryOperand {\n     *   constructor() {\n     *     super();\n     *   }\n     *   public operate(data: any[], allData: any[], fieldName: string): IgxSummaryResult[] {\n     *     const result = [];\n     *     result.push({\n     *       key: \"avg\",\n     *       label: \"Avg\",\n     *       summaryResult: IgxNumberSummaryOperand.average(data)\n     *     });\n     *     result.push({\n     *       key: \"max\",\n     *       label: \"Max\",\n     *       summaryResult: IgxNumberSummaryOperand.max(data)\n     *     });\n     *     return result;\n     *   }\n     * }\n     * this.grid.getColumnByName('ColumnName').summaries = CustomNumberSummary;\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public operate(data: any[] = [], allData: any[] = [], fieldName?: string): IgxSummaryResult[] {\n        const result = super.operate(data, allData, fieldName);\n        result.push({\n            key: 'min',\n            label: 'Min',\n            summaryResult: IgxNumberSummaryOperand.min(data)\n        });\n        result.push({\n            key: 'max',\n            label: 'Max',\n            summaryResult: IgxNumberSummaryOperand.max(data)\n        });\n        result.push({\n            key: 'sum',\n            label: 'Sum',\n            summaryResult: IgxNumberSummaryOperand.sum(data)\n        });\n        result.push({\n            key: 'average',\n            label: 'Avg',\n            summaryResult: IgxNumberSummaryOperand.average(data)\n        });\n        return result;\n    }\n}\n\n// @dynamic\nexport class IgxDateSummaryOperand extends IgxSummaryOperand {\n    /**\n     * Returns the latest date value in the data records.\n     * If filtering is applied, returns the latest date value in the filtered data records.\n     * ```typescript\n     * IgxDateSummaryOperand.latest(data);\n     * ```\n     * @memberof IgxDateSummaryOperand\n     */\n    public static latest(data: any[]) {\n        return data.length && data.filter(clear).length ?\n            first(data.filter(clear).sort((a, b) => new Date(b).valueOf() - new Date(a).valueOf())) : undefined;\n    }\n    /**\n     * Returns the earliest date value in the data records.\n     * If filtering is applied, returns the latest date value in the filtered data records.\n     * ```typescript\n     * IgxDateSummaryOperand.earliest(data);\n     * ```\n     * @memberof IgxDateSummaryOperand\n     */\n    public static earliest(data: any[]) {\n        return data.length && data.filter(clear).length ?\n            last(data.filter(clear).sort((a, b) => new Date(b).valueOf() - new Date(a).valueOf())) : undefined;\n    }\n    /**\n     * Executes the static methods and returns `IgxSummaryResult[]`.\n     * ```typescript\n     * interface IgxSummaryResult {\n     *   key: string;\n     *   label: string;\n     *   summaryResult: any;\n     * }\n     * ```\n     * Can be overridden in the inherited classes to provide customization for the `summary`.\n     * ```typescript\n     * class CustomDateSummary extends IgxDateSummaryOperand {\n     *   constructor() {\n     *     super();\n     *   }\n     *   public operate(data: any[], allData: any[], fieldName: string): IgxSummaryResult[] {\n     *     const result = [];\n     *     result.push({\n     *       key: \"latest\",\n     *       label: \"Latest Date\",\n     *       summaryResult: IgxDateSummaryOperand.latest(data)\n     *     });\n     *     return result;\n     *   }\n     * }\n     * this.grid.getColumnByName('ColumnName').summaries = CustomDateSummary;\n     * ```\n     * @memberof IgxDateSummaryOperand\n     */\n    public operate(data: any[] = [], allData: any[] = [], fieldName?: string): IgxSummaryResult[] {\n        const result = super.operate(data, allData, fieldName);\n        result.push({\n            key: 'earliest',\n            label: 'Earliest',\n            summaryResult: IgxDateSummaryOperand.earliest(data)\n        });\n        result.push({\n            key: 'latest',\n            label: 'Latest',\n            summaryResult: IgxDateSummaryOperand.latest(data)\n        });\n        return result;\n    }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n\n@Directive({\n    selector: '[igxFilterCellTemplate]'\n})\nexport class IgxFilterCellTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxCell]'\n})\nexport class IgxCellTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxHeader]'\n})\nexport class IgxCellHeaderTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n\n}\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxFooter]'\n})\nexport class IgxCellFooterTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxCellEditor]'\n})\nexport class IgxCellEditorTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Input,\n    QueryList,\n    TemplateRef,\n    forwardRef,\n    OnDestroy,\n    Output,\n    EventEmitter\n} from '@angular/core';\nimport { WatchColumnChanges } from './watch-changes';\nimport { IgxRowIslandAPIService } from './hierarchical-grid/row-island-api.service';\nimport { DataType } from '../data-operations/data-util';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxDateSummaryOperand, IgxNumberSummaryOperand, IgxSummaryOperand } from './summaries/grid-summary';\nimport { IgxRowComponent } from './row.component';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { DefaultSortingStrategy, ISortingStrategy } from '../data-operations/sorting-strategy';\nimport { getNodeSizeViaRange, flatten } from '../core/utils';\nimport {\n    IgxBooleanFilteringOperand,\n    IgxNumberFilteringOperand,\n    IgxDateFilteringOperand,\n    IgxStringFilteringOperand,\n    IgxFilteringOperand\n} from '../data-operations/filtering-condition';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { IgxGridFilteringCellComponent } from './filtering/grid-filtering-cell.component';\nimport { IgxGridHeaderGroupComponent } from './grid-header-group.component';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\nimport { MRLColumnSizeInfo, MRLResizeColumnInfo } from '../data-operations/multi-row-layout.interfaces';\nimport { DisplayDensity } from '../core/displayDensity';\nimport { notifyChanges } from './watch-changes';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport {\n    IgxCellTemplateDirective,\n    IgxCellHeaderTemplateDirective,\n    IgxCellEditorTemplateDirective,\n    IgxFilterCellTemplateDirective\n} from './common/templates';\n\n/**\n * **Ignite UI for Angular Column** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid.html#columns-configuration)\n *\n * The Ignite UI Column is used within an `igx-grid` element to define what data the column will show. Features such as sorting,\n * filtering & editing are enabled at the column level.  You can also provide a template containing custom content inside\n * the column using `ng-template` which will be used for all cells within the column.\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-column',\n    template: ``\n})\nexport class IgxColumnComponent implements AfterContentInit, OnDestroy {\n    /**\n     * Sets/gets the `field` value.\n     * ```typescript\n     * let columnField = this.column.field;\n     * ```\n     * ```html\n     * <igx-column [field] = \"'ID'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public field: string;\n    /**\n     * Sets/gets the `header` value.\n     * ```typescript\n     * let columnHeader = this.column.header;\n     * ```\n     * ```html\n     * <igx-column [header] = \"'ID'\"></igx-column>\n     * ```\n     *\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public header = '';\n    /**\n     * Sets/gets whether the column is sortable.\n     * Default value is `false`.\n     * ```typescript\n     * let isSortable = this.column.sortable;\n     * ```\n     * ```html\n     * <igx-column [sortable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    public sortable = false;\n    /**\n     * Sets/gets whether the column is groupable.\n     * Default value is `false`.\n     * ```typescript\n     * let isGroupable = this.column.groupable;\n     * ```\n     * ```html\n     * <igx-column [groupable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges(true)\n    @WatchColumnChanges()\n    @Input()\n    groupable = false;\n    /**\n     * Gets whether the column is editable.\n     * Default value is `false`.\n     * ```typescript\n     * let isEditable = this.column.editable;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    get editable(): boolean {\n        // Updating the primary key when grid has transactions (incl. row edit)\n        // should not be allowed, as that can corrupt transaction state.\n        const rowEditable = this.grid && this.grid.rowEditable;\n        const hasTransactions = this.grid && this.grid.transactions.enabled;\n\n        if (this.isPrimaryColumn && (rowEditable || hasTransactions)) {\n            return false;\n        }\n\n        if (this._editable !== undefined) {\n            return this._editable;\n        } else {\n            return rowEditable;\n        }\n    }\n    /**\n     * Sets whether the column is editable.\n     * ```typescript\n     * this.column.editable = true;\n     * ```\n     * ```html\n     * <igx-column [editable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set editable(editable: boolean) {\n        this._editable = editable;\n    }\n    /**\n     * Sets/gets whether the column is filterable.\n     * Default value is `true`.\n     * ```typescript\n     * let isFilterable = this.column.filterable;\n     * ```\n     * ```html\n     * <igx-column [filterable] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public filterable = true;\n    /**\n     * Sets/gets whether the column is resizable.\n     * Default value is `false`.\n     * ```typescript\n     * let isResizable = this.column.resizable;\n     * ```\n     * ```html\n     * <igx-column [resizable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    public resizable = false;\n    /**\n     * Gets a value indicating whether the summary for the column is enabled.\n     * ```typescript\n     * let hasSummary = this.column.hasSummary;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges(true)\n    @WatchColumnChanges()\n    @Input()\n    get hasSummary() {\n        return this._hasSummary;\n    }\n    /**\n     * Sets a value indicating whether the summary for the column is enabled.\n     * Default value is `false`.\n     * ```html\n     * <igx-column [hasSummary] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set hasSummary(value) {\n        this._hasSummary = value;\n\n        if (this.grid) {\n            this.grid.summaryService.resetSummaryHeight();\n        }\n    }\n    /**\n     * Gets whether the column is hidden.\n     * ```typescript\n     * let isHidden = this.column.hidden;\n     * ```\n     *@memberof IgxColumnComponent\n     */\n    @notifyChanges(true)\n    @WatchColumnChanges()\n    @Input()\n    get hidden(): boolean {\n        return this._hidden;\n    }\n    /**\n     * Sets the column hidden property.\n     * Default value is `false`.\n     * ```html\n     * <igx-column [hidden] = \"true\"></igx-column>\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-column [(hidden)] = \"model.isHidden\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set hidden(value: boolean) {\n        if (this._hidden !== value) {\n            this._hidden = value;\n            this.hiddenChange.emit(this._hidden);\n            if (this.columnLayoutChild && this.parent.hidden !== value) {\n                this.parent.hidden = value;\n                return;\n            }\n            if (this.grid) {\n                this.grid.endEdit(false);\n                this.grid.summaryService.resetSummaryHeight();\n                this.grid.filteringService.refreshExpressions();\n                this.grid.notifyChanges();\n                // this.grid.refreshSearch(true);\n            }\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public hiddenChange = new EventEmitter<boolean>();\n    /**\n     * Gets whether the hiding is disabled.\n     * ```typescript\n     * let isHidingDisabled =  this.column.disableHiding;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    disableHiding = false;\n    /**\n     * Gets whether the pinning is disabled.\n     * ```typescript\n     * let isPinningDisabled =  this.column.disablePinning;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    disablePinning = false;\n    /**\n     * Sets/gets whether the column is movable.\n     * Default value is `false`.\n     * ```typescript\n     * let isMovable = this.column.movable;\n     * ```\n     * ```html\n     * <igx-column [movable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @notifyChanges()\n    @Input()\n    public movable = false;\n    /**\n     * Gets the `width` of the column.\n     * ```typescript\n     * let columnWidth = this.column.width;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges(true)\n    @WatchColumnChanges()\n    @Input()\n    public get width(): string {\n        return this.widthSetByUser ? this._width : this.defaultWidth;\n    }\n    /**\n     * Sets the `width` of the column.\n     * ```html\n     * <igx-column [width] = \"'25%'\"></igx-column>\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-column [(width)]=\"model.columns[0].width\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set width(value: string) {\n        if (value) {\n            this._calcWidth = null;\n            this.calcPixelWidth = NaN;\n            this.widthSetByUser = true;\n            this._width = value;\n            if (this.grid) {\n                this.cacheCalcWidth();\n            }\n            this.widthChange.emit(this._width);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public widthChange = new EventEmitter<string>();\n\n    /**\n     * @hidden\n     */\n    public get calcWidth(): any {\n        return this.getCalcWidth();\n    }\n\n    private _calcWidth = null;\n    public calcPixelWidth: number;\n\n    /**\n     * Sets/gets the maximum `width` of the column.\n     * ```typescript\n     * let columnMaxWidth = this.column.width;\n     * ```\n     * ```html\n     * <igx-column [maxWidth] = \"'75%'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    public maxWidth: string;\n    /**\n     * Sets/gets the minimum `width` of the column.\n     * Default value is `88`;\n     * ```typescript\n     * let columnMinWidth = this.column.minWidth;\n     * ```\n     * ```html\n     * <igx-column [minWidth] = \"'15%'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public set minWidth(value: string) {\n        const minVal = parseFloat(value);\n        if (Number.isNaN(minVal)) { return; }\n        this._defaultMinWidth = value;\n\n    }\n    public get minWidth(): string {\n        return !this._defaultMinWidth ? this.defaultMinWidth : this._defaultMinWidth;\n    }\n    /**\n     * Sets/gets the class selector of the column header.\n     * ```typescript\n     * let columnHeaderClass = this.column.headerClasses;\n     * ```\n     * ```html\n     * <igx-column [headerClasses] = \"'column-header'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public headerClasses = '';\n\n    /**\n     * Sets/gets the class selector of the column group header.\n     * ```typescript\n     * let columnHeaderClass = this.column.headerGroupClasses;\n     * ```\n     * ```html\n     * <igx-column [headerGroupClasses] = \"'column-group-header'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public headerGroupClasses = '';\n    /**\n     * Sets a conditional class selector of the column cells.\n     * Accepts an object literal, containing key-value pairs,\n     * where the key is the name of the CSS class, while the\n     * value is either a callback function that returns a boolean,\n     * or boolean, like so:\n     * ```typescript\n     * callback = (rowData, columnKey, cellValue, rowIndex) => { return rowData[columnKey] > 6; }\n     * cellClasses = { 'className' : this.callback };\n     * ```\n     * ```html\n     * <igx-column [cellClasses] = \"cellClasses\"></igx-column>\n     * <igx-column [cellClasses] = \"{'class1' : true }\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public cellClasses: any;\n\n    /**\n     * Sets conditional style properties on the column cells.\n     * Similar to `ngStyle` it accepts an object literal where the keys are\n     * the style properties and the value is the expression to be evaluated.\n     * As with `cellClasses` it accepts a callback function.\n     * ```typescript\n     * styles = {\n     *  background: 'royalblue',\n     *  color: (rowData, columnKey, cellValue, rowIndex) => value.startsWith('Important') : 'red': 'inherit'\n     * }\n     * ```\n     * ```html\n     * <igx-column [cellStyles]=\"styles\"></igx-column>\n     * ```\n     *\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    cellStyles = null;\n    /**\n     * Gets the column index.\n     * ```typescript\n     * let columnIndex = this.column.index;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get index(): number {\n        return this.grid.columns.indexOf(this);\n    }\n    /**\n     * When autogenerating columns, the formatter is used to format the display of the column data\n     * without modifying the underlying bound values.\n     *\n     * In this example, we check to see if the column name is Salary, and then provide a method as the column formatter\n     * to format the value into a currency string.\n     *\n     * ```typescript\n     * onColumnInit(column: IgxColumnComponent) {\n     *   if (column.field == \"Salary\") {\n     *     column.formatter = (salary => this.format(salary));\n     *   }\n     * }\n     *\n     * format(value: number) : string {\n     *   return formatCurrency(value, \"en-us\", \"$\");\n     * }\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    formatter: (value: any) => any;\n    /**\n     * Sets/gets whether the column filtering should be case sensitive.\n     * Default value is `true`.\n     * ```typescript\n     * let filteringIgnoreCase = this.column.filteringIgnoreCase;\n     * ```\n     * ```html\n     * <igx-column [filteringIgnoreCase] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    public filteringIgnoreCase = true;\n    /**\n     * Sets/gets whether the column sorting should be case sensitive.\n     * Default value is `true`.\n     * ```typescript\n     * let sortingIgnoreCase = this.column.sortingIgnoreCase;\n     * ```\n     * ```html\n     * <igx-column [sortingIgnoreCase] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    public sortingIgnoreCase = true;\n    /**\n     * Sets/gets the data type of the column values.\n     * Default value is `string`.\n     * ```typescript\n     * let columnDataType = this.column.dataType;\n     * ```\n     * ```html\n     * <igx-column [dataType] = \"'number'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public dataType: DataType = DataType.String;\n    /**\n     * Gets whether the column is `pinned`.\n     * ```typescript\n     * let isPinned = this.column.pinned;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @WatchColumnChanges()\n    @Input()\n    public get pinned(): boolean {\n        return this._pinned;\n    }\n    /**\n     * Sets whether the column is pinned.\n     * Default value is `false`.\n     * ```html\n     * <igx-column [pinned] = \"true\"></igx-column>\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-column [(pinned)] = \"model.columns[0].isPinned\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set pinned(value: boolean) {\n        if (this._pinned !== value) {\n            if (this.grid && this.width && !isNaN(parseInt(this.width, 10))) {\n                value ? this.pin() : this.unpin();\n                return;\n            }\n            /* No grid/width available at initialization. `initPinning` in the grid\n               will re-init the group (if present)\n            */\n            this._pinned = value;\n            this.pinnedChange.emit(this._pinned);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public pinnedChange = new EventEmitter<boolean>();\n\n    /**\n     * @deprecated\n     * Gets/Sets the `id` of the `igx-grid`.\n     * ```typescript\n     * let columnGridId = this.column.gridID;\n     * ```\n     * ```typescript\n     * this.column.gridID = 'grid-1';\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @DeprecateProperty(`The property is deprecated. Please, use \\`column.grid.id\\` instead.`)\n    public gridID: string;\n    /**\n     * Gets the column `summaries`.\n     * ```typescript\n     * let columnSummaries = this.column.summaries;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges(true)\n    @WatchColumnChanges()\n    @Input()\n    public get summaries(): any {\n        return this._summaries;\n    }\n    /**\n     * Sets the column `summaries`.\n     * ```typescript\n     * this.column.summaries = IgxNumberSummaryOperand;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set summaries(classRef: any) {\n        this._summaries = new classRef();\n\n        if (this.grid) {\n            this.grid.summaryService.removeSummariesCachePerColumn(this.field);\n            (this.grid as any)._summaryPipeTrigger++;\n            this.grid.summaryService.resetSummaryHeight();\n        }\n    }\n    /**\n     * Sets/gets whether the column is `searchable`.\n     * Default value is `true`.\n     * ```typescript\n     * let isSearchable =  this.column.searchable';\n     * ```\n     * ```html\n     *  <igx-column [searchable] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    public searchable = true;\n    /**\n     * Gets the column `filters`.\n     * ```typescript\n     * let columnFilters = this.column.filters'\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get filters(): IgxFilteringOperand {\n        return this._filters;\n    }\n    /**\n     * Sets the column `filters`.\n     * ```typescript\n     * this.column.filters = IgxBooleanFilteringOperand.instance().\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set filters(instance: IgxFilteringOperand) {\n        this._filters = instance;\n    }\n    /**\n     * Gets the column `sortStrategy`.\n     * ```typescript\n     * let sortStrategy = this.column.sortStrategy\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get sortStrategy(): ISortingStrategy {\n        return this._sortStrategy;\n    }\n    /**\n     * Sets the column `sortStrategy`.\n     * ```typescript\n     * this.column.sortStrategy = new CustomSortingStrategy().\n     * class CustomSortingStrategy extends SortingStrategy {...}\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set sortStrategy(classRef: ISortingStrategy) {\n        this._sortStrategy = classRef;\n    }\n    /**\n    * Gets the function that compares values for grouping.\n    * ```typescript\n    * let groupingComparer = this.column.groupingComparer'\n    * ```\n    * @memberof IgxColumnComponent\n    */\n    @Input()\n    public get groupingComparer(): (a: any, b: any) => number {\n        return this._groupingComparer;\n    }\n    /**\n     * Sets a custom function to compare values for grouping.\n     * Subsequent values in the sorted data that the function returns 0 for are grouped.\n     * ```typescript\n     * this.column.groupingComparer = (a: any, b: any) => { return a === b ? 0 : -1; }\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set groupingComparer(funcRef: (a: any, b: any) => number) {\n        this._groupingComparer = funcRef;\n    }\n    /**\n     * Gets the default minimum `width` of the column.\n     * ```typescript\n     * let defaultMinWidth =  this.column.defaultMinWidth;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get defaultMinWidth(): string {\n        if (!this.grid) { return '80'; }\n        switch (this.grid.displayDensity) {\n            case DisplayDensity.cosy:\n                return '64';\n            case DisplayDensity.compact:\n                return '56';\n            default:\n                return '80';\n        }\n    }\n    /**\n     * The reference to the `igx-grid` owner.\n     * ```typescript\n     * let gridComponent = this.column.grid;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public get grid(): IgxGridBaseComponent {\n        return this.gridAPI.grid;\n    }\n    /**\n     * Returns a reference to the `bodyTemplate`.\n     * ```typescript\n     * let bodyTemplate = this.column.bodyTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input('cellTemplate')\n    get bodyTemplate(): TemplateRef<any> {\n        return this._bodyTemplate;\n    }\n    /**\n     * Sets the body template.\n     * ```html\n     * <ng-template #bodyTemplate igxCell let-val>\n     *    <div style = \"background-color: yellowgreen\" (click) = \"changeColor(val)\">\n     *       <span> {{val}} </span>\n     *    </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'bodyTemplate'\", {read: TemplateRef })\n     * public bodyTemplate: TemplateRef<any>;\n     * this.column.bodyTemplate = this.bodyTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set bodyTemplate(template: TemplateRef<any>) {\n        this._bodyTemplate = template;\n    }\n    /**\n     * Returns a reference to the header template.\n     * ```typescript\n     * let headerTemplate = this.column.headerTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input()\n    get headerTemplate(): TemplateRef<any> {\n        return this._headerTemplate;\n    }\n    /**\n     * Sets the header template.\n     * Note that the column header height is fixed and any content bigger than it will be cut off.\n     * ```html\n     * <ng-template #headerTemplate>\n     *   <div style = \"background-color:black\" (click) = \"changeColor(val)\">\n     *       <span style=\"color:red\" >{{column.field}}</span>\n     *   </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'headerTemplate'\", {read: TemplateRef })\n     * public headerTemplate: TemplateRef<any>;\n     * this.column.headerTemplate = this.headerTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set headerTemplate(template: TemplateRef<any>) {\n        this._headerTemplate = template;\n    }\n    /**\n     * Returns a reference to the inline editor template.\n     * ```typescript\n     * let inlineEditorTemplate = this.column.inlineEditorTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input('cellEditorTemplate')\n    get inlineEditorTemplate(): TemplateRef<any> {\n        return this._inlineEditorTemplate;\n    }\n    /**\n     * Sets the inline editor template.\n     * ```html\n     * <ng-template #inlineEditorTemplate igxCellEditor let-cell=\"cell\">\n     *     <input type=\"string\" [(ngModel)]=\"cell.value\"/>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'inlineEditorTemplate'\", {read: TemplateRef })\n     * public inlineEditorTemplate: TemplateRef<any>;\n     * this.column.inlineEditorTemplate = this.inlineEditorTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set inlineEditorTemplate(template: TemplateRef<any>) {\n        this._inlineEditorTemplate = template;\n    }\n    /**\n     * Returns a reference to the `filterCellTemplate`.\n     * ```typescript\n     * let filterCellTemplate = this.column.filterCellTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @notifyChanges()\n    @WatchColumnChanges()\n    @Input('filterCellTemplate')\n    get filterCellTemplate(): TemplateRef<any> {\n        return this._filterCellTemplate;\n    }\n    /**\n     * Sets the quick filter template.\n     * ```html\n     * <ng-template #filterCellTemplate IgxFilterCellTemplate let-column=\"column\">\n     *    <input (input)=\"onInput()\">\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'filterCellTemplate'\", {read: TemplateRef })\n     * public filterCellTemplate: TemplateRef<any>;\n     * this.column.filterCellTemplate = this.filterCellTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set filterCellTemplate(template: TemplateRef<any>) {\n        this._filterCellTemplate = template;\n    }\n    /**\n     * Gets the cells of the column.\n     * ```typescript\n     * let columnCells =  this.column.cells;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get cells(): IgxGridCellComponent[] {\n        return this.grid.rowList.filter((row) => row instanceof IgxRowComponent)\n            .map((row) => {\n                if (row.cells) {\n                    return row.cells.filter((cell) => cell.columnIndex === this.index);\n                }\n            }).reduce((a, b) => a.concat(b), []);\n    }\n    /**\n     * Gets the column visible index.\n     * If the column is not visible, returns `-1`.\n     * ```typescript\n     * let visibleColumnIndex =  this.column.visibleIndex;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get visibleIndex(): number {\n        if (!isNaN(this._vIndex)) {\n            return this._vIndex;\n        }\n        const unpinnedColumns = this.grid.unpinnedColumns.filter(c => !c.columnGroup);\n        const pinnedColumns = this.grid.pinnedColumns.filter(c => !c.columnGroup);\n        let col = this;\n        let vIndex = -1;\n\n        if (this.columnGroup) {\n            col = this.allChildren.filter(c => !c.columnGroup)[0] as any;\n        }\n        if (this.columnLayoutChild) {\n            return this.parent.childrenVisibleIndexes.find(x => x.column === this).index;\n        }\n\n        if (!this.pinned) {\n            const indexInCollection = unpinnedColumns.indexOf(col);\n            vIndex = indexInCollection === -1 ? -1 : pinnedColumns.length + indexInCollection;\n        } else {\n            vIndex = pinnedColumns.indexOf(col);\n        }\n        this._vIndex = vIndex;\n        return vIndex;\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnGroup`.\n     * ```typescript\n     * let columnGroup =  this.column.columnGroup;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get columnGroup() {\n        return false;\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnLayout` for multi-row layout.\n     * ```typescript\n     * let columnGroup =  this.column.columnGroup;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get columnLayout() {\n        return false;\n    }\n\n    /**\n    * Returns a boolean indicating if the column is a child of a `ColumnLayout` for multi-row layout.\n    * ```typescript\n    * let columnLayoutChild =  this.column.columnLayoutChild;\n    * ```\n    * @memberof IgxColumnComponent\n    */\n    get columnLayoutChild() {\n        return this.parent && this.parent.columnLayout;\n    }\n\n    /**\n     * Returns the children columns collection.\n     * Returns an empty array if the column does not contain children columns.\n     * ```typescript\n     * let childrenColumns =  this.column.allChildren;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get allChildren(): IgxColumnComponent[] {\n        return [];\n    }\n    /**\n     * Returns the level of the column in a column group.\n     * Returns `0` if the column doesn't have a `parent`.\n     * ```typescript\n     * let columnLevel =  this.column.level;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get level() {\n        let ptr = this.parent;\n        let lvl = 0;\n\n        while (ptr) {\n            lvl++;\n            ptr = ptr.parent;\n        }\n        return lvl;\n    }\n\n    get isLastPinned(): boolean {\n        return this.grid.pinnedColumns[this.grid.pinnedColumns.length - 1] === this;\n    }\n    get gridRowSpan(): number {\n        return this.rowEnd && this.rowStart ? this.rowEnd - this.rowStart : 1;\n    }\n    get gridColumnSpan(): number {\n        return this.colEnd && this.colStart ? this.colEnd - this.colStart : 1;\n    }\n\n    /**\n     * Row index where the current field should end.\n     * The amount of rows between rowStart and rowEnd will determine the amount of spanning rows to that field\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [rowEnd]=\"2\" [rowStart]=\"1\" [colStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public rowEnd: number;\n\n    /**\n     * Column index where the current field should end.\n     * The amount of columns between colStart and colEnd will determine the amount of spanning columns to that field\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [colEnd]=\"3\" [rowStart]=\"1\" [colStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public colEnd: number;\n\n    /**\n     * Row index from which the field is starting.\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [rowStart]=\"1\" [colStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input() rowStart: number;\n\n    /**\n     * Column index from which the field is starting.\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [colStart]=\"1\" [rowStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input() colStart: number;\n\n    /**\n     * hidden\n     */\n    public defaultWidth: string;\n\n    /**\n     * hidden\n     */\n    public widthSetByUser: boolean;\n\n    /**\n     * Returns the filteringExpressionsTree of the column.\n     * ```typescript\n     * let tree =  this.column.filteringExpressionsTree;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get filteringExpressionsTree(): FilteringExpressionsTree {\n        return this.grid.filteringExpressionsTree.find(this.field) as FilteringExpressionsTree;\n    }\n    /**\n     * Sets/gets the parent column.\n     * ```typescript\n     * let parentColumn = this.column.parent;\n     * ```\n     * ```typescript\n     * this.column.parent = higherLevelColumn;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    parent = null;\n    /**\n     * Sets/gets the children columns.\n     * ```typescript\n     * let columnChildren = this.column.children;\n     * ```\n     * ```typescript\n     * this.column.children = childrenColumns;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    children: QueryList<IgxColumnComponent>;\n    /**\n     * @hidden\n     */\n    protected destroy$ = new Subject<boolean>();\n\n    /**\n     *@hidden\n     */\n    protected _unpinnedIndex;\n    /**\n     *@hidden\n     */\n    protected _pinned = false;\n    /**\n     *@hidden\n     */\n    protected _bodyTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _headerTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _inlineEditorTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _filterCellTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _summaries = null;\n    /**\n     *@hidden\n     */\n    protected _filters = null;\n    /**\n     *@hidden\n     */\n    protected _sortStrategy: ISortingStrategy = DefaultSortingStrategy.instance();\n    /**\n     *@hidden\n     */\n    protected _groupingComparer: (a: any, b: any) => number;\n    /**\n     *@hidden\n     */\n    protected _hidden = false;\n    /**\n     *@hidden\n     */\n    protected _index: number;\n    /**\n     *@hidden\n     */\n    protected _disablePinning = false;\n    /**\n     *@hidden\n     */\n    protected _width: string;\n    /**\n     *@hidden\n     */\n    protected _defaultMinWidth = '';\n    /**\n     *@hidden\n     */\n    protected _hasSummary = false;\n    /**\n     * @hidden\n     */\n    protected _editable: boolean;\n    /**\n     * @hidden\n     */\n    protected get isPrimaryColumn(): boolean {\n        return this.field !== undefined && this.grid !== undefined && this.field === this.grid.primaryKey;\n    }\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCellTemplateDirective, { read: IgxCellTemplateDirective, static: false })\n    protected cellTemplate: IgxCellTemplateDirective;\n    /**\n     *@hidden\n     */\n    @ContentChildren(IgxCellHeaderTemplateDirective, { read: IgxCellHeaderTemplateDirective, descendants: false })\n    protected headTemplate: QueryList<IgxCellHeaderTemplateDirective>;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCellEditorTemplateDirective, { read: IgxCellEditorTemplateDirective, static: false })\n    protected editorTemplate: IgxCellEditorTemplateDirective;\n\n    protected _vIndex = NaN;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxFilterCellTemplateDirective, { read: IgxFilterCellTemplateDirective, static: false })\n    public filterCellTemplateDirective: IgxFilterCellTemplateDirective;\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>, public cdr: ChangeDetectorRef,\n        public rowIslandAPI: IgxRowIslandAPIService) { }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetCaches() {\n        this._vIndex = NaN;\n        if (this.grid) {\n            this.cacheCalcWidth();\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngAfterContentInit(): void {\n        if (this.cellTemplate) {\n            this._bodyTemplate = this.cellTemplate.template;\n        }\n        if (this.headTemplate && this.headTemplate.length) {\n            this._headerTemplate = this.headTemplate.toArray()[0].template;\n        }\n        if (this.editorTemplate) {\n            this._inlineEditorTemplate = this.editorTemplate.template;\n        }\n        if (this.filterCellTemplateDirective) {\n            this._filterCellTemplate = this.filterCellTemplateDirective.template;\n        }\n        if (!this.summaries) {\n            switch (this.dataType) {\n                case DataType.String:\n                case DataType.Boolean:\n                    this.summaries = IgxSummaryOperand;\n                    break;\n                case DataType.Number:\n                    this.summaries = IgxNumberSummaryOperand;\n                    break;\n                case DataType.Date:\n                    this.summaries = IgxDateSummaryOperand;\n                    break;\n                default:\n                    this.summaries = IgxSummaryOperand;\n                    break;\n            }\n        }\n        if (!this.filters) {\n            switch (this.dataType) {\n                case DataType.Boolean:\n                    this.filters = IgxBooleanFilteringOperand.instance();\n                    break;\n                case DataType.Number:\n                    this.filters = IgxNumberFilteringOperand.instance();\n                    break;\n                case DataType.Date:\n                    this.filters = IgxDateFilteringOperand.instance();\n                    break;\n                case DataType.String:\n                default:\n                    this.filters = IgxStringFilteringOperand.instance();\n                    break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    getGridTemplate(isRow: boolean, isIE: boolean): string {\n        if (isRow) {\n            const rowsCount = this.grid.multiRowLayoutRowSize;\n            return isIE ?\n                `(1fr)[${rowsCount}]` :\n                `repeat(${rowsCount},1fr)`;\n        } else {\n            return this.getColumnSizesString(this.children);\n        }\n    }\n\n    public getInitialChildColumnSizes(children: QueryList<IgxColumnComponent>): Array<MRLColumnSizeInfo> {\n        const columnSizes: MRLColumnSizeInfo[] = [];\n        // find the smallest col spans\n        children.forEach(col => {\n            if (!col.colStart) {\n                return;\n            }\n            const newWidthSet = col.widthSetByUser && columnSizes[col.colStart - 1] && !columnSizes[col.colStart - 1].widthSetByUser;\n            const newSpanSmaller = columnSizes[col.colStart - 1] && columnSizes[col.colStart - 1].colSpan > col.gridColumnSpan;\n            const bothWidthsSet = col.widthSetByUser && columnSizes[col.colStart - 1] && columnSizes[col.colStart - 1].widthSetByUser;\n            const bothWidthsNotSet = !col.widthSetByUser && columnSizes[col.colStart - 1] && !columnSizes[col.colStart - 1].widthSetByUser;\n\n            if (columnSizes[col.colStart - 1] === undefined) {\n                // If nothing is defined yet take any column at first\n                // We use colEnd to know where the column actually ends, because not always it starts where we have it set in columnSizes.\n                columnSizes[col.colStart - 1] = {\n                    ref: col,\n                    width: col.widthSetByUser || this.grid.columnWidthSetByUser ? parseInt(col.calcWidth, 10) : null,\n                    colSpan: col.gridColumnSpan,\n                    colEnd: col.colStart + col.gridColumnSpan,\n                    widthSetByUser: col.widthSetByUser\n                };\n            } else if (newWidthSet || (newSpanSmaller && ((bothWidthsSet) || (bothWidthsNotSet)))) {\n                // If a column is set already it should either not have width defined or have width with bigger span than the new one.\n\n                /**\n                 *  If replaced column has bigger span, we want to fill the remaining columns\n                 *  that the replacing column does not fill with the old one.\n                 **/\n                if (bothWidthsSet && newSpanSmaller) {\n                    // Start from where the new column set would end and apply the old column to the rest depending on how much it spans.\n                    // We have not yet replaced it so we can use it directly from the columnSizes collection.\n                    // This is where colEnd is used because the colStart of the old column is not actually i + 1.\n                    for (let i = col.colStart - 1 + col.gridColumnSpan; i < columnSizes[col.colStart - 1].colEnd - 1; i++) {\n                        if (!columnSizes[i] || !columnSizes[i].widthSetByUser) {\n                            columnSizes[i] = columnSizes[col.colStart - 1];\n                        } else {\n                            break;\n                        }\n                    }\n                }\n\n                // Replace the old column with the new one.\n                columnSizes[col.colStart - 1] = {\n                    ref: col,\n                    width: col.widthSetByUser || this.grid.columnWidthSetByUser ? parseInt(col.calcWidth, 10) : null,\n                    colSpan: col.gridColumnSpan,\n                    colEnd: col.colStart + col.gridColumnSpan,\n                    widthSetByUser: col.widthSetByUser\n                };\n            } else if (bothWidthsSet && columnSizes[col.colStart - 1].colSpan < col.gridColumnSpan) {\n                // If the column already in the columnSizes has smaller span, we still need to fill any empty places with the current col.\n                // Start from where the smaller column set would end and apply the bigger column to the rest depending on how much it spans.\n                // Since here we do not have it in columnSizes we set it as a new column keeping the same colSpan.\n                for (let i = col.colStart - 1 + columnSizes[col.colStart - 1].colSpan; i < col.colStart - 1 + col.gridColumnSpan; i++) {\n                    if (!columnSizes[i] || !columnSizes[i].widthSetByUser) {\n                        columnSizes[i] = {\n                            ref: col,\n                            width: col.widthSetByUser || this.grid.columnWidthSetByUser ? parseInt(col.calcWidth, 10) : null,\n                            colSpan: col.gridColumnSpan,\n                            colEnd: col.colStart + col.gridColumnSpan,\n                            widthSetByUser: col.widthSetByUser\n                        };\n                    } else {\n                        break;\n                    }\n                }\n            }\n        });\n\n        // Flatten columnSizes so there are not columns with colSpan > 1\n        for (let i = 0; i < columnSizes.length; i++) {\n            if (columnSizes[i] && columnSizes[i].colSpan > 1) {\n                let j = 1;\n\n                // Replace all empty places depending on how much the current column spans starting from next col.\n                for (; j < columnSizes[i].colSpan && i + j + 1 < columnSizes[i].colEnd; j++) {\n                    if (columnSizes[i + j] &&\n                        ((!columnSizes[i].width && columnSizes[i + j].width) ||\n                            (!columnSizes[i].width && !columnSizes[i + j].width && columnSizes[i + j].colSpan <= columnSizes[i].colSpan) ||\n                            (!!columnSizes[i + j].width && columnSizes[i + j].colSpan <= columnSizes[i].colSpan))) {\n                        // If we reach an already defined column that has width and the current doesn't have or\n                        // if the reached column has bigger colSpan we stop.\n                        break;\n                    } else {\n                        const width = columnSizes[i].widthSetByUser ?\n                            columnSizes[i].width / columnSizes[i].colSpan :\n                            columnSizes[i].width;\n                        columnSizes[i + j] = {\n                            ref: columnSizes[i].ref,\n                            width: width,\n                            colSpan: 1,\n                            colEnd: columnSizes[i].colEnd,\n                            widthSetByUser: columnSizes[i].widthSetByUser\n                        };\n                    }\n                }\n\n                // Update the current column width so it is divided between all columns it spans and set it to 1.\n                columnSizes[i].width = columnSizes[i].widthSetByUser ?\n                    columnSizes[i].width / columnSizes[i].colSpan :\n                    columnSizes[i].width;\n                columnSizes[i].colSpan = 1;\n\n                // Update the index based on how much we have replaced. Subtract 1 because we started from 1.\n                i += j - 1;\n            }\n        }\n\n        return columnSizes;\n    }\n\n    public getFilledChildColumnSizes(children: QueryList<IgxColumnComponent>): Array<string> {\n        const columnSizes = this.getInitialChildColumnSizes(children);\n\n        // fill the gaps if there are any\n        const result: string[] = [];\n        for (let i = 0; i < columnSizes.length; i++) {\n            if (columnSizes[i] && !!columnSizes[i].width) {\n                result.push(columnSizes[i].width + 'px');\n            } else {\n                result.push(parseInt(this.grid.getPossibleColumnWidth(), 10) + 'px');\n            }\n        }\n        return result;\n    }\n\n    protected getColumnSizesString(children: QueryList<IgxColumnComponent>): string {\n        const res = this.getFilledChildColumnSizes(children);\n        return res.join(' ');\n    }\n\n    public getResizableColUnderEnd(): MRLResizeColumnInfo[] {\n        if (this.columnLayout || !this.columnLayoutChild || this.columnGroup) {\n            return [{ target: this, spanUsed: 1 }];\n        }\n\n        const columnSized = this.getInitialChildColumnSizes(this.parent.children);\n        const targets: MRLResizeColumnInfo[] = [];\n        const colEnd = this.colEnd ? this.colEnd : this.colStart + 1;\n\n        for (let i = 0; i < columnSized.length; i++) {\n            if (this.colStart <= i + 1 && i + 1 < colEnd) {\n                targets.push({ target: columnSized[i].ref, spanUsed: 1 });\n            }\n        }\n\n        const targetsSquashed: MRLResizeColumnInfo[] = [];\n        for (let j = 0; j < targets.length; j++) {\n            if (targetsSquashed.length && targetsSquashed[targetsSquashed.length - 1].target.field === targets[j].target.field) {\n                targetsSquashed[targetsSquashed.length - 1].spanUsed++;\n            } else {\n                targetsSquashed.push(targets[j]);\n            }\n        }\n\n        return targetsSquashed;\n    }\n\n    /**\n     * Pins the column at the provided index in the pinned area. Defaults to index `0` if not provided.\n     * Returns `true` if the column is successfully pinned. Returns `false` if the column cannot be pinned.\n     * Column cannot be pinned if:\n     * - Is already pinned\n     * - index argument is out of range\n     * - The pinned area exceeds 80% of the grid width\n     * ```typescript\n     * let success = this.column.pin();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public pin(index?: number): boolean {\n        // TODO: Probably should the return type of the old functions\n        // should be moved as a event parameter.\n        if (this.grid) {\n            this.grid.endEdit(true);\n        }\n        if (this._pinned) {\n            return false;\n        }\n\n        if (this.parent && !this.parent.pinned) {\n            return this.topLevelParent.pin(index);\n        }\n\n        const grid = (this.grid as any);\n        const hasIndex = index !== undefined;\n        if (hasIndex && (index < 0 || index >= grid.pinnedColumns.length)) {\n            return false;\n        }\n\n        if (!this.parent && !this.pinnable) {\n            return false;\n        }\n\n        this._pinned = true;\n        this.pinnedChange.emit(this._pinned);\n        this._unpinnedIndex = grid._unpinnedColumns.indexOf(this);\n        index = index !== undefined ? index : grid._pinnedColumns.length;\n        const targetColumn = grid._pinnedColumns[index];\n        const args = { column: this, insertAtIndex: index, isPinned: true };\n        grid.onColumnPinning.emit(args);\n\n        if (grid._pinnedColumns.indexOf(this) === -1) {\n            grid._pinnedColumns.splice(args.insertAtIndex, 0, this);\n\n            if (grid._unpinnedColumns.indexOf(this) !== -1) {\n                grid._unpinnedColumns.splice(grid._unpinnedColumns.indexOf(this), 1);\n            }\n        }\n\n        if (hasIndex) {\n            grid._moveColumns(this, targetColumn);\n        }\n\n        if (this.columnGroup) {\n            this.allChildren.forEach(child => child.pin());\n            grid.reinitPinStates();\n        }\n\n        grid.resetCaches();\n        grid.notifyChanges();\n        if (this.columnLayoutChild) {\n            this.grid.columns.filter(x => x.columnLayout).forEach(x => x.populateVisibleIndexes());\n        }\n        this.grid.filteringService.refreshExpressions();\n        // this.grid.refreshSearch(true);\n        return true;\n    }\n    /**\n     * Unpins the column and place it at the provided index in the unpinned area. Defaults to index `0` if not provided.\n     * Returns `true` if the column is successfully unpinned. Returns `false` if the column cannot be unpinned.\n     * Column cannot be unpinned if:\n     * - Is already unpinned\n     * - index argument is out of range\n     * ```typescript\n     * let success = this.column.unpin();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public unpin(index?: number): boolean {\n        if (this.grid) {\n            this.grid.endEdit(true);\n        }\n        if (!this._pinned) {\n            return false;\n        }\n\n        if (this.parent && this.parent.pinned) {\n            return this.topLevelParent.unpin(index);\n        }\n\n        const grid = (this.grid as any);\n        const hasIndex = index !== undefined;\n        if (hasIndex && (index < 0 || index >= grid._unpinnedColumns.length)) {\n            return false;\n        }\n\n        index = (index !== undefined ? index :\n            this._unpinnedIndex !== undefined ? this._unpinnedIndex : this.index);\n        this._pinned = false;\n        this.pinnedChange.emit(this._pinned);\n\n        const targetColumn = grid._unpinnedColumns[index];\n\n        grid._unpinnedColumns.splice(index, 0, this);\n        if (grid._pinnedColumns.indexOf(this) !== -1) {\n            grid._pinnedColumns.splice(grid._pinnedColumns.indexOf(this), 1);\n        }\n\n        if (hasIndex) {\n            grid._moveColumns(this, targetColumn);\n        }\n\n        if (this.columnGroup) {\n            this.allChildren.forEach(child => child.unpin());\n        }\n\n        grid.reinitPinStates();\n        grid.resetCaches();\n\n        const insertAtIndex = grid._unpinnedColumns.indexOf(this);\n        const args = { column: this, insertAtIndex, isPinned: false };\n        grid.onColumnPinning.emit(args);\n\n        grid.notifyChanges();\n        if (this.columnLayoutChild) {\n            this.grid.columns.filter(x => x.columnLayout).forEach(x => x.populateVisibleIndexes());\n        }\n        this.grid.filteringService.refreshExpressions();\n        // this.grid.refreshSearch(true);\n\n        return true;\n    }\n    /**\n     * Returns a reference to the top level parent column.\n     * ```typescript\n     * let topLevelParent =  this.column.topLevelParent;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get topLevelParent() {\n        let parent = this.parent;\n        while (parent && parent.parent) {\n            parent = parent.parent;\n        }\n        return parent;\n    }\n\n    /**\n     * Returns a reference to the header of the column.\n     * ```typescript\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * let headerCell = column.headerCell;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get headerCell(): IgxGridHeaderComponent {\n        return this.grid.headerCellList.find((header) => header.column === this);\n    }\n\n    /**\n    * Returns a reference to the filter cell of the column.\n    * ```typescript\n    * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n    * let filterell = column.filterell;\n    * ```\n    * @memberof IgxColumnComponent\n    */\n    get filterCell(): IgxGridFilteringCellComponent {\n        return this.grid.filterCellList.find((filterCell) => filterCell.column === this);\n    }\n\n    /**\n     * Returns a reference to the header group of the column.\n     * @memberof IgxColumnComponent\n     */\n    get headerGroup(): IgxGridHeaderGroupComponent {\n        return this.grid.headerGroupsList.find((headerGroup) => headerGroup.column === this);\n    }\n\n    /**\n     * Autosize the column to the longest currently visible cell value, including the header cell.\n     * ```typescript\n     * @ViewChild('grid') grid: IgxGridComponent;\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * column.autosize();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public autosize() {\n        if (!this.columnGroup) {\n\n            this.width = this.getLargestCellWidth();\n            this.grid.reflow();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getCalcWidth(): any {\n        if (this._calcWidth !== null && !isNaN(this.calcPixelWidth)) {\n            return this._calcWidth;\n        }\n        this.cacheCalcWidth();\n        return this._calcWidth;\n    }\n\n    /**\n     * @hidden\n     * Returns the size (in pixels) of the longest currently visible cell, including the header cell.\n     * ```typescript\n     * @ViewChild('grid') grid: IgxGridComponent;\n     *\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * let size = column.getLargestCellWidth();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public getLargestCellWidth(): string {\n        const range = this.grid.document.createRange();\n        const largest = new Map<number, number>();\n\n        if (this.cells.length > 0) {\n            let cellsContentWidths = [];\n            if (this.cells[0].nativeElement.children.length > 0) {\n                this.cells.forEach((cell) => cellsContentWidths.push(cell.calculateSizeToFit(range)));\n            } else {\n                cellsContentWidths = this.cells.map((cell) => getNodeSizeViaRange(range, cell.nativeElement));\n            }\n\n            const index = cellsContentWidths.indexOf(Math.max(...cellsContentWidths));\n            const cellStyle = this.grid.document.defaultView.getComputedStyle(this.cells[index].nativeElement);\n            const cellPadding = parseFloat(cellStyle.paddingLeft) + parseFloat(cellStyle.paddingRight) +\n                parseFloat(cellStyle.borderRightWidth);\n\n            largest.set(Math.max(...cellsContentWidths), cellPadding);\n        }\n\n        if (this.headerCell) {\n            let headerCell;\n            if (this.headerTemplate && this.headerCell.elementRef.nativeElement.children[0].children.length > 0) {\n                headerCell = Math.max(...Array.from(this.headerCell.elementRef.nativeElement.children[0].children)\n                    .map((child) => getNodeSizeViaRange(range, child)));\n            } else {\n                headerCell = getNodeSizeViaRange(range, this.headerCell.elementRef.nativeElement.children[0]);\n            }\n\n            if (this.sortable || this.filterable) {\n                headerCell += this.headerCell.elementRef.nativeElement.children[1].getBoundingClientRect().width;\n            }\n\n            const headerStyle = this.grid.document.defaultView.getComputedStyle(this.headerCell.elementRef.nativeElement);\n            const headerPadding = parseFloat(headerStyle.paddingLeft) + parseFloat(headerStyle.paddingRight) +\n                parseFloat(headerStyle.borderRightWidth);\n            largest.set(headerCell, headerPadding);\n\n        }\n\n        const largestCell = Math.max(...Array.from(largest.keys()));\n        const width = Math.ceil(largestCell + largest.get(largestCell));\n\n        if (Number.isNaN(width)) {\n            return this.width;\n        } else {\n            return width + 'px';\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public getCellWidth() {\n        const colWidth = this.width;\n        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n\n        if (this.columnLayoutChild) {\n            return '';\n        }\n\n        if (colWidth && !isPercentageWidth) {\n\n            let cellWidth = colWidth;\n            if (typeof cellWidth !== 'string' || cellWidth.endsWith('px') === false) {\n                cellWidth += 'px';\n            }\n\n            return cellWidth;\n        } else {\n            return colWidth;\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected cacheCalcWidth(): any {\n        const grid = this.gridAPI.grid;\n        const colWidth = this.width;\n        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n        if (isPercentageWidth) {\n            this._calcWidth = parseInt(colWidth, 10) / 100 * (grid.calcWidth - grid.featureColumnsWidth);\n        } else if (!colWidth) {\n            // no width\n            this._calcWidth = this.defaultWidth || grid.getPossibleColumnWidth();\n        } else {\n            this._calcWidth = this.width;\n        }\n        this.calcPixelWidth = parseInt(this._calcWidth, 10);\n    }\n\n    /**\n     *@hidden\n    */\n    public get pinnable() {\n        const gridUnpinnedWidth = (this.grid as any).getUnpinnedWidth(true);\n        const elementWidth = this.parent ? parseInt(this.topLevelParent.width, 10) : parseInt(this.width, 10);\n        return (this.grid as any)._init || !((gridUnpinnedWidth - elementWidth) < this.grid.unpinnedAreaMinWidth);\n    }\n\n    /**\n     * @hidden\n     */\n    public populateVisibleIndexes() { }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: IgxColumnComponent, useExisting: forwardRef(() => IgxColumnGroupComponent) }],\n    selector: 'igx-column-group',\n    template: ``\n})\nexport class IgxColumnGroupComponent extends IgxColumnComponent implements AfterContentInit, OnDestroy {\n    @ContentChildren(IgxColumnComponent, { read: IgxColumnComponent })\n    children = new QueryList<IgxColumnComponent>();\n    /**\n     * Gets the column group `summaries`.\n     * ```typescript\n     * let columnGroupSummaries = this.columnGroup.summaries;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public get summaries(): any {\n        return this._summaries;\n    }\n    /**\n     * Sets the column group `summaries`.\n     * ```typescript\n     * this.columnGroup.summaries = IgxNumberSummaryOperand;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    public set summaries(classRef: any) { }\n    /**\n     * Sets/gets whether the column group is `searchable`.\n     * Default value is `true`.\n     * ```typescript\n     * let isSearchable =  this.columnGroup.searchable;\n     * ```\n     * ```html\n     *  <igx-column-group [searchable] = \"false\"></igx-column-group>\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public searchable = true;\n    /**\n     * Gets the column group `filters`.\n     * ```typescript\n     * let columnGroupFilters = this.columnGroup.filters;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public get filters(): any {\n        return this._filters;\n    }\n    /**\n     * Sets the column group `filters`.\n     * ```typescript\n     * this.columnGroup.filters = IgxStringFilteringOperand;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    public set filters(classRef: any) { }\n\n    /**\n     * Returns a reference to the body template.\n     * ```typescript\n     * let bodyTemplate = this.columnGroup.bodyTemplate;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get bodyTemplate(): TemplateRef<any> {\n        return this._bodyTemplate;\n    }\n    /**\n     * @hidden\n     */\n    set bodyTemplate(template: TemplateRef<any>) { }\n\n    /**\n     * Returns a reference to the inline editor template.\n     * ```typescript\n     * let inlineEditorTemplate = this.columnGroup.inlineEditorTemplate;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get inlineEditorTemplate(): TemplateRef<any> {\n        return this._inlineEditorTemplate;\n    }\n    /**\n     * @hidden\n     */\n    set inlineEditorTemplate(template: TemplateRef<any>) { }\n    /**\n     * Gets the column group cells.\n     * ```typescript\n     * let columnCells = this.columnGroup.cells;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get cells(): IgxGridCellComponent[] {\n        return [];\n    }\n    /**\n     * Gets whether the column group is hidden.\n     * ```typescript\n     * let isHidden = this.columnGroup.hidden;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    get hidden() {\n        return this.allChildren.every(c => c.hidden);\n    }\n    /**\n     * Sets the column group hidden property.\n     * ```html\n     * <igx-column [hidden] = \"true\"></igx-column>\n     * ```\n     *\n     * Two-way data binding\n     * ```html\n     * <igx-column [(hidden)] = \"model.columns[0].isHidden\"></igx-column>\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    set hidden(value: boolean) {\n        this._hidden = value;\n        this.hiddenChange.emit(this._hidden);\n        this.children.forEach(child => child.hidden = value);\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public hiddenChange = new EventEmitter<boolean>();\n\n    /**\n     *@hidden\n     */\n    ngAfterContentInit() {\n        /*\n            @ContentChildren with descendants still returns the `parent`\n            component in the query list.\n        */\n        if (this.headTemplate && this.headTemplate.length) {\n            this._headerTemplate = this.headTemplate.toArray()[0].template;\n        }\n        this.children.reset(this.children.toArray().slice(1));\n        this.children.forEach(child => {\n            child.parent = this;\n        });\n        /*\n            TO DO: In Angular 9 this need to be removed, because the @ContentChildren will not return the `parent`\n            component in the query list.\n        */\n        this.children.changes.pipe(takeUntil(this.destroy$))\n            .subscribe((change) => {\n                if (change.first === this) {\n                    this.children.reset(this.children.toArray().slice(1));\n                    this.children.forEach(child => {\n                        child.parent = this;\n                    });\n                }\n            });\n    }\n\n    /**\n     * Returns the children columns collection.\n     * ```typescript\n     * let columns =  this.columnGroup.allChildren;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get allChildren(): IgxColumnComponent[] {\n        return flatten(this.children.toArray());\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnGroup`.\n     * ```typescript\n     * let isColumnGroup =  this.columnGroup.columnGroup\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get columnGroup() {\n        return true;\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnLayout` for multi-row layout.\n     * ```typescript\n     * let columnGroup =  this.column.columnGroup;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get columnLayout() {\n        return false;\n    }\n    /**\n     * Gets the width of the column group.\n     * ```typescript\n     * let columnGroupWidth = this.columnGroup.width;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get width() {\n        let isChildrenWidthInPercent = false, width;\n        width = `${this.children.reduce((acc, val) => {\n            if (val.hidden) {\n                return acc;\n            }\n            if (typeof val.width === 'string' && val.width.indexOf('%') !== -1) {\n                isChildrenWidthInPercent = true;\n            }\n            return acc + parseInt(val.width, 10);\n        }, 0)}`;\n        return isChildrenWidthInPercent ? width + '%' : width;\n    }\n\n    set width(val) { }\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>, public cdr: ChangeDetectorRef,\n        public rowIslandAPI: IgxRowIslandAPIService) {\n        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(gridAPI, cdr, rowIslandAPI);\n    }\n}\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: IgxColumnComponent, useExisting: forwardRef(() => IgxColumnLayoutComponent) }],\n    selector: 'igx-column-layout',\n    template: ``\n})\nexport class IgxColumnLayoutComponent extends IgxColumnGroupComponent implements AfterContentInit, OnDestroy {\n    public childrenVisibleIndexes = [];\n    /**\n     * Gets the width of the column layout.\n     * ```typescript\n     * let columnGroupWidth = this.columnGroup.width;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get width(): any {\n        const width = this.getFilledChildColumnSizes(this.children).reduce((acc, val) => acc + parseInt(val, 10), 0);\n        return width;\n    }\n\n    set width(val: any) { }\n\n    get columnLayout() {\n        return true;\n    }\n\n    /**\n     * @hidden\n     */\n    public getCalcWidth(): any {\n        let borderWidth = 0;\n\n        if (this.headerGroup && this.headerGroup.hasLastPinnedChildColumn) {\n            const headerStyles = this.grid.document.defaultView.getComputedStyle(this.headerGroup.element.nativeElement.children[0]);\n            borderWidth = parseInt(headerStyles.borderRightWidth, 10);\n        }\n\n        return super.getCalcWidth() + borderWidth;\n    }\n\n    /**\n     * Gets the column visible index.\n     * If the column is not visible, returns `-1`.\n     * ```typescript\n     * let visibleColumnIndex =  this.column.visibleIndex;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get visibleIndex(): number {\n        if (!isNaN(this._vIndex)) {\n            return this._vIndex;\n        }\n\n        const unpinnedColumns = this.grid.unpinnedColumns.filter(c => c.columnLayout && !c.hidden);\n        const pinnedColumns = this.grid.pinnedColumns.filter(c => c.columnLayout && !c.hidden);\n        let vIndex = -1;\n\n        if (!this.pinned) {\n            const indexInCollection = unpinnedColumns.indexOf(this);\n            vIndex = indexInCollection === -1 ? -1 : pinnedColumns.length + indexInCollection;\n        } else {\n            vIndex = pinnedColumns.indexOf(this);\n        }\n        this._vIndex = vIndex;\n        return vIndex;\n    }\n\n    /*\n     * Gets whether the column layout is hidden.\n     * ```typescript\n     * let isHidden = this.columnGroup.hidden;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    get hidden() {\n        return this._hidden;\n    }\n\n    /**\n     * Sets the column layout hidden property.\n     * ```typescript\n     * <igx-column-layout [hidden] = \"true\"></igx-column->\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    set hidden(value: boolean) {\n        this._hidden = value;\n        this.children.forEach(child => child.hidden = value);\n        if (this.grid && this.grid.columns && this.grid.columns.length > 0) {\n            // reset indexes in case columns are hidden/shown runtime\n            this.grid.columns.filter(x => x.columnGroup).forEach(x => x.populateVisibleIndexes());\n        }\n    }\n\n    /**\n     *@hidden\n    */\n    ngAfterContentInit() {\n        super.ngAfterContentInit();\n        if (!this.hidden) {\n            this.hidden = this.allChildren.some(x => x.hidden);\n        } else {\n            this.children.forEach(child => child.hidden = this.hidden);\n        }\n\n        this.children.forEach(child => {\n            child.movable = false;\n        });\n    }\n\n    /*\n     * Gets whether the group contains the last pinned child column of the column layout.\n     * ```typescript\n     * let columsHasLastPinned = this.columnLayout.hasLastPinnedChildColumn;\n     * ```\n     * @memberof IgxColumnLayoutComponent\n     */\n    get hasLastPinnedChildColumn() {\n        return this.children.some(child => child.isLastPinned);\n    }\n\n    /**\n     *@hidden\n    */\n    public populateVisibleIndexes() {\n        this.childrenVisibleIndexes = [];\n        const grid = this.gridAPI.grid;\n        const columns = grid && grid.pinnedColumns && grid.unpinnedColumns ? grid.pinnedColumns.concat(grid.unpinnedColumns) : [];\n        const orderedCols = columns\n            .filter(x => !x.columnGroup && !x.hidden)\n            .sort((a, b) => a.rowStart - b.rowStart || columns.indexOf(a.parent) - columns.indexOf(b.parent) || a.colStart - b.colStart);\n        this.children.forEach(child => {\n            const rs = child.rowStart || 1;\n            let vIndex = 0;\n            // filter out all cols with larger rowStart\n            const cols = orderedCols.filter(c =>\n                !c.columnGroup && (c.rowStart || 1) <= rs);\n            vIndex = cols.indexOf(child);\n            this.childrenVisibleIndexes.push({ column: child, index: vIndex });\n        });\n    }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { IgxColumnComponent } from './column.component';\n\n/** @hidden */\n@Injectable()\nexport class IgxColumnResizingService {\n\n    private pinnedMaxWidth: string;\n\n    /**\n     *@hidden\n     */\n    public startResizePos: number;\n    /**\n     * Indicates that a column is currently being resized.\n     */\n    public isColumnResizing: boolean;\n    /**\n     *@hidden\n     */\n    public resizeCursor: string = null;\n    /**\n     *@hidden\n     */\n    public showResizer = false;\n    /**\n     * The column being resized.\n     */\n    public column: IgxColumnComponent;\n\n    constructor(private zone: NgZone) { }\n\n    /**\n     *@hidden\n     */\n    get resizerHeight(): number {\n        let height = this.column.grid.getVisibleContentHeight();\n\n        // Column height multiplier in case there are Column Layouts. The resizer height need to take into account rowStart.\n        let columnHeightMultiplier = 1;\n        if (this.column.columnLayoutChild) {\n            columnHeightMultiplier = this.column.grid.multiRowLayoutRowSize - this.column.rowStart + 1;\n        }\n\n        if (this.column.level !== 0) {\n            height -= this.column.topLevelParent.headerGroup.height - this.column.headerGroup.height * columnHeightMultiplier;\n        }\n\n        return height;\n    }\n\n    /**\n     * Returns the minimal possible width to which the column can be resized.\n     */\n    get restrictResizeMin(): number {\n        const actualMinWidth = parseFloat(this.column.minWidth);\n        const minWidth = actualMinWidth < parseFloat(this.column.width) ? actualMinWidth : parseFloat(this.column.width);\n\n        return this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width - minWidth;\n    }\n\n    /**\n     * Returns the maximal possible width to which the column can be resized.\n     */\n    get restrictResizeMax(): number {\n        const actualWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n\n        if (this.column.pinned) {\n            const pinnedMaxWidth = this.pinnedMaxWidth =\n                this.column.grid.calcPinnedContainerMaxWidth - this.column.grid.getPinnedWidth(true) + actualWidth;\n\n            if (this.column.maxWidth && parseFloat(this.column.maxWidth) < pinnedMaxWidth) {\n                this.pinnedMaxWidth = this.column.maxWidth;\n\n                return parseFloat(this.column.maxWidth) - actualWidth;\n            } else {\n                return pinnedMaxWidth - actualWidth;\n            }\n        } else {\n            if (this.column.maxWidth) {\n                return parseFloat(this.column.maxWidth) - actualWidth;\n            } else {\n                return Number.MAX_SAFE_INTEGER;\n            }\n        }\n    }\n\n    /**\n     * Autosizes the column to the longest currently visible cell value, including the header cell.\n     * If the column has a predifined maxWidth and the autosized column width will become bigger than it,\n     * then the column is sized to its maxWidth.\n     * If the column is pinned and the autosized column width will cause the pinned area to become bigger\n     * than the maximum allowed pinned area width (80% of the total grid width), autosizing will be deismissed.\n     */\n    public autosizeColumnOnDblClick() {\n        const currentColWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n\n        const size = this.column.getLargestCellWidth();\n\n        if (this.column.pinned) {\n            const newPinnedWidth = this.column.grid.getPinnedWidth(true) - currentColWidth + parseFloat(size);\n\n            if (newPinnedWidth <= this.column.grid.calcPinnedContainerMaxWidth) {\n                this.column.width = size;\n            }\n        } else if (this.column.maxWidth && (parseFloat(size) > parseFloat(this.column.maxWidth))) {\n            this.column.width = parseFloat(this.column.maxWidth) + 'px';\n        } else if (parseFloat(size) < parseFloat(this.column.minWidth)) {\n            this.column.width = this.column.minWidth + 'px';\n        } else {\n            this.column.width = size;\n        }\n\n        this.zone.run(() => {});\n\n        this.column.grid.onColumnResized.emit({\n            column: this.column,\n            prevWidth: currentColWidth.toString(),\n            newWidth: this.column.width\n        });\n    }\n\n    /**\n     * Resizes the column regaridng to the column minWidth and maxWidth.\n     */\n    public resizeColumn(event: MouseEvent) {\n        this.showResizer = false;\n        const diff = event.clientX - this.startResizePos;\n\n        let currentColWidth = parseFloat(this.column.width);\n        const actualWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n        currentColWidth = Number.isNaN(currentColWidth) || (currentColWidth < actualWidth) ? actualWidth : currentColWidth;\n\n        const colMinWidth = this.getColMinWidth(this.column);\n        const colMaxWidth = this.getColMaxWidth(this.column);\n        if (this.column.grid.hasColumnLayouts) {\n            this.resizeColumnLayoutFor(this.column, diff);\n        } else {\n            if (currentColWidth + diff < colMinWidth) {\n                this.column.width = colMinWidth + 'px';\n            } else if (colMaxWidth && (currentColWidth + diff > colMaxWidth)) {\n                this.column.width = colMaxWidth + 'px';\n            } else {\n                this.column.width = (currentColWidth + diff) + 'px';\n            }\n        }\n\n        this.zone.run(() => {});\n\n        if (currentColWidth !== parseFloat(this.column.width)) {\n            this.column.grid.onColumnResized.emit({\n                column: this.column,\n                prevWidth: currentColWidth.toString(),\n                newWidth: this.column.width\n            });\n        }\n\n        this.isColumnResizing = false;\n    }\n\n    protected getColMinWidth(column: IgxColumnComponent) {\n        let currentColWidth = parseFloat(column.width);\n        const actualWidth = column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n        currentColWidth = Number.isNaN(currentColWidth) || (currentColWidth < actualWidth) ? actualWidth : currentColWidth;\n\n        const actualMinWidth = parseFloat(column.minWidth);\n        return actualMinWidth < currentColWidth ? actualMinWidth : currentColWidth;\n    }\n\n    protected getColMaxWidth(column: IgxColumnComponent) {\n        return column.pinned ? parseFloat(this.pinnedMaxWidth) : parseFloat(column.maxWidth);\n    }\n\n    protected resizeColumnLayoutFor(column: IgxColumnComponent, diff: number) {\n        const relativeColumns = column.getResizableColUnderEnd();\n        const combinedSpan = relativeColumns.reduce((acc, col) =>  acc + col.spanUsed, 0);\n\n        if (column.pinned) {\n            const pinnedWidth = this.column.grid.getPinnedWidth(true);\n            const maxPinnedWidth = this.column.grid.calcPinnedContainerMaxWidth;\n\n            if (pinnedWidth + diff > maxPinnedWidth) {\n                diff = maxPinnedWidth - pinnedWidth;\n            }\n        }\n\n        // Resize first those who might reach min/max width\n        let columnsToResize = [...relativeColumns];\n        let updatedDiff = diff;\n        let updatedCombinedSpan = combinedSpan;\n        let setMinMaxCols = false;\n        do {\n            // Cycle them until there are not ones that reach min/max size, because the diff accumulates after each cycle.\n            // This is because we can have at first 2 cols reaching min width and then after\n            // recalculating the diff there might be 1 more that reaches min width.\n            setMinMaxCols = false;\n            let newCombinedSpan = updatedCombinedSpan;\n            const newColsToResize = [];\n            columnsToResize.forEach((col) => {\n                const currentResizeWidth = parseFloat(col.target.calcWidth);\n                const resizeScaled = (diff / updatedCombinedSpan) * col.target.gridColumnSpan;\n\n                const minWidth = this.getColMinWidth(col.target);\n                const maxWidth = this.getColMaxWidth(col.target);\n                if (currentResizeWidth + resizeScaled < minWidth) {\n                    col.target.width = minWidth + 'px';\n                    updatedDiff += (currentResizeWidth - minWidth);\n                    newCombinedSpan -= col.spanUsed;\n                    setMinMaxCols = true;\n                } else if (maxWidth && (currentResizeWidth + resizeScaled > maxWidth)) {\n                    col.target.width = maxWidth + 'px';\n                    updatedDiff -= (maxWidth - currentResizeWidth);\n                    newCombinedSpan -= col.spanUsed;\n                    setMinMaxCols = true;\n                } else {\n                    // Save new ones that can be resized\n                    newColsToResize.push(col);\n                }\n            });\n\n            updatedCombinedSpan = newCombinedSpan;\n            columnsToResize = newColsToResize;\n        } while (setMinMaxCols);\n\n        // Those left that don't reach min/max size resize them normally.\n        columnsToResize.forEach((col) => {\n            const currentResizeWidth = parseFloat(col.target.calcWidth);\n            const resizeScaled = (updatedDiff / updatedCombinedSpan) * col.target.gridColumnSpan;\n            col.target.width = (currentResizeWidth + resizeScaled) + 'px';\n        });\n    }\n}\n","import { DOCUMENT, DatePipe, DecimalPipe } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    Inject,\n    Injectable,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    Pipe,\n    PipeTransform,\n    Renderer2,\n    LOCALE_ID,\n    AfterViewInit,\n    HostListener,\n    ViewContainerRef\n} from '@angular/core';\nimport { animationFrameScheduler, fromEvent, interval, Subject, Subscription } from 'rxjs';\nimport { map, switchMap, takeUntil, throttle, debounceTime } from 'rxjs/operators';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxDragDirective, IgxDropDirective } from '../directives/drag-drop/drag-drop.directive';\nimport { IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { ConnectedPositioningStrategy } from '../services';\nimport { VerticalAlignment, PositionSettings } from '../services/overlay/utilities';\nimport { scaleInVerBottom, scaleInVerTop } from '../animations/main';\nimport { KEYS } from '../core/utils';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxForOfSyncService } from '../directives/for-of/for_of.sync.service';\n\nconst DEFAULT_DATE_FORMAT = 'mediumDate';\nconst DEBOUNCE_TIME = 200;\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxResizeHandle]'\n})\nexport class IgxResizeHandleDirective implements AfterViewInit, OnDestroy {\n\n    /**\n     * @hidden\n     */\n    @Input('igxResizeHandle')\n    public column: IgxColumnComponent;\n\n    /**\n     * @hidden\n     */\n    private _dblClick = false;\n\n    /**\n     * @hidden\n     */\n    private destroy$ = new Subject<boolean>();\n\n    constructor(private zone: NgZone,\n               private element: ElementRef,\n               public colResizingService: IgxColumnResizingService) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        if (!this.column.columnGroup && this.column.resizable) {\n            this.zone.runOutsideAngular(() => {\n                fromEvent(this.element.nativeElement, 'mousedown').pipe(\n                    debounceTime(DEBOUNCE_TIME),\n                    takeUntil(this.destroy$)\n                ).subscribe((event: MouseEvent) => {\n\n                    if (this._dblClick) {\n                        this._dblClick = false;\n                        return;\n                    }\n\n                    if (event.button === 0) {\n                        this._onResizeAreaMouseDown(event);\n                        this.column.grid.resizeLine.resizer.onMousedown(event);\n                    }\n                });\n            });\n\n            fromEvent(this.element.nativeElement, 'mouseup').pipe(\n                debounceTime(DEBOUNCE_TIME),\n                takeUntil(this.destroy$)\n            ).subscribe(() => {\n                this.colResizingService.isColumnResizing = false;\n                this.colResizingService.showResizer = false;\n                this.column.grid.cdr.detectChanges();\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseover')\n    public onMouseOver() {\n        this.colResizingService.resizeCursor = 'col-resize';\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('dblclick')\n    public onDoubleClick() {\n        this._dblClick = true;\n        this.colResizingService.column = this.column;\n        this.colResizingService.autosizeColumnOnDblClick();\n    }\n\n    /**\n     * @hidden\n     */\n    private _onResizeAreaMouseDown(event) {\n        this.colResizingService.column = this.column;\n        this.colResizingService.isColumnResizing = true;\n        this.colResizingService.startResizePos = event.clientX;\n\n        this.colResizingService.showResizer = true;\n        this.column.grid.cdr.detectChanges();\n    }\n}\n\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxResizer]'\n})\nexport class IgxColumnResizerDirective implements OnInit, OnDestroy {\n\n    @Input()\n    public restrictHResizeMin: number = Number.MIN_SAFE_INTEGER;\n\n    @Input()\n    public restrictHResizeMax: number = Number.MAX_SAFE_INTEGER;\n\n    @Output()\n    public resizeEnd = new Subject<any>();\n\n    @Output()\n    public resizeStart = new Subject<any>();\n\n    @Output()\n    public resize = new Subject<any>();\n\n    private _left;\n    private _destroy = new Subject<boolean>();\n\n    constructor(public element: ElementRef, @Inject(DOCUMENT) public document, public zone: NgZone) {\n\n        this.resizeStart.pipe(\n            map((event) => event.clientX),\n            takeUntil(this._destroy),\n            switchMap((offset) => this.resize.pipe(\n                map((event) => event.clientX - offset),\n                takeUntil(this.resizeEnd),\n                takeUntil(this._destroy)\n            ))\n        ).subscribe((pos) => {\n\n            const left = this._left + pos;\n\n            const min = this._left - this.restrictHResizeMin;\n            const max = this._left + this.restrictHResizeMax;\n\n            this.left = left < min ? min : left;\n\n            if (left > max) {\n                this.left = max;\n            }\n        });\n\n    }\n\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            fromEvent(this.document.defaultView, 'mousemove').pipe(\n                throttle(() => interval(0, animationFrameScheduler)),\n                takeUntil(this._destroy)\n            ).subscribe((res) => this.onMousemove(res));\n\n            fromEvent(this.document.defaultView, 'mouseup').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onMouseup(res));\n        });\n    }\n\n    ngOnDestroy() {\n        this._destroy.next(true);\n        this._destroy.complete();\n    }\n\n    public set left(val) {\n        requestAnimationFrame(() => this.element.nativeElement.style.left = val + 'px');\n    }\n\n    public set top(val) {\n        requestAnimationFrame(() => this.element.nativeElement.style.top = val + 'px');\n    }\n\n    onMouseup(event) {\n        this.resizeEnd.next(event);\n        this.resizeEnd.complete();\n    }\n\n    onMousedown(event) {\n        event.preventDefault();\n        const parent = this.element.nativeElement.parentElement.parentElement;\n\n        this.left = this._left = event.clientX - parent.getBoundingClientRect().left;\n        this.top = event.target.getBoundingClientRect().top - parent.getBoundingClientRect().top;\n\n        this.resizeStart.next(event);\n    }\n\n    onMousemove(event) {\n        event.preventDefault();\n        this.resize.next(event);\n    }\n}\n\n/**\n * @hidden\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxColumnMovingService {\n    private _icon: any;\n    private _column: IgxColumnComponent;\n\n    public cancelDrop: boolean;\n    public isColumnMoving: boolean;\n\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n    set column(val: IgxColumnComponent) {\n        if (val) {\n            this._column = val;\n        }\n    }\n\n    get icon(): any {\n        return this._icon;\n    }\n    set icon(val: any) {\n        if (val) {\n            this._icon = val;\n        }\n    }\n}\n\n/**\n * @hidden\n */\nexport enum DropPosition {\n    BeforeDropTarget,\n    AfterDropTarget,\n    None\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxColumnMovingDrag]'\n})\nexport class IgxColumnMovingDragDirective extends IgxDragDirective implements OnDestroy {\n\n    @Input('igxColumnMovingDrag')\n    set data(val) {\n        this._column = val;\n    }\n\n    get column() {\n        return this._column;\n    }\n\n    get draggable(): boolean {\n        return this.column && (this.column.movable || (this.column.groupable && !this.column.columnGroup));\n    }\n\n    public get icon(): HTMLElement {\n        return this.cms.icon;\n    }\n\n    private subscription$: Subscription;\n    private _column: IgxColumnComponent;\n    private _ghostClass = 'igx-grid__drag-ghost-image';\n    private ghostImgIconClass = 'igx-grid__drag-ghost-image-icon';\n    private ghostImgIconGroupClass = 'igx-grid__drag-ghost-image-icon-group';\n\n    constructor(\n        _element: ElementRef,\n        _viewContainer: ViewContainerRef,\n        _zone: NgZone,\n        _renderer: Renderer2,\n        _cdr: ChangeDetectorRef,\n        private cms: IgxColumnMovingService,\n    ) {\n        super(_cdr, _element, _viewContainer, _zone, _renderer);\n    }\n\n    public ngOnDestroy() {\n        this._unsubscribe();\n    }\n\n    public onEscape(event) {\n        this.cms.cancelDrop = true;\n        this.onPointerUp(event);\n    }\n\n    public onPointerDown(event) {\n        if (!this.draggable || event.target.getAttribute('draggable') === 'false') {\n            return;\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._removeOnDestroy = false;\n        this.cms.column = this.column;\n        this.ghostClass = this._ghostClass;\n\n        super.onPointerDown(event);\n\n        this.cms.isColumnMoving = true;\n        this.column.grid.cdr.detectChanges();\n\n        const args = {\n            source: this.column\n        };\n        this.column.grid.onColumnMovingStart.emit(args);\n\n        this.subscription$ = fromEvent(this.column.grid.document.defaultView, 'keydown').subscribe((ev: KeyboardEvent) => {\n            if (ev.key === KEYS.ESCAPE || ev.key === KEYS.ESCAPE_IE) {\n                this.onEscape(ev);\n            }\n        });\n    }\n\n    public onPointerMove(event) {\n        event.preventDefault();\n        super.onPointerMove(event);\n\n        if (this._dragStarted && this.ghostElement && !this.column.grid.draggedColumn) {\n            this.column.grid.draggedColumn = this.column;\n            this.column.grid.cdr.detectChanges();\n        }\n\n        if (this.cms.isColumnMoving) {\n            const args = {\n                source: this.column,\n                cancel: false\n            };\n            this.column.grid.onColumnMoving.emit(args);\n\n            if (args.cancel) {\n                this.onEscape(event);\n            }\n        }\n    }\n\n    public onPointerUp(event) {\n        // Run it explicitly inside the zone because sometimes onPointerUp executes after the code below.\n        this.zone.run(() => {\n            super.onPointerUp(event);\n\n            this.cms.isColumnMoving = false;\n            this.column.grid.draggedColumn = null;\n            this.column.grid.cdr.detectChanges();\n        });\n\n        this._unsubscribe();\n    }\n\n    protected createGhost(pageX, pageY) {\n        super.createGhost(pageX, pageY);\n\n        this.ghostElement.style.height = null;\n        this.ghostElement.style.minWidth = null;\n        this.ghostElement.style.flexBasis = null;\n        this.ghostElement.style.position = null;\n\n        const icon = document.createElement('i');\n        const text = document.createTextNode('block');\n        icon.appendChild(text);\n\n        icon.classList.add('material-icons');\n        this.cms.icon = icon;\n\n        if (!this.column.columnGroup) {\n            this.renderer.addClass(icon, this.ghostImgIconClass);\n\n            this.ghostElement.insertBefore(icon, this.ghostElement.firstElementChild);\n\n            this.ghostLeft = this._ghostStartX = pageX - ((this.ghostElement.getBoundingClientRect().width / 3) * 2);\n            this.ghostTop = this._ghostStartY = pageY - ((this.ghostElement.getBoundingClientRect().height / 3) * 2);\n        } else {\n            this.ghostElement.insertBefore(icon, this.ghostElement.childNodes[0]);\n\n            this.renderer.addClass(icon, this.ghostImgIconGroupClass);\n            this.ghostElement.children[0].style.paddingLeft = '0px';\n\n            this.ghostLeft = this._ghostStartX = pageX - ((this.ghostElement.getBoundingClientRect().width / 3) * 2);\n            this.ghostTop = this._ghostStartY = pageY - ((this.ghostElement.getBoundingClientRect().height / 3) * 2);\n        }\n    }\n\n    private _unsubscribe() {\n        if (this.subscription$) {\n            this.subscription$.unsubscribe();\n            this.subscription$ = null;\n        }\n    }\n}\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxColumnMovingDrop]'\n})\nexport class IgxColumnMovingDropDirective extends IgxDropDirective implements OnDestroy {\n    @Input('igxColumnMovingDrop')\n    set data(val: any) {\n        if (val instanceof IgxColumnComponent) {\n            this._column = val;\n        }\n\n        if (val instanceof IgxGridForOfDirective) {\n            this._hVirtDir = val;\n        }\n    }\n\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n\n    get isDropTarget(): boolean {\n        return this._column && this._column.grid.hasMovableColumns && this.cms.column.movable &&\n            ((!this._column.pinned && this.cms.column.disablePinning) || !this.cms.column.disablePinning);\n    }\n\n    get horizontalScroll(): any {\n        if (this._hVirtDir) {\n            return this._hVirtDir;\n        }\n    }\n\n    private _dropPos: DropPosition;\n    private _dropIndicator: any = null;\n    private _lastDropIndicator: any = null;\n    private _column: IgxColumnComponent;\n    private _hVirtDir: IgxGridForOfDirective<any>;\n    private _dragLeave = new Subject<boolean>();\n    private _dropIndicatorClass = 'igx-grid__th-drop-indicator--active';\n\n    constructor(private elementRef: ElementRef, private renderer: Renderer2, private zone: NgZone, private cms: IgxColumnMovingService) {\n        super(elementRef, renderer, zone);\n    }\n\n    public ngOnDestroy() {\n        this._dragLeave.next(true);\n        this._dragLeave.complete();\n    }\n\n    public onDragOver(event) {\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        if (this.isDropTarget &&\n            this.cms.column !== this.column &&\n            this.cms.column.level === this.column.level &&\n            this.cms.column.parent === this.column.parent) {\n\n            if (this._lastDropIndicator) {\n                this.renderer.removeClass(this._dropIndicator, this._dropIndicatorClass);\n            }\n\n            const clientRect = this.elementRef.nativeElement.getBoundingClientRect();\n            const pos = clientRect.left + clientRect.width / 2;\n\n            const parent = this.elementRef.nativeElement.parentElement;\n            if (event.detail.pageX < pos) {\n                this._dropPos = DropPosition.BeforeDropTarget;\n                this._lastDropIndicator = this._dropIndicator = parent.firstElementChild;\n            } else {\n                this._dropPos = DropPosition.AfterDropTarget;\n                this._lastDropIndicator = this._dropIndicator = parent.lastElementChild;\n            }\n\n            if (this.cms.icon.innerText !== 'block') {\n                this.renderer.addClass(this._dropIndicator, this._dropIndicatorClass);\n            }\n        }\n    }\n\n    public onDragEnter(event) {\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        if (this.column && this.cms.column.grid.id !== this.column.grid.id) {\n            this.cms.icon.innerText = 'block';\n            return;\n        }\n\n        if (this.isDropTarget &&\n            this.cms.column !== this.column &&\n            this.cms.column.level === this.column.level &&\n            this.cms.column.parent === this.column.parent) {\n\n                if (!this.column.pinned || (this.column.pinned && this.cms.column.pinned)) {\n                    this.cms.icon.innerText = 'swap_horiz';\n                }\n\n                if (!this.cms.column.pinned && this.column.pinned) {\n                    const nextPinnedWidth = this.column.grid.getPinnedWidth(true) + parseFloat(this.cms.column.width);\n\n                    if (nextPinnedWidth <= this.column.grid.calcPinnedContainerMaxWidth) {\n                        this.cms.icon.innerText = 'lock';\n                    } else {\n                        this.cms.icon.innerText = 'block';\n                    }\n                }\n            } else {\n                this.cms.icon.innerText = 'block';\n            }\n\n            if (this.horizontalScroll) {\n                this.cms.icon.innerText = event.target.id === 'right' ? 'arrow_forward' : 'arrow_back';\n\n                interval(100).pipe(takeUntil(this._dragLeave)).subscribe(() => {\n                    this.cms.column.grid.wheelHandler();\n                    event.target.id === 'right' ? this.horizontalScroll.scrollPosition += 15 :\n                        this.horizontalScroll.scrollPosition -= 15;\n                });\n            }\n    }\n\n    public onDragLeave(event) {\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        this.cms.icon.innerText = 'block';\n\n        if (this._dropIndicator) {\n            this.renderer.removeClass(this._dropIndicator, this._dropIndicatorClass);\n        }\n\n        if (this.horizontalScroll) {\n            this._dragLeave.next(true);\n        }\n    }\n\n    public onDragDrop(event) {\n        event.preventDefault();\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        if (this.column && (this.cms.column.grid.id !== this.column.grid.id)) {\n            return;\n        }\n\n        if (this.horizontalScroll) {\n            this._dragLeave.next(true);\n        }\n\n        if (this.isDropTarget) {\n            const args = {\n                source: this.cms.column,\n                target: this.column\n            };\n\n            let nextPinnedWidth;\n            if (this.column.pinned && !this.cms.column.pinned) {\n                nextPinnedWidth = this.column.grid.getPinnedWidth(true) + parseFloat(this.cms.column.width);\n            }\n\n            if ((nextPinnedWidth && nextPinnedWidth > this.column.grid.calcPinnedContainerMaxWidth) ||\n                this.column.level !== this.cms.column.level ||\n                this.column.parent !== this.cms.column.parent ||\n                this.cms.cancelDrop) {\n                    this.cms.cancelDrop = false;\n                    this.column.grid.onColumnMovingEnd.emit(args);\n                    return;\n            }\n\n            this.column.grid.moveColumn(this.cms.column, this.column, this._dropPos);\n\n            this.column.grid.draggedColumn = null;\n            this.column.grid.cdr.detectChanges();\n        }\n    }\n}\n@Directive({\n    selector: '[igxGridBody]',\n    providers: [IgxForOfSyncService]\n})\nexport class IgxGridBodyDirective {}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'igxdate'\n})\nexport class IgxDatePipeComponent extends DatePipe implements PipeTransform {\n    constructor(@Inject(LOCALE_ID) locale: string) {\n        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(locale);\n    }\n    transform(value: any, locale: string): string {\n        if (value && value instanceof Date) {\n            if (locale) {\n                return super.transform(value, DEFAULT_DATE_FORMAT, undefined, locale);\n            } else {\n                return super.transform(value);\n            }\n        } else {\n            return value;\n        }\n    }\n}\n/**\n *@hidden\n */\n@Pipe({\n    name: 'igxdecimal'\n})\nexport class IgxDecimalPipeComponent extends DecimalPipe implements PipeTransform {\n    constructor(@Inject(LOCALE_ID) locale: string) {\n        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(locale);\n    }\n    transform(value: any, locale: string): string {\n        if (value && typeof value === 'number') {\n            if (locale) {\n                return super.transform(value, undefined, locale);\n            } else {\n                return super.transform(value);\n            }\n        } else {\n            return value;\n        }\n    }\n}\n\n/**\n * @hidden\n */\nexport interface RowEditPositionSettings extends PositionSettings {\n    container?: HTMLElement;\n}\n\n/**\n * @hidden\n */\nexport class RowEditPositionStrategy extends ConnectedPositioningStrategy {\n    isTop = false;\n    isTopInitialPosition = null;\n    public settings: RowEditPositionSettings;\n    position(contentElement: HTMLElement, size: { width: number, height: number }, document?: Document, initialCall?: boolean): void {\n        const container = this.settings.container; // grid.tbody\n        const target = <HTMLElement>this.settings.target; // current grid.row\n\n        // Position of the overlay depends on the available space in the grid.\n        // If the bottom space is not enough then the the row overlay will show at the top of the row.\n        // Once shown, either top or bottom, then this position stays until the overlay is closed (isTopInitialPosition property),\n        // which means that when scrolling then overlay may hide, while the row is still visible (UX requirement).\n        this.isTop = this.isTopInitialPosition !== null ?\n            this.isTopInitialPosition :\n            container.getBoundingClientRect().bottom <\n                target.getBoundingClientRect().bottom + contentElement.getBoundingClientRect().height;\n\n        // Set width of the row editing overlay to equal row width, otherwise it fits 100% of the grid.\n        contentElement.style.width = target.clientWidth + 'px';\n        this.settings.verticalStartPoint = this.settings.verticalDirection = this.isTop ? VerticalAlignment.Top : VerticalAlignment.Bottom;\n        this.settings.openAnimation = this.isTop ? scaleInVerBottom : scaleInVerTop;\n\n        super.position(contentElement, { width: target.clientWidth, height: target.clientHeight }, document, initialCall);\n    }\n}\n","import { EventEmitter, Input, Output } from '@angular/core';\nimport { IBaseEventArgs } from '../core/utils';\n\nexport interface IValueChangedEventArgs extends IBaseEventArgs {\n    oldValue: any;\n    newValue: any;\n}\n\n/**\n *@hidden\n */\nexport abstract class ItemPropertyValueChanged {\n    private _object: any;\n    private _propName: string;\n\n    get object() {\n        return this._object;\n    }\n\n    set object(value) {\n        if (value) {\n            this._object = value;\n        }\n    }\n\n    @Input()\n    get value() {\n        return (this.object) ? this.object[this._propName] : null;\n    }\n\n    set value(value) {\n        this.onValueChanged(value);\n    }\n\n    @Output()\n    public valueChanged = new EventEmitter<IValueChangedEventArgs>();\n\n    constructor(propName: string) {\n        this._propName = propName;\n    }\n\n    protected onValueChanged(value) {\n        const currentValue = this.value;\n        if (value !== currentValue) {\n            this.object[this._propName] = value;\n            this.valueChanged.emit({ oldValue: currentValue, newValue: value });\n        }\n    }\n}\n\n/** @hidden */\nexport class ColumnChooserItemBase extends ItemPropertyValueChanged {\n    @Input()\n    get column() {\n        return this.object;\n    }\n\n    set column(value) {\n        if (value) {\n            this.object = value;\n        }\n    }\n\n    @Input()\n    public indentation = 30;\n\n    @Input()\n    public container: any;\n\n    constructor(public prop: string) {\n        super(prop);\n    }\n\n    get name() {\n        return (this.column) ? ((this.column.header) ? this.column.header : this.column.field) : '';\n    }\n\n    get level() {\n        return this.column.level;\n    }\n\n    get calcIndent() {\n        return this.indentation * this.level;\n    }\n}\n","\nimport { Directive } from '@angular/core';\nimport { ColumnChooserItemBase } from './column-chooser-item-base';\nimport { IBaseEventArgs } from '../core/utils';\n\nexport interface IColumnVisibilityChangedEventArgs extends IBaseEventArgs {\n    column: any;\n    newValue: boolean;\n}\n\n/** @hidden */\n@Directive({\n    selector: '[igxColumnHidingItem]'\n})\nexport class IgxColumnHidingItemDirective extends ColumnChooserItemBase {\n\n    constructor() {\n        super('hidden');\n    }\n\n    get disabled() {\n        return this.column.disableHiding;\n    }\n}\n","import { ChangeDetectorRef, HostBinding, Input, OnDestroy } from '@angular/core';\nimport { IgxStringFilteringOperand } from '../data-operations/filtering-condition';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { FilteringStrategy } from '../data-operations/filtering-strategy';\nimport { ColumnChooserItemBase } from './column-chooser-item-base';\n\nexport enum ColumnDisplayOrder {\n    Alphabetical = 'Alphabetical',\n    DisplayOrder = 'DisplayOrder'\n}\n\nclass CustomFilteringStrategy extends FilteringStrategy {\n    public filter(data: any[], expressionsTree: IFilteringExpressionsTree): any[] {\n        const res: ColumnChooserItemBase[] = [];\n        data.forEach((item: ColumnChooserItemBase) => {\n            if (this.matchRecord(item, expressionsTree.filteringOperands[0] as IFilteringExpression)) {\n                res.push(item);\n            } else if (item.column.columnGroup) {\n                if (item.column.allChildren.findIndex((child) =>\n                    this.matchRecord(child, expressionsTree.filteringOperands[1] as IFilteringExpression) ||\n                    this.matchRecord(child, expressionsTree.filteringOperands[2] as IFilteringExpression)) > -1) {\n                    res.push(item);\n                }\n            }\n        });\n\n        return res;\n    }\n}\n\n/** @hidden */\nexport abstract class ColumnChooserBase implements OnDestroy {\n    /**\n     * Gets the grid columns that are going to be manipulated.\n     * ```typescript\n     * let gridColumns = this.columnHidingUI.columns;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n\n    @Input()\n    get columns() {\n        return this._gridColumns;\n    }\n    /**\n     * Sets the the grid columns that are going to be manipulated.\n     * ```html\n     * <igx-column-hiding [columns]=\"grid.columns\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set columns(value) {\n        if (value) {\n            this._gridColumns = value;\n            this.createColumnItems();\n            if (this.filterCriteria) {\n                this.filter();\n            }\n        }\n    }\n    /**\n     * Sets/gets the title of the column chooser.\n     * ```typescript\n     * let title =  this.columnHidingUI.title;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get title() {\n        return this._title;\n    }\n    /**\n     * ```html\n     * <igx-column-hiding [title]=\"'IgxColumnHidingComponent Title'\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set title(value) {\n        this._title = (value) ? value : '';\n    }\n    /**\n     * Gets the prompt that is displayed in the filter input.\n     * ```typescript\n     * let filterColumnsPrompt =  this.columnHidingUI.filterColumnsPrompt;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get filterColumnsPrompt() {\n        return this._filterColumnsPrompt;\n    }\n    /**\n     * Sets the prompt that is going to be displayed in the filter input.\n     * ```html\n     * <igx-column-hiding [filterColumnsPrompt]=\"'Type here to search'\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set filterColumnsPrompt(value) {\n        this._filterColumnsPrompt = (value) ? value : '';\n    }\n    /**\n     * Hides/ shows the filtering columns input from the UI.\n     */\n    @Input()\n    public disableFilter = false;\n    /**\n     * Gets the items of the selected columns.\n     * ```typescript\n     * let columnItems =  this.columnHidingUI.columnItems;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get columnItems() {\n        return this._currentColumns;\n    }\n    /**\n     * Gets the value which filters the columns list.\n     * ```typescript\n     * let filterCriteria =  this.columnHidingUI.filterCriteria;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get filterCriteria() {\n        return this._filterCriteria;\n    }\n\n    /**\n     * Sets the value which filters the columns list.\n     * ```html\n     *  <igx-column-hiding [filterCriteria]=\"'ID'\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set filterCriteria(value) {\n        if (!value || value.length === 0) {\n            this.clearFiltering();\n            this._filterCriteria = '';\n            this.cdr.detectChanges();\n            return;\n        } else if (this._filterCriteria && this._filterCriteria.length > value.length) {\n            this.clearFiltering();\n        }\n\n        this._filterCriteria = value;\n        this.filter();\n        this.cdr.detectChanges();\n    }\n    /**\n     * Gets the display order of the columns.\n     * ```typescript\n     * let columnDisplayOrder  =  this.columnHidingUI.columnDisplayOrder;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get columnDisplayOrder() {\n        return this._columnDisplayOrder;\n    }\n    /**\n     * Sets the display order of the columns.\n     * ```typescript\n     * this.columnHidingUI.columnDisplayOrder = ColumnDisplayOrder.Alphabetical;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set columnDisplayOrder(value: ColumnDisplayOrder) {\n        if (value !== undefined) {\n            this.orderColumns(value);\n            if (this._filterCriteria.length > 0) {\n                this.filter();\n            }\n        }\n    }\n    /**\n     * Access to the columnHidingUI:\n     * ```typescript\n     * @ViewChild('column-hiding-component')\n     *  public columnHidingUI: IgxColumnHidingComponent;\n     * ```\n     * Sets/gets the max height of the column area.\n     * ```typescript\n     * let columnsAreaMaxHeight =  this.columnHidingUI.columnsAreaMaxHeight;\n     * ```\n     *\n     * ```html\n     * <igx-column-hiding [columnsAreaMaxHeight]=\"200px\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    public columnsAreaMaxHeight = '100%';\n    /**\n     * Sets/Gets the css class selector.\n     * By default the value of the `class` attribute is `\"igx-column-hiding\"`.\n     * ```typescript\n     * let cssCLass =  this.columnHidingUI.cssClass;\n     * ```\n     * ```typescript\n     * this.columnHidingUI.cssClass = 'column-chooser';\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @HostBinding('attr.class')\n    public cssClass = 'igx-column-hiding';\n    /**\n     *@hidden\n     */\n    private _currentColumns = [];\n    /**\n     *@hidden\n     */\n    private _gridColumns = [];\n    /**\n     *@hidden\n     */\n    private _rawColumns = [];\n    /**\n     *@hidden\n     */\n    private _columnDisplayOrder = ColumnDisplayOrder.DisplayOrder;\n    /**\n     *@hidden\n     */\n    private _filterCriteria = '';\n    /**\n     *@hidden\n     */\n    private _filterColumnsPrompt = '';\n    /**\n     *@hidden\n     */\n    private _title = '';\n\n    constructor(public cdr: ChangeDetectorRef) {\n    }\n    /**\n     *@hidden\n     */\n    ngOnDestroy() {\n        for (const item of this._currentColumns) {\n            item.valueChanged.unsubscribe();\n        }\n    }\n    /**\n     *@hidden\n     */\n    private createColumnItems() {\n        if (this._gridColumns.length > 0) {\n            this._rawColumns = [];\n            this._gridColumns.forEach((column) => {\n                const item = this.createColumnItem(this, column);\n                if (item) {\n                    this._rawColumns.push(item);\n                }\n            });\n            this._currentColumns = this._rawColumns.slice(0);\n            this.orderColumns(this._columnDisplayOrder);\n        }\n    }\n    /**\n     *@hidden\n     */\n    protected abstract createColumnItem(container: any, column: any);\n    /**\n     *@hidden\n     */\n    private orderColumns(value) {\n        this._columnDisplayOrder = value;\n        if (value === ColumnDisplayOrder[ColumnDisplayOrder.Alphabetical] ||\n            value === ColumnDisplayOrder.Alphabetical) {\n            this._currentColumns = this._rawColumns.slice(0).sort((current, next) => {\n                return current.name.toLowerCase().localeCompare(next.name.toLowerCase());\n            });\n        } else {\n            this._currentColumns = this._rawColumns;\n        }\n    }\n    /**\n     *@hidden\n     */\n    protected filter() {\n        const filteringExpressionsTree = new FilteringExpressionsTree(FilteringLogic.Or);\n        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('name'));\n        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('field'));\n        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('header'));\n\n        const strategy = new CustomFilteringStrategy();\n        this._currentColumns = strategy.filter(this._currentColumns, filteringExpressionsTree);\n    }\n    /**\n     *@hidden\n     */\n    protected createFilteringExpression(fieldName: string): IFilteringExpression {\n        return {\n            condition: IgxStringFilteringOperand.instance().condition('contains'),\n            fieldName: fieldName,\n            ignoreCase: true,\n            searchVal: this._filterCriteria\n        };\n    }\n    /**\n     *@hidden\n     */\n    protected clearFiltering() {\n        this.createColumnItems();\n    }\n}\n\n\n","import { CommonModule } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    NgModule,\n    Output,\n    OnDestroy\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IColumnVisibilityChangedEventArgs, IgxColumnHidingItemDirective } from './column-hiding-item.directive';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { ColumnChooserBase } from './column-chooser-base';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-column-hiding',\n    templateUrl: './column-hiding.component.html'\n})\nexport class IgxColumnHidingComponent extends ColumnChooserBase implements OnDestroy {\n    /**\n     * Returns a boolean indicating whether the `HIDE ALL` button is disabled.\n     * ```html\n     * <igx-column-hiding #columnHidingUI\n     *     [columns]=\"grid.columns\" [title]=\"'Column Hiding'\">\n     * </igx-column-hiding>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'columnHidingUI'\")\n     * public columnHiding: IgxColumnHidingComponent;\n     * let isHideAlldisabled =  this.columnHiding.disableHideAll;\n     * ```\n     *@memberof IgxColumnHidingComponent\n     */\n    @Input()\n    get disableHideAll(): boolean {\n        if (!this.columnItems || this.columnItems.length < 1 ||\n            this.hiddenColumnsCount === this.columns.length) {\n            return true;\n        } else if (this.hidableColumns.length < 1 ||\n            this.hidableColumns.length === this.hidableColumns.filter((col) => col.value).length) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    /**\n     * Returns a boolean indicating whether the `SHOW ALL` button is disabled.\n     * ```typescript\n     * let isShowAlldisabled =  this.columnHiding.disableShowAll;\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    get disableShowAll(): boolean {\n        if (!this.columnItems || this.columnItems.length < 1 ||\n            this.hiddenColumnsCount < 1 || this.hidableColumns.length < 1) {\n            return true;\n        } else if (this.hidableColumns.length === this.hidableColumns.filter((col) => !col.value).length) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    /**\n     * Sets/gets the text of the button that shows all columns if they are hidden.\n     * ```typescript\n     * let showAllButtonText =  this.columnHiding.showAllText;\n     * ```\n     *\n     * ```html\n     * <igx-column-hiding [showAllText] = \"'Show Columns'\"></igx-column-hiding>\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    public showAllText = 'Show All';\n    /**\n     * Sets/gets the text of the button that hides all columns if they are shown.\n     * ```typescript\n     * let hideAllButtonText =  this.columnHiding.hideAllText;\n     * ```\n     *\n     * ```html\n     * <igx-column-hiding [hideAllText] = \"'Hide Columns'\"></igx-column-hiding>\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    public hideAllText = 'Hide All';\n    /**\n     * An event that is emitted after the columns visibility is changed.\n     * Provides references to the `column` and the `newValue` properties as event arguments.\n     * ```html\n     *  <igx-column-hiding (onColumnVisibilityChanged) = \"onColumnVisibilityChanged($event)\"></igx-column-hiding>\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Output()\n    public onColumnVisibilityChanged = new EventEmitter<IColumnVisibilityChangedEventArgs>();\n    /**\n     * Gets the count of the hidden columns.\n     * ```typescript\n     * let hiddenColumnsCount =  this.columnHiding.hiddenColumnsCount;\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    public get hiddenColumnsCount() {\n        return (this.columns) ? this.columns.filter((col) => col.hidden).length : 0;\n    }\n\n    constructor(public cdr: ChangeDetectorRef) {\n        super(cdr);\n    }\n\n    /**\n     *@hidden\n     */\n    public get hidableColumns() {\n        return this.columnItems.filter((col) => !col.disabled);\n    }\n\n    private destroy$ = new Subject<boolean>();\n    /**\n     *@hidden\n     */\n    protected createColumnItem(container: any, column: any) {\n        if (column.grid.hasColumnLayouts && !column.columnLayout) {\n            return null;\n        }\n        const item = new IgxColumnHidingItemDirective();\n        item.container = container;\n        item.column = column;\n\n        item.valueChanged.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n            this.onVisibilityChanged({ column: item.column, newValue: args.newValue });\n        });\n\n        return item;\n    }\n    /**\n     * Shows all columns in the grid.\n     * ```typescript\n     * this.columnHiding.showAllColumns();\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    public showAllColumns() {\n        const collection = this.hidableColumns;\n        for (const col of collection) {\n            col.value = false;\n        }\n    }\n    /**\n     * Hides all columns in the grid.\n     * ```typescript\n     * this.columnHiding.hideAllColumns();\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    public hideAllColumns() {\n        const collection = this.hidableColumns;\n        for (const col of collection) {\n            col.value = true;\n        }\n    }\n    /**\n     * @hidden\n     */\n    public onVisibilityChanged(args: IColumnVisibilityChangedEventArgs) {\n        this.onColumnVisibilityChanged.emit(args);\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxColumnHidingComponent, IgxColumnHidingItemDirective],\n    exports: [IgxColumnHidingComponent],\n    imports: [\n        IgxButtonModule,\n        IgxCheckboxModule,\n        IgxInputGroupModule,\n        CommonModule,\n        FormsModule,\n    ]\n})\nexport class IgxColumnHidingModule {\n}\n","\nimport { CommonModule } from '@angular/common';\nimport { Directive, Component, NgModule, ChangeDetectorRef } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { ColumnChooserBase } from './column-chooser-base';\nimport { ColumnChooserItemBase } from './column-chooser-item-base';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\n\n@Directive({\n    selector: '[igxColumnPinningItem]'\n})\nexport class IgxColumnPinningItemDirective extends ColumnChooserItemBase {\n\n    constructor() {\n        super('pinned');\n    }\n\n    /**\n     * Returns whether a column could be pinned.\n     * It's not possible to pin a column if there is not enough space for the unpinned area.\n     * ```typescript\n     * const columnItem: IgxColumnPinningItemDirective;\n     * this.columnItem.pinnable;\n     * ```\n     */\n    get pinnable() {\n        return this.column.pinnable;\n    }\n}\n\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-column-pinning',\n    templateUrl: './column-pinning.component.html'\n})\nexport class IgxColumnPinningComponent extends ColumnChooserBase {\n\n    constructor(public cdr: ChangeDetectorRef) {\n        super(cdr);\n    }\n\n    /**\n     * @hidden\n     */\n    createColumnItem(container: any, column: any) {\n        if (column.level !== 0 || column.disablePinning) {\n            return null;\n        }\n        const item = new IgxColumnPinningItemDirective();\n        item.container = container;\n        item.column = column;\n        return item;\n    }\n\n    /**\n     * @hidden\n     */\n    public checkboxValueChange(event, columnItem: IgxColumnPinningItemDirective) {\n        if (event.checked && !columnItem.pinnable) {\n            event.checkbox.checked = false;\n            return false;\n        }\n        columnItem.value = !columnItem.value;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxColumnPinningComponent, IgxColumnPinningItemDirective],\n    exports: [IgxColumnPinningComponent],\n    imports: [\n        IgxCheckboxModule,\n        IgxInputGroupModule,\n        CommonModule,\n        FormsModule\n    ]\n})\nexport class IgxColumnPinningModule {\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    Directive,\n    HostBinding,\n    Input,\n    Optional,\n    ViewChild,\n    Inject,\n    TemplateRef\n} from '@angular/core';\n\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase } from '../core/displayDensity';\nimport {\n    CsvFileTypes,\n    IgxBaseExporter,\n    IgxCsvExporterOptions,\n    IgxCsvExporterService,\n    IgxExcelExporterOptions,\n    IgxExcelExporterService,\n    AbsoluteScrollStrategy\n} from '../services/index';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxButtonDirective } from '../directives/button/button.directive';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxDropDownComponent } from '../drop-down/drop-down.component';\nimport { IgxColumnHidingComponent } from './column-hiding.component';\nimport { IgxColumnPinningComponent } from './column-pinning.component';\nimport { OverlaySettings, PositionSettings, HorizontalAlignment, VerticalAlignment } from '../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../services/overlay/position';\n\n/**\n * This class encapsulates the Toolbar's logic and is internally used by\n * the `IgxGridComponent`, `IgxTreeGridComponent` and `IgxHierarchicalGridComponent`.\n */\n@Component({\n    selector: 'igx-grid-toolbar',\n    templateUrl: './grid-toolbar.component.html'\n})\nexport class IgxGridToolbarComponent extends DisplayDensityBase {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-grid-toolbar')\n    @Input()\n    public gridID: string;\n\n    /**\n     * Gets the default text shown in the filtering box.\n     * ```typescript\n     * const filterPrompt = this.grid.toolbar.filterColumnsPrompt;\n     * ```\n     */\n    @Input()\n    public get filterColumnsPrompt() {\n        return this._filterColumnsPrompt;\n    }\n\n    /**\n     * Sets the default text shown in the filtering box.\n     * ```typescript\n     * this.grid.toolbar.filterColumnsPrompt('Filter columns ...');\n     * ```\n     */\n    public set filterColumnsPrompt(value: string) {\n        this._filterColumnsPrompt = value;\n    }\n\n    private _filterColumnsPrompt = 'Filter columns list ...';\n\n    /**\n     * Gets the height for the `IgxGridToolbarComponent`'s drop down panels.\n     * ```typescript\n     * const dropdownHeight = this.grid.toolbar.defaultDropDownsMaxHeight;\n     * ```\n     */\n    @Input()\n    get defaultDropDownsMaxHeight() {\n        const gridHeight = this.grid.calcHeight;\n        return (gridHeight) ? gridHeight * 0.7 + 'px' : '100%';\n    }\n\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Column Hiding UI.\n     * ```typescript\n     * const dropdownHiding = this.grid.toolbar.columnHidingDropdown;\n     * ```\n     */\n    @ViewChild('columnHidingDropdown', { read: IgxDropDownComponent, static: false })\n    public columnHidingDropdown: IgxDropDownComponent;\n\n    /**\n     * Provides a reference to the `IgxColumnHidingComponent`.\n     * ```typescript\n     * const hidingUI = this.grid.toolbar.columnHidingUI;\n     * ```\n     */\n    @ViewChild(IgxColumnHidingComponent, { static: false })\n    public columnHidingUI: IgxColumnHidingComponent;\n\n    /**\n     * Provides a reference to the Column Hiding button.\n     * ```typescript\n     * const hidingButton = this.grid.toolbar.columnHidingButton;\n     * ```\n     */\n    @ViewChild('columnHidingButton', { read: IgxButtonDirective, static: false })\n    public columnHidingButton: IgxButtonDirective;\n\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Export button.\n     * ```typescript\n     * const exportDropdown = this.grid.toolbar.exportDropdown;\n     * ```\n     */\n    @ViewChild('exportDropdown', { read: IgxDropDownComponent, static: false })\n    public exportDropdown: IgxDropDownComponent;\n\n    /**\n     * Provides a reference to the Export button.\n     * ```typescript\n     * const exportBtn = this.grid.toolbar.exportButton;\n     * ```\n     */\n    @ViewChild('btnExport', { read: IgxButtonDirective, static: false })\n    public exportButton: IgxButtonDirective;\n\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Column Pinning UI.\n     * ```typescript\n     * const dropdownPinning = this.grid.toolbar.columnPinningDropdown;\n     * ```\n     */\n    @ViewChild('columnPinningDropdown', { read: IgxDropDownComponent, static: false })\n    public columnPinningDropdown: IgxDropDownComponent;\n\n    /**\n     * Provides a reference to the `IgxColumnPinningComponent`.\n     * ```typescript\n     * const pinningUI = this.grid.toolbar.columnPinningDropdown;\n     * ```\n     */\n    @ViewChild(IgxColumnPinningComponent, { static: false })\n    public columnPinningUI: IgxColumnPinningComponent;\n\n    /**\n     * Provides a reference to the Column Pinning button.\n     * ```typescript\n     * const pinningButton = this.grid.toolbar.columnPinningButton;\n     * ```\n     */\n    @ViewChild('columnPinningButton', { read: IgxButtonDirective, static: false })\n    public columnPinningButton: IgxButtonDirective;\n\n    /**\n     * Returns a reference to the `IgxGridComponent` component, hosting the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const grid = this.igxGrid1.toolbar.grid;\n     * ```\n     */\n    public get grid(): IgxGridBaseComponent {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent` renders an export button.\n     * ```typescript\n     * const exportButton = this.igxGrid1.toolbar.shouldShowExportButton;\n     * ```\n     */\n    public get shouldShowExportButton(): boolean {\n        return (this.grid != null && (this.grid.exportExcel || this.grid.exportCsv));\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent` renders an Excel export button.\n     * ```typescript\n     * const exportExcelButton = this.igxGrid1.toolbar.shouldShowExportExcelButton;\n     * ```\n     */\n    public get shouldShowExportExcelButton(): boolean {\n        return (this.grid != null && this.grid.exportExcel);\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent` renders an CSV export button.\n     * ```typescript\n     * const exportCSVButton = this.igxGrid1.toolbar.shouldShowExportCsvButton;\n     * ```\n     */\n    public get shouldShowExportCsvButton(): boolean {\n        return (this.grid != null && this.grid.exportCsv);\n    }\n\n    /**\n     * Returns how many columns are pinned.\n     * ```typescript\n     * const pinnedCount = this.igxGrid1.toolbar.pinnedColumnsCount;\n     * ```\n     */\n    public get pinnedColumnsCount() {\n        return this.grid.pinnedColumns.filter(col => !col.columnLayout).length;\n    }\n\n    /**\n     * Returns the theme of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarTheme = this.grid.toolbar.hostClass;\n     * ```\n     */\n\n    @HostBinding('attr.class')\n    get hostClass(): string {\n        return this.getComponentDensityClass('igx-grid-toolbar');\n    }\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        public cdr: ChangeDetectorRef,\n        @Optional() public excelExporter: IgxExcelExporterService,\n        @Optional() public csvExporter: IgxCsvExporterService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n    }\n\n    private _positionSettings: PositionSettings = {\n        horizontalDirection: HorizontalAlignment.Left,\n        horizontalStartPoint: HorizontalAlignment.Right,\n        verticalDirection: VerticalAlignment.Bottom,\n        verticalStartPoint: VerticalAlignment.Bottom\n    };\n\n    private _overlaySettings: OverlaySettings = {\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings),\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: true,\n        excludePositionTarget: true\n    };\n\n    /**\n     * Returns the title of `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarTitle = this.igxGrid1.toolbar.getTitle();\n     * ```\n     */\n    public getTitle(): string {\n        return this.grid != null ? this.grid.toolbarTitle : '';\n    }\n\n    /**\n     * Returns the text of the export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarExportText = this.igxGrid1.toolbar.getTitle();\n     * ```\n     */\n    public getExportText(): string {\n        return this.grid != null ? this.grid.exportText : '';\n    }\n\n    /**\n     * Returns the text of the Excel export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarExcelText = this.igxGrid1.toolbar.getExportExcelText();\n     * ```\n     */\n    public getExportExcelText(): string {\n        return this.grid != null ? this.grid.exportExcelText : '';\n    }\n\n    /**\n     * Returns the text of the CSV export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarCSVText = this.igxGrid1.toolbar.getExportCsvText();\n     * ```\n     */\n    public getExportCsvText(): string {\n        return this.grid != null ? this.grid.exportCsvText : '';\n    }\n\n    /**\n     * Toggles the export button's dropdown menu.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportClicked();\n     * ```\n     */\n    public exportClicked() {\n        this._overlaySettings.positionStrategy.settings.target = this.exportButton.nativeElement;\n        this._overlaySettings.outlet = this.grid.outletDirective;\n        this.exportDropdown.toggle(this._overlaySettings);\n    }\n\n    /**\n     * Exports the grid to excel.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportToExcelClicked();\n     * ```\n     */\n    public exportToExcelClicked() {\n        this.performExport(this.excelExporter, 'excel');\n    }\n\n    /**\n     * Exports the grid to CSV.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportToCsvClicked();\n     * ```\n     */\n    public exportToCsvClicked() {\n        this.performExport(this.csvExporter, 'csv');\n    }\n\n    private performExport(exp: IgxBaseExporter, exportType: string) {\n        this.exportClicked();\n\n        const fileName = 'ExportedData';\n        const options = exportType === 'excel' ?\n            new IgxExcelExporterOptions(fileName) :\n            new IgxCsvExporterOptions(fileName, CsvFileTypes.CSV);\n\n        const args = { grid: this.grid, exporter: exp, options: options, cancel: false };\n\n        this.grid.onToolbarExporting.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        exp.export(this.grid, options);\n    }\n\n    /**\n     * Toggles the Column Hiding UI.\n     * ```typescript\n     * this.grid1.toolbar.toggleColumnHidingUI();\n     * ```\n     */\n    public toggleColumnHidingUI() {\n        this._overlaySettings.positionStrategy.settings.target = this.columnHidingButton.nativeElement;\n        this._overlaySettings.outlet = this.grid.outletDirective;\n        this.columnHidingDropdown.toggle(this._overlaySettings);\n    }\n\n    /**\n     * Toggles the Column Pinning UI.\n     * ```typescript\n     * this.grid1.toolbar.toggleColumnPinningUI();\n     * ```\n     */\n    public toggleColumnPinningUI() {\n        this._overlaySettings.positionStrategy.settings.target = this.columnPinningButton.nativeElement;\n        this._overlaySettings.outlet = this.grid.outletDirective;\n        this.columnPinningDropdown.toggle(this._overlaySettings);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public showAdvancedFilteringUI() {\n        this.grid.openAdvancedFilteringDialog();\n    }\n\n    /**\n     * Returns the `context` object which represents the `template context` binding into the\n     * `toolbar custom container` by providing references to the parent IgxGird and the toolbar itself.\n     * ```typescript\n     * const context =  this.igxGrid.toolbar.context;\n     * ```\n     */\n    public get context(): any {\n        return {\n            // $implicit: this\n            grid: this.grid,\n            toolbar: this\n        };\n    }\n\n    /** @hidden */\n    public get customContentTemplate(): TemplateRef<any> {\n        if (this.grid != null && this.grid.toolbarCustomContentTemplate != null) {\n            return this.grid.toolbarCustomContentTemplate.template;\n        } else {\n            return null;\n        }\n    }\n}\n\n/**\n * The IgxGridToolbarCustomContentDirective directive is used to mark an 'ng-template' (with\n * the 'igxToolbarCustomContent' selector) defined in the IgxGrid which is used to provide\n * custom content for cener part of the IgxGridToolbar.\n */\n@Directive({\n    selector: '[igxToolbarCustomContent]'\n})\nexport class IgxGridToolbarCustomContentDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","import { Directive, ElementRef, HostListener } from '@angular/core';\nimport { GridBaseAPIService } from './api.service';\nimport { GridType } from './common/grid.interface';\n\n/** @hidden */\n@Directive({\n    selector: '[igxRowEdit]'\n})\nexport class IgxRowEditTemplateDirective { }\n\n/** @hidden */\n@Directive({\n    selector: '[igxRowEditText]'\n})\nexport class IgxRowEditTextDirective { }\n\n/** @hidden */\n@Directive({\n    selector: '[igxRowEditActions]'\n})\nexport class IgxRowEditActionsDirective { }\n\n\n// TODO: Refactor circular ref, deps and logic\n/** @hidden */\n@Directive({\n    selector: `[igxRowEditTabStop]`\n})\nexport class IgxRowEditTabStopDirective {\n    private currentCellIndex: number;\n\n\n    constructor(public api: GridBaseAPIService<any>, public element: ElementRef) {}\n\n    get grid(): GridType {\n        return this.api.grid;\n    }\n\n    @HostListener('keydown.Tab', [`$event`])\n    @HostListener('keydown.Shift.Tab', [`$event`])\n    public handleTab(event: KeyboardEvent): void {\n        event.stopPropagation();\n        if ((this.grid.rowEditTabs.last === this && !event.shiftKey) ||\n            (this.grid.rowEditTabs.first === this && event.shiftKey)\n        ) {\n            this.move(event);\n        }\n    }\n\n    @HostListener('keydown.Escape', [`$event`])\n    public handleEscape(event: KeyboardEvent): void {\n        this.grid.endEdit(false, event);\n        const activeNode = this.grid.selectionService.activeElement;\n        //  on right click activeNode is deleted, so we may have no one\n        if (activeNode) {\n            const cell = this.grid.navigation.getCellElementByVisibleIndex(\n                activeNode.row,\n                activeNode.layout ? activeNode.layout.columnVisibleIndex : activeNode.column);\n            cell.focus();\n        }\n    }\n\n    /**\n     * Moves focus to first/last editable cell in the editable row and put the cell in edit mode.\n     * If cell is out of view first scrolls to the cell\n     * @param event keyboard event containing information about whether SHIFT key was pressed\n     */\n    private move(event: KeyboardEvent) {\n        event.preventDefault();\n        this.currentCellIndex = event.shiftKey ? this.grid.lastEditableColumnIndex : this.grid.firstEditableColumnIndex;\n        if (!this.grid.navigation.isColumnFullyVisible(this.currentCellIndex)) {\n            this.grid.navigation.performHorizontalScrollToCell(\n                this.grid.rowInEditMode.index, this.currentCellIndex, false, this.activateCell);\n        } else {\n            this.activateCell();\n        }\n    }\n\n    /**\n     * Sets the cell in edit mode and focus its native element\n     * @param cellIndex index of the cell to activate\n     */\n    private activateCell = (): void => {\n        const cell = this.grid.rowInEditMode.cells.find(e => e.visibleColumnIndex === this.currentCellIndex);\n        cell.nativeElement.focus();\n        cell.setEditMode(true);\n        this.currentCellIndex = -1;\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    ViewChild,\n    TemplateRef,\n} from '@angular/core';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { DataType } from '../../data-operations/data-util';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\nimport { IgxGridSelectionService, ISelectionNode } from '../../core/grid-selection';\nimport { ROW_COLLAPSE_KEYS, ROW_EXPAND_KEYS, SUPPORTED_KEYS } from '../../core/utils';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-groupby-row',\n    templateUrl: './groupby-row.component.html'\n})\nexport class IgxGridGroupByRowComponent {\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        private gridSelection: IgxGridSelectionService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) { }\n\n    /**\n     * @hidden\n     */\n    protected defaultCssClass = 'igx-grid__group-row';\n\n    /**\n     * @hidden\n     */\n    protected paddingIndentationCssClass = 'igx-grid__group-row--padding-level';\n\n    /**\n    * @hidden\n    */\n    @ViewChild('defaultGroupByExpandedTemplate', { read: TemplateRef, static: true })\n    protected defaultGroupByExpandedTemplate: TemplateRef<any>;\n\n    /**\n    * @hidden\n    */\n    @ViewChild('defaultGroupByCollapsedTemplate', { read: TemplateRef, static: true })\n    protected defaultGroupByCollapsedTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    protected isFocused = false;\n\n    /**\n     * Returns whether the row is focused.\n     * ```\n     * let gridRowFocused = this.grid1.rowList.first.focused;\n     * ```\n     */\n    get focused(): boolean {\n        return this.isFocused;\n    }\n\n    /**\n     * An @Input property that sets the index of the row.\n     * ```html\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    @Input()\n    public index: number;\n\n    /**\n     * An @Input property that sets the id of the grid the row belongs to.\n     * ```html\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    @Input()\n    public gridID: string;\n\n    /**\n     * An @Input property that specifies the group record the component renders for.\n     * ```typescript\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    @Input()\n    public groupRow: IGroupByRecord;\n\n    /**\n     * Returns a reference of the content of the group.\n     * ```typescript\n     * const groupRowContent = this.grid1.rowList.first.groupContent;\n     * ```\n     */\n    @ViewChild('groupContent', { static: true })\n    public groupContent: ElementRef;\n\n    /**\n     * Returns whether the group row is expanded.\n     * ```typescript\n     * const groupRowExpanded = this.grid1.rowList.first.expanded;\n     * ```\n     */\n    @HostBinding('attr.aria-expanded')\n    get expanded(): boolean {\n        return this.grid.isExpandedGroup(this.groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.aria-describedby')\n    get describedBy(): string {\n        const grRowExpr = this.groupRow.expression !== undefined ? this.groupRow.expression.fieldName : '';\n        return this.gridID + '_' + grRowExpr;\n    }\n\n    @HostBinding('attr.data-rowIndex')\n    get dataRowIndex() {\n        return this.index;\n    }\n\n    /**\n     * Returns a reference to the underlying HTML element.\n     * ```typescript\n     * const groupRowElement = this.nativeElement;\n     * ```\n     */\n    get nativeElement(): any {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Returns the style classes applied to the group rows.\n     * ```typescript\n     * const groupCssStyles = this.grid1.rowList.first.styleClasses;\n     * ```\n     */\n    @HostBinding('class')\n    get styleClasses(): string {\n        return `${this.defaultCssClass} ` + `${this.paddingIndentationCssClass}-` + this.groupRow.level +\n            (this.focused ? ` ${this.defaultCssClass}--active` : '');\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('focus')\n    public onFocus() {\n        this.isFocused = true;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('blur')\n    public onBlur() {\n        this.isFocused = false;\n    }\n\n    /**\n     * Toggles the group row.\n     * ```typescript\n     * this.grid1.rowList.first.toggle()\n     * ```\n     */\n    public toggle() {\n        const isVirtualized = !this.grid.verticalScrollContainer.dc.instance.notVirtual;\n        const groupRowIndex = this.index;\n        this.grid.toggleGroup(this.groupRow);\n        if (isVirtualized) {\n            const groupRow = this.grid.nativeElement.querySelector(`[data-rowIndex=\"${groupRowIndex}\"]`);\n            if (groupRow) {\n                groupRow.focus();\n            }\n        }\n    }\n\n    public get iconTemplate() {\n        if (this.expanded) {\n            return this.grid.rowExpandedIndicatorTemplate || this.defaultGroupByExpandedTemplate;\n        } else {\n            return this.grid.rowCollapsedIndicatorTemplate || this.defaultGroupByCollapsedTemplate;\n        }\n    }\n\n    protected get selectionNode(): ISelectionNode {\n        return {\n            row: this.index,\n            column: this.gridSelection.activeElement ? this.gridSelection.activeElement.column : 0\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown', ['$event'])\n    public onKeydown(event) {\n        // TODO: Refactor\n        const key = event.key.toLowerCase();\n        if (!SUPPORTED_KEYS.has(key)) {\n            return;\n        }\n        event.stopPropagation();\n        const keydownArgs = { targetType: 'groupRow', target: this, event: event, cancel: false };\n        this.grid.onGridKeydown.emit(keydownArgs);\n        if (keydownArgs.cancel) {\n            return;\n        }\n        event.preventDefault();\n\n        if (!this.isKeySupportedInGroupRow(key, event.shiftKey, event.altKey) || event.ctrlKey) { return; }\n\n        if (this.isToggleKey(key, event.altKey)) {\n            if ((this.expanded && ROW_COLLAPSE_KEYS.has(key)) || (!this.expanded && ROW_EXPAND_KEYS.has(key))) {\n                this.toggle();\n            }\n            return;\n        }\n\n        const selection = this.gridSelection;\n        selection.keyboardState.shift = event.shiftKey && !(key === 'tab');\n\n        const activeNode = selection.activeElement ? Object.assign({}, selection.activeElement) : this.selectionNode;\n        activeNode.row = this.index;\n        switch (key) {\n            case 'arrowdown':\n            case 'down':\n                this.grid.navigation.navigateDown(this.nativeElement, activeNode);\n                break;\n            case 'arrowup':\n            case 'up':\n                this.grid.navigation.navigateUp(this.nativeElement, activeNode);\n                break;\n            case 'tab':\n                this.handleTabKey(event.shiftKey, activeNode);\n                break;\n        }\n    }\n\n    /**\n     * Returns a reference to the `IgxGridComponent` the `IgxGridGroupByRowComponent` belongs to.\n     * ```typescript\n     * this.grid1.rowList.first.grid;\n     * ```\n     */\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * @hidden\n     */\n    get dataType(): any {\n        const column = this.grid.getColumnByName(this.groupRow.expression.fieldName);\n        return (column && column.dataType) || DataType.String;\n    }\n\n    private handleTabKey(shift: boolean, activeNode: ISelectionNode) {\n        if (shift) {\n            this.grid.navigation.performShiftTabKey(this.nativeElement, activeNode);\n        } else {\n            if (this.index === this.grid.dataView.length - 1 && this.grid.rootSummariesEnabled) {\n                this.grid.navigation.onKeydownHome(0, true);\n            } else {\n                const orderedColumns = this.grid.navigation.gridOrderedColumns;\n                const lastCol = orderedColumns[orderedColumns.length - 1];\n                activeNode.column = lastCol.columnLayoutChild ? lastCol.parent.visibleIndex : lastCol.visibleIndex;\n                this.grid.navigation.performTab(this.nativeElement, activeNode);\n            }\n        }\n    }\n\n    private isKeySupportedInGroupRow(key, shift = false, alt = false) {\n        if (shift) {\n            return ['down', 'up', 'arrowdown', 'arrowup', 'tab'].indexOf(key) !== -1;\n        }\n        return this.isToggleKey(key, alt) ? true : ['down', 'up', 'arrowdown', 'arrowup', 'tab'].indexOf(key) !== -1;\n    }\n\n    private isToggleKey(key, altKey) {\n        return altKey && ['left', 'right', 'up', 'down', 'arrowleft', 'arrowright', 'arrowup', 'arrowdown'].indexOf(key) !== -1;\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { first } from 'rxjs/operators';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxGridGroupByRowComponent } from './grid/groupby-row.component';\nimport { ISelectionNode } from '../core/grid-selection';\nimport { IgxForOfDirective } from '../directives/for-of/for_of.directive';\nimport { GridType } from './common/grid.interface';\nimport { FilterMode } from './common/enums';\n\nenum MoveDirection {\n    LEFT = 'left',\n    RIGHT = 'right'\n}\n\n/** @hidden */\n@Injectable()\nexport class IgxGridNavigationService {\n    public grid: GridType;\n\n    get displayContainerWidth() {\n        return Math.round(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth);\n    }\n\n    get displayContainerScrollLeft() {\n        return Math.ceil(this.grid.headerContainer.scrollPosition);\n    }\n\n    get verticalDisplayContainerElement() {\n        return this.grid.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement;\n    }\n\n    public horizontalScroll(rowIndex) {\n        let rowComp = this.grid.dataRowList.find((row) => row.index === rowIndex) || this.grid.dataRowList.first;\n        if (!rowComp) {\n            rowComp = this.grid.summariesRowList.find((row) => row.index === rowIndex);\n        }\n        return rowComp.virtDirRow;\n    }\n\n    public getColumnUnpinnedIndex(visibleColumnIndex: number) {\n        const column = this.grid.unpinnedColumns.find((col) => !col.columnGroup && col.visibleIndex === visibleColumnIndex);\n        return this.grid.pinnedColumns.length ? this.grid.unpinnedColumns.filter((c) => !c.columnGroup).indexOf(column) :\n            visibleColumnIndex;\n    }\n\n    public isColumnFullyVisible(columnIndex: number) {\n        return this.isColumnRightEdgeVisible(columnIndex) && this.isColumnLeftEdgeVisible(columnIndex);\n    }\n\n    public isColumnRightEdgeVisible(columnIndex: number) {\n        const forOfDir: IgxForOfDirective<any> = this.forOfDir();\n        if (this.isColumnPinned(columnIndex, forOfDir)) {\n            return true;\n        }\n        const index = this.getColumnUnpinnedIndex(columnIndex);\n        return this.displayContainerWidth >= forOfDir.getColumnScrollLeft(index + 1) - this.displayContainerScrollLeft;\n    }\n\n    public isColumnLeftEdgeVisible(columnIndex: number) {\n        const forOfDir = this.forOfDir();\n        if (this.isColumnPinned(columnIndex, forOfDir)) {\n            return true;\n        }\n        const index = this.getColumnUnpinnedIndex(columnIndex);\n        return this.displayContainerScrollLeft <= forOfDir.getColumnScrollLeft(index);\n    }\n\n    private forOfDir(): IgxForOfDirective<any> {\n        let forOfDir: IgxForOfDirective<any>;\n        if (this.grid.dataRowList.length > 0) {\n            forOfDir = this.grid.dataRowList.first.virtDirRow;\n        } else {\n            forOfDir = this.grid.headerContainer;\n        }\n        return forOfDir;\n    }\n\n    private isColumnPinned(columnIndex: number, forOfDir: IgxForOfDirective<any>): boolean {\n        const horizontalScroll = forOfDir.getScroll();\n        const column = this.grid.columnList.filter(c => !c.columnGroup).find((col) => col.visibleIndex === columnIndex);\n        return (!horizontalScroll.clientWidth || column.pinned);\n    }\n\n    public get gridOrderedColumns(): IgxColumnComponent[] {\n        return [...this.grid.pinnedColumns, ...this.grid.unpinnedColumns].filter(c => !c.columnGroup);\n    }\n\n    public isRowInEditMode(rowIndex): boolean {\n        return this.grid.rowEditable && (this.grid.rowInEditMode && this.grid.rowInEditMode.index === rowIndex);\n    }\n\n    public findNextEditable(direction: string, visibleColumnIndex: number) {\n        // go trough all columns in one cycle instead of\n        // splice().reverse().find()\n        const gridColumns = this.gridOrderedColumns;\n        const start = visibleColumnIndex;\n        let end = 0;\n        let step = 0;\n        let result = -1;\n        if (direction === MoveDirection.LEFT) {\n            end = 0;\n            step = -1;\n        } else if (direction === MoveDirection.RIGHT) {\n            end = gridColumns.length - 1;\n            step = 1;\n        }\n        for (let c = start; (c * step) <= end; c += step) {\n            const column = gridColumns[c];\n            if (column.editable) {\n                result = c;\n                break;\n            }\n        }\n        return result;\n    }\n\n    public getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary = false) {\n        const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n        return this.grid.nativeElement.querySelector(\n            `${cellSelector}[data-rowindex=\"${rowIndex}\"][data-visibleIndex=\"${visibleColumnIndex}\"]`) as HTMLElement;\n    }\n\n    public onKeydownArrowRight(element, selectedNode: ISelectionNode) {\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummary = selectedNode.isSummaryRow;\n        if (this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {\n            return;\n        }\n        if (this.isColumnRightEdgeVisible(visibleColumnIndex + 1)) { // if next column is fully visible or is pinned\n            if (element.classList.contains('igx-grid__td--pinned-last') || element.classList.contains('igx-grid-summary--pinned-last')) {\n                if (this.isColumnLeftEdgeVisible(visibleColumnIndex + 1)) {\n                    element.nextElementSibling.firstElementChild.focus({ preventScroll: true });\n                } else {\n                    this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n                    this.grid.parentVirtDir.onChunkLoad\n                        .pipe(first())\n                        .subscribe(() => {\n                            element.nextElementSibling.firstElementChild.focus({ preventScroll: true });\n                        });\n                    this.horizontalScroll(rowIndex).scrollTo(0);\n                }\n            } else {\n                element.nextElementSibling.focus({ preventScroll: true });\n            }\n        } else {\n            this.performHorizontalScrollToCell(rowIndex, visibleColumnIndex + 1, isSummary);\n        }\n    }\n\n    public onKeydownArrowLeft(element, selectedNode: ISelectionNode) {\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummary = selectedNode.isSummaryRow;\n        if (visibleColumnIndex === 0) {\n            return;\n        }\n        const index = this.getColumnUnpinnedIndex(visibleColumnIndex - 1);\n        if (!element.previousElementSibling && this.grid.pinnedColumns.length && index === - 1) {\n            element.parentNode.previousElementSibling.focus({ preventScroll: true });\n        } else if (!this.isColumnLeftEdgeVisible(visibleColumnIndex - 1)) {\n            this.performHorizontalScrollToCell(rowIndex, visibleColumnIndex - 1, isSummary);\n        } else {\n            element.previousElementSibling.focus({ preventScroll: true });\n        }\n\n    }\n\n    public movePreviousEditable(rowIndex: number, currentColumnVisibleIndex: number) {\n        const prevEditableColumnIndex = this.findNextEditable(MoveDirection.LEFT, currentColumnVisibleIndex - 1);\n        if (prevEditableColumnIndex === -1 && this.grid.rowEditTabs.length) {\n            //  TODO: make gridAPI visible for internal use and remove cast to any\n            (this.grid as any).gridAPI.submit_value();\n            this.grid.rowEditTabs.last.element.nativeElement.focus();\n            return;\n        }\n        this.focusEditableTarget(rowIndex, prevEditableColumnIndex);\n    }\n\n    public moveNextEditable(rowIndex: number, currentColumnVisibleIndex: number) {\n        const nextEditableColumnIndex = this.findNextEditable(MoveDirection.RIGHT, currentColumnVisibleIndex + 1);\n        if (nextEditableColumnIndex === -1 && this.grid.rowEditTabs.length) {\n            //  TODO: make gridAPI visible for internal use and remove cast to any\n            (this.grid as any).gridAPI.submit_value();\n            this.grid.rowEditTabs.first.element.nativeElement.focus();\n            return;\n        }\n        this.focusEditableTarget(rowIndex, nextEditableColumnIndex);\n    }\n\n    public focusEditableTarget(rowIndex: number, columnIndex: number) {\n        if (this.isColumnFullyVisible(columnIndex)) {\n            this.getCellElementByVisibleIndex(rowIndex, columnIndex).focus();\n        } else {\n            this.performHorizontalScrollToCell(rowIndex, columnIndex);\n        }\n    }\n\n    public onKeydownHome(rowIndex, isSummary = false) {\n        const rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;\n        let rowElement = rowList.find((row) => row.index === rowIndex);\n        const cellSelector = this.getCellSelector(0, isSummary);\n        if (!rowElement) { return; }\n        rowElement = rowElement.nativeElement;\n        let firstCell = rowElement.querySelector(cellSelector);\n        if (this.grid.pinnedColumns.length || this.displayContainerScrollLeft === 0) {\n            firstCell.focus({ preventScroll: true });\n        } else {\n            this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.parentVirtDir.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    firstCell = rowElement.querySelector(cellSelector);\n                    firstCell.focus({ preventScroll: true });\n                });\n            this.horizontalScroll(rowIndex).scrollTo(0);\n        }\n    }\n\n    public onKeydownEnd(rowIndex, isSummary = false) {\n        const index = this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex;\n        const rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;\n        let rowElement = rowList.find((row) => row.index === rowIndex);\n        if (!rowElement) { return; }\n        rowElement = rowElement.nativeElement;\n        if (this.isColumnRightEdgeVisible(index)) {\n            const allCells = rowElement.querySelectorAll(this.getCellSelector(-1, isSummary));\n            allCells[allCells.length - 1].focus({ preventScroll: true });\n        } else {\n            this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.parentVirtDir.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    const allCells = rowElement.querySelectorAll(this.getCellSelector(-1, isSummary));\n                    allCells[allCells.length - 1].focus({ preventScroll: true });\n                });\n            this.horizontalScroll(rowIndex).scrollTo(this.getColumnUnpinnedIndex(index));\n        }\n    }\n\n    public navigateTop(visibleColumnIndex) {\n        const verticalScroll = this.grid.verticalScrollContainer.getScroll();\n        const cellSelector = this.getCellSelector(visibleColumnIndex);\n        if (verticalScroll.scrollTop === 0) {\n            const cells = this.grid.nativeElement.querySelectorAll(\n                `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            (cells[0] as HTMLElement).focus();\n        } else {\n           this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(0);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const cells = this.grid.nativeElement.querySelectorAll(\n                        `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                    if (cells.length > 0) { (cells[0] as HTMLElement).focus(); }\n                });\n        }\n    }\n\n    public navigateBottom(visibleColumnIndex) {\n        const verticalScroll = this.grid.verticalScrollContainer.getScroll();\n        const cellSelector = this.getCellSelector(visibleColumnIndex);\n        if (verticalScroll.scrollHeight === 0 ||\n            verticalScroll.scrollTop === verticalScroll.scrollHeight - this.grid.verticalScrollContainer.igxForContainerSize) {\n            const cells = this.grid.nativeElement.querySelectorAll(\n                `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            (cells[cells.length - 1] as HTMLElement).focus();\n        } else {\n           this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(this.grid.dataView.length - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const cells = this.grid.nativeElement.querySelectorAll(\n                        `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                    if (cells.length > 0) {\n                        (cells[cells.length - 1] as HTMLElement).focus();\n                    }\n                });\n        }\n    }\n\n    public navigateUp(rowElement, selectedNode: ISelectionNode) {\n        const currentRowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        if (currentRowIndex === 0) {\n            return;\n        }\n        const containerTopOffset = parseInt(this.verticalDisplayContainerElement.style.top, 10);\n        if (!rowElement.previousElementSibling ||\n            rowElement.previousElementSibling.offsetTop < Math.abs(containerTopOffset)) {\n           this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(currentRowIndex - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    const tag = rowElement.tagName.toLowerCase();\n                    const rowSelector = this.getRowSelector();\n                    if (tag === rowSelector || tag === 'igx-grid-summary-row') {\n                        rowElement = this.getRowByIndex(currentRowIndex, tag);\n                    } else {\n                        rowElement = this.grid.nativeElement.querySelector(\n                            `igx-grid-groupby-row[data-rowindex=\"${currentRowIndex}\"]`);\n                    }\n                    this.focusPreviousElement(rowElement, visibleColumnIndex);\n                });\n        } else {\n            this.focusPreviousElement(rowElement, visibleColumnIndex);\n        }\n    }\n\n    protected focusPreviousElement(currentRowEl, visibleColumnIndex) {\n        this.focusElem(currentRowEl.previousElementSibling, visibleColumnIndex);\n    }\n\n    public navigateDown(rowElement, selectedNode: ISelectionNode) {\n        const currentRowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        if (currentRowIndex === this.grid.dataView.length - 1 ||\n            (currentRowIndex === 0 && rowElement.tagName.toLowerCase() === 'igx-grid-summary-row')) {\n            // check if this is rootSummary row\n            return;\n        }\n        const rowHeight = this.grid.verticalScrollContainer.getSizeAt(currentRowIndex + 1);\n        const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;\n        const targetEndTopOffset = rowElement.nextElementSibling ?\n            rowElement.nextElementSibling.offsetTop + rowHeight + parseInt(this.verticalDisplayContainerElement.style.top, 10) :\n            containerHeight + rowHeight;\n       this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n        if (containerHeight && containerHeight < targetEndTopOffset) {\n            const nextIndex = currentRowIndex + 1;\n            this.grid.verticalScrollContainer.scrollTo(nextIndex);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    rowElement = this.getNextRowByIndex(nextIndex);\n                    this.focusElem(rowElement, visibleColumnIndex);\n                });\n        } else {\n            this.focusNextElement(rowElement, visibleColumnIndex);\n        }\n    }\n\n    protected focusElem(rowElement, visibleColumnIndex) {\n        if (rowElement.tagName.toLowerCase() === 'igx-grid-groupby-row') {\n            rowElement.focus();\n        } else {\n            const isSummaryRow = rowElement.tagName.toLowerCase() === 'igx-grid-summary-row';\n            if (this.isColumnFullyVisible(visibleColumnIndex)) {\n                const cellSelector = this.getCellSelector(visibleColumnIndex, isSummaryRow);\n                const cell = rowElement.querySelector(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                cell.focus();\n                return cell;\n            }\n            this.performHorizontalScrollToCell(parseInt(\n                rowElement.getAttribute('data-rowindex'), 10), visibleColumnIndex, isSummaryRow);\n        }\n    }\n\n    protected focusNextElement(rowElement, visibleColumnIndex) {\n        return this.focusElem(rowElement.nextElementSibling, visibleColumnIndex);\n    }\n\n    public goToFirstCell() {\n        const verticalScroll = this.grid.verticalScrollContainer.getScroll();\n        const horizontalScroll = this.grid.dataRowList.first.virtDirRow.getScroll();\n        if (verticalScroll.scrollTop === 0) {\n            this.onKeydownHome(this.grid.dataRowList.first.index);\n        } else {\n            if (!horizontalScroll.clientWidth || parseInt(horizontalScroll.scrollLeft, 10) <= 1 || this.grid.pinnedColumns.length) {\n                this.navigateTop(0);\n            } else {\n               this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n                this.horizontalScroll(this.grid.dataRowList.first.index).scrollTo(0);\n                this.grid.parentVirtDir.onChunkLoad\n                    .pipe(first())\n                    .subscribe(() => {\n                        this.navigateTop(0);\n                    });\n            }\n        }\n    }\n\n    public goToLastCell() {\n        const verticalScroll = this.grid.verticalScrollContainer.getScroll();\n        if (verticalScroll.scrollHeight === 0 ||\n            verticalScroll.scrollTop === verticalScroll.scrollHeight - this.grid.verticalScrollContainer.igxForContainerSize) {\n            const rows = this.getAllRows();\n            const rowIndex = parseInt(rows[rows.length - 1].getAttribute('data-rowIndex'), 10);\n            this.onKeydownEnd(rowIndex);\n        } else {\n           this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(this.grid.dataView.length - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const rows = this.getAllRows();\n                    if (rows.length > 0) {\n                        const rowIndex = parseInt(rows[rows.length - 1].getAttribute('data-rowIndex'), 10);\n                        this.onKeydownEnd(rowIndex);\n                    }\n                });\n        }\n    }\n\n    public goToLastBodyElement() {\n        const verticalScroll = this.grid.verticalScrollContainer.getScroll();\n        if (verticalScroll.scrollHeight === 0 ||\n            verticalScroll.scrollTop === verticalScroll.scrollHeight - this.grid.verticalScrollContainer.igxForContainerSize) {\n            const rowIndex = this.grid.dataView.length - 1;\n            const row = this.grid.nativeElement.querySelector(`[data-rowindex=\"${rowIndex}\"]`) as HTMLElement;\n            if (row && row.tagName.toLowerCase() === 'igx-grid-groupby-row') {\n                row.focus();\n                return;\n            }\n            const isSummary = (row && row.tagName.toLowerCase() === 'igx-grid-summary-row') ? true : false;\n            this.onKeydownEnd(rowIndex, isSummary);\n        } else {\n            this.grid.verticalScrollContainer.scrollTo(this.grid.dataView.length - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const rowIndex = this.grid.dataView.length - 1;\n                    const row = this.grid.nativeElement.querySelector(`[data-rowindex=\"${rowIndex}\"]`) as HTMLElement;\n                    if (row && row.tagName.toLowerCase() === 'igx-grid-groupby-row') {\n                        row.focus();\n                        return;\n                    }\n                    const isSummary = (row && row.tagName.toLowerCase() === 'igx-grid-summary-row') ? true : false;\n                    this.onKeydownEnd(rowIndex, isSummary);\n                });\n        }\n    }\n\n    public performTab(currentRowEl, selectedNode: ISelectionNode) {\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummaryRow = selectedNode.isSummaryRow;\n        if (isSummaryRow && rowIndex === 0 &&\n            this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {\n            return;\n        }\n\n        if (this.isRowInEditMode(rowIndex)) {\n            this.moveNextEditable(rowIndex, visibleColumnIndex);\n            return;\n        }\n\n        if (this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {\n            const rowEl = this.grid.rowList.find(row => row.index === rowIndex + 1) ?\n                this.grid.rowList.find(row => row.index === rowIndex + 1) :\n                this.grid.summariesRowList.find(row => row.index === rowIndex + 1);\n            if (rowIndex === this.grid.dataView.length - 1 && this.grid.rootSummariesEnabled) {\n                this.onKeydownHome(0, true);\n                return;\n            }\n            if (rowEl) {\n                this.navigateDown(currentRowEl, { row: rowIndex, column: 0 });\n            }\n        } else {\n            const cell = this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummaryRow);\n            if (cell) {\n                this.onKeydownArrowRight(cell, selectedNode);\n            }\n        }\n    }\n\n    public moveFocusToFilterCell(toStart?: boolean) {\n        if (this.grid.filteringService.isFilterRowVisible) {\n            this.grid.filteringService.focusFilterRowCloseButton();\n            return;\n        }\n\n        const columns = this.grid.filteringService.unpinnedFilterableColumns;\n        const targetIndex = toStart ? 0 : columns.length - 1;\n        const visibleIndex = columns[targetIndex].visibleIndex;\n        const isVisible = toStart ? this.isColumnLeftEdgeVisible(visibleIndex) : this.isColumnRightEdgeVisible(visibleIndex);\n        if (isVisible) {\n            this.grid.filteringService.focusFilterCellChip(columns[targetIndex], false);\n        } else {\n            this.grid.filteringService.scrollToFilterCell(columns[targetIndex], false);\n        }\n    }\n\n    public navigatePrevFilterCell(column: IgxColumnComponent, eventArgs) {\n        const cols = this.grid.filteringService.unpinnedFilterableColumns;\n        const prevFilterableIndex = cols.indexOf(column) - 1;\n        const visibleIndex = column.visibleIndex;\n        if (visibleIndex === 0 || prevFilterableIndex < 0) {\n            // prev is not filter cell\n            const firstFiltarableCol = this.getFirstPinnedFilterableColumn();\n            if (!firstFiltarableCol || column === firstFiltarableCol) {\n                eventArgs.preventDefault();\n            }\n            return;\n        }\n        const prevColumn = cols[prevFilterableIndex];\n        const prevVisibleIndex = prevColumn.visibleIndex;\n\n        if (prevFilterableIndex >= 0 && visibleIndex > 0 && !this.isColumnLeftEdgeVisible(prevVisibleIndex) && !column.pinned) {\n            eventArgs.preventDefault();\n            this.grid.filteringService.scrollToFilterCell(prevColumn, false);\n        }\n    }\n\n    public navigateFirstCellIfPossible(eventArgs) {\n        if (this.grid.rowList.length > 0) {\n            if (this.grid.rowList.filter(row => row instanceof IgxGridGroupByRowComponent).length > 0) {\n                eventArgs.stopPropagation();\n                return;\n            }\n            this.goToFirstCell();\n        } else if (this.grid.rootSummariesEnabled) {\n            this.onKeydownHome(0, true);\n        }\n        eventArgs.preventDefault();\n    }\n\n    public navigateNextFilterCell(column: IgxColumnComponent, eventArgs) {\n        const cols = this.grid.filteringService.unpinnedFilterableColumns;\n        const nextFilterableIndex = cols.indexOf(column) + 1;\n        if (nextFilterableIndex >= this.grid.filteringService.unpinnedFilterableColumns.length) {\n            // next is not filter cell\n            this.navigateFirstCellIfPossible(eventArgs);\n            return;\n        }\n        const nextColumn = cols[nextFilterableIndex];\n        const nextVisibleIndex = nextColumn.visibleIndex;\n        if (!column.pinned && !this.isColumnRightEdgeVisible(nextVisibleIndex)) {\n            eventArgs.preventDefault();\n            this.grid.filteringService.scrollToFilterCell(nextColumn, true);\n        } else if (column === this.getLastPinnedFilterableColumn() && !this.isColumnRightEdgeVisible(nextVisibleIndex)) {\n            this.grid.filteringService.scrollToFilterCell(nextColumn, false);\n            eventArgs.stopPropagation();\n        }\n    }\n\n    private getLastPinnedFilterableColumn(): IgxColumnComponent {\n        const pinnedFilterableColums =\n            this.grid.pinnedColumns.filter(col => !(col.columnGroup) && col.filterable);\n        return pinnedFilterableColums[pinnedFilterableColums.length - 1];\n    }\n\n    private getFirstPinnedFilterableColumn(): IgxColumnComponent {\n        return this.grid.pinnedColumns.filter(col => !(col.columnGroup) && col.filterable)[0];\n    }\n\n    public performShiftTabKey(currentRowEl, selectedNode: ISelectionNode) {\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummary = selectedNode.isSummaryRow;\n        if (isSummary && rowIndex === 0 && visibleColumnIndex === 0 && this.grid.rowList.length) {\n            this.goToLastBodyElement();\n            return;\n        }\n\n        if (this.isRowInEditMode(rowIndex)) {\n            this.movePreviousEditable(rowIndex, visibleColumnIndex);\n            return;\n        }\n\n        if (visibleColumnIndex === 0) {\n            if (rowIndex === 0 && this.grid.allowFiltering && this.grid.filterMode === FilterMode.quickFilter) {\n                this.moveFocusToFilterCell();\n            } else {\n                this.navigateUp(currentRowEl,\n                    {\n                        row: rowIndex,\n                        column: this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex\n                    });\n            }\n        } else {\n            const cell = this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary);\n            if (cell) {\n                this.onKeydownArrowLeft(cell, selectedNode);\n            }\n        }\n    }\n\n    public shouldPerformVerticalScroll(targetRowIndex: number, visibleColumnIndex: number): boolean {\n        const containerTopOffset = parseInt(this.verticalDisplayContainerElement.style.top, 10);\n        const targetRow = this.grid.summariesRowList.filter(s => s.index !== 0)\n            .concat(this.grid.rowList.toArray()).find(r => r.index === targetRowIndex);\n        const rowHeight = this.grid.verticalScrollContainer.getSizeAt(targetRowIndex);\n        const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;\n        const targetEndTopOffset = targetRow ? targetRow.nativeElement.offsetTop + rowHeight + containerTopOffset :\n            containerHeight + rowHeight;\n        if (!targetRow || targetRow.nativeElement.offsetTop < Math.abs(containerTopOffset)\n            || containerHeight && containerHeight < targetEndTopOffset) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public performVerticalScrollToCell(rowIndex: number, visibleColIndex: number, cb?: () => void) {\n        this.grid.verticalScrollContainer.scrollTo(rowIndex);\n        this.grid.verticalScrollContainer.onChunkLoad\n            .pipe(first()).subscribe(() => {\n                cb();\n            });\n    }\n\n    public performHorizontalScrollToCell(\n        rowIndex: number, visibleColumnIndex: number, isSummary: boolean = false, cb?: () => void) {\n        const unpinnedIndex = this.getColumnUnpinnedIndex(visibleColumnIndex);\n       this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n        this.grid.parentVirtDir.onChunkLoad\n            .pipe(first())\n            .subscribe(() => {\n                if (cb) {\n                    cb();\n                } else {\n                    const cellElement = this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary);\n                    if (cellElement) {\n                        cellElement.focus({ preventScroll: true });\n                    }\n                }\n            });\n        this.horizontalScroll(rowIndex).scrollTo(unpinnedIndex);\n    }\n\n    protected getFocusableGrid() {\n        return this.grid;\n    }\n\n    protected getRowByIndex(index, selector = this.getRowSelector()) {\n        return this.grid.nativeElement.querySelector(\n            `${selector}[data-rowindex=\"${index}\"]`);\n    }\n\n    protected getNextRowByIndex(nextIndex) {\n        return this.grid.tbody.nativeElement.querySelector(\n            `[data-rowindex=\"${nextIndex}\"]`);\n    }\n\n    private getAllRows() {\n        const selector = this.getRowSelector();\n        return this.grid.nativeElement.querySelectorAll(selector);\n    }\n\n    protected getCellSelector(visibleIndex?: number, isSummary = false): string {\n        return isSummary ? 'igx-grid-summary-cell' : 'igx-grid-cell';\n    }\n\n    protected getRowSelector(): string {\n        return 'igx-grid-row';\n    }\n}\n","/* tslint:disable */\nexport default [\n    {\n        name: 'add_filter',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M19 15v-3h-2v3h-3v2h3v3h2v-3h3v-2h-3zM5 10h10v2H5zM2 5h16v2H2zM8 15h4v2H8z\"/>\n      </svg>`\n    },\n    {\n        name: 'contains',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" id=\"Layer_1\" data-name=\"Layer 1\" viewBox=\"0 0 24 24\">\n        <path d=\"M3 3v18h18V3zm16 16H5V5h14z\"/>\n        <path d=\"M12 11.3a4.39 4.39 0 0 0-2.54.63 2.07 2.07 0 0 0-.9 1.78 2.29 2.29 0 0 0 .66 1.74 2.63 2.63 0 0 0 1.89.63 2.39 2.39 0 0 0 1.32-.37 3.05 3.05 0 0 0 1-.93 3.72 3.72 0 0 0 .08.57c0 .19.1.38.16.58h1.79a4.51 4.51 0 0 1-.21-.88 5.57 5.57 0 0 1-.07-.93v-3.5a2.44 2.44 0 0 0-.84-2 3.34 3.34 0 0 0-2.22-.7 3.54 3.54 0 0 0-2.3.72A1.93 1.93 0 0 0 9 10.29h1.71a.93.93 0 0 1 .29-.71 1.5 1.5 0 0 1 1-.29 1.45 1.45 0 0 1 1 .35 1.3 1.3 0 0 1 .37 1v.69zm1.4 1.08v1.17a1.61 1.61 0 0 1-.71.77 2.27 2.27 0 0 1-1.21.34 1.18 1.18 0 0 1-.84-.27.92.92 0 0 1-.3-.72 1.16 1.16 0 0 1 .44-.9 1.76 1.76 0 0 1 1.22-.39z\"/>\n      </svg>`\n    },\n    {\n        name: 'does_not_contain',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21,19.74V3H4.26L2.89,1.63,1.63,2.92,3,4.29V21H19.73l1.37,1.37,1.27-1.26ZM5,19V6.28l5.28,5.27a3.19,3.19,0,0,0-.81.38,2.07,2.07,0,0,0-.9,1.78,2.29,2.29,0,0,0,.66,1.74,2.63,2.63,0,0,0,1.89.63,2.39,2.39,0,0,0,1.32-.37,3.05,3.05,0,0,0,1-.93,3.72,3.72,0,0,0,.08.57c0,.19.1.38.16.58h1L17.73,19Zm5.79-6.23a1.31,1.31,0,0,1,.45-.25l1.37,1.36.28.29a1.57,1.57,0,0,1-.19.15,2.27,2.27,0,0,1-1.21.34,1.18,1.18,0,0,1-.84-.27.92.92,0,0,1-.3-.72A1.16,1.16,0,0,1,10.79,12.77Zm2.6-1.47h-.83L10.94,9.68l.08-.1a1.5,1.5,0,0,1,1-.29,1.45,1.45,0,0,1,1,.35,1.3,1.3,0,0,1,.37,1ZM19,17.74l-3.85-3.85V10.62a2.44,2.44,0,0,0-.84-2,3.34,3.34,0,0,0-2.22-.7,3.64,3.64,0,0,0-2.24.67L6.26,5H19Z\"/>\n    </svg>`\n    },\n    {\n        name: 'all',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M2 14h8v2H2zM2 6h12v2H2zM16 17l-3-3-1.5 1.5L16 20l7-7-1.5-1.5L16 17zM2 10h12v2H2z\"/>\n      </svg>\n      `\n    },\n    {\n        name: 'empty',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5 17h2v2H5zM13 17h2v2h-2zM5 13h2v2H5zM17 17h2v2h-2zM13 5h2v2h-2zM9 17h2v2H9zM17 9h2v2h-2zM17 13h2v2h-2zM17 5h2v2h-2zM5 9h2v2H5zM5 5h2v2H5zM9 5h2v2H9z\"/>\n      </svg>`\n    },\n    {\n        name: 'end_expression',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M13.14 6.76L17.49 12l-4.35 5.24 1.54 1.28L20.09 12l-5.41-6.52-1.54 1.28z\"/>\n        <path d=\"M11.91 11h2v2h-2zM7.91 11h2v2h-2zM3.91 11h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'ends_with',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M3 14.5h2v2H3zM11 14.5h2v2h-2zM7 14.5h2v2H7zM20.8 14.8v-3A2.1 2.1 0 0 0 20 10a3 3 0 0 0-2-.6 3 3 0 0 0-2 .6 1.7 1.7 0 0 0-.7 1.5h1.5a.8.8 0 0 1 .3-.7 1.3 1.3 0 0 1 .9-.3 1.3 1.3 0 0 1 .9.4 1.1 1.1 0 0 1 .3.8v.6H18a3.8 3.8 0 0 0-2.2.6 1.8 1.8 0 0 0-.8 1.5 2 2 0 0 0 .6 1.6 2.3 2.3 0 0 0 1.6.6 2.1 2.1 0 0 0 1.2-.4 2.8 2.8 0 0 0 .8-.8 4.3 4.3 0 0 0 .1.5l.1.5H21a4.1 4.1 0 0 1-.2-.7 5.4 5.4 0 0 1 0-1zm-1.6-.5a1.5 1.5 0 0 1-.6.7 2 2 0 0 1-1 .2 1.1 1.1 0 0 1-.8-.2.8.8 0 0 1-.2-.6 1 1 0 0 1 .3-.8 1.5 1.5 0 0 1 1.1-.3h1.2z\"/>\n      </svg>`\n    },\n    {\n        name: 'equals',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5 13.5h14v2H5zM5 8.5h14v2H5z\"/>\n      </svg>`\n    },\n    {\n        name: 'greater_than_or_equal',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5.99 19h12.02v2H5.99zM18 9.47L6 3v2.11L15.09 10 6 14.9v2.11l12-6.47V9.47z\"/>\n      </svg>`\n    },\n    {\n        name: 'greater_than',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M6 7.11L15.09 12 6 16.89V19l12-6.46v-1.08L6 5v2.11z\"/>\n      </svg>\n      `\n    },\n    {\n        name: 'is_after',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M15 7h4v10h-4v2h6V5h-6v2zM11 3h2v18h-2zM7 5h2v2H7zM3 5h2v2H3zM3 17h2v2H3zM3 13h2v2H3zM3 9h2v2H3zM7 17h2v2H7z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_before',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M3 19h6v-2H5V7h4V5H3v14zM11 3h2v18h-2zM15 5h2v2h-2zM19 5h2v2h-2zM19 13h2v2h-2zM15 17h2v2h-2zM19 17h2v2h-2zM19 9h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_false',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M8 5a7 7 0 1 0 7 7 7 7 0 0 0-7-7zm4.31 9.79l-1.52 1.52L8 13.52l-2.79 2.79-1.52-1.52L6.48 12 3.69 9.21l1.52-1.52L8 10.48l2.79-2.79 1.52 1.52L9.52 12zM18 7a5 5 0 0 0-3 1.06 7.48 7.48 0 0 1 .49 1 3.89 3.89 0 1 1 0 5.82 8.08 8.08 0 0 1-.49 1A5 5 0 1 0 18 7z\"/>\n        <path d=\"M17.52 13.85l2.91-2.92-.78-.78-2.13 2.12-1.17-1.15-.38.37-.41.41.42.42L17 13.34l.52.51z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_not_null',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M16.58 6.07l.79-1.36-1.74-1-.78 1.35a7.5 7.5 0 0 0-7.43 12.87l-.79 1.36 1.74 1 .78-1.35a7.5 7.5 0 0 0 7.43-12.87zM6.5 12A5.5 5.5 0 0 1 12 6.5a5.65 5.65 0 0 1 1.84.32l-5.41 9.36A5.49 5.49 0 0 1 6.5 12zm5.5 5.5a5.65 5.65 0 0 1-1.84-.32l5.41-9.36A5.5 5.5 0 0 1 12 17.5z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_null',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M12 4.5a7.5 7.5 0 1 0 7.5 7.5A7.5 7.5 0 0 0 12 4.5zm0 13a5.5 5.5 0 1 1 5.5-5.5 5.5 5.5 0 0 1-5.5 5.5z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_true',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M19.44 14.22zM16.56 14.22zM16.56 14.22L18 12.79l1.44 1.43.78-.78L18.79 12l1.43-1.44-.78-.78L18 11.21l-1.44-1.43-.78.78L17.21 12l-1.43 1.44.78.78z\"/>\n        <path d=\"M18 7a5 5 0 0 0-3 1.06 7.48 7.48 0 0 1 .49 1 3.89 3.89 0 1 1 0 5.82 8.08 8.08 0 0 1-.49 1A5 5 0 1 0 18 7zM8 5a7 7 0 1 0 7 7 7 7 0 0 0-7-7zm-.93 10.18l-3.38-3.37 1.13-1.12 2.25 2.25 4.11-4.12 1.13 1.12z\"/>\n      </svg>`\n    },\n    {\n        name: 'last_month',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M17.5 14a4.48 4.48 0 1 0 4.5 4.5 4.47 4.47 0 0 0-4.5-4.5zm3.5 5.5h-4v2l-3-3 3-3v2h4zM5 9h2v2H5zM5 13h2v2H5zM10 13h2v2h-2zM5 17h2v2H5zM10 17h2v2h-2zM10 9h2v2h-2zM15 9h2v2h-2z\"/>\n        <path d=\"M4 8h14v4h2V5a2 2 0 0 0-2-2h-1V1h-2v2H7V1H5v2H4a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h7v-2H4z\"/>\n      </svg>`\n    },\n    {\n        name: 'last_year',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21 10v11H7v2h14a2 2 0 0 0 2-2V10z\"/>\n        <path d=\"M19 17V5a2 2 0 0 0-2-2h-1V1h-2v2H6V1H4v2H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2zM3 17V7h14v10H3z\"/>\n        <path d=\"M8.87 9l-2.99 3 2.99 3v-2.25h5.26v-1.5H8.87V9z\"/>\n      </svg>`\n    },\n    {\n        name: 'less_than_or_equal',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5.99 19h12.02v2H5.99zM18 14.9L8.91 10 18 5.11V3L6 9.47v1.07l12 6.47V14.9z\"/>\n      </svg>`\n    },\n    {\n        name: 'less_than',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M6 12.54L18 19v-2.11L8.91 12 18 7.11V5L6 11.46v1.08z\"/>\n      </svg>`\n    },\n    {\n        name: 'next_month',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M20 14.76a4.5 4.5 0 1 0 2 3.74 4.47 4.47 0 0 0-2-3.74zm-2 6.74v-2h-4v-2h4v-2l3 3zM5 9h2v2H5zM5 13h2v2H5zM10 13h2v2h-2zM5 17h2v2H5zM10 17h2v2h-2zM10 9h2v2h-2zM15 9h2v2h-2z\"/>\n        <path d=\"M4 8h14v4h2V5a2 2 0 0 0-2-2h-1V1h-2v2H7V1H5v2H4a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h7v-2H4z\"/>\n      </svg>`\n    },\n    {\n        name: 'next_year',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21 21H7v2h14a2 2 0 0 0 2-2V10h-2z\"/>\n        <path d=\"M19 17V5a2 2 0 0 0-2-2h-1V1h-2v2H6V1H4v2H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2zM3 17V7h14v10H3z\"/>\n        <path d=\"M11.13 11.25H5.88v1.5h5.25V15l3-3-3-3v2.25z\"/>\n      </svg>`\n    },\n    {\n        name: 'not_empty',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5 9h2v2H5zM9 17h2v2H9zM13 17h2v2h-2zM17 9h2v2h-2zM17 5h2v2h-2zM5 17h2v2H5zM13 5h2v2h-2zM5 13h2v2H5zM19 15v-2h-2v.47L18.53 15H19zM11 7V5H9v.46L10.54 7H11zM2.76 1.76L1.5 3.06 20.97 22.5l1.26-1.26-8.89-8.89L2.76 1.76z\"/>\n      </svg>`\n    },\n    {\n        name: 'not_equal',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M17.37 4.71l-1.74-1-2.76 4.79H5v2h6.71l-1.73 3H5v2h3.82l-2.19 3.79 1.74 1 2.76-4.79H19v-2h-6.71l1.73-3H19v-2h-3.82l2.19-3.79z\"/>\n      </svg>`\n    },\n    {\n        name: 'start_expression',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M18.1 11h2v2h-2zM10.1 11h2v2h-2z\"/>\n        <path d=\"M10.9 6.8L9.3 5.5 4 12l5.4 6.5 1.6-1.3L6.5 12 11 6.8zM14.1 11h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'starts_with',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path fill=\"none\" d=\"M4.97 13.23h3.06L6.5 9.12l-1.53 4.11z\"/>\n        <path d=\"M5.89 7.5L2 16.5h1.72l.73-1.8h4.1l.73 1.8H11l-3.89-9zM5 13.23l1.5-4.11L8 13.23zM12 14.5h2v2h-2zM20 14.5h2v2h-2zM16 14.5h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'this_month',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M6 9h2v2H6zM6 13h2v2H6zM11 13h2v2h-2zM6 17h2v2H6zM11 17h2v2h-2zM11 9h2v2h-2zM16 9h2v2h-2zM21 14.76a4.5 4.5 0 1 0 2 3.74 4.47 4.47 0 0 0-2-3.74zm-2.94 5.41l-1.75-1.76.69-.71 1.05 1L20 16.83l.71.71z\"/>\n        <path d=\"M5 8h14v4h2V5a2 2 0 0 0-2-2h-1V1h-2v2H8V1H6v2H5a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h7v-2H5z\"/>\n      </svg>`\n    },\n    {\n        name: 'this_year',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21 21H7v2h14a2 2 0 0 0 2-2V10h-2z\"/>\n        <path d=\"M19 17V5a2 2 0 0 0-2-2h-1V1h-2v2H6V1H4v2H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2zM3 17V7h14v10H3z\"/>\n        <path d=\"M8.85 13.15l-1.77-1.77-.88.89 2.65 2.65 4.95-4.96-.88-.88-4.07 4.07z\"/>\n      </svg>`\n    },\n    {\n        name: 'today',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M19 4h-1V2h-2v2H8V2H6v2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2zm0 16H5V9h14z\"/>\n        <path d=\"M16.53 12.06L15.47 11l-4.88 4.88-2.12-2.12-1.06 1.06L10.59 18l5.94-5.94z\"/>\n      </svg>`\n    },\n    {\n        name: 'ungroup',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M15 15h5v5h-5zM6 13h5v5H6zM13 6h5v5h-5zM6 6h5v5H6z\"/>\n        <path d=\"M20 2H4a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h9v-2H4V4h16v9h2V4a2 2 0 0 0-2-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'yesterday',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M10.68 15.38h6.13v-1.75h-6.13V11l-3.49 3.5 3.49 3.5v-2.62z\"/>\n        <path d=\"M19 4h-1V2h-2v2H8V2H6v2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2zm0 16H5V9h14z\"/>\n      </svg>`\n    },\n    {\n        name: 'pin',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M15.18 2.25l7.07 7.07-2.83-.01-3.54 3.55.01 4.24-3.53-3.54-5.66 5.66H5.28V17.8l5.66-5.66L7.4 8.61l4.24.01 3.55-3.54-.01-2.83z\"/>\n      </svg>`\n    },\n    {\n        name: 'unpin',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path fill=\"none\" d=\"M0 0h24v25H0V0z\"/>\n        <path d=\"M11.84 14.08L6.7 19.22H5.28V17.8l5.14-5.14L2 4.26 3.29 3l18 18L20 22.21zm4-.49l-5-5h.73l3.55-3.54v-2.8l7.07 7.07h-2.77l-3.54 3.54z\" />\n      </svg>`\n    },\n    {\n        name: 'ungroup',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n          <path d=\"M18,4.5H6A1.5,1.5,0,0,0,4.5,6V18A1.5,1.5,0,0,0,6,19.5h6.75V18H6V6H18v6.75h1.5V6A1.5,1.5,0,0,0,18,4.5Z\"/>\n          <rect x=\"7.5\" y=\"12.75\" width=\"3.75\" height=\"3.75\"/>\n          <rect x=\"14.25\" y=\"14.25\" width=\"3.75\" height=\"3.75\"/>\n          <rect x=\"7.5\" y=\"7.5\" width=\"3.75\" height=\"3.75\"/>\n          <rect x=\"12.75\" y=\"7.5\" width=\"3.75\" height=\"3.75\"/>\n        </svg>`\n    }\n];\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { IgxIconService } from '../../icon/icon.service';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { IgxGridBaseComponent, IColumnResizeEventArgs, IGridDataBindable } from '../grid-base.component';\nimport icons from './svgIcons';\nimport { IFilteringExpression, FilteringLogic } from '../../data-operations/filtering-expression.interface';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { IForOfState } from '../../directives/for-of/for_of.directive';\nimport { IgxDatePipeComponent } from '../grid.common';\nimport { IgxColumnComponent } from '../column.component';\nimport { IFilteringOperation } from '../../data-operations/filtering-condition';\nimport { GridBaseAPIService } from '../api.service';\nimport { IColumnVisibilityChangedEventArgs } from '../grid';\n\nconst FILTERING_ICONS_FONT_SET = 'filtering-icons';\n\n/**\n *@hidden\n */\nexport class ExpressionUI {\n    public expression: IFilteringExpression;\n    public beforeOperator: FilteringLogic;\n    public afterOperator: FilteringLogic;\n    public isSelected = false;\n    public isVisible = true;\n}\n\n/**\n *@hidden\n */\n@Injectable()\nexport class IgxFilteringService implements OnDestroy {\n\n    private columnsWithComplexFilter = new Set<string>();\n    private areEventsSubscribed = false;\n    private destroy$ = new Subject<boolean>();\n    private isFiltering = false;\n    private columnToExpressionsMap = new Map<string, ExpressionUI[]>();\n    private _datePipe: IgxDatePipeComponent;\n    private columnStartIndex = -1;\n    private _filterIconsRegistered = false;\n\n    public gridId: string;\n    public isFilterRowVisible = false;\n    public filteredColumn: IgxColumnComponent = null;\n    public selectedExpression: IFilteringExpression = null;\n    public columnToFocus: IgxColumnComponent = null;\n    public shouldFocusNext = false;\n    public columnToMoreIconHidden = new Map<string, boolean>();\n\n    grid: IgxGridBaseComponent;\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>, private iconService: IgxIconService) {}\n\n    ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    public get displayContainerWidth() {\n        return parseInt(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth, 10);\n    }\n\n    public get displayContainerScrollLeft() {\n        return this.grid.headerContainer.scrollPosition;\n    }\n\n    public get areAllColumnsInView() {\n        return parseInt(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth, 10) === 0;\n    }\n\n    public get unpinnedFilterableColumns() {\n        return this.grid.unpinnedColumns.filter(col => !col.columnGroup && col.filterable);\n    }\n\n    public get unpinnedColumns() {\n        return this.grid.unpinnedColumns.filter(col => !col.columnGroup);\n    }\n\n    public get datePipe(): IgxDatePipeComponent {\n        if (!this._datePipe) {\n            this._datePipe = new IgxDatePipeComponent(this.grid.locale);\n        }\n        return this._datePipe;\n    }\n\n    /**\n     * Subscribe to grid's events.\n     */\n    public subscribeToEvents() {\n        if (!this.areEventsSubscribed) {\n            this.areEventsSubscribed = true;\n\n            this.grid.onColumnResized.pipe(takeUntil(this.destroy$)).subscribe((eventArgs: IColumnResizeEventArgs) => {\n                this.updateFilteringCell(eventArgs.column);\n            });\n\n            this.grid.parentVirtDir.onChunkLoad.pipe(takeUntil(this.destroy$)).subscribe((eventArgs: IForOfState) => {\n                if (eventArgs.startIndex !== this.columnStartIndex) {\n                    this.columnStartIndex = eventArgs.startIndex;\n                    this.grid.filterCellList.forEach((filterCell) => {\n                        filterCell.updateFilterCellArea();\n                    });\n                }\n                if (this.columnToFocus) {\n                    this.focusFilterCellChip(this.columnToFocus, false);\n                    this.columnToFocus = null;\n                }\n            });\n\n            this.grid.onColumnMovingEnd.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                this.grid.filterCellList.forEach((filterCell) => {\n                    filterCell.updateFilterCellArea();\n                });\n            });\n\n            this.grid.onColumnVisibilityChanged.pipe(takeUntil(this.destroy$)).subscribe((eventArgs: IColumnVisibilityChangedEventArgs) => {\n                if (this.grid.filteringRow && this.grid.filteringRow.column === eventArgs.column ) {\n                    this.grid.filteringRow.close();\n\n                }\n            });\n        }\n    }\n\n    /**\n     * Internal method to create expressionsTree and filter grid used in both filter modes.\n     */\n    public filterInternal(field: string, expressions: FilteringExpressionsTree | Array<ExpressionUI> = null): void {\n        this.isFiltering = true;\n\n        let expressionsTree;\n        if (expressions instanceof FilteringExpressionsTree) {\n            expressionsTree = expressions;\n        } else {\n            expressionsTree = this.createSimpleFilteringTree(field, expressions);\n        }\n\n        if (expressionsTree.filteringOperands.length === 0) {\n            this.clearFilter(field);\n        } else {\n            this.filter(field, null, expressionsTree);\n        }\n\n        this.isFiltering = false;\n    }\n\n    /**\n     * Execute filtering on the grid.\n     */\n    public filter(field: string, value: any, conditionOrExpressionTree?: IFilteringOperation | IFilteringExpressionsTree,\n        ignoreCase?: boolean) {\n        const col = this.gridAPI.get_column_by_name(field);\n        const filteringIgnoreCase = ignoreCase || (col ? col.filteringIgnoreCase : false);\n\n        if (conditionOrExpressionTree) {\n            this.gridAPI.filter(field, value, conditionOrExpressionTree, filteringIgnoreCase);\n        } else {\n            const expressionsTreeForColumn = this.grid.filteringExpressionsTree.find(field);\n            if (!expressionsTreeForColumn) {\n                throw new Error('Invalid condition or Expression Tree!');\n            } else if (expressionsTreeForColumn instanceof FilteringExpressionsTree) {\n                this.gridAPI.filter(field, value, expressionsTreeForColumn, filteringIgnoreCase);\n            } else {\n                const expressionForColumn = expressionsTreeForColumn as IFilteringExpression;\n                this.gridAPI.filter(field, value, expressionForColumn.condition, filteringIgnoreCase);\n            }\n        }\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.grid.onFilteringDone.emit(col.filteringExpressionsTree));\n    }\n\n    /**\n     * Clear the filter of a given column.\n     */\n    public clearFilter(field: string): void {\n        if (field) {\n            const column = this.gridAPI.get_column_by_name(field);\n            if (!column) {\n                return;\n            }\n        }\n\n        this.isFiltering = true;\n\n        this.gridAPI.clear_filter(field);\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.grid.onFilteringDone.emit(null));\n\n        if (field) {\n            const expressions = this.getExpressions(field);\n            expressions.length = 0;\n        }\n\n        this.isFiltering = false;\n    }\n\n    /**\n     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.\n     */\n    public filterGlobal(value: any, condition, ignoreCase?) {\n        this.gridAPI.filter_global(value, condition, ignoreCase);\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.grid.onFilteringDone.emit(this.grid.filteringExpressionsTree));\n    }\n\n    /**\n     * Register filtering SVG icons in the icon service.\n     */\n    public registerSVGIcons(): void {\n        if (!this._filterIconsRegistered) {\n            for (const icon of icons) {\n                if (!this.iconService.isSvgIconCached(icon.name, FILTERING_ICONS_FONT_SET)) {\n                    this.iconService.addSvgIconFromText(icon.name, icon.value, FILTERING_ICONS_FONT_SET);\n                }\n            }\n            this._filterIconsRegistered = true;\n        }\n    }\n\n    /**\n     * Returns the ExpressionUI array for a given column.\n     */\n    public getExpressions(columnId: string): ExpressionUI[] {\n        if (!this.columnToExpressionsMap.has(columnId)) {\n            const column = this.grid.columns.find((col) => col.field === columnId);\n            const expressionUIs = new Array<ExpressionUI>();\n            if (column) {\n                this.generateExpressionsList(column.filteringExpressionsTree, this.grid.filteringExpressionsTree.operator, expressionUIs);\n                this.columnToExpressionsMap.set(columnId, expressionUIs);\n            }\n            return expressionUIs;\n        }\n\n        return this.columnToExpressionsMap.get(columnId);\n    }\n\n    /**\n     * Recreates all ExpressionUIs for all columns. Executed after filtering to refresh the cache.\n     */\n    public refreshExpressions() {\n        if (!this.isFiltering) {\n            this.columnsWithComplexFilter.clear();\n\n            this.columnToExpressionsMap.forEach((value: ExpressionUI[], key: string) => {\n                const column = this.grid.columns.find((col) => col.field === key);\n                if (column) {\n                    value.length = 0;\n\n                    this.generateExpressionsList(column.filteringExpressionsTree, this.grid.filteringExpressionsTree.operator, value);\n\n                    const isComplex = this.isFilteringTreeComplex(column.filteringExpressionsTree);\n                    if (isComplex) {\n                        this.columnsWithComplexFilter.add(key);\n                    }\n\n                    this.updateFilteringCell(column);\n                } else {\n                    this.columnToExpressionsMap.delete(key);\n                }\n            });\n        }\n    }\n\n    /**\n     * Remove an ExpressionUI for a given column.\n     */\n    public removeExpression(columnId: string, indexToRemove: number) {\n        const expressionsList = this.getExpressions(columnId);\n\n        if (indexToRemove === 0 && expressionsList.length > 1) {\n            expressionsList[1].beforeOperator = null;\n        } else if (indexToRemove === expressionsList.length - 1) {\n            expressionsList[indexToRemove - 1].afterOperator = null;\n        } else {\n            expressionsList[indexToRemove - 1].afterOperator = expressionsList[indexToRemove + 1].beforeOperator;\n            expressionsList[0].beforeOperator = null;\n            expressionsList[expressionsList.length - 1].afterOperator = null;\n        }\n\n        expressionsList.splice(indexToRemove, 1);\n    }\n\n    /**\n     * Generate filtering tree for a given column from existing ExpressionUIs.\n     */\n    public createSimpleFilteringTree(columnId: string, expressionUIList = null): FilteringExpressionsTree {\n        const expressionsList = expressionUIList ? expressionUIList : this.getExpressions(columnId);\n        const expressionsTree = new FilteringExpressionsTree(FilteringLogic.Or, columnId);\n        let currAndBranch: FilteringExpressionsTree;\n        let currExpressionUI: ExpressionUI;\n\n        for (let i = 0; i < expressionsList.length; i++) {\n            currExpressionUI = expressionsList[i];\n\n            if (!currExpressionUI.expression.condition.isUnary && currExpressionUI.expression.searchVal === null) {\n                if (currExpressionUI.afterOperator === FilteringLogic.And && !currAndBranch) {\n                    currAndBranch = new FilteringExpressionsTree(FilteringLogic.And, columnId);\n                    expressionsTree.filteringOperands.push(currAndBranch);\n                }\n                continue;\n            }\n\n            if ((currExpressionUI.beforeOperator === undefined || currExpressionUI.beforeOperator === null ||\n                 currExpressionUI.beforeOperator === FilteringLogic.Or) &&\n                currExpressionUI.afterOperator === FilteringLogic.And) {\n\n                currAndBranch = new FilteringExpressionsTree(FilteringLogic.And, columnId);\n                expressionsTree.filteringOperands.push(currAndBranch);\n                currAndBranch.filteringOperands.push(currExpressionUI.expression);\n\n            } else if (currExpressionUI.beforeOperator === FilteringLogic.And) {\n                currAndBranch.filteringOperands.push(currExpressionUI.expression);\n            } else {\n                expressionsTree.filteringOperands.push(currExpressionUI.expression);\n                currAndBranch = null;\n            }\n        }\n\n        return expressionsTree;\n    }\n\n    /**\n     * Returns whether a complex filter is applied to a given column.\n     */\n    public isFilterComplex(columnId: string) {\n        if (this.columnsWithComplexFilter.has(columnId)) {\n            return true;\n        }\n\n        const column = this.grid.columns.find((col) => col.field === columnId);\n        const isComplex = column && this.isFilteringTreeComplex(column.filteringExpressionsTree);\n        if (isComplex) {\n            this.columnsWithComplexFilter.add(columnId);\n        }\n\n        return isComplex;\n    }\n\n    /**\n     * Returns the string representation of the FilteringLogic operator.\n     */\n    public getOperatorAsString(operator: FilteringLogic): any {\n        if (operator === 0) {\n            return this.grid.resourceStrings.igx_grid_filter_operator_and;\n        } else {\n            return this.grid.resourceStrings.igx_grid_filter_operator_or;\n        }\n    }\n\n    /**\n     * Generate the label of a chip from a given filtering expression.\n     */\n    public getChipLabel(expression: IFilteringExpression): any {\n        if (expression.condition.isUnary) {\n            return this.grid.resourceStrings[`igx_grid_filter_${expression.condition.name}`] || expression.condition.name;\n        } else if (expression.searchVal instanceof Date) {\n            return this.datePipe.transform(expression.searchVal, this.grid.locale);\n        } else {\n            return expression.searchVal;\n        }\n    }\n\n    /**\n     * Updates the content of a filterCell.\n     */\n    public updateFilteringCell(column: IgxColumnComponent) {\n        const filterCell = column.filterCell;\n        if (filterCell) {\n            filterCell.updateFilterCellArea();\n        }\n    }\n\n    /**\n     * Focus a chip in a filterCell.\n     */\n    public focusFilterCellChip(column: IgxColumnComponent, focusFirst: boolean) {\n        const filterCell = column.filterCell;\n        if (filterCell) {\n            filterCell.focusChip(focusFirst);\n        }\n    }\n\n    /**\n     * Focus the close button in the filtering row.\n     */\n    public focusFilterRowCloseButton() {\n        this.grid.filteringRow.closeButton.nativeElement.focus();\n    }\n\n    public get filteredData() {\n        return this.grid.filteredData;\n    }\n\n    /**\n     * Scrolls to a filterCell.\n     */\n    public scrollToFilterCell(column: IgxColumnComponent, shouldFocusNext: boolean) {\n        this.grid.nativeElement.focus({preventScroll: true});\n        this.columnToFocus = column;\n        this.shouldFocusNext = shouldFocusNext;\n\n        let currentColumnRight = 0;\n        let currentColumnLeft = 0;\n        for (let index = 0; index < this.unpinnedColumns.length; index++) {\n            currentColumnRight += parseInt(this.unpinnedColumns[index].width, 10);\n            if (this.unpinnedColumns[index] === column) {\n                currentColumnLeft = currentColumnRight - parseInt(this.unpinnedColumns[index].width, 10);\n                break;\n            }\n        }\n\n        const forOfDir = this.grid.headerContainer;\n        const width = this.displayContainerWidth + this.displayContainerScrollLeft;\n        if (shouldFocusNext) {\n            forOfDir.scrollPosition += currentColumnRight - width;\n        } else {\n            forOfDir.scrollPosition = currentColumnLeft;\n        }\n    }\n\n    private isFilteringTreeComplex(expressions: IFilteringExpressionsTree | IFilteringExpression): boolean {\n        if (!expressions) {\n            return false;\n        }\n\n        if (expressions instanceof FilteringExpressionsTree) {\n            const expressionsTree = expressions as FilteringExpressionsTree;\n            if (expressionsTree.operator === FilteringLogic.Or) {\n                const andOperatorsCount = this.getChildAndOperatorsCount(expressionsTree);\n\n                // having more that 'And' and operator in the sub-tree means that the filter could not be represented without parentheses.\n                return andOperatorsCount > 1;\n            }\n\n            let isComplex = false;\n            for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n                isComplex = isComplex || this.isFilteringTreeComplex(expressionsTree.filteringOperands[i]);\n            }\n\n            return isComplex;\n        }\n\n        return false;\n    }\n\n    private getChildAndOperatorsCount(expressions: IFilteringExpressionsTree): number {\n        let count = 0;\n        let operand;\n        for (let i = 0; i < expressions.filteringOperands.length; i++) {\n            operand = expressions[i];\n            if (operand instanceof FilteringExpressionsTree) {\n                if (operand.operator === FilteringLogic.And) {\n                    count++;\n                }\n\n                count = count + this.getChildAndOperatorsCount(operand);\n            }\n        }\n\n        return count;\n    }\n\n    public generateExpressionsList(expressions: IFilteringExpressionsTree | IFilteringExpression,\n        operator: FilteringLogic,\n        expressionsUIs: ExpressionUI[]): void {\n        this.generateExpressionsListRecursive(expressions, operator, expressionsUIs);\n\n        // The beforeOperator of the first expression and the afterOperator of the last expression should be null\n        if (expressionsUIs.length) {\n            expressionsUIs[expressionsUIs.length - 1].afterOperator = null;\n        }\n    }\n\n    private generateExpressionsListRecursive(expressions: IFilteringExpressionsTree | IFilteringExpression,\n                                    operator: FilteringLogic,\n                                    expressionsUIs: ExpressionUI[]): void {\n        if (!expressions) {\n            return;\n        }\n\n        if (expressions instanceof FilteringExpressionsTree) {\n            const expressionsTree = expressions as FilteringExpressionsTree;\n            for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n                this.generateExpressionsListRecursive(expressionsTree.filteringOperands[i], expressionsTree.operator, expressionsUIs);\n            }\n            if (expressionsUIs.length) {\n                expressionsUIs[expressionsUIs.length - 1].afterOperator = operator;\n            }\n        } else {\n            const exprUI = new ExpressionUI();\n            exprUI.expression = expressions as IFilteringExpression;\n            exprUI.afterOperator = operator;\n\n            const prevExprUI = expressionsUIs[expressionsUIs.length - 1];\n            if (prevExprUI) {\n                exprUI.beforeOperator = prevExprUI.afterOperator;\n            }\n\n            expressionsUIs.push(exprUI);\n        }\n    }\n\n    public isFilteringExpressionsTreeEmpty(): boolean {\n        const expressionTree = this.grid.filteringExpressionsTree;\n        if (FilteringExpressionsTree.empty(expressionTree)) {\n            return true;\n        }\n\n        let expr: any;\n\n        for (let i = 0; i < expressionTree.filteringOperands.length; i++) {\n            expr = expressionTree.filteringOperands[i];\n\n            if ((expr instanceof FilteringExpressionsTree)) {\n                const exprTree = expr as FilteringExpressionsTree;\n                if (exprTree.filteringOperands && exprTree.filteringOperands.length) {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n","import {\n    AfterViewInit,\n    Component,\n    ChangeDetectionStrategy,\n    Input,\n    ViewChild,\n    ChangeDetectorRef,\n    TemplateRef,\n    Directive\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../column.component';\nimport { IChangeCheckboxEventArgs } from '../../../checkbox/checkbox.component';\nimport { IgxInputDirective } from '../../../directives/input/input.directive';\nimport { DisplayDensity } from '../../../core/density';\nimport { IgxForOfDirective } from '../../../directives/for-of/for_of.directive';\nimport { FilterListItem } from './grid.excel-style-filtering.component';\n\n@Directive({\n    selector: '[igxExcelStyleLoading]'\n})\nexport class IgxExcelStyleLoadingValuesTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-search',\n    templateUrl: './excel-style-search.component.html'\n})\nexport class IgxExcelStyleSearchComponent implements AfterViewInit {\n\n    private _isLoading;\n\n    public get isLoading() {\n        return this._isLoading;\n    }\n\n    public set isLoading(value: boolean) {\n        this._isLoading = value;\n        if (!(this.cdr as any).destroyed) {\n            this.cdr.detectChanges();\n        }\n    }\n\n    public searchValue: any;\n\n    @Input()\n    public grid: any;\n\n    @Input()\n    public data: FilterListItem[];\n\n    public filteredData: FilterListItem[];\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @ViewChild('input', { read: IgxInputDirective, static: true })\n    public searchInput: IgxInputDirective;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @ViewChild(IgxForOfDirective, { static: true })\n    protected virtDir: IgxForOfDirective<any>;\n\n    @ViewChild('defaultExcelStyleLoadingValuesTemplate', { read: TemplateRef, static: true })\n    protected defaultExcelStyleLoadingValuesTemplate: TemplateRef<any>;\n\n    public get valuesLoadingTemplate() {\n        if (this.grid.excelStyleLoadingValuesTemplateDirective) {\n            return this.grid.excelStyleLoadingValuesTemplateDirective.template;\n        } else {\n            return this.defaultExcelStyleLoadingValuesTemplate;\n        }\n    }\n\n    constructor(public cdr: ChangeDetectorRef) { }\n\n    public ngAfterViewInit() {\n        this.refreshSize();\n    }\n\n    public refreshSize() {\n        requestAnimationFrame(() => {\n            this.virtDir.recalcUpdateSizes();\n        });\n    }\n\n    public clearInput() {\n        this.searchValue = null;\n    }\n\n    public onCheckboxChange(eventArgs: IChangeCheckboxEventArgs) {\n        const selectedIndex = this.data.indexOf(eventArgs.checkbox.value);\n        if (selectedIndex === 0) {\n            this.data.forEach(element => {\n                element.isSelected = eventArgs.checked;\n                this.data[0].indeterminate = false;\n            });\n        } else {\n            eventArgs.checkbox.value.isSelected = eventArgs.checked;\n            if (!this.data.slice(1, this.data.length).find(el => el.isSelected === false)) {\n                this.data[0].indeterminate = false;\n                this.data[0].isSelected = true;\n            } else if (!this.data.slice(1, this.data.length).find(el => el.isSelected === true)) {\n                this.data[0].indeterminate = false;\n                this.data[0].isSelected = false;\n            } else {\n                this.data[0].indeterminate = true;\n            }\n        }\n        eventArgs.checkbox.nativeCheckbox.nativeElement.blur();\n    }\n\n    public get itemSize() {\n        let itemSize = '40px';\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy: itemSize = '32px'; break;\n            case DisplayDensity.compact: itemSize = '24px'; break;\n            default: break;\n        }\n        return itemSize;\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    AfterViewInit,\n    Input,\n    Output,\n    EventEmitter,\n    ChangeDetectorRef,\n    ViewChild\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../column.component';\nimport { ExpressionUI } from '../grid-filtering.service';\nimport { IgxButtonGroupComponent } from '../../../buttonGroup/buttonGroup.component';\nimport { IgxDropDownItemComponent, IgxDropDownComponent } from '../../../drop-down/index';\nimport { IgxInputGroupComponent, IgxInputDirective } from '../../../input-group/index';\nimport { DataType } from '../../../data-operations/data-util';\nimport { IFilteringOperation } from '../../../data-operations/filtering-condition';\nimport { OverlaySettings, ConnectedPositioningStrategy, CloseScrollStrategy } from '../../../services/index';\nimport { KEYS, IBaseEventArgs } from '../../../core/utils';\nimport { FilteringLogic } from '../../../data-operations/filtering-expression.interface';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\nexport interface ILogicOperatorChangedArgs extends IBaseEventArgs {\n    target: ExpressionUI;\n    newValue: FilteringLogic;\n}\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-default-expression',\n    templateUrl: './excel-style-default-expression.component.html'\n})\nexport class IgxExcelStyleDefaultExpressionComponent implements AfterViewInit {\n\n    private _dropDownOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false,\n        positionStrategy: new ConnectedPositioningStrategy(),\n        scrollStrategy: new CloseScrollStrategy()\n    };\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public expressionUI: ExpressionUI;\n\n    @Input()\n    public expressionsList: Array<ExpressionUI>;\n\n    @Input()\n    public grid: any;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @Output()\n    public onExpressionRemoved = new EventEmitter<ExpressionUI>();\n\n    @Output()\n    public onLogicOperatorChanged = new EventEmitter<ILogicOperatorChangedArgs>();\n\n    @ViewChild('inputGroupConditions', { read: IgxInputGroupComponent, static: true })\n    protected inputGroupConditions: IgxInputGroupComponent;\n\n    @ViewChild('inputValues', { read: IgxInputDirective, static: true })\n    protected inputValuesDirective: IgxInputDirective;\n\n    @ViewChild('dropdownConditions', { read: IgxDropDownComponent, static: true })\n    protected dropdownConditions: IgxDropDownComponent;\n\n    @ViewChild('logicOperatorButtonGroup', { read: IgxButtonGroupComponent, static: false })\n    protected logicOperatorButtonGroup: IgxButtonGroupComponent;\n\n    protected get inputValuesElement() {\n        return this.inputValuesDirective;\n    }\n\n    get isLast(): boolean {\n        return this.expressionsList[this.expressionsList.length - 1] === this.expressionUI;\n    }\n\n    get isSingle(): boolean {\n        return this.expressionsList.length === 1;\n    }\n\n    get inputConditionsPlaceholder(): string {\n        return this.grid.resourceStrings['igx_grid_filter_condition_placeholder'];\n    }\n\n    get inputValuePlaceholder(): string {\n        return this.grid.resourceStrings['igx_grid_filter_row_placeholder'];\n    }\n\n    get type() {\n        switch (this.column.dataType) {\n            case DataType.Number:\n                return 'number';\n            default:\n                return 'text';\n        }\n    }\n\n    constructor(public cdr: ChangeDetectorRef) {}\n\n    ngAfterViewInit(): void {\n        this._dropDownOverlaySettings.outlet = this.column.grid.outletDirective;\n        this._dropDownOverlaySettings.positionStrategy.settings.target = this.inputGroupConditions.element.nativeElement;\n    }\n\n    public focus() {\n        // use requestAnimationFrame to focus the values input because when initializing the component\n        // datepicker's input group is not yet fully initialized\n        requestAnimationFrame(() => this.inputValuesElement.focus());\n    }\n\n    public isConditionSelected(conditionName: string): boolean {\n        return this.expressionUI.expression.condition && this.expressionUI.expression.condition.name === conditionName;\n    }\n\n    public getConditionName(condition: IFilteringOperation) {\n        return condition ? this.translateCondition(condition.name) : null;\n    }\n\n    public getInputWidth() {\n        return this.inputGroupConditions.element.nativeElement.offsetWidth + 'px';\n    }\n\n    get conditions() {\n        return this.column.filters.conditionList();\n    }\n\n    public translateCondition(value: string): string {\n        return this.grid.resourceStrings[`igx_grid_filter_${this.getCondition(value).name}`] || value;\n    }\n\n    public getIconName(): string {\n        if (this.column.dataType === DataType.Boolean && this.expressionUI.expression.condition === null) {\n            return this.getCondition(this.conditions[0]).iconName;\n        } else if (!this.expressionUI.expression.condition) {\n            return 'filter_list';\n        } else {\n            return this.expressionUI.expression.condition.iconName;\n        }\n    }\n\n    public toggleCustomDialogDropDown() {\n        this.dropdownConditions.toggle(this._dropDownOverlaySettings);\n    }\n\n    public getCondition(value: string): IFilteringOperation {\n        return this.column.filters.condition(value);\n    }\n\n    public onConditionsChanged(eventArgs: any) {\n        const value = (eventArgs.newSelection as IgxDropDownItemComponent).value;\n        this.expressionUI.expression.condition = this.getCondition(value);\n\n        this.focus();\n    }\n\n    public onValuesInput(eventArgs) {\n        this.expressionUI.expression.searchVal = this.transformValue(eventArgs.target.value);\n    }\n\n    public onLogicOperatorButtonClicked(eventArgs, buttonIndex: number) {\n        if (this.logicOperatorButtonGroup.selectedButtons.length === 0) {\n            eventArgs.stopPropagation();\n            this.logicOperatorButtonGroup.selectButton(buttonIndex);\n        } else {\n            this.onLogicOperatorChanged.emit({\n                target: this.expressionUI,\n                newValue: buttonIndex as FilteringLogic\n            });\n        }\n    }\n\n    public onLogicOperatorKeyDown(eventArgs, buttonIndex: number) {\n        if (eventArgs.key === KEYS.ENTER) {\n            this.logicOperatorButtonGroup.selectButton(buttonIndex);\n            this.onLogicOperatorChanged.emit({\n                target: this.expressionUI,\n                newValue: buttonIndex as FilteringLogic\n            });\n        }\n    }\n\n    public onRemoveButtonClick() {\n        this.onExpressionRemoved.emit(this.expressionUI);\n    }\n\n    public onInputConditionsKeyDown(eventArgs) {\n        if (eventArgs.altKey && (eventArgs.key === KEYS.DOWN_ARROW || eventArgs.key === KEYS.DOWN_ARROW_IE)) {\n            this.toggleCustomDialogDropDown();\n        }\n\n        if (eventArgs.key === KEYS.TAB && eventArgs.shiftKey && this.expressionsList[0] === this.expressionUI) {\n            eventArgs.preventDefault();\n        }\n\n        event.stopPropagation();\n    }\n\n    private transformValue(value): any {\n        if (this.column.dataType === DataType.Number) {\n            value = parseFloat(value);\n        } else if (this.column.dataType === DataType.Boolean) {\n            value = Boolean(value);\n        }\n\n        return value;\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    ViewChild,\n    Input\n} from '@angular/core';\nimport { IgxExcelStyleDefaultExpressionComponent } from './excel-style-default-expression.component';\nimport { IgxDatePickerComponent } from '../../../date-picker/date-picker.component';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-date-expression',\n    templateUrl: './excel-style-date-expression.component.html'\n})\nexport class IgxExcelStyleDateExpressionComponent extends IgxExcelStyleDefaultExpressionComponent {\n\n    @ViewChild('datePicker', { read: IgxDatePickerComponent, static: true })\n    private datePicker: IgxDatePickerComponent;\n\n    protected get inputValuesElement() {\n        return this.datePicker.getEditElement();\n    }\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    get inputDatePlaceholder(): string {\n        return this.grid.resourceStrings['igx_grid_filter_row_date_placeholder'];\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    Input,\n    ChangeDetectorRef,\n    ViewChild,\n    AfterViewInit,\n    TemplateRef,\n    ViewChildren,\n    QueryList,\n    ElementRef\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../column.component';\nimport { IgxFilteringService, ExpressionUI } from '../grid-filtering.service';\nimport { FilteringLogic } from '../../../data-operations/filtering-expression.interface';\nimport { DataType } from '../../../data-operations/data-util';\nimport {\n    IgxStringFilteringOperand,\n    IgxBooleanFilteringOperand,\n    IgxNumberFilteringOperand,\n    IgxDateFilteringOperand\n} from '../../../data-operations/filtering-condition';\nimport { IgxToggleDirective } from '../../../directives/toggle/toggle.directive';\nimport {\n    ConnectedPositioningStrategy,\n    OverlaySettings,\n    VerticalAlignment,\n    PositionSettings,\n    HorizontalAlignment,\n    IgxOverlayService,\n    AbsoluteScrollStrategy\n} from '../../../services/index';\nimport { ILogicOperatorChangedArgs, IgxExcelStyleDefaultExpressionComponent } from './excel-style-default-expression.component';\nimport { KEYS } from '../../../core/utils';\nimport { IgxExcelStyleDateExpressionComponent } from './excel-style-date-expression.component';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-custom-dialog',\n    templateUrl: './excel-style-custom-dialog.component.html'\n})\nexport class IgxExcelStyleCustomDialogComponent implements AfterViewInit {\n\n    @Input()\n    public expressionsList = new Array<ExpressionUI>();\n\n    private _customDialogPositionSettings: PositionSettings = {\n        verticalDirection: VerticalAlignment.Middle,\n        horizontalDirection: HorizontalAlignment.Center,\n        horizontalStartPoint: HorizontalAlignment.Center,\n        verticalStartPoint: VerticalAlignment.Middle\n    };\n\n    private _customDialogOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false,\n        positionStrategy: new ConnectedPositioningStrategy(this._customDialogPositionSettings),\n        scrollStrategy: new AbsoluteScrollStrategy()\n    };\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public selectedOperator: string;\n\n    @Input()\n    public filteringService: IgxFilteringService;\n\n    @Input()\n    public overlayComponentId: string;\n\n    @Input()\n    public overlayService: IgxOverlayService;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @ViewChildren(IgxExcelStyleDefaultExpressionComponent)\n    private expressionComponents: QueryList<IgxExcelStyleDefaultExpressionComponent>;\n\n    @ViewChildren(IgxExcelStyleDateExpressionComponent)\n    private expressionDateComponents: QueryList<IgxExcelStyleDateExpressionComponent>;\n\n    @ViewChild('toggle', { read: IgxToggleDirective, static: true })\n    public toggle: IgxToggleDirective;\n\n    @ViewChild('defaultExpressionTemplate', { read: TemplateRef, static: false })\n    protected defaultExpressionTemplate: TemplateRef<any>;\n\n    @ViewChild('dateExpressionTemplate', { read: TemplateRef, static: false })\n    protected dateExpressionTemplate: TemplateRef<any>;\n\n    @ViewChild('expressionsContainer', { static: true })\n    protected expressionsContainer: ElementRef;\n\n    constructor(private cdr: ChangeDetectorRef) {}\n\n    ngAfterViewInit(): void {\n        this._customDialogOverlaySettings.outlet = this.grid.outlet;\n    }\n\n    get template(): TemplateRef<any> {\n        if (this.column.dataType === DataType.Date) {\n            return this.dateExpressionTemplate;\n        }\n\n        return this.defaultExpressionTemplate;\n    }\n\n    get grid(): any {\n        return this.filteringService.grid;\n    }\n\n    public onCustomDialogOpening() {\n        if (this.selectedOperator) {\n            this.createInitialExpressionUIElement();\n        }\n    }\n\n    public onCustomDialogOpened() {\n        if (this.expressionComponents.first) {\n            this.expressionComponents.first.focus();\n        }\n    }\n\n    public open() {\n        this._customDialogOverlaySettings.positionStrategy.settings.target =\n            this.grid.rootGrid ? this.grid.rootGrid.nativeElement : this.grid.nativeElement;\n        this.toggle.open(this._customDialogOverlaySettings);\n    }\n\n    public onClearButtonClick() {\n        this.filteringService.clearFilter(this.column.field);\n        this.createInitialExpressionUIElement();\n        this.cdr.detectChanges();\n    }\n\n    public closeDialog() {\n        if (this.overlayComponentId) {\n            this.overlayService.hide(this.overlayComponentId);\n        }\n    }\n\n    public onApplyButtonClick() {\n        this.expressionsList = this.expressionsList.filter(\n            element => element.expression.condition &&\n            (element.expression.searchVal || element.expression.searchVal === 0 || element.expression.condition.isUnary));\n\n        if (this.expressionsList.length > 0) {\n            this.expressionsList[0].beforeOperator = null;\n            this.expressionsList[this.expressionsList.length - 1].afterOperator = null;\n        }\n\n        this.filteringService.filterInternal(this.column.field, this.expressionsList);\n        this.closeDialog();\n    }\n\n    public onAddButtonClick() {\n        const exprUI = new ExpressionUI();\n        exprUI.expression = {\n            condition: null,\n            fieldName: this.column.field,\n            ignoreCase: this.column.filteringIgnoreCase,\n            searchVal: null\n        };\n\n        this.expressionsList[this.expressionsList.length - 1].afterOperator = FilteringLogic.And;\n        exprUI.beforeOperator = this.expressionsList[this.expressionsList.length - 1].afterOperator;\n\n        this.expressionsList.push(exprUI);\n\n        this.markChildrenForCheck();\n        this.scrollToBottom();\n    }\n\n    public onExpressionRemoved(event: ExpressionUI) {\n        const indexToRemove = this.expressionsList.indexOf(event);\n\n        if (indexToRemove === 0 && this.expressionsList.length > 1) {\n            this.expressionsList[1].beforeOperator = null;\n        } else if (indexToRemove === this.expressionsList.length - 1) {\n            this.expressionsList[indexToRemove - 1].afterOperator = null;\n        } else {\n            this.expressionsList[indexToRemove - 1].afterOperator = this.expressionsList[indexToRemove + 1].beforeOperator;\n            this.expressionsList[0].beforeOperator = null;\n            this.expressionsList[this.expressionsList.length - 1].afterOperator = null;\n        }\n\n        this.expressionsList.splice(indexToRemove, 1);\n\n        this.cdr.detectChanges();\n\n        this.markChildrenForCheck();\n    }\n\n    public onLogicOperatorChanged(event: ILogicOperatorChangedArgs) {\n        const index = this.expressionsList.indexOf(event.target);\n        event.target.afterOperator = event.newValue;\n        if (index + 1 < this.expressionsList.length) {\n            this.expressionsList[index + 1].beforeOperator = event.newValue;\n        }\n    }\n\n    public onKeyDown(eventArgs) {\n        eventArgs.stopPropagation();\n    }\n\n    public onApplyButtonKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.TAB && !eventArgs.shiftKey) {\n            eventArgs.stopPropagation();\n            eventArgs.preventDefault();\n        }\n    }\n\n    private createCondition(conditionName: string) {\n        switch (this.column.dataType) {\n            case DataType.Boolean:\n                return IgxBooleanFilteringOperand.instance().condition(conditionName);\n            case DataType.Number:\n                return IgxNumberFilteringOperand.instance().condition(conditionName);\n            case DataType.Date:\n                return IgxDateFilteringOperand.instance().condition(conditionName);\n            default:\n                return IgxStringFilteringOperand.instance().condition(conditionName);\n        }\n    }\n\n    private markChildrenForCheck() {\n        this.expressionComponents.forEach(x => x.cdr.markForCheck());\n        this.expressionDateComponents.forEach(x => x.cdr.markForCheck());\n    }\n\n    private createInitialExpressionUIElement() {\n        this.expressionsList = [];\n        const firstExprUI = new ExpressionUI();\n\n        firstExprUI.expression = {\n            condition: this.createCondition(this.selectedOperator),\n            fieldName: this.column.field,\n            ignoreCase: this.column.filteringIgnoreCase,\n            searchVal: null\n        };\n        firstExprUI.afterOperator = FilteringLogic.And;\n\n        this.expressionsList.push(firstExprUI);\n\n        const secondExprUI = new ExpressionUI();\n        secondExprUI.expression = {\n            condition: null,\n            fieldName: this.column.field,\n            ignoreCase: this.column.filteringIgnoreCase,\n            searchVal: null\n        };\n\n        secondExprUI.beforeOperator = FilteringLogic.And;\n\n        this.expressionsList.push(secondExprUI);\n    }\n\n    private scrollToBottom() {\n        requestAnimationFrame(() => {\n            this.expressionsContainer.nativeElement.scrollTop = this.expressionsContainer.nativeElement.scrollHeight;\n        });\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    ViewChild,\n    Input\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../column.component';\nimport { IgxButtonGroupComponent } from '../../../buttonGroup/buttonGroup.component';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-sorting',\n    templateUrl: './excel-style-sorting.component.html'\n})\nexport class IgxExcelStyleSortingComponent {\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public grid: any;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @ViewChild('sortButtonGroup', { read: IgxButtonGroupComponent, static: true })\n    public sortButtonGroup: IgxButtonGroupComponent;\n\n    constructor() {}\n\n    public onSortButtonClicked(sortDirection) {\n        if (this.sortButtonGroup.selectedIndexes.length === 0) {\n            if (this.grid.isColumnGrouped(this.column.field)) {\n                this.selectButton(sortDirection);\n            } else {\n                this.grid.clearSort(this.column.field);\n            }\n        } else {\n            this.grid.sort({ fieldName: this.column.field, dir: sortDirection, ignoreCase: true });\n        }\n    }\n\n    public selectButton(sortDirection: number) {\n        if (sortDirection === 1) {\n            this.sortButtonGroup.selectButton(0);\n        } else {\n            this.sortButtonGroup.selectButton(1);\n        }\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    ViewChild,\n    HostBinding,\n    ChangeDetectionStrategy,\n    TemplateRef,\n    Directive,\n    OnDestroy,\n    AfterViewInit,\n    ElementRef,\n    OnInit\n} from '@angular/core';\nimport {\n    HorizontalAlignment,\n    VerticalAlignment,\n    OverlaySettings,\n    IgxOverlayService,\n    AbsoluteScrollStrategy,\n    AutoPositionStrategy\n} from '../../../services/index';\nimport { IgxFilteringService, ExpressionUI } from '../grid-filtering.service';\nimport {\n    IFilteringOperation,\n    IgxStringFilteringOperand,\n    IgxNumberFilteringOperand,\n    IgxBooleanFilteringOperand,\n    IgxDateFilteringOperand\n} from '../../../data-operations/filtering-condition';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../../../data-operations/filtering-expressions-tree';\nimport { FilteringLogic, IFilteringExpression } from '../../../data-operations/filtering-expression.interface';\nimport { cloneArray, KEYS } from '../../../core/utils';\nimport { DataType, DataUtil } from '../../../data-operations/data-util';\nimport { IgxExcelStyleSearchComponent } from './excel-style-search.component';\nimport { IgxExcelStyleCustomDialogComponent } from './excel-style-custom-dialog.component';\nimport { Subscription, Subject } from 'rxjs';\nimport { IgxExcelStyleSortingComponent } from './excel-style-sorting.component';\nimport { takeUntil } from 'rxjs/operators';\nimport { ISelectionEventArgs, IgxDropDownComponent } from '../../../drop-down';\nimport { IgxColumnComponent } from '../../column.component';\n\n/**\n *@hidden\n */\nexport class FilterListItem {\n    public value: any;\n    public label: any;\n    public isSelected: boolean;\n    public indeterminate: boolean;\n    public isSpecial = false;\n}\n\n@Directive({\n    selector: '[igxExcelStyleSorting]'\n})\nexport class IgxExcelStyleSortingTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxExcelStyleMoving]'\n})\nexport class IgxExcelStyleMovingTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxExcelStyleHiding]'\n})\nexport class IgxExcelStyleHidingTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxExcelStylePinning]'\n})\nexport class IgxExcelStylePinningTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-excel-style-filtering',\n    templateUrl: './grid.excel-style-filtering.component.html'\n})\nexport class IgxGridExcelStyleFilteringComponent implements OnDestroy, OnInit, AfterViewInit {\n    private static readonly filterOptimizationThreshold = 2;\n\n    private shouldOpenSubMenu = true;\n    private expressionsList = new Array<ExpressionUI>();\n    private destroy$ = new Subject<boolean>();\n    private containsNullOrEmpty = false;\n    private selectAllSelected = true;\n    private selectAllIndeterminate = false;\n    private filterValues = new Set<any>();\n\n    protected columnMoving = new Subscription();\n\n    public column: IgxColumnComponent;\n    public filteringService: IgxFilteringService;\n    public listData = new Array<FilterListItem>();\n    public uniqueValues = [];\n    public overlayService: IgxOverlayService;\n    public overlayComponentId: string;\n\n    private _subMenuPositionSettings = {\n        verticalStartPoint: VerticalAlignment.Top\n    };\n\n    private _subMenuOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false,\n        positionStrategy: new AutoPositionStrategy(this._subMenuPositionSettings),\n        scrollStrategy: new AbsoluteScrollStrategy()\n    };\n\n    @HostBinding('class.igx-excel-filter')\n    className = 'igx-excel-filter';\n\n    @ViewChild('dropdown', { read: ElementRef, static: true })\n    public mainDropdown: ElementRef;\n\n    @ViewChild('subMenu', { read: IgxDropDownComponent, static: true })\n    public subMenu: IgxDropDownComponent;\n\n    @ViewChild('customDialog', { read: IgxExcelStyleCustomDialogComponent, static: true })\n    public customDialog: IgxExcelStyleCustomDialogComponent;\n\n    @ViewChild('excelStyleSearch', { read: IgxExcelStyleSearchComponent, static: true })\n    public excelStyleSearch: IgxExcelStyleSearchComponent;\n\n    @ViewChild('excelStyleSorting', { read: IgxExcelStyleSortingComponent, static: false })\n    protected excelStyleSorting: IgxExcelStyleSortingComponent;\n\n    @ViewChild('defaultExcelStyleSortingTemplate', { read: TemplateRef, static: true })\n    protected defaultExcelStyleSortingTemplate: TemplateRef<any>;\n\n    @ViewChild('defaultExcelStyleHidingTemplate', { read: TemplateRef, static: true })\n    protected defaultExcelStyleHidingTemplate: TemplateRef<any>;\n\n    @ViewChild('defaultExcelStyleMovingTemplate', { read: TemplateRef, static: true })\n    protected defaultExcelStyleMovingTemplate: TemplateRef<any>;\n\n    @ViewChild('defaultExcelStylePinningTemplate', { read: TemplateRef, static: true })\n    protected defaultExcelStylePinningTemplate: TemplateRef<any>;\n\n    public isColumnPinnable: boolean;\n\n    get grid(): any {\n        return this.filteringService.grid;\n    }\n\n    get conditions() {\n        return this.column.filters.conditionList();\n    }\n\n    get subMenuText() {\n        switch (this.column.dataType) {\n            case DataType.Boolean:\n                return this.grid.resourceStrings.igx_grid_excel_boolean_filter;\n            case DataType.Number:\n                return this.grid.resourceStrings.igx_grid_excel_number_filter;\n            case DataType.Date:\n                return this.grid.resourceStrings.igx_grid_excel_date_filter;\n            default:\n                return this.grid.resourceStrings.igx_grid_excel_text_filter;\n        }\n    }\n\n    constructor(public cdr: ChangeDetectorRef) {}\n\n    ngOnInit() {\n        this.isColumnPinnable = this.column.pinnable;\n    }\n\n    ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    ngAfterViewInit(): void {\n        this.expressionsList = new Array<ExpressionUI>();\n        this.filteringService.generateExpressionsList(this.column.filteringExpressionsTree, this.grid.filteringLogic, this.expressionsList);\n        if (this.expressionsList && this.expressionsList.length &&\n            this.expressionsList[0].expression.condition.name !== 'in') {\n            this.customDialog.expressionsList = this.expressionsList;\n        }\n        this.populateColumnData();\n\n        if (this.excelStyleSorting) {\n            const se = this.grid.sortingExpressions.find(expr => expr.fieldName === this.column.field);\n            if (se) {\n                this.excelStyleSorting.selectButton(se.dir);\n            }\n        }\n\n        requestAnimationFrame(() => {\n            this.excelStyleSearch.searchInput.nativeElement.focus();\n        });\n    }\n\n    public clearFilterClass() {\n        if (this.column.filteringExpressionsTree) {\n            return 'igx-excel-filter__actions-clear';\n        }\n\n        return 'igx-excel-filter__actions-clear--disabled';\n    }\n\n    public pinClass() {\n        return this.isColumnPinnable ? 'igx-excel-filter__actions-pin' : 'igx-excel-filter__actions-pin--disabled';\n    }\n\n    public initialize(column: IgxColumnComponent, filteringService: IgxFilteringService, overlayService: IgxOverlayService,\n        overlayComponentId: string) {\n        this.column = column;\n        this.filteringService = filteringService;\n        this.overlayService = overlayService;\n        this.overlayComponentId = overlayComponentId;\n\n        this._subMenuOverlaySettings.outlet = this.grid.outlet;\n\n        this.columnMoving = this.grid.onColumnMoving.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            this.closeDropdown();\n        });\n    }\n\n    /**\n     * Returns the filtering operation condition for a given value.\n     */\n    public getCondition(value: string): IFilteringOperation {\n        return this.column.filters.condition(value);\n    }\n\n    /**\n     * Returns the translated condition name for a given value.\n     */\n    public translateCondition(value: string): string {\n        return this.grid.resourceStrings[`igx_grid_filter_${this.getCondition(value).name}`] || value;\n    }\n\n    public onPin() {\n        this.column.pinned = !this.column.pinned;\n        this.closeDropdown();\n    }\n\n    public onHide() {\n        this.column.hidden = true;\n        this.grid.onColumnVisibilityChanged.emit({ column: this.column, newValue: true });\n        this.closeDropdown();\n    }\n\n    public onTextFilterClick(eventArgs) {\n        if (this.shouldOpenSubMenu) {\n            this._subMenuOverlaySettings.positionStrategy.settings.target = eventArgs.currentTarget;\n\n            const gridRect = this.grid.nativeElement.getBoundingClientRect();\n            const dropdownRect = this.mainDropdown.nativeElement.getBoundingClientRect();\n\n            let x = dropdownRect.left + dropdownRect.width;\n            let x1 = gridRect.left + gridRect.width;\n            x += window.pageXOffset;\n            x1 += window.pageXOffset;\n            if (Math.abs(x - x1) < 200) {\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalDirection = HorizontalAlignment.Left;\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalStartPoint = HorizontalAlignment.Left;\n            } else {\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalDirection = HorizontalAlignment.Right;\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalStartPoint = HorizontalAlignment.Right;\n            }\n\n            this.subMenu.open(this._subMenuOverlaySettings);\n            this.shouldOpenSubMenu = false;\n        }\n    }\n\n    public onTextFilterKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.ENTER) {\n            this.onTextFilterClick(eventArgs);\n        }\n    }\n\n    public onSubMenuClosed() {\n        requestAnimationFrame(() => {\n            this.shouldOpenSubMenu = true;\n        });\n    }\n\n    public onSubMenuSelection(eventArgs: ISelectionEventArgs) {\n        this.customDialog.selectedOperator = eventArgs.newSelection.value;\n        eventArgs.cancel = true;\n        this.mainDropdown.nativeElement.style.display = 'none';\n        this.subMenu.close();\n        this.customDialog.open();\n    }\n\n    private areExpressionsSelectable () {\n        if (this.expressionsList.length === 1 &&\n            (this.expressionsList[0].expression.condition.name === 'equals' ||\n             this.expressionsList[0].expression.condition.name === 'true' ||\n             this.expressionsList[0].expression.condition.name === 'false' ||\n             this.expressionsList[0].expression.condition.name === 'empty' ||\n             this.expressionsList[0].expression.condition.name === 'in')) {\n            return true;\n        }\n\n        const selectableExpressionsCount = this.expressionsList.filter(exp =>\n            (exp.beforeOperator === 1 || exp.afterOperator === 1) &&\n            (exp.expression.condition.name === 'equals' ||\n             exp.expression.condition.name === 'true' ||\n             exp.expression.condition.name === 'false' ||\n             exp.expression.condition.name === 'empty' ||\n             exp.expression.condition.name === 'in')).length;\n\n        return selectableExpressionsCount === this.expressionsList.length;\n    }\n\n    private areExpressionsValuesInTheList() {\n        if (this.column.dataType === DataType.Boolean) {\n            return true;\n        }\n\n        if (this.filterValues.size === 1) {\n            const firstValue = this.filterValues.values().next().value;\n\n            if (!firstValue && firstValue !== 0) {\n                return true;\n            }\n        }\n\n        for (let index = 0; index < this.uniqueValues.length; index++) {\n            if (this.filterValues.has(this.uniqueValues[index])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public populateColumnData() {\n        if (this.grid.uniqueColumnValuesStrategy) {\n            this.renderColumnValuesRemotely();\n        } else {\n            this.renderColumnValuesFromData();\n        }\n    }\n\n    private renderColumnValuesRemotely() {\n        this.excelStyleSearch.isLoading = true;\n        const expressionsTree: FilteringExpressionsTree = this.getColumnFilterExpressionsTree();\n\n        this.grid.uniqueColumnValuesStrategy(this.column, expressionsTree, (colVals: any[]) => {\n            const columnValues = (this.column.dataType === DataType.Date) ?\n                colVals.map(val => val ? val.toDateString() : val) : colVals;\n\n            this.renderValues(columnValues);\n            this.excelStyleSearch.isLoading = false;\n            this.excelStyleSearch.refreshSize();\n        });\n    }\n\n    public renderColumnValuesFromData() {\n        let data = this.column.gridAPI.get_all_data(this.grid.id);\n        const expressionsTree = this.getColumnFilterExpressionsTree();\n\n        if (expressionsTree.filteringOperands.length) {\n            const state = { expressionsTree: expressionsTree };\n            data = DataUtil.filter(cloneArray(data), state);\n        }\n\n        const columnField = this.column.field;\n        const columnValues = (this.column.dataType === DataType.Date) ?\n            data.map(record => record[columnField] ? record[columnField].toDateString() : record[columnField]) :\n            data.map(record => record[columnField]);\n\n        this.renderValues(columnValues);\n    }\n\n    private renderValues(columnValues: any[]) {\n        this.generateUniqueValues(columnValues);\n        this.generateFilterValues(this.column.dataType === DataType.Date);\n        this.generateListData();\n    }\n\n    private generateUniqueValues(columnValues: any[]) {\n        this.uniqueValues = Array.from(new Set(columnValues));\n    }\n\n    private generateFilterValues(isDateColumn: boolean = false) {\n        if (isDateColumn) {\n            this.filterValues = new Set<any>(this.expressionsList.reduce((arr, e) => {\n                if (e.expression.condition.name === 'in') {\n                    return [ ...arr, ...Array.from((e.expression.searchVal as Set<any>).values()).map(v =>\n                        new Date(v).toDateString()) ];\n                }\n                return [ ...arr, ...[e.expression.searchVal ? e.expression.searchVal.toDateString() : e.expression.searchVal] ];\n            }, []));\n        } else {\n            this.filterValues = new Set<any>(this.expressionsList.reduce((arr, e) => {\n                if (e.expression.condition.name === 'in') {\n                    return [ ...arr, ...Array.from((e.expression.searchVal as Set<any>).values()) ];\n                }\n                return [ ...arr, ...[e.expression.searchVal] ];\n            }, []));\n        }\n    }\n\n    private generateListData() {\n        this.listData = new Array<FilterListItem>();\n\n        const shouldUpdateSelection = this.areExpressionsSelectable() && this.areExpressionsValuesInTheList();\n\n        if (this.column.dataType === DataType.Boolean) {\n            this.addBooleanItems();\n        } else {\n            this.addItems(shouldUpdateSelection);\n        }\n\n        this.listData.sort((a, b) => this.sortData(a, b));\n\n        if (this.column.dataType === DataType.Date) {\n            this.uniqueValues = this.uniqueValues.map(value => new Date(value));\n        }\n\n        if (this.containsNullOrEmpty) {\n            this.addBlanksItem(shouldUpdateSelection);\n        }\n\n        this.addSelectAllItem();\n\n        if (!(this.cdr as any).destroyed) {\n            this.cdr.detectChanges();\n        }\n    }\n\n    private getColumnFilterExpressionsTree() {\n        const gridExpressionsTree: IFilteringExpressionsTree = this.grid.filteringExpressionsTree;\n        const expressionsTree = new FilteringExpressionsTree(gridExpressionsTree.operator, gridExpressionsTree.fieldName);\n\n        for (const operand of gridExpressionsTree.filteringOperands) {\n            if (operand instanceof FilteringExpressionsTree) {\n                const columnExprTree = operand as FilteringExpressionsTree;\n                if (columnExprTree.fieldName === this.column.field) {\n                    break;\n                }\n            }\n            expressionsTree.filteringOperands.push(operand);\n        }\n\n        return expressionsTree;\n    }\n\n    private addBooleanItems() {\n        this.selectAllSelected = true;\n        this.selectAllIndeterminate = false;\n        this.uniqueValues.forEach(element => {\n            const filterListItem = new FilterListItem();\n            if (element !== undefined && element !== null && element !== '') {\n                if (this.column.filteringExpressionsTree) {\n                    if (element === true && this.expressionsList.find(exp => exp.expression.condition.name === 'true' )) {\n                        filterListItem.isSelected = true;\n                        this.selectAllIndeterminate = true;\n                    } else if (element === false && this.expressionsList.find(exp => exp.expression.condition.name === 'false' )) {\n                            filterListItem.isSelected = true;\n                            this.selectAllIndeterminate = true;\n                    } else {\n                        filterListItem.isSelected = false;\n                    }\n                } else {\n                    filterListItem.isSelected = true;\n                }\n                filterListItem.value = element;\n                filterListItem.label = element;\n                filterListItem.indeterminate = false;\n                this.listData.push(filterListItem);\n            } else {\n                this.containsNullOrEmpty = true;\n            }\n        });\n    }\n\n    private addItems(shouldUpdateSelection: boolean) {\n        this.selectAllSelected = true;\n        this.selectAllIndeterminate = false;\n        this.uniqueValues.forEach(element => {\n            if (element !== undefined && element !== null && element !== '') {\n                const filterListItem = new FilterListItem();\n                if (this.column.filteringExpressionsTree) {\n                    if (shouldUpdateSelection) {\n                        if (this.filterValues.has(element)) {\n                            filterListItem.isSelected = true;\n                        } else {\n                            filterListItem.isSelected = false;\n                        }\n                        this.selectAllIndeterminate = true;\n                    } else {\n                        filterListItem.isSelected = false;\n                        this.selectAllSelected = false;\n                    }\n                } else {\n                    filterListItem.isSelected = true;\n                }\n                if (this.column.dataType === DataType.Date) {\n                    filterListItem.value = new Date(element);\n                    filterListItem.label = new Date(element);\n                } else {\n                    filterListItem.value = element;\n                    filterListItem.label = element;\n                }\n                filterListItem.indeterminate = false;\n                this.listData.push(filterListItem);\n            } else {\n                this.containsNullOrEmpty = true;\n            }\n        });\n    }\n\n    private addSelectAllItem() {\n        const selectAll =  new FilterListItem();\n        selectAll.isSelected = this.selectAllSelected;\n        selectAll.value = this.grid.resourceStrings.igx_grid_excel_select_all;\n        selectAll.label = this.grid.resourceStrings.igx_grid_excel_select_all;\n        selectAll.indeterminate = this.selectAllIndeterminate;\n        selectAll.isSpecial = true;\n        this.listData.unshift(selectAll);\n    }\n\n    private addBlanksItem(shouldUpdateSelection) {\n        const blanks =  new FilterListItem();\n        if (this.column.filteringExpressionsTree) {\n            if (shouldUpdateSelection) {\n                if (this.filterValues.has(null)) {\n                    blanks.isSelected = true;\n                } else {\n                    blanks.isSelected = false;\n                }\n            }\n        } else {\n            blanks.isSelected = true;\n        }\n        blanks.value = null;\n        blanks.label = this.grid.resourceStrings.igx_grid_excel_blanks;\n        blanks.indeterminate = false;\n        blanks.isSpecial = true;\n        this.listData.unshift(blanks);\n    }\n\n    private sortData(a: FilterListItem, b: FilterListItem) {\n        let valueA = a.value;\n        let valueB = b.value;\n        if (typeof(a) === DataType.String) {\n            valueA = a.value.toUpperCase();\n            valueB = b.value.toUpperCase();\n        }\n        if (valueA < valueB) {\n            return -1;\n        } else if (valueA > valueB) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    private selectAllFilterItems() {\n        this.listData.forEach(filterListItem => {\n            filterListItem.isSelected = true;\n            filterListItem.indeterminate = false;\n        });\n        this.excelStyleSearch.cdr.detectChanges();\n    }\n\n    // TODO: sort members by access modifier\n\n    get sortingTemplate() {\n        if (this.grid.excelStyleSortingTemplateDirective) {\n            return this.grid.excelStyleSortingTemplateDirective.template;\n        } else {\n            return this.defaultExcelStyleSortingTemplate;\n        }\n    }\n\n    get movingTemplate() {\n        if (this.grid.excelStyleMovingTemplateDirective) {\n            return this.grid.excelStyleMovingTemplateDirective.template;\n        } else {\n            return this.defaultExcelStyleMovingTemplate;\n        }\n    }\n\n    get pinningTemplate() {\n        if (this.grid.excelStylePinningTemplateDirective) {\n            return this.grid.excelStylePinningTemplateDirective.template;\n        } else {\n            return this.defaultExcelStylePinningTemplate;\n        }\n    }\n\n    get hidingTemplate() {\n        if (this.grid.excelStyleHidingTemplateDirective) {\n            return this.grid.excelStyleHidingTemplateDirective.template;\n        } else {\n            return this.defaultExcelStyleHidingTemplate;\n        }\n    }\n\n    get applyButtonDisabled() {\n        return  (this.excelStyleSearch.filteredData && this.excelStyleSearch.filteredData.length === 0) ||\n                (this.listData[0] && !this.listData[0].isSelected && !this.listData[0].indeterminate);\n    }\n\n    public applyFilter() {\n        const filterTree = new FilteringExpressionsTree(FilteringLogic.Or, this.column.field);\n        const selectedItems = this.listData.slice(1, this.listData.length).filter(el => el.isSelected === true);\n        const unselectedItem = this.listData.slice(1, this.listData.length).find(el => el.isSelected === false);\n\n        if (unselectedItem) {\n            if (selectedItems.length <= IgxGridExcelStyleFilteringComponent.filterOptimizationThreshold) {\n                selectedItems.forEach(element => {\n                    let condition = null;\n                    if (element.value !== null && element.value !== undefined) {\n                        if (this.column.dataType === DataType.Boolean) {\n                            condition = this.createCondition(element.value.toString());\n                        } else {\n                            condition = this.createCondition('equals');\n                        }\n                    } else {\n                        condition = this.createCondition('empty');\n                    }\n                    filterTree.filteringOperands.push({\n                        condition: condition,\n                        fieldName: this.column.field,\n                        ignoreCase: this.column.filteringIgnoreCase,\n                        searchVal: element.value\n                    });\n                });\n            } else {\n                const blanksItemIndex = selectedItems.findIndex(e => e.value === null || e.value === undefined);\n                let blanksItem: any;\n                if (blanksItemIndex >= 0) {\n                    blanksItem = selectedItems[blanksItemIndex];\n                    selectedItems.splice(blanksItemIndex, 1);\n                }\n\n                filterTree.filteringOperands.push({\n                    condition: this.createCondition('in'),\n                    fieldName: this.column.field,\n                    ignoreCase: this.column.filteringIgnoreCase,\n                    searchVal: new Set(this.column.dataType === DataType.Date ?\n                        selectedItems.map(d => new Date(d.value.getFullYear(), d.value.getMonth(), d.value.getDate()).toISOString()) :\n                        selectedItems.map(e => e.value))\n                });\n\n                if (blanksItem) {\n                    filterTree.filteringOperands.push({\n                        condition: this.createCondition('empty'),\n                        fieldName: this.column.field,\n                        ignoreCase: this.column.filteringIgnoreCase,\n                        searchVal: blanksItem.value\n                    });\n                }\n            }\n\n            this.expressionsList = new Array<ExpressionUI>();\n            this.filteringService.filterInternal(this.column.field, filterTree);\n        } else {\n            this.filteringService.clearFilter(this.column.field);\n        }\n\n        this.closeDropdown();\n    }\n\n    public closeDropdown() {\n        if (this.overlayComponentId) {\n            this.overlayService.hide(this.overlayComponentId);\n            this.overlayComponentId = null;\n        }\n    }\n\n    public onKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.ESCAPE || eventArgs.key === KEYS.ESCAPE_IE) {\n            this.closeDropdown();\n        }\n        eventArgs.stopPropagation();\n    }\n\n    public clearFilter() {\n        this.filteringService.clearFilter(this.column.field);\n        this.selectAllFilterItems();\n    }\n\n    public onClearFilterKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.ENTER) {\n            this.clearFilter();\n        }\n    }\n\n    public showCustomFilterItem(): boolean {\n        const exprTree = this.column.filteringExpressionsTree;\n        return exprTree && exprTree.filteringOperands && exprTree.filteringOperands.length &&\n            !((exprTree.filteringOperands[0] as IFilteringExpression).condition &&\n            (exprTree.filteringOperands[0] as IFilteringExpression).condition.name === 'in');\n    }\n\n    private createCondition(conditionName: string) {\n        switch (this.column.dataType) {\n            case DataType.Boolean:\n                return IgxBooleanFilteringOperand.instance().condition(conditionName);\n            case DataType.Number:\n                return IgxNumberFilteringOperand.instance().condition(conditionName);\n            case DataType.Date:\n                return IgxDateFilteringOperand.instance().condition(conditionName);\n            default:\n                return IgxStringFilteringOperand.instance().condition(conditionName);\n        }\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    DoCheck,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgZone,\n    OnInit,\n    Inject,\n    OnDestroy,\n    NgModuleRef\n} from '@angular/core';\nimport { DataType } from '../data-operations/data-util';\nimport { SortingDirection } from '../data-operations/sorting-expression.interface';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxFilteringService } from './filtering/grid-filtering.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxOverlayService } from '../services/overlay/overlay';\nimport { IgxGridExcelStyleFilteringComponent } from './filtering/excel-style/grid.excel-style-filtering.component';\nimport { OverlaySettings, PositionSettings, VerticalAlignment } from '../services/overlay/utilities';\nimport { AutoPositionStrategy } from '../services/overlay/position/auto-position-strategy';\nimport { useAnimation } from '@angular/animations';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { fadeIn, fadeOut } from '../animations/main';\nimport { AbsoluteScrollStrategy } from '../services/overlay/scroll/absolute-scroll-strategy';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-header',\n    templateUrl: './grid-header.component.html'\n})\nexport class IgxGridHeaderComponent implements DoCheck, OnInit, OnDestroy {\n\n    private _componentOverlayId: string;\n    private _filterMenuPositionSettings: PositionSettings;\n    private _filterMenuOverlaySettings: OverlaySettings;\n    private _destroy$ = new Subject<boolean>();\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public gridID: string;\n\n    @HostBinding('class')\n    get styleClasses(): string {\n        const defaultClasses = [\n            'igx-grid__th--fw',\n            this.column.headerClasses\n        ];\n\n        const classList = {\n            'igx-grid__th': !this.column.columnGroup,\n            'asc': this.ascending,\n            'desc': this.descending,\n            'igx-grid__th--number': this.column.dataType === DataType.Number,\n            'igx-grid__th--sortable': this.column.sortable,\n            'igx-grid__th--filtrable': this.column.filterable && this.grid.filteringService.isFilterRowVisible,\n            'igx-grid__th--sorted': this.sorted\n        };\n\n        for (const klass of Object.keys(classList)) {\n            if (classList[klass]) {\n                defaultClasses.push(klass);\n            }\n        }\n        return defaultClasses.join(' ');\n    }\n\n    @HostBinding('style.height.rem')\n    get height() {\n        if (this.grid.hasColumnGroups) {\n            return (this.grid.maxLevelHeaderDepth + 1 - this.column.level) * this.grid.defaultRowHeight / this.grid._baseFontSize;\n        }\n        return null;\n    }\n\n    get ascending() {\n        return this.sortDirection === SortingDirection.Asc;\n    }\n\n    get descending() {\n        return this.sortDirection === SortingDirection.Desc;\n    }\n\n    get sortingIcon(): string {\n        if (this.sortDirection !== SortingDirection.None) {\n            // arrow_downward and arrow_upward\n            // are material icons ligature strings\n            return this.sortDirection === SortingDirection.Asc ? 'arrow_upward' : 'arrow_downward';\n        }\n        return 'arrow_upward';\n    }\n\n    get sorted() {\n        return this.sortDirection !== SortingDirection.None;\n    }\n\n    get filterIconClassName() {\n        return this.column.filteringExpressionsTree ? 'igx-excel-filter__icon--filtered' : 'igx-excel-filter__icon';\n    }\n\n    @HostBinding('attr.role')\n    public hostRole = 'columnheader';\n\n    @HostBinding('attr.tabindex')\n    public tabindex = -1;\n\n    @HostBinding('attr.id')\n    get headerID() {\n        return `${this.gridID}_${this.column.field}`;\n    }\n\n    protected sortDirection = SortingDirection.None;\n\n    constructor(\n        public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        public colResizingService: IgxColumnResizingService,\n        public cdr: ChangeDetectorRef,\n        public elementRef: ElementRef,\n        public zone: NgZone,\n        private _filteringService: IgxFilteringService,\n        private _moduleRef: NgModuleRef<any>,\n        @Inject(IgxOverlayService) private _overlayService: IgxOverlayService\n    ) { }\n\n    public ngOnInit() {\n        this.initFilteringSettings();\n    }\n\n    public ngDoCheck() {\n        this.getSortDirection();\n        this.cdr.markForCheck();\n    }\n\n    ngOnDestroy(): void {\n        this._destroy$.next(true);\n        this._destroy$.complete();\n\n        if (this._componentOverlayId) {\n            this._overlayService.hide(this._componentOverlayId);\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        if (!this.colResizingService.isColumnResizing) {\n            event.stopPropagation();\n            if (this.grid.filteringService.isFilterRowVisible) {\n                if (this.column.filterable && !this.column.columnGroup &&\n                    !this.grid.filteringService.isFilterComplex(this.column.field)) {\n                    this.grid.filteringService.filteredColumn = this.column;\n                }\n            } else if (this.column.sortable) {\n                this.triggerSort();\n            }\n        }\n    }\n\n    public onFilteringIconClick(event) {\n        event.stopPropagation();\n\n        this.toggleFilterDropdown();\n    }\n\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    protected getSortDirection() {\n        const expr = this.gridAPI.grid.sortingExpressions.find((x) => x.fieldName === this.column.field);\n        this.sortDirection = expr ? expr.dir : SortingDirection.None;\n    }\n\n    public onSortingIconClick(event) {\n        if (this.grid.filteringService.isFilterRowVisible) {\n            event.stopPropagation();\n            this.triggerSort();\n        }\n    }\n\n    private triggerSort() {\n        const groupingExpr = this.grid.groupingExpressions ?\n            this.grid.groupingExpressions.find((expr) => expr.fieldName === this.column.field) : null;\n        const sortDir = groupingExpr ?\n            this.sortDirection + 1 > SortingDirection.Desc ? SortingDirection.Asc : SortingDirection.Desc\n            : this.sortDirection + 1 > SortingDirection.Desc ? SortingDirection.None : this.sortDirection + 1;\n        this.sortDirection = sortDir;\n        this.grid.sort({ fieldName: this.column.field, dir: this.sortDirection, ignoreCase: this.column.sortingIgnoreCase,\n            strategy: this.column.sortStrategy });\n    }\n\n    private toggleFilterDropdown() {\n        if (!this._componentOverlayId) {\n            const headerTarget = this.elementRef.nativeElement;\n            const filterIconTarget = headerTarget.querySelector('.' + this.filterIconClassName);\n\n            this._filterMenuOverlaySettings.positionStrategy.settings.target = filterIconTarget;\n            this._filterMenuOverlaySettings.outlet = this.grid.outlet;\n\n            this._componentOverlayId =\n                this._overlayService.attach(IgxGridExcelStyleFilteringComponent, this._filterMenuOverlaySettings, this._moduleRef);\n            this._overlayService.show(this._componentOverlayId, this._filterMenuOverlaySettings);\n        }\n    }\n\n    private initFilteringSettings() {\n        this._filterMenuPositionSettings = {\n            verticalStartPoint: VerticalAlignment.Bottom,\n            openAnimation: useAnimation(fadeIn, {\n                params: {\n                    duration: '250ms'\n                }\n            }),\n            closeAnimation: useAnimation(fadeOut, {\n                params: {\n                    duration: '200ms'\n                }\n            })\n        };\n\n        this._filterMenuOverlaySettings = {\n            closeOnOutsideClick: true,\n            modal: false,\n            positionStrategy: new AutoPositionStrategy(this._filterMenuPositionSettings),\n            scrollStrategy: new AbsoluteScrollStrategy()\n        };\n\n        this._overlayService.onOpening.pipe(\n            filter((overlay) => overlay.id === this._componentOverlayId),\n            takeUntil(this._destroy$)).subscribe((eventArgs) => {\n                this.onOverlayOpening(eventArgs);\n            });\n\n        this._overlayService.onClosed.pipe(\n            filter(overlay => overlay.id === this._componentOverlayId),\n            takeUntil(this._destroy$)).subscribe(() => {\n                this.onOverlayClosed();\n            });\n    }\n\n    private onOverlayOpening(eventArgs) {\n        const instance = eventArgs.componentRef.instance as IgxGridExcelStyleFilteringComponent;\n        if (instance) {\n            instance.initialize(this.column, this._filteringService, this._overlayService, eventArgs.id);\n        }\n    }\n\n    private onOverlayClosed() {\n        this._componentOverlayId = null;\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    Input,\n    TemplateRef,\n    ViewChild,\n    HostBinding,\n    AfterViewInit,\n    ElementRef,\n    HostListener,\n    OnInit,\n    ChangeDetectionStrategy,\n    DoCheck\n} from '@angular/core';\nimport { IgxColumnComponent } from '../column.component';\nimport { IFilteringExpression } from '../../data-operations/filtering-expression.interface';\nimport { IBaseChipEventArgs, IgxChipsAreaComponent, IgxChipComponent } from '../../chips';\nimport { IgxFilteringService, ExpressionUI } from './grid-filtering.service';\nimport { KEYS } from '../../core/utils';\nimport { IgxGridNavigationService } from '../grid-navigation.service';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-filtering-cell',\n    templateUrl: './grid-filtering-cell.component.html'\n})\nexport class IgxGridFilteringCellComponent implements AfterViewInit, OnInit, DoCheck {\n\n    private baseClass = 'igx-grid__filtering-cell-indicator';\n    private currentTemplate = null;\n\n    public expressionsList: ExpressionUI[];\n    public moreFiltersCount = 0;\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @ViewChild('emptyFilter', { read: TemplateRef, static: true })\n    protected emptyFilter: TemplateRef<any>;\n\n    @ViewChild('defaultFilter', { read: TemplateRef, static: true })\n    protected defaultFilter: TemplateRef<any>;\n\n    @ViewChild('complexFilter', { read: TemplateRef, static: true })\n    protected complexFilter: TemplateRef<any>;\n\n    @ViewChild('chipsArea', { read: IgxChipsAreaComponent, static: false })\n    protected chipsArea: IgxChipsAreaComponent;\n\n    @ViewChild('moreIcon', { read: ElementRef, static: false })\n    protected moreIcon: ElementRef;\n\n    @ViewChild('ghostChip', { read: IgxChipComponent, static: false })\n    protected ghostChip: IgxChipComponent;\n\n    @ViewChild('complexChip', { read: IgxChipComponent, static: false })\n    protected complexChip: IgxChipComponent;\n\n    @HostBinding('class.igx-grid__filtering-cell')\n    public cssClass = 'igx-grid__filtering-cell';\n\n    constructor(public cdr: ChangeDetectorRef, public filteringService: IgxFilteringService, public navService: IgxGridNavigationService) {\n        this.filteringService.subscribeToEvents();\n    }\n\n    ngOnInit(): void {\n        this.filteringService.columnToMoreIconHidden.set(this.column.field, true);\n    }\n\n    ngAfterViewInit(): void {\n        this.updateFilterCellArea();\n    }\n\n    public ngDoCheck() {\n        this.updateFilterCellArea();\n    }\n\n    @HostListener('keydown.tab', ['$event'])\n    public onTabKeyDown(eventArgs) {\n\n        if (this.isLastElementFocused()) {\n            this.filteringService.grid.navigation.navigateNextFilterCell(this.column, eventArgs);\n        }\n        eventArgs.stopPropagation();\n    }\n\n    @HostListener('keydown.shift.tab', ['$event'])\n    public onShiftTabKeyDown(eventArgs) {\n        if (this.isFirstElementFocused()) {\n            this.filteringService.grid.navigation.navigatePrevFilterCell(this.column, eventArgs);\n        }\n        eventArgs.stopPropagation();\n    }\n\n    /**\n     * Returns whether a chip with a given index is visible or not.\n     */\n    public isChipVisible(index: number) {\n        const expression = this.expressionsList[index];\n        return !!(expression && expression.isVisible);\n    }\n\n    /**\n     * Updates the filtering cell area.\n     */\n    public updateFilterCellArea() {\n        this.expressionsList = this.filteringService.getExpressions(this.column.field);\n        this.updateVisibleFilters();\n    }\n\n    get template(): TemplateRef<any> {\n        if (!this.column.filterable) {\n            this.currentTemplate = null;\n            return null;\n        }\n\n        if (this.column.filterCellTemplate) {\n            this.currentTemplate = this.column.filterCellTemplate;\n            return this.column.filterCellTemplate;\n        }\n\n        const expressionTree = this.column.filteringExpressionsTree;\n        if (!expressionTree || expressionTree.filteringOperands.length === 0) {\n            this.currentTemplate = this.emptyFilter;\n            return this.emptyFilter;\n        }\n\n        if (this.filteringService.isFilterComplex(this.column.field)) {\n            this.currentTemplate = this.complexFilter;\n            return this.complexFilter;\n        }\n\n        this.currentTemplate = this.defaultFilter;\n        return this.defaultFilter;\n    }\n\n    /**\n     * Gets the context passed to the filter template.\n     * @memberof IgxGridFilteringCellComponent\n     */\n    get context() {\n        return {\n            column: this.column\n        };\n    }\n\n    /**\n     * Chip clicked event handler.\n     */\n    public onChipClicked(expression?: IFilteringExpression) {\n        if (expression) {\n            this.expressionsList.forEach((item) => {\n                item.isSelected = (item.expression === expression);\n            });\n        } else if (this.expressionsList.length > 0) {\n            this.expressionsList.forEach((item) => {\n                item.isSelected = false;\n            });\n            this.expressionsList[0].isSelected = true;\n        }\n\n        const index = this.filteringService.unpinnedFilterableColumns.indexOf(this.column);\n        if (index >= 0 && !this.isColumnRightVisible(index)) {\n            this.filteringService.scrollToFilterCell(this.filteringService.unpinnedFilterableColumns[index], true);\n        } else if (index >= 0 && !this.isColumnLeftVisible(index)) {\n            this.filteringService.scrollToFilterCell(this.filteringService.unpinnedFilterableColumns[index], false);\n        }\n\n        this.filteringService.filteredColumn = this.column;\n        this.filteringService.isFilterRowVisible = true;\n        this.filteringService.selectedExpression = expression;\n    }\n\n    /**\n     * Chip removed event handler.\n     */\n    public onChipRemoved(eventArgs: IBaseChipEventArgs, item: ExpressionUI): void {\n        const indexToRemove = this.expressionsList.indexOf(item);\n        this.removeExpression(indexToRemove);\n        this.focusChip();\n    }\n\n    /**\n     * Clears the filtering.\n     */\n    public clearFiltering(): void {\n        this.filteringService.clearFilter(this.column.field);\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Chip keydown event handler.\n     */\n    public onChipKeyDown(eventArgs: KeyboardEvent, expression?: IFilteringExpression) {\n        if (eventArgs.key === KEYS.ENTER) {\n            eventArgs.preventDefault();\n            this.onChipClicked(expression);\n        }\n    }\n\n    /**\n     * Returns the filtering indicator class.\n     */\n    public filteringIndicatorClass() {\n        return {\n            [this.baseClass]: !this.isMoreIconHidden(),\n            [`${this.baseClass}--hidden`]: this.isMoreIconHidden()\n        };\n    }\n\n    /**\n     * Focus a chip depending on the current visible template.\n     */\n    public focusChip(focusFirst: boolean = false) {\n        if (this.currentTemplate === this.defaultFilter) {\n            if (focusFirst) {\n                this.focusFirstElement();\n            } else {\n                this.focusElement();\n            }\n        } else if (this.currentTemplate === this.emptyFilter) {\n            this.ghostChip.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n        } else if (this.currentTemplate === this.complexFilter) {\n            this.complexChip.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n        }\n    }\n\n    private removeExpression(indexToRemove: number) {\n        if (indexToRemove === 0 && this.expressionsList.length === 1) {\n            this.clearFiltering();\n            return;\n        }\n\n        this.filteringService.removeExpression(this.column.field, indexToRemove);\n\n        this.updateVisibleFilters();\n        this.filteringService.filterInternal(this.column.field);\n    }\n\n    private isMoreIconHidden(): boolean {\n        return this.filteringService.columnToMoreIconHidden.get(this.column.field);\n    }\n\n    private updateVisibleFilters() {\n        this.expressionsList.forEach((ex) => ex.isVisible = true);\n\n        if (this.moreIcon) {\n            this.filteringService.columnToMoreIconHidden.set(this.column.field, true);\n        }\n        this.cdr.detectChanges();\n\n        if (this.chipsArea && this.expressionsList.length > 1) {\n            const areaWidth = this.chipsArea.element.nativeElement.offsetWidth;\n            let viewWidth = 0;\n            const chipsAreaElements = this.chipsArea.element.nativeElement.children;\n            let visibleChipsCount = 0;\n            const moreIconWidth = this.moreIcon.nativeElement.offsetWidth -\n                parseInt(document.defaultView.getComputedStyle(this.moreIcon.nativeElement)['margin-left'], 10);\n\n            for (let index = 0; index < chipsAreaElements.length - 1; index++) {\n                if (viewWidth + chipsAreaElements[index].offsetWidth < areaWidth) {\n                    viewWidth += chipsAreaElements[index].offsetWidth;\n                    if (index % 2 === 0) {\n                        visibleChipsCount++;\n                    } else {\n                        viewWidth += parseInt(document.defaultView.getComputedStyle(chipsAreaElements[index])['margin-left'], 10);\n                        viewWidth += parseInt(document.defaultView.getComputedStyle(chipsAreaElements[index])['margin-right'], 10);\n                    }\n                } else {\n                    if (index % 2 !== 0 && viewWidth + moreIconWidth > areaWidth) {\n                        visibleChipsCount--;\n                    } else if (visibleChipsCount > 0 && viewWidth - chipsAreaElements[index - 1].offsetWidth + moreIconWidth > areaWidth) {\n                        visibleChipsCount--;\n                    }\n                    this.moreFiltersCount = this.expressionsList.length - visibleChipsCount;\n                    this.filteringService.columnToMoreIconHidden.set(this.column.field, false);\n                    break;\n                }\n            }\n\n            for (let i = visibleChipsCount; i < this.expressionsList.length; i++) {\n                this.expressionsList[i].isVisible = false;\n            }\n            this.cdr.detectChanges();\n        }\n    }\n\n    private isFirstElementFocused(): boolean {\n        return !(this.chipsArea && this.chipsArea.chipsList.length > 0 &&\n            this.chipsArea.chipsList.first.elementRef.nativeElement.querySelector(`.igx-chip__item`) !== document.activeElement);\n    }\n\n    private isLastElementFocused(): boolean {\n        if (this.chipsArea) {\n            if (this.isMoreIconHidden() && this.chipsArea.chipsList.last.elementRef.nativeElement.querySelector(`.igx-chip__remove`) !==\n                document.activeElement) {\n                return false;\n            } else if (!this.isMoreIconHidden() && this.moreIcon.nativeElement !== document.activeElement) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private focusFirstElement(): void {\n        if (this.chipsArea.chipsList.length > 0) {\n            this.chipsArea.chipsList.first.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n        } else {\n            this.moreIcon.nativeElement.focus();\n        }\n    }\n\n    private focusElement(): void {\n        if (this.filteringService.shouldFocusNext) {\n            if (!this.isMoreIconHidden() && this.chipsArea.chipsList.length === 0) {\n                this.moreIcon.nativeElement.focus();\n            } else {\n                this.chipsArea.chipsList.first.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n            }\n        } else {\n            if (!this.isMoreIconHidden()) {\n                this.moreIcon.nativeElement.focus();\n            } else {\n                this.chipsArea.chipsList.last.elementRef.nativeElement.querySelector(`.igx-chip__remove`).focus();\n            }\n        }\n    }\n\n    private isColumnRightVisible(columnIndex: number): boolean {\n        if (this.filteringService.areAllColumnsInView) {\n            return true;\n        }\n        let currentColumnRight = 0;\n        for (let index = 0; index < this.filteringService.unpinnedColumns.length; index++) {\n            currentColumnRight += parseInt(this.filteringService.unpinnedColumns[index].width, 10);\n            if (this.filteringService.unpinnedColumns[index] === this.filteringService.unpinnedFilterableColumns[columnIndex]) {\n                break;\n            }\n        }\n        const width = this.filteringService.displayContainerWidth + this.filteringService.displayContainerScrollLeft;\n        return currentColumnRight <= width;\n    }\n\n    private isColumnLeftVisible(columnIndex: number): boolean {\n        if (this.filteringService.areAllColumnsInView) {\n            return true;\n        }\n        let currentColumnLeft = 0;\n        for (let index = 0; index < this.filteringService.unpinnedColumns.length; index++) {\n            if (this.filteringService.unpinnedColumns[index] === this.filteringService.unpinnedFilterableColumns[columnIndex]) {\n                break;\n            }\n            currentColumnLeft += parseInt(this.filteringService.unpinnedColumns[index].width, 10);\n        }\n        return currentColumnLeft >= this.filteringService.displayContainerScrollLeft;\n    }\n}\n","import {\n    Component,\n    HostBinding,\n    Input,\n    ViewChild,\n    QueryList,\n    ViewChildren,\n    forwardRef,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    DoCheck,\n    ElementRef,\n    HostListener\n} from '@angular/core';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxFilteringService } from './filtering/grid-filtering.service';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { IgxGridFilteringCellComponent } from './filtering/grid-filtering-cell.component';\nimport { isIE } from '../core/utils';\n\nconst Z_INDEX = 9999;\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-header-group',\n    templateUrl: './grid-header-group.component.html'\n})\nexport class IgxGridHeaderGroupComponent implements DoCheck {\n\n    @HostBinding('style.-ms-grid-row-span')\n    get gridRowSpan(): number {\n        return this.column.gridRowSpan;\n    }\n\n    @HostBinding('style.-ms-grid-column-span')\n    get gridColumnSpan(): number {\n        return this.column.gridColumnSpan;\n    }\n\n\n    @HostBinding('style.grid-row-end')\n    get rowEnd(): number {\n        return this.column.rowEnd;\n    }\n\n    @HostBinding('style.grid-column-end')\n    get colEnd(): number {\n        return this.column.colEnd;\n    }\n\n    @HostBinding('style.-ms-grid-row')\n    @HostBinding('style.grid-row-start')\n    get rowStart(): number {\n        return this.column.rowStart;\n    }\n\n    @HostBinding('style.-ms-grid-column')\n    @HostBinding('style.grid-column-start')\n    get colStart(): number {\n        return this.column.colStart;\n    }\n\n\n    /**\n     * Gets the column of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @Input()\n    public column: IgxColumnComponent;\n\n    /**\n     * Gets the `id` of the grid in which the header group is stored.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @Input()\n    public gridID: string;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxGridHeaderComponent, { static: false })\n    public headerCell: IgxGridHeaderComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxGridFilteringCellComponent, { static: false })\n    public filterCell: IgxGridFilteringCellComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(forwardRef(() => IgxGridHeaderGroupComponent), { read: IgxGridHeaderGroupComponent })\n    public children: QueryList<IgxGridHeaderGroupComponent>;\n\n    /**\n     * Gets the width of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @HostBinding('style.min-width')\n    @HostBinding('style.flex-basis')\n    get width() {\n        return this.grid.getHeaderGroupWidth(this.column);\n    }\n\n    /**\n     * Gets the style classes of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @HostBinding('class')\n    get styleClasses(): string {\n        const defaultClasses = [\n            'igx-grid__thead-item',\n            this.column.headerGroupClasses\n        ];\n\n        const classList = {\n            'igx-grid__th--pinned': this.isPinned,\n            'igx-grid__th--pinned-last': this.isLastPinned,\n            'igx-grid__drag-col-header': this.isHeaderDragged,\n            'igx-grid__th--filtering': this.isFiltered\n        };\n\n        for (const className of Object.keys(classList)) {\n            if (classList[className]) {\n                defaultClasses.push(className);\n            }\n        }\n        return defaultClasses.join(' ');\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.z-index')\n    get zIndex() {\n        if (!this.column.pinned) {\n            return null;\n        }\n        return Z_INDEX - this.grid.pinnedColumns.indexOf(this.column);\n    }\n\n    /**\n     * Gets the grid of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Gets whether the header group belongs to a column that is filtered.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isFiltered(): boolean {\n        return this.filteringService.filteredColumn === this.column;\n    }\n\n    /**\n     * Gets whether the header group is stored in the last column in the pinned area.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isLastPinned(): boolean {\n        return !this.grid.hasColumnLayouts ? this.column.isLastPinned : false;\n    }\n\n    @HostBinding('style.display')\n    get groupDisplayStyle(): string {\n        return this.grid.hasColumnLayouts && this.column.children && !isIE() ? 'flex' : '';\n    }\n\n    /**\n     * Gets whether the header group is stored in a pinned column.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isPinned(): boolean {\n        return this.column.pinned;\n    }\n\n    /**\n     * Gets whether the header group belongs to a column that is moved.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isHeaderDragged(): boolean {\n        return this.grid.draggedColumn ===  this.column;\n    }\n\n    /**\n     * @hidden\n     */\n    get hasLastPinnedChildColumn(): boolean {\n        return this.column.allChildren.some(child => child.isLastPinned);\n    }\n\n    /**\n     * @hidden\n     */\n    get height() {\n        return this.element.nativeElement.getBoundingClientRect().height;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mousedown', ['$event'])\n    public onMouseDown(event): void {\n        // hack for preventing text selection in IE and Edge while dragging the resizer\n        event.preventDefault();\n    }\n\n    public ngDoCheck() {\n        this.cdr.markForCheck();\n    }\n\n    constructor(private cdr: ChangeDetectorRef,\n                public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n                public element: ElementRef,\n                public colResizingService: IgxColumnResizingService,\n                public filteringService: IgxFilteringService) { }\n}\n","import { IGridResourceStrings, GridResourceStringsEN } from './grid-resources';\nimport { ITimePickerResourceStrings, TimePickerResourceStringsEN } from './time-picker-resources';\nimport { PaginatorResourceStringsEN } from './paginator-resources';\nimport { cloneValue } from '../utils';\n\nexport interface IResourceStrings extends IGridResourceStrings, ITimePickerResourceStrings {}\n\n/**\n * @hidden\n */\nexport const CurrentResourceStrings = {\n    GridResStrings: cloneValue(GridResourceStringsEN),\n    TimePickerResStrings: cloneValue(TimePickerResourceStringsEN),\n    PaginatorResStrings: cloneValue(PaginatorResourceStringsEN)\n};\n\nfunction updateResourceStrings(currentStrings: IResourceStrings, newStrings: IResourceStrings ) {\n    for (const key of Object.keys(newStrings)) {\n        if (key in currentStrings) {\n            currentStrings[key] = newStrings[key];\n        }\n    }\n}\n\n/**\n * Changes the resource strings for all components in the application\n * ```\n * @param resourceStrings to be applied\n */\nexport function changei18n(resourceStrings: IResourceStrings) {\n    for (const key of Object.keys(CurrentResourceStrings)) {\n        updateResourceStrings(CurrentResourceStrings[key], resourceStrings);\n    }\n}\n\n/**\n * Returns current resource strings for all components\n */\nexport function getCurrentResourceStrings(): IResourceStrings {\n    return {\n            ...CurrentResourceStrings.GridResStrings,\n            ...CurrentResourceStrings.TimePickerResStrings\n    };\n}\n","export interface IGridResourceStrings {\n    igx_grid_groupByArea_message?: string;\n    igx_grid_emptyFilteredGrid_message?: string;\n    igx_grid_emptyGrid_message?: string;\n    igx_grid_filter?: string;\n    igx_grid_filter_row_close?: string;\n    igx_grid_filter_row_reset?: string;\n    igx_grid_filter_row_placeholder?: string;\n    igx_grid_filter_row_boolean_placeholder?: string;\n    igx_grid_filter_row_date_placeholder?: string;\n    igx_grid_filter_operator_and?: string;\n    igx_grid_complex_filter?: string;\n    igx_grid_filter_operator_or?: string;\n    igx_grid_filter_contains?: string;\n    igx_grid_filter_doesNotContain?: string;\n    igx_grid_filter_startsWith?: string;\n    igx_grid_filter_endsWith?: string;\n    igx_grid_filter_equals?: string;\n    igx_grid_filter_doesNotEqual?: string;\n    igx_grid_filter_empty?: string;\n    igx_grid_filter_notEmpty?: string;\n    igx_grid_filter_null?: string;\n    igx_grid_filter_notNull?: string;\n    igx_grid_filter_before?: string;\n    igx_grid_filter_after?: string;\n    igx_grid_filter_today?: string;\n    igx_grid_filter_yesterday?: string;\n    igx_grid_filter_thisMonth?: string;\n    igx_grid_filter_lastMonth?: string;\n    igx_grid_filter_nextMonth?: string;\n    igx_grid_filter_thisYear?: string;\n    igx_grid_filter_lastYear?: string;\n    igx_grid_filter_nextYear?: string;\n    igx_grid_filter_greaterThan?: string;\n    igx_grid_filter_lessThan?: string;\n    igx_grid_filter_greaterThanOrEqualTo?: string;\n    igx_grid_filter_lessThanOrEqualTo?: string;\n    igx_grid_filter_true?: string;\n    igx_grid_filter_false?: string;\n    igx_grid_filter_all?: string;\n    igx_grid_filter_condition_placeholder?: string;\n    igx_grid_summary_count?: string;\n    igx_grid_summary_min?: string;\n    igx_grid_summary_max?: string;\n    igx_grid_summary_sum?: string;\n    igx_grid_summary_average?: string;\n    igx_grid_summary_earliest?: string;\n    igx_grid_summary_latest?: string;\n    igx_grid_excel_filter_moving_left?: string;\n    igx_grid_excel_filter_moving_left_short?: string;\n    igx_grid_excel_filter_moving_right?: string;\n    igx_grid_excel_filter_moving_right_short?: string;\n    igx_grid_excel_filter_moving_header?: string;\n    igx_grid_excel_filter_sorting_asc?: string;\n    igx_grid_excel_filter_sorting_asc_short?: string;\n    igx_grid_excel_filter_sorting_desc?: string;\n    igx_grid_excel_filter_sorting_desc_short?: string;\n    igx_grid_excel_filter_sorting_header?: string;\n    igx_grid_excel_filter_clear?: string;\n    igx_grid_excel_custom_dialog_add?: string;\n    igx_grid_excel_custom_dialog_clear?: string;\n    igx_grid_excel_custom_dialog_header?: string;\n    igx_grid_excel_cancel?: string;\n    igx_grid_excel_apply?: string;\n    igx_grid_excel_search_placeholder?: string;\n    igx_grid_excel_select_all?: string;\n    igx_grid_excel_blanks?: string;\n    igx_grid_excel_hide?: string;\n    igx_grid_excel_pin?: string;\n    igx_grid_excel_unpin?: string;\n    igx_grid_excel_text_filter?: string;\n    igx_grid_excel_number_filter?: string;\n    igx_grid_excel_date_filter?: string;\n    igx_grid_excel_boolean_filter?: string;\n    igx_grid_excel_custom_filter?: string;\n    igx_grid_advanced_filter_title?: string;\n    igx_grid_advanced_filter_and_group?: string;\n    igx_grid_advanced_filter_or_group?: string;\n    igx_grid_advanced_filter_end_group?: string;\n    igx_grid_advanced_filter_create_and_group?: string;\n    igx_grid_advanced_filter_create_or_group?: string;\n    igx_grid_advanced_filter_and_label?: string;\n    igx_grid_advanced_filter_or_label?: string;\n    igx_grid_advanced_filter_add_condition?: string;\n    igx_grid_advanced_filter_ungroup?: string;\n    igx_grid_advanced_filter_delete?: string;\n    igx_grid_advanced_filter_delete_filters?: string;\n    igx_grid_advanced_filter_initial_text?: string;\n    igx_grid_advanced_filter_column_placeholder?: string;\n    igx_grid_advanced_filter_value_placeholder?: string;\n}\n\nexport const GridResourceStringsEN: IGridResourceStrings = {\n    igx_grid_groupByArea_message: 'Drag a column header and drop it here to group by that column.',\n    igx_grid_emptyFilteredGrid_message: 'No records found.',\n    igx_grid_emptyGrid_message: 'Grid has no data.',\n    igx_grid_filter: 'Filter',\n    igx_grid_filter_row_close: 'Close',\n    igx_grid_filter_row_reset: 'Reset',\n    igx_grid_filter_row_placeholder: 'Add filter value',\n    igx_grid_filter_row_boolean_placeholder: 'All',\n    igx_grid_filter_row_date_placeholder: 'Pick up date',\n    igx_grid_filter_operator_and: 'And',\n    igx_grid_filter_operator_or: 'Or',\n    igx_grid_complex_filter: 'Complex Filter',\n    igx_grid_filter_contains: 'Contains',\n    igx_grid_filter_doesNotContain: 'Does Not Contain',\n    igx_grid_filter_startsWith: 'Starts With',\n    igx_grid_filter_endsWith: 'Ends With',\n    igx_grid_filter_equals: 'Equals',\n    igx_grid_filter_doesNotEqual: 'Does Not Equal',\n    igx_grid_filter_empty: 'Empty',\n    igx_grid_filter_notEmpty: 'Not Empty',\n    igx_grid_filter_null: 'Null',\n    igx_grid_filter_notNull: 'Not Null',\n    igx_grid_filter_before: 'Before',\n    igx_grid_filter_after: 'After',\n    igx_grid_filter_today: 'Today',\n    igx_grid_filter_yesterday: 'Yesterday',\n    igx_grid_filter_thisMonth: 'This Month',\n    igx_grid_filter_lastMonth: 'Last Month',\n    igx_grid_filter_nextMonth: 'Next Month',\n    igx_grid_filter_thisYear: 'This Year',\n    igx_grid_filter_lastYear: 'Last Year',\n    igx_grid_filter_nextYear: 'Next Year',\n    igx_grid_filter_greaterThan: 'Greater Than',\n    igx_grid_filter_lessThan: 'Less Than',\n    igx_grid_filter_greaterThanOrEqualTo: 'Greater Than Or Equal To',\n    igx_grid_filter_lessThanOrEqualTo: 'Less Than Or Equal To',\n    igx_grid_filter_true: 'True',\n    igx_grid_filter_false: 'False',\n    igx_grid_filter_all: 'All',\n    igx_grid_filter_condition_placeholder: 'Select filter',\n    igx_grid_summary_count: 'Count',\n    igx_grid_summary_min: 'Min',\n    igx_grid_summary_max: 'Max',\n    igx_grid_summary_sum: 'Sum',\n    igx_grid_summary_average: 'Avg',\n    igx_grid_summary_earliest: 'Earliest',\n    igx_grid_summary_latest: 'Latest',\n    igx_grid_excel_filter_moving_left: 'move left',\n    igx_grid_excel_filter_moving_left_short: 'left',\n    igx_grid_excel_filter_moving_right: 'move right',\n    igx_grid_excel_filter_moving_right_short: 'right',\n    igx_grid_excel_filter_moving_header: 'move',\n    igx_grid_excel_filter_sorting_asc: 'ascending',\n    igx_grid_excel_filter_sorting_asc_short: 'asc',\n    igx_grid_excel_filter_sorting_desc: 'descending',\n    igx_grid_excel_filter_sorting_desc_short: 'desc',\n    igx_grid_excel_filter_sorting_header: 'sort',\n    igx_grid_excel_filter_clear: 'Clear column filters',\n    igx_grid_excel_custom_dialog_add: 'add filter',\n    igx_grid_excel_custom_dialog_clear: 'Clear filter',\n    igx_grid_excel_custom_dialog_header: 'Custom auto-filter on column: ',\n    igx_grid_excel_cancel: 'cancel',\n    igx_grid_excel_apply: 'apply',\n    igx_grid_excel_search_placeholder: 'Search',\n    igx_grid_excel_select_all: 'Select All',\n    igx_grid_excel_blanks: '(Blanks)',\n    igx_grid_excel_hide: 'Hide column',\n    igx_grid_excel_pin: 'Pin column',\n    igx_grid_excel_unpin: 'Unpin column',\n    igx_grid_excel_text_filter: 'Text filter',\n    igx_grid_excel_number_filter: 'Number filter',\n    igx_grid_excel_date_filter: 'Date filter',\n    igx_grid_excel_boolean_filter: 'Boolean filter',\n    igx_grid_excel_custom_filter: 'Custom filter...',\n    igx_grid_advanced_filter_title: 'Advanced Filtering',\n    igx_grid_advanced_filter_and_group: '\"And\" Group',\n    igx_grid_advanced_filter_or_group: '\"Or\" Group',\n    igx_grid_advanced_filter_end_group: 'End Group',\n    igx_grid_advanced_filter_create_and_group: 'Create \"And\" Group',\n    igx_grid_advanced_filter_create_or_group: 'Create \"Or\" Group',\n    igx_grid_advanced_filter_and_label: 'and',\n    igx_grid_advanced_filter_or_label: 'or',\n    igx_grid_advanced_filter_add_condition: 'Condition',\n    igx_grid_advanced_filter_ungroup: 'Ungroup',\n    igx_grid_advanced_filter_delete: 'Delete',\n    igx_grid_advanced_filter_delete_filters: 'Delete filters',\n    igx_grid_advanced_filter_initial_text: 'Start with creating a group of conditions linked with \"And\" or \"Or\"',\n    igx_grid_advanced_filter_column_placeholder: 'Select column',\n    igx_grid_advanced_filter_value_placeholder: 'Value'\n};\n","export interface ITimePickerResourceStrings {\n    igx_time_picker_ok?: string;\n    igx_time_picker_cancel?: string;\n}\n\nexport const TimePickerResourceStringsEN: ITimePickerResourceStrings = {\n    igx_time_picker_ok: 'OK',\n    igx_time_picker_cancel: 'Cancel'\n};\n","export interface IPaginatorResourceStrings {\n    igx_paginator_label?: string;\n}\n\nexport const PaginatorResourceStringsEN: IPaginatorResourceStrings = {\n    igx_paginator_label: 'Items per page'\n};\n","import { Injectable} from '@angular/core';\nimport { IgxSummaryResult } from './grid-summary';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { cloneArray } from '../../core/utils';\n\n/** @hidden */\n@Injectable()\nexport class IgxGridSummaryService {\n    protected summaryCacheMap: Map<string, Map<string, any[]>> = new Map<string, Map<string, IgxSummaryResult[]>>();\n    public grid;\n    public rootSummaryID = 'igxGridRootSummary';\n    public summaryHeight = 0;\n    public maxSummariesLenght = 0;\n    public groupingExpressions = [];\n    public retriggerRootPipe = 0;\n    public deleteOperation = false;\n\n    public recalculateSummaries() {\n        this.resetSummaryHeight();\n        this.grid.notifyChanges(true);\n    }\n\n    public clearSummaryCache(args?) {\n        if (!this.summaryCacheMap.size) { return; }\n        if (!args) {\n            this.summaryCacheMap.clear();\n            if (this.grid && this.grid.rootSummariesEnabled) {\n                this.retriggerRootPipe++;\n            }\n            return;\n        }\n        if (args.data) {\n            const rowID = this.grid.primaryKey ? args.data[this.grid.primaryKey] : args.data;\n            this.removeSummaries(rowID);\n        }\n        if (args.rowID !== undefined && args.rowID !== null) {\n            let columnName = args.cellID ? this.grid.columnList.find(col => col.index === args.cellID.columnID).field : undefined;\n            if (columnName && this.grid.rowEditable) { return; }\n\n            const isGroupedColumn = this.grid.groupingExpressions &&\n                    this.grid.groupingExpressions.map(expr => expr.fieldName).indexOf(columnName) !== -1;\n            if (columnName && isGroupedColumn ) {\n                columnName = undefined;\n            }\n            this.removeSummaries(args.rowID, columnName);\n        }\n    }\n\n    public removeSummaries(rowID, columnName?) {\n        this.deleteSummaryCache(this.rootSummaryID, columnName);\n        if (this.summaryCacheMap.size === 1 && this.summaryCacheMap.has(this.rootSummaryID)) { return; }\n        if (this.isTreeGrid) {\n            if (this.grid.transactions.enabled && this.deleteOperation) {\n                this.deleteOperation = false;\n                // TODO: this.removeChildRowSummaries(rowID, columnName);\n                this.summaryCacheMap.clear();\n                return;\n            }\n            this.removeAllTreeGridSummaries(rowID, columnName);\n        } else if (this.isHierarchicalGrid) {\n            if (this.grid.transactions.enabled && this.deleteOperation) {\n                this.deleteOperation = false;\n                this.summaryCacheMap.clear();\n            }\n        } else {\n           const summaryIds = this.getSummaryID(rowID, this.grid.groupingExpressions);\n           summaryIds.forEach(id => {\n               this.deleteSummaryCache(id, columnName);\n           });\n        }\n    }\n\n    public removeSummariesCachePerColumn(columnName) {\n        this.summaryCacheMap.forEach((cache) => {\n            if (cache.get(columnName)) {\n                cache.delete(columnName);\n            }\n        });\n        if (this.grid.rootSummariesEnabled) {  this.retriggerRootPipe++; }\n    }\n\n    public calcMaxSummaryHeight() {\n        if (this.summaryHeight) {\n            return this.summaryHeight;\n        }\n        if (!this.grid.data) {return this.summaryHeight = 0; }\n        let maxSummaryLength = 0;\n        this.grid.columnList.filter((col) => col.hasSummary && !col.hidden).forEach((column) => {\n            const getCurrentSummaryColumn = column.summaries.operate([], [], column.field).length;\n            if (getCurrentSummaryColumn) {\n                if (maxSummaryLength < getCurrentSummaryColumn) {\n                    maxSummaryLength = getCurrentSummaryColumn;\n                }\n            }\n        });\n        this.maxSummariesLenght = maxSummaryLength;\n        this.summaryHeight =  maxSummaryLength * this.grid.defaultSummaryHeight;\n        return this.summaryHeight;\n    }\n\n    public calculateSummaries(rowID, data) {\n        let rowSummaries = this.summaryCacheMap.get(rowID);\n        if (!rowSummaries) {\n            rowSummaries = new Map<string, IgxSummaryResult[]>();\n            this.summaryCacheMap.set(rowID, rowSummaries);\n        }\n        if (!this.hasSummarizedColumns || !data) {return rowSummaries; }\n        this.grid.columnList.filter(col => col.hasSummary).forEach((column) => {\n            if (!rowSummaries.get(column.field)) {\n                rowSummaries.set(column.field,\n                    column.summaries.operate(data.map(r => r[column.field]), data, column.field));\n            }\n        });\n        return rowSummaries;\n    }\n\n    public resetSummaryHeight() {\n        this.summaryHeight = 0;\n        (this.grid as any)._summaryPipeTrigger++;\n        if (this.grid.rootSummariesEnabled) {\n            this.retriggerRootPipe++;\n        }\n    }\n\n    public updateSummaryCache(groupingArgs) {\n        if (this.summaryCacheMap.size === 0 || !this.hasSummarizedColumns) { return; }\n        if (this.groupingExpressions.length === 0) {\n            this.groupingExpressions = groupingArgs.expressions.map(record => record.fieldName);\n            return;\n        }\n        if (groupingArgs.length === 0) {\n            this.groupingExpressions = [];\n            this.clearSummaryCache();\n            return;\n        }\n        this.compareGroupingExpressions(this.groupingExpressions, groupingArgs);\n        this.groupingExpressions = groupingArgs.expressions.map(record => record.fieldName);\n    }\n\n    public get hasSummarizedColumns(): boolean {\n        const summarizedColumns = this.grid.columnList.filter(col => col.hasSummary && !col.hidden);\n        return summarizedColumns.length > 0;\n    }\n\n    private deleteSummaryCache(id, columnName) {\n        if (this.summaryCacheMap.get(id)) {\n            const filteringApplied = columnName && this.grid.filteringExpressionsTree &&\n                    this.grid.filteringExpressionsTree.filteringOperands.map((expr) => expr.fieldName).indexOf(columnName) !== -1;\n            if (columnName && this.summaryCacheMap.get(id).get(columnName) && !filteringApplied) {\n                this.summaryCacheMap.get(id).delete(columnName);\n            } else {\n                this.summaryCacheMap.delete(id);\n            }\n            if (id === this.rootSummaryID && this.grid.rootSummariesEnabled) {\n                this.retriggerRootPipe++;\n            }\n        }\n    }\n\n    private getSummaryID(rowID, groupingExpressions) {\n        if (groupingExpressions.length === 0) { return []; }\n        const summaryIDs = [];\n        let data = this.grid.data;\n        if (this.grid.transactions.enabled) {\n            data = DataUtil.mergeTransactions(\n                cloneArray(this.grid.data),\n                this.grid.transactions.getAggregatedChanges(true),\n                this.grid.primaryKey\n            );\n        }\n        const rowData = this.grid.primaryKey ? data.find(rec => rec[this.grid.primaryKey] === rowID) : rowID;\n        let id = '{ ';\n        groupingExpressions.forEach(expr => {\n            id += `'${expr.fieldName}': '${rowData[expr.fieldName]}'`;\n                summaryIDs.push(id.concat(' }'));\n                id += ', ';\n        });\n        return summaryIDs;\n    }\n\n    private removeAllTreeGridSummaries(rowID, columnName?) {\n        let row = this.grid.records.get(rowID);\n        if (!row) { return; }\n        row = row.children ? row : row.parent;\n        while (row) {\n            rowID = row.rowID;\n            this.deleteSummaryCache(rowID, columnName);\n            row = row.parent;\n        }\n    }\n\n    // TODO: remove only deleted rows\n    private removeChildRowSummaries(rowID, columnName?) {\n    }\n\n    private compareGroupingExpressions(current, groupingArgs) {\n        const newExpressions = groupingArgs.expressions.map(record => record.fieldName);\n        const removedCols = groupingArgs.ungroupedColumns;\n        if (current.length <= newExpressions.length) {\n            const newExpr = newExpressions.slice(0, current.length).toString();\n            if (current.toString() !== newExpr) {\n                this.clearSummaryCache();\n            }\n        } else {\n            const currExpr = current.slice(0, newExpressions.length).toString();\n            if (currExpr !== newExpressions.toString()) {\n                this.clearSummaryCache();\n                return;\n            }\n            removedCols.map(col => col.field).forEach(colName => {\n                this.summaryCacheMap.forEach((cache, id) => {\n                   if (id.indexOf(colName) !== -1) {\n                       this.summaryCacheMap.delete(id);\n                   }});\n            });\n        }\n    }\n\n    private get isTreeGrid() {\n        return this.grid.nativeElement.tagName.toLowerCase() === 'igx-tree-grid';\n    }\n\n    private get isHierarchicalGrid() {\n        return this.grid.nativeElement.tagName.toLowerCase() === 'igx-hierarchical-grid';\n    }\n\n}\n","import { Component, Input, HostBinding, HostListener, ChangeDetectionStrategy, ElementRef } from '@angular/core';\nimport { IgxSummaryResult } from './grid-summary';\nimport { IgxColumnComponent } from '../column.component';\nimport { DataType } from '../../data-operations/data-util';\nimport { ISelectionNode } from '../../core/grid-selection';\nimport { SUPPORTED_KEYS } from '../../core/utils';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-summary-cell',\n    templateUrl: './summary-cell.component.html'\n})\nexport class IgxSummaryCellComponent {\n\n    @Input()\n    public summaryResults: IgxSummaryResult[];\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public firstCellIndentation = 0;\n\n    @Input()\n    public hasSummary = false;\n\n    @Input()\n    public density;\n\n    constructor(private element: ElementRef) {\n    }\n\n    @Input()\n    @HostBinding('attr.data-rowIndex')\n    public rowIndex: number;\n\n    @HostBinding('attr.data-visibleIndex')\n    get visibleColumnIndex(): number {\n        return this.column.visibleIndex;\n    }\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('attr.aria-describedby')\n    public get describeby() {\n        return `Summary_${this.column.field}`;\n    }\n\n    @HostBinding('class.igx-grid-summary--active')\n    public focused: boolean;\n\n    @HostListener('focus')\n    public onFocus() {\n        this.focused = true;\n    }\n\n    @HostListener('blur')\n    public onBlur() {\n        this.focused = false;\n    }\n\n    protected get selectionNode(): ISelectionNode {\n        return {\n            row: this.rowIndex,\n            column: this.column.columnLayoutChild ? this.column.parent.visibleIndex : this.visibleColumnIndex,\n            isSummaryRow: true\n        };\n    }\n\n    @HostListener('keydown', ['$event'])\n    dispatchEvent(event: KeyboardEvent) {\n        // TODO: Refactor\n        const key = event.key.toLowerCase();\n        const ctrl = event.ctrlKey;\n        const shift = event.shiftKey;\n\n        if (!SUPPORTED_KEYS.has(key)) {\n            return;\n        }\n        event.stopPropagation();\n        const args = { targetType: 'summaryCell', target: this, event: event, cancel: false };\n        this.grid.onGridKeydown.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        event.preventDefault();\n\n        if (!this.isKeySupportedInCell(key, ctrl)) { return; }\n\n        this.grid.selectionService.keyboardState.shift = shift && !(key === 'tab');\n        const row = this.getRowElementByIndex(this.rowIndex);\n        switch (key) {\n            case 'tab':\n                if (shift) {\n                    this.grid.navigation.performShiftTabKey(row, this.selectionNode);\n                    break;\n                }\n                this.grid.navigation.performTab(row, this.selectionNode);\n                break;\n            case 'arrowleft':\n            case 'home':\n            case 'left':\n                if (ctrl || key === 'home') {\n                    this.grid.navigation.onKeydownHome(this.rowIndex, true);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowLeft(this.nativeElement, this.selectionNode);\n                break;\n            case 'end':\n            case 'arrowright':\n            case 'right':\n                if (ctrl || key === 'end') {\n                    this.grid.navigation.onKeydownEnd(this.rowIndex, true);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowRight(this.nativeElement, this.selectionNode);\n                break;\n            case 'arrowup':\n            case 'up':\n                    this.grid.navigation.navigateUp(row, this.selectionNode);\n                break;\n            case 'arrowdown':\n            case 'down':\n                    this.grid.navigation.navigateDown(row, this.selectionNode);\n                break;\n        }\n    }\n\n    @HostBinding('style.min-width')\n    @HostBinding('style.max-width')\n    @HostBinding('style.flex-basis')\n    get width() {\n        return this.column.getCellWidth();\n    }\n\n    get nativeElement(): any {\n        return this.element.nativeElement;\n    }\n\n    get columnDatatype(): DataType {\n        return this.column.dataType;\n    }\n\n    get itemHeight() {\n        return this.column.grid.defaultSummaryHeight;\n    }\n\n    /**\n    * @hidden\n    */\n    public get grid() {\n        return (this.column.grid as any);\n    }\n\n    private getRowElementByIndex(rowIndex) {\n        const summaryRows = this.grid.summariesRowList.toArray();\n        return summaryRows.find((sr) => sr.dataRowIndex === rowIndex).nativeElement;\n    }\n\n    private isKeySupportedInCell(key, ctrl) {\n        if (ctrl) {\n           return ['arrowup', 'arrowdown', 'up', 'down', 'end', 'home'].indexOf(key) === -1;\n        }\n        return ['down', 'up', 'left', 'right', 'arrowdown', 'arrowup', 'arrowleft', 'arrowright', 'home', 'end', 'tab'].indexOf(key) !== -1;\n    }\n\n    public translateSummary(summary: IgxSummaryResult): string {\n        return this.grid.resourceStrings[`igx_grid_summary_${summary.key}`] || summary.label;\n    }\n}\n","import {\n    Component,\n    Input,\n    ViewChildren,\n    QueryList,\n    HostBinding,\n    ViewChild,\n    ElementRef,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    DoCheck\n} from '@angular/core';\nimport { IgxSummaryResult } from './grid-summary';\nimport { IgxSummaryCellComponent } from './summary-cell.component';\nimport { IgxGridForOfDirective } from '../../directives/for-of/for_of.directive';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\nimport { IgxColumnComponent } from '../column.component';\nimport { IgxForOfSyncService } from '../../directives/for-of/for_of.sync.service';\n\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-summary-row',\n    templateUrl: './summary-row.component.html',\n    providers: [IgxForOfSyncService]\n})\nexport class IgxSummaryRowComponent implements DoCheck  {\n\n    @Input()\n    public summaries: Map<string, IgxSummaryResult[]>;\n\n    @Input()\n    public gridID;\n\n    @Input()\n    public index: number;\n\n    @Input()\n    public firstCellIndentation = -1;\n\n    @HostBinding('attr.data-rowIndex')\n    get dataRowIndex() {\n        return this.index;\n    }\n\n    get minHeight() {\n        return this.grid.summaryService.calcMaxSummaryHeight() - 1;\n    }\n\n    @ViewChildren(IgxSummaryCellComponent, { read: IgxSummaryCellComponent })\n    public summaryCells: QueryList<IgxSummaryCellComponent>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxDirRef', { read: IgxGridForOfDirective, static: false })\n    public virtDirRow: IgxGridForOfDirective<any>;\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n                public element: ElementRef,\n                public cdr: ChangeDetectorRef) {}\n\n    public ngDoCheck() {\n        this.cdr.markForCheck();\n    }\n\n    public get grid() {\n        return this.gridAPI.grid;\n    }\n\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    public getColumnSummaries(columnName) {\n        if (!this.summaries.get(columnName)) {\n            return [];\n        }\n        return this.summaries.get(columnName);\n\n    }\n\n    /**\n     * @hidden\n     */\n    public get pinnedColumns(): IgxColumnComponent[] {\n        return this.grid.pinnedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    public get unpinnedColumns(): IgxColumnComponent[] {\n        return this.grid.unpinnedColumns;\n    }\n}\n","import { Directive, Input, Output, EventEmitter, ElementRef, OnDestroy, NgZone, OnInit } from '@angular/core';\nimport { interval, Observable, Subscription, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nexport enum DragScrollDirection {\n    NONE,\n    LEFT,\n    TOP,\n    RIGHT,\n    BOTTOM,\n    TOPLEFT,\n    TOPRIGHT,\n    BOTTOMLEFT,\n    BOTTOMRIGHT\n}\n\n\n@Directive({\n    selector: '[igxGridDragSelect]'\n})\nexport class IgxGridDragSelectDirective implements OnInit, OnDestroy {\n    _activeDrag: boolean;\n\n    @Input('igxGridDragSelect')\n    get activeDrag(): boolean {\n        return this._activeDrag;\n    }\n\n    set activeDrag(val: boolean) {\n        if (val !== this._activeDrag) {\n            this.unsubscribe();\n            this._activeDrag = val;\n        }\n    }\n\n    @Output()\n    onDragStop = new EventEmitter<boolean>();\n\n    @Output()\n    onDragScroll = new EventEmitter<DragScrollDirection>();\n\n    get nativeElement(): HTMLElement {\n        return this.ref.nativeElement;\n    }\n\n    get clientRect(): ClientRect {\n        return this.nativeElement.getBoundingClientRect();\n    }\n\n    protected end$ = new Subject<any>();\n    protected lastDirection = DragScrollDirection.NONE;\n    protected _interval$: Observable<any>;\n    protected _sub: Subscription;\n\n    constructor(private ref: ElementRef, private zone: NgZone) {\n        this._interval$ = interval(100).pipe(\n            takeUntil(this.end$),\n            filter(() => this.activeDrag)\n        );\n    }\n\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            this.nativeElement.addEventListener('pointerover', this.startDragSelection);\n            this.nativeElement.addEventListener('pointerleave', this.stopDragSelection);\n        });\n    }\n\n    ngOnDestroy() {\n        this.zone.runOutsideAngular(() => {\n            this.nativeElement.removeEventListener('pointerover', this.startDragSelection);\n            this.nativeElement.removeEventListener('pointerleave', this.stopDragSelection);\n        });\n        this.unsubscribe();\n        this.end$.complete();\n    }\n\n\n    startDragSelection = (ev: PointerEvent) => {\n        if (!this.activeDrag) {\n            return;\n        }\n        const x = ev.clientX;\n        const y = ev.clientY;\n        const direction = this._measureDimensions(x, y);\n        if (direction === this.lastDirection) {\n            return;\n        }\n        this.unsubscribe();\n        this._sub = this._interval$.subscribe(() => this.onDragScroll.emit(direction));\n        this.lastDirection = direction;\n    }\n\n    stopDragSelection = () => {\n        if (!this.activeDrag) {\n            return;\n        }\n        this.onDragStop.emit(false);\n        this.unsubscribe();\n        this.lastDirection = DragScrollDirection.NONE;\n    }\n\n    _measureDimensions(x: number, y: number): DragScrollDirection {\n        let direction: DragScrollDirection;\n\n        const rect = this.clientRect;\n        const RATIO = 0.15;\n        const offsetX = Math.trunc(x - rect.left);\n        const offsetY = Math.trunc(y - rect.top);\n\n        const left = offsetX <= rect.width * RATIO;\n        const right = offsetX >= rect.width * (1 - RATIO);\n        const top = offsetY <= rect.height * RATIO;\n        const bottom = offsetY >= rect.height * (1 - RATIO);\n\n        if (top && left) {\n            direction = DragScrollDirection.TOPLEFT;\n        } else if (top && right) {\n            direction = DragScrollDirection.TOPRIGHT;\n        } else if (bottom && left) {\n            direction = DragScrollDirection.BOTTOMLEFT;\n        } else if (bottom && right) {\n            direction = DragScrollDirection.BOTTOMRIGHT;\n        } else if (top) {\n            direction = DragScrollDirection.TOP;\n        } else if (bottom) {\n            direction = DragScrollDirection.BOTTOM;\n        } else if (left) {\n            direction = DragScrollDirection.LEFT;\n        } else if (right) {\n            direction = DragScrollDirection.RIGHT;\n        } else {\n            direction = DragScrollDirection.NONE;\n        }\n\n        return direction;\n\n    }\n\n    protected unsubscribe() {\n        if (this._sub) {\n            this._sub.unsubscribe();\n        }\n    }\n}\n","import {\n    Directive, EmbeddedViewRef, Input, OnChanges, ChangeDetectorRef,\n    SimpleChange, SimpleChanges, TemplateRef, ViewContainerRef, NgModule, NgZone, Output, EventEmitter\n} from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { IBaseEventArgs } from '../../core/utils';\n\n/**\n * @hidden\n */\n@Directive({ selector: '[igxTemplateOutlet]' })\nexport class IgxTemplateOutletDirective implements OnChanges {\n    private _viewRef !: EmbeddedViewRef<any>;\n\n    /**\n    * The embedded views cache. Collection is key-value paired.\n    * Key is the template id, value is the embedded view for the related template.\n    */\n    private _embeddedViewsMap: Map<string, EmbeddedViewRef<any>> = new Map();\n\n    @Input() public igxTemplateOutletContext !: Object;\n\n    @Input() public igxTemplateOutlet !: TemplateRef<any>;\n\n    @Output()\n    public onViewCreated = new EventEmitter<IViewChangeEventArgs>();\n\n    @Output()\n    public onViewMoved = new EventEmitter<IViewChangeEventArgs>();\n\n    @Output()\n    public onCachedViewLoaded = new EventEmitter<ICachedViewLoadedEventArgs>();\n\n    constructor(public _viewContainerRef: ViewContainerRef, private _zone: NgZone, public cdr: ChangeDetectorRef) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const actionType: TemplateOutletAction = this._getActionType(changes);\n        switch (actionType) {\n            case TemplateOutletAction.CreateView: this._recreateView(); break;\n            case TemplateOutletAction.MoveView: this._moveView(); break;\n            case TemplateOutletAction.UseCachedView: this._useCachedView(); break;\n            case TemplateOutletAction.UpdateViewContext: this._updateExistingContext(this.igxTemplateOutletContext); break;\n        }\n    }\n\n    public cleanCache() {\n        this._embeddedViewsMap.forEach((item) => {\n            if (!item.destroyed) {\n                item.destroy();\n            }\n        });\n        this._embeddedViewsMap.clear();\n    }\n\n    public cleanView(tmplID) {\n        const embView = this._embeddedViewsMap.get(tmplID);\n        if (embView) {\n            embView.destroy();\n            this._embeddedViewsMap.delete(tmplID);\n        }\n    }\n\n    private _recreateView() {\n        // detach old and create new\n        if (this._viewRef) {\n            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this._viewRef));\n        }\n        if (this.igxTemplateOutlet) {\n            this._viewRef = this._viewContainerRef.createEmbeddedView(\n                this.igxTemplateOutlet, this.igxTemplateOutletContext);\n            this.onViewCreated.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n            const tmplId = this.igxTemplateOutletContext['templateID'];\n            if (tmplId) {\n                // if context contains a template id, check if we have a view for that template already stored in the cache\n                // if not create a copy and add it to the cache in detached state.\n                // Note: Views in detached state do not appear in the DOM, however they remain stored in memory.\n                const res = this._embeddedViewsMap.get(this.igxTemplateOutletContext['templateID']);\n                if (!res) {\n                    this._embeddedViewsMap.set(this.igxTemplateOutletContext['templateID'], this._viewRef);\n                }\n            }\n        }\n    }\n\n    private _moveView() {\n        // using external view and inserting it in current view.\n        const view = this.igxTemplateOutletContext['moveView'];\n        const owner = this.igxTemplateOutletContext['owner'];\n        if (view !== this._viewRef) {\n            if (owner._viewContainerRef.indexOf(view) !== -1) {\n                // detach in case view it is attached somewhere else at the moment.\n                owner._viewContainerRef.detach(owner._viewContainerRef.indexOf(view));\n            }\n            if (this._viewRef && this._viewContainerRef.indexOf(this._viewRef) !== -1) {\n                this._viewContainerRef.detach(this._viewContainerRef.indexOf(this._viewRef));\n            }\n            this._viewRef = view;\n            this._viewContainerRef.insert(view, 0);\n            this._updateExistingContext(this.igxTemplateOutletContext);\n            this.onViewMoved.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n        }\n    }\n    private _useCachedView() {\n        // use view for specific template cached in the current template outlet\n        const tmplID = this.igxTemplateOutletContext['templateID'];\n        const cachedView = tmplID ?\n            this._embeddedViewsMap.get(tmplID) :\n            null;\n        // if view exists, but template has been changed and there is a view in the cache with the related template\n        // then detach old view and insert the stored one with the matching template\n        // after that update its context.\n        this._viewContainerRef.detach(this._viewContainerRef.indexOf(this._viewRef));\n        this._viewRef = cachedView;\n        const oldContext = this._cloneContext(cachedView.context);\n        this._viewContainerRef.insert(this._viewRef, 0);\n        this._updateExistingContext(this.igxTemplateOutletContext);\n        this.onCachedViewLoaded.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext, oldContext });\n    }\n\n    private _shouldRecreateView(changes: SimpleChanges): boolean {\n        const ctxChange = changes['igxTemplateOutletContext'];\n        return !!changes['igxTemplateOutlet'] || (ctxChange && this._hasContextShapeChanged(ctxChange));\n    }\n\n    private _hasContextShapeChanged(ctxChange: SimpleChange): boolean {\n        const prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n        const currCtxKeys = Object.keys(ctxChange.currentValue || {});\n\n        if (prevCtxKeys.length === currCtxKeys.length) {\n            for (const propName of currCtxKeys) {\n                if (prevCtxKeys.indexOf(propName) === -1) {\n                    return true;\n                }\n            }\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    private _updateExistingContext(ctx: Object): void {\n        for (const propName of Object.keys(ctx)) {\n            (<any>this._viewRef.context)[propName] = (<any>this.igxTemplateOutletContext)[propName];\n        }\n    }\n\n    private _cloneContext(ctx: any): any {\n        const clone = {};\n        for (const propName of Object.keys(ctx)) {\n            clone[propName] = ctx[propName];\n        }\n        return clone;\n    }\n\n    private _getActionType(changes: SimpleChanges) {\n        const movedView = this.igxTemplateOutletContext['moveView'];\n        const tmplID = this.igxTemplateOutletContext['templateID'];\n        const cachedView = tmplID ?\n            this._embeddedViewsMap.get(tmplID) :\n            null;\n        const shouldRecreate = this._shouldRecreateView(changes);\n        if (movedView) {\n            // view is moved from external source\n            return TemplateOutletAction.MoveView;\n        } else if (shouldRecreate && cachedView) {\n            // should recreate (template or context change) and there is a matching template in cache\n            return TemplateOutletAction.UseCachedView;\n        } else if (!this._viewRef || shouldRecreate) {\n            // no view or should recreate\n            return TemplateOutletAction.CreateView;\n        } else if (this.igxTemplateOutletContext) {\n            // has context, update context\n            return TemplateOutletAction.UpdateViewContext;\n        }\n    }\n}\nenum TemplateOutletAction {\n    CreateView,\n    MoveView,\n    UseCachedView,\n    UpdateViewContext\n}\n\nexport interface IViewChangeEventArgs extends IBaseEventArgs {\n    owner: IgxTemplateOutletDirective;\n    view: EmbeddedViewRef<any>;\n    context: any;\n}\n\nexport interface ICachedViewLoadedEventArgs extends IViewChangeEventArgs {\n    oldContext: any;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTemplateOutletDirective],\n    entryComponents: [],\n    exports: [IgxTemplateOutletDirective],\n    imports: [CommonModule]\n})\n\nexport class IgxTemplateOutletModule {\n}\n","import { ChangeDetectionStrategy, Component, ViewChild } from '@angular/core';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxColumnResizerDirective } from './grid.common';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-column-resizer',\n    templateUrl: './grid-column-resizer.component.html'\n})\nexport class IgxGridColumnResizerComponent {\n    constructor(public colResizingService: IgxColumnResizingService) { }\n\n    @ViewChild(IgxColumnResizerDirective, { static: true })\n    public resizer: IgxColumnResizerDirective;\n}\n","import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    Input,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n    QueryList,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    ChangeDetectionStrategy,\n    ViewRef\n} from '@angular/core';\nimport { DataType } from '../../data-operations/data-util';\nimport { IgxColumnComponent } from '../column.component';\nimport { IgxDropDownComponent, ISelectionEventArgs } from '../../drop-down/index';\nimport { IFilteringOperation } from '../../data-operations/filtering-condition';\nimport { FilteringLogic, IFilteringExpression } from '../../data-operations/filtering-expression.interface';\nimport { HorizontalAlignment, VerticalAlignment, OverlaySettings } from '../../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../../services/overlay/position/connected-positioning-strategy';\nimport { IBaseChipEventArgs, IgxChipsAreaComponent, IgxChipComponent } from '../../chips';\nimport { ExpressionUI } from './grid-filtering.service';\nimport { IgxDropDownItemComponent } from '../../drop-down/drop-down-item.component';\nimport { IgxFilteringService } from './grid-filtering.service';\nimport { KEYS, isEdge } from '../../core/utils';\nimport { AbsoluteScrollStrategy } from '../../services/overlay/scroll';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-filtering-row',\n    templateUrl: './grid-filtering-row.component.html'\n})\nexport class IgxGridFilteringRowComponent implements AfterViewInit {\n\n    private _positionSettings = {\n        horizontalStartPoint: HorizontalAlignment.Left,\n        verticalStartPoint: VerticalAlignment.Bottom\n    };\n\n    private _conditionsOverlaySettings: OverlaySettings = {\n        excludePositionTarget: true,\n        closeOnOutsideClick: true,\n        modal: false,\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings)\n    };\n\n    private _operatorsOverlaySettings: OverlaySettings = {\n        excludePositionTarget: true,\n        closeOnOutsideClick: true,\n        modal: false,\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings)\n    };\n\n    private chipsAreaWidth: number;\n    private chipAreaScrollOffset = 0;\n    private _column = null;\n    private isKeyPressed = false;\n    private isComposing = false;\n    private _cancelChipClick = false;\n\n    public showArrows: boolean;\n    public expression: IFilteringExpression;\n    public expressionsList: Array<ExpressionUI>;\n\n    @Input()\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n\n    set column(val) {\n        if (this._column) {\n            this.expressionsList.forEach(exp => exp.isSelected = false);\n        }\n        if (val) {\n            this._column = val;\n\n            this.expressionsList = this.filteringService.getExpressions(this._column.field);\n            this.resetExpression();\n\n            this.chipAreaScrollOffset = 0;\n            this.transform(this.chipAreaScrollOffset);\n        }\n    }\n\n    @Input()\n    get value(): any {\n        return this.expression ? this.expression.searchVal : null;\n    }\n\n    set value(val) {\n        if (!val && val !== 0) {\n            this.expression.searchVal = null;\n            this.showHideArrowButtons();\n        } else {\n            this.expression.searchVal = this.transformValue(val);\n            if (this.expressionsList.find(item => item.expression === this.expression) === undefined) {\n                this.addExpression(true);\n            }\n        }\n\n        this.filter();\n    }\n\n    @ViewChild('defaultFilterUI', { read: TemplateRef, static: true })\n    protected defaultFilterUI: TemplateRef<any>;\n\n    @ViewChild('defaultDateUI', { read: TemplateRef, static: true })\n    protected defaultDateUI: TemplateRef<any>;\n\n    @ViewChild('input', { read: ElementRef, static: false })\n    protected input: ElementRef;\n\n    @ViewChild('inputGroupConditions', { read: IgxDropDownComponent, static: true })\n    protected dropDownConditions: IgxDropDownComponent;\n\n    @ViewChild('chipsArea', { read: IgxChipsAreaComponent, static: true })\n    protected chipsArea: IgxChipsAreaComponent;\n\n    @ViewChildren('operators', { read: IgxDropDownComponent })\n    protected dropDownOperators: QueryList<IgxDropDownComponent>;\n\n    @ViewChild('inputGroup', { read: ElementRef, static: false })\n    protected inputGroup: ElementRef;\n\n    @ViewChild('inputGroupPrefix', { read: ElementRef, static: false })\n    protected inputGroupPrefix: ElementRef;\n\n    @ViewChild('container', { static: true })\n    protected container: ElementRef;\n\n    @ViewChild('operand', { static: false })\n    protected operand: ElementRef;\n\n    @ViewChild('closeButton', { static: true })\n    public closeButton: ElementRef;\n\n    @HostBinding('class.igx-grid__filtering-row')\n    public cssClass = 'igx-grid__filtering-row';\n\n    constructor(public filteringService: IgxFilteringService, public element: ElementRef, public cdr: ChangeDetectorRef) { }\n\n    ngAfterViewInit() {\n        this._conditionsOverlaySettings.outlet = this.column.grid.outletDirective;\n        this._operatorsOverlaySettings.outlet = this.column.grid.outletDirective;\n\n        const selectedItem = this.expressionsList.find(expr => expr.isSelected === true);\n        if (selectedItem) {\n            this.expression = selectedItem.expression;\n        }\n\n        this.input.nativeElement.focus();\n    }\n\n    @HostListener('keydown.shift.tab', ['$event'])\n    @HostListener('keydown.tab', ['$event'])\n    public onTabKeydown(event) {\n        event.stopPropagation();\n        if (document.activeElement === this.closeButton.nativeElement && !event.shiftKey) {\n            this.filteringService.grid.navigation.navigateFirstCellIfPossible(event);\n        }\n    }\n\n    @HostListener('keydown.esc', ['$event'])\n    public onEscKeydown(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.close();\n    }\n\n    get disabled(): boolean {\n        return !(this.column.filteringExpressionsTree && this.column.filteringExpressionsTree.filteringOperands.length > 0);\n    }\n\n    get template(): TemplateRef<any> {\n        if (this.column.dataType === DataType.Date) {\n            return this.defaultDateUI;\n        }\n\n        return this.defaultFilterUI;\n    }\n\n    get type() {\n        switch (this.column.dataType) {\n            case DataType.String:\n            case DataType.Boolean:\n                return 'text';\n            case DataType.Number:\n                return 'number';\n        }\n    }\n\n    get conditions(): any {\n        return this.column.filters.conditionList();\n    }\n\n    get isUnaryCondition(): boolean {\n        if (this.expression.condition) {\n            return this.expression.condition.isUnary;\n        } else {\n            return true;\n        }\n    }\n\n    get placeholder(): string {\n        if (this.expression.condition && this.expression.condition.isUnary) {\n            return this.filteringService.getChipLabel(this.expression);\n        } else if (this.column.dataType === DataType.Date) {\n            return this.filteringService.grid.resourceStrings.igx_grid_filter_row_date_placeholder;\n        } else if (this.column.dataType === DataType.Boolean) {\n            return this.filteringService.grid.resourceStrings.igx_grid_filter_row_boolean_placeholder;\n        } else {\n            return this.filteringService.grid.resourceStrings.igx_grid_filter_row_placeholder;\n        }\n    }\n\n    /**\n     * Event handler for keydown on the input group's prefix.\n     */\n    public onPrefixKeyDown(event: KeyboardEvent) {\n        if ((event.key === KEYS.ENTER || event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE) && this.dropDownConditions.collapsed) {\n            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n            event.stopImmediatePropagation();\n        } else if (event.key === KEYS.TAB) {\n            if (event.shiftKey) {\n                event.preventDefault();\n                event.stopPropagation();\n            } else if (!this.dropDownConditions.collapsed) {\n                this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n            }\n        }\n    }\n\n    /**\n     * Event handler for keydown on the input.\n     */\n    public onInputKeyDown(event: KeyboardEvent) {\n        this.isKeyPressed = true;\n\n        if (this.column.dataType === DataType.Boolean) {\n            if (event.key === KEYS.ENTER || event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE) {\n                this.inputGroupPrefix.nativeElement.focus();\n                this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n                event.stopPropagation();\n                return;\n            }\n        }\n\n        if (event.key === KEYS.ENTER) {\n            if (this.isComposing) {\n                return;\n            }\n            this.commitInput();\n        } else if (event.altKey && (event.key === KEYS.DOWN_ARROW || event.key === KEYS.DOWN_ARROW_IE)) {\n            this.inputGroupPrefix.nativeElement.focus();\n            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n        } else if (event.key === KEYS.ESCAPE || event.key === KEYS.ESCAPE_IE) {\n            event.preventDefault();\n            this.close();\n        }\n        event.stopPropagation();\n    }\n\n    /**\n     * Event handler for keyup on the input.\n     */\n    public onInputKeyUp(eventArgs) {\n        this.isKeyPressed = false;\n    }\n\n    /**\n     * Event handler for input on the input.\n     */\n    public onInput(eventArgs) {\n        // The 'iskeyPressed' flag is needed for a case in IE, because the input event is fired on focus and for some reason,\n        // when you have a japanese character as a placeholder, on init the value here is empty string .\n        if (isEdge() || this.isKeyPressed || eventArgs.target.value) {\n            this.value = eventArgs.target.value;\n        }\n    }\n\n    /**\n     * Event handler for compositionstart on the input.\n     */\n    public onCompositionStart() {\n        this.isComposing = true;\n    }\n\n    /**\n     * Event handler for compositionend on the input.\n     */\n    public onCompositionEnd() {\n        this.isComposing = false;\n    }\n\n    /**\n     * Event handler for input click event.\n     */\n    public onInputClick() {\n        if (this.column.dataType === DataType.Boolean && this.dropDownConditions.collapsed) {\n            this.inputGroupPrefix.nativeElement.focus();\n            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n        }\n    }\n\n    /**\n     * Event handler for datepicker's close.\n     */\n    public datePickerClose() {\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * Returns the filtering operation condition for a given value.\n     */\n    public getCondition(value: string): IFilteringOperation {\n        return this.column.filters.condition(value);\n    }\n\n    /**\n     * Returns the translated condition name for a given value.\n     */\n    public translateCondition(value: string): string {\n        return this.filteringService.grid.resourceStrings[`igx_grid_filter_${this.getCondition(value).name}`] || value;\n    }\n\n    /**\n     * Returns the icon name of the current condition.\n     */\n    public getIconName(): string {\n        if (this.column.dataType === DataType.Boolean && this.expression.condition === null) {\n            return this.getCondition(this.conditions[0]).iconName;\n        } else {\n            return this.expression.condition.iconName;\n        }\n    }\n\n    /**\n     * Returns whether a given condition is selected in dropdown.\n     */\n    public isConditionSelected(conditionName: string): boolean {\n        if (this.expression.condition) {\n            return this.expression.condition.name === conditionName;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Clears the current filtering.\n     */\n    public clearFiltering() {\n        this.filteringService.clearFilter(this.column.field);\n        this.resetExpression();\n        if (this.input) {\n            this.input.nativeElement.focus();\n        }\n        this.cdr.detectChanges();\n\n        this.chipAreaScrollOffset = 0;\n        this.transform(this.chipAreaScrollOffset);\n    }\n\n    /**\n     * Commits the value of the input.\n     */\n    public commitInput() {\n        const selectedItem = this.expressionsList.filter(ex => ex.isSelected === true);\n        selectedItem.forEach(e => e.isSelected = false);\n\n        let indexToDeselect = -1;\n        for (let index = 0; index < this.expressionsList.length; index++) {\n            const expression = this.expressionsList[index].expression;\n            if (expression.searchVal === null && !expression.condition.isUnary) {\n                indexToDeselect = index;\n            }\n        }\n        if (indexToDeselect !== -1) {\n            this.removeExpression(indexToDeselect, this.expression);\n        }\n        this.resetExpression();\n        this.scrollChipsWhenAddingExpression();\n    }\n\n    /**\n     * Clears the value of the input.\n     */\n    public clearInput() {\n        this.value = null;\n    }\n\n    /**\n     * Event handler for keydown on clear button.\n     */\n    public onClearKeyDown(eventArgs: KeyboardEvent) {\n        if (eventArgs.key === KEYS.ENTER || eventArgs.key === KEYS.SPACE || eventArgs.key === KEYS.SPACE_IE) {\n            eventArgs.preventDefault();\n            this.clearInput();\n            this.input.nativeElement.focus();\n        }\n    }\n\n    /**\n     * Event handler for click on clear button.\n     */\n    public onClearClick() {\n        this.clearInput();\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * Event handler for keydown on commit button.\n     */\n    public onCommitKeyDown(eventArgs: KeyboardEvent) {\n        if (eventArgs.key === KEYS.ENTER || eventArgs.key === KEYS.SPACE || eventArgs.key === KEYS.SPACE_IE) {\n            eventArgs.preventDefault();\n            this.commitInput();\n            this.input.nativeElement.focus();\n        }\n    }\n\n    /**\n     * Event handler for click on commit button.\n     */\n    public onCommitClick() {\n        this.commitInput();\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * Event handler for focusout on the input group.\n     */\n    public onInputGroupFocusout() {\n        if (!this.value && this.value !== 0 &&\n            this.expression.condition && !this.expression.condition.isUnary) {\n            return;\n        }\n        requestAnimationFrame(() => {\n            const focusedElement = document.activeElement;\n            if (focusedElement.className === 'igx-chip__remove') {\n                return;\n            }\n            if (!(focusedElement && this.inputGroup.nativeElement.contains(focusedElement))\n                && this.dropDownConditions.collapsed) {\n                this.commitInput();\n            }\n        });\n    }\n\n    /**\n     * Closes the filtering edit row.\n     */\n    public close() {\n        if (this.expressionsList.length === 1 &&\n            this.expressionsList[0].expression.searchVal === null &&\n            this.expressionsList[0].expression.condition.isUnary === false) {\n            this.filteringService.getExpressions(this.column.field).pop();\n        } else {\n            this.expressionsList.forEach((item) => {\n                if (item.expression.searchVal === null && !item.expression.condition.isUnary) {\n                    this.filteringService.removeExpression(this.column.field, this.expressionsList.indexOf(item));\n                }\n            });\n        }\n\n        this.filteringService.isFilterRowVisible = false;\n\n        this.filteringService.updateFilteringCell(this.column);\n        this.filteringService.focusFilterCellChip(this.column, true);\n\n        this.filteringService.filteredColumn = null;\n        this.filteringService.selectedExpression = null;\n\n        this.chipAreaScrollOffset = 0;\n        this.transform(this.chipAreaScrollOffset);\n    }\n\n    /*\n    * noop\n    */\n    public noop() { }\n\n    /**\n     *  Event handler for date picker's selection.\n     */\n    public onDateSelected(value: Date) {\n        this.value = value;\n        this.commitInput();\n    }\n\n    /**\n     * Opens the conditions dropdown.\n     */\n    public toggleConditionsDropDown(target: any) {\n        this._conditionsOverlaySettings.positionStrategy.settings.target = target;\n        this.dropDownConditions.toggle(this._conditionsOverlaySettings);\n    }\n\n    /**\n     * Opens the logic operators dropdown.\n     */\n    public toggleOperatorsDropDown(eventArgs, index) {\n        this._operatorsOverlaySettings.positionStrategy.settings.target = eventArgs.target.parentElement;\n        this.dropDownOperators.toArray()[index].toggle(this._operatorsOverlaySettings);\n    }\n\n    /**\n     * Event handler for change event in conditions dropdown.\n     */\n    public onConditionsChanged(eventArgs) {\n        const value = (eventArgs.newSelection as IgxDropDownItemComponent).value;\n        this.expression.condition = this.getCondition(value);\n        if (this.expression.condition.isUnary) {\n            // update grid's filtering on the next cycle to ensure the drop-down is closed\n            // if the drop-down is not closed this event handler will be invoked multiple times\n            requestAnimationFrame(() => this.unaryConditionChangedCallback());\n        } else {\n            requestAnimationFrame(() => this.conditionChangedCallback());\n        }\n\n        if (this.input) {\n            // Add requestAnimationFrame becasue of an issue in IE, where you are still able to write in the input,\n            // if it has been focused and then set to readonly.\n            requestAnimationFrame(() => this.input.nativeElement.focus());\n        }\n    }\n\n\n    public onChipPointerdown(args, chip: IgxChipComponent) {\n        const activeElement = document.activeElement;\n        this._cancelChipClick = chip.selected && activeElement &&\n            this.inputGroup.nativeElement.contains(activeElement);\n    }\n\n    public onChipClick(args, item: ExpressionUI) {\n        if (this._cancelChipClick) {\n            return;\n        }\n\n        this._cancelChipClick = false;\n\n        this.expressionsList.forEach(ex => ex.isSelected = false);\n\n        this.toggleChip(item);\n    }\n\n    public toggleChip(item: ExpressionUI) {\n        item.isSelected = !item.isSelected;\n        if (item.isSelected) {\n            this.expression = item.expression;\n\n            if (this.input) {\n                this.input.nativeElement.focus();\n            }\n        }\n    }\n\n    /**\n     * Event handler for chip keydown event.\n     */\n    public onChipKeyDown(eventArgs: KeyboardEvent, item: ExpressionUI) {\n        if (eventArgs.key === KEYS.ENTER) {\n            eventArgs.preventDefault();\n\n            this.toggleChip(item);\n        }\n    }\n\n    /**\n     * Scrolls the first chip into view if the tab key is pressed on the left arrow.\n     */\n    public onLeftArrowKeyDown(event) {\n        if (event.key === KEYS.TAB) {\n            this.chipAreaScrollOffset = 0;\n            this.transform(this.chipAreaScrollOffset);\n        }\n    }\n\n    /**\n     * Event handler for chip removed event.\n     */\n    public onChipRemoved(eventArgs: IBaseChipEventArgs, item: ExpressionUI) {\n        const indexToRemove = this.expressionsList.indexOf(item);\n        this.removeExpression(indexToRemove, item.expression);\n\n        this.scrollChipsOnRemove();\n    }\n\n    /**\n     * Event handler for logic operator changed event.\n     */\n    public onLogicOperatorChanged(eventArgs: ISelectionEventArgs, expression: ExpressionUI) {\n        if (eventArgs.oldSelection) {\n            expression.afterOperator = (eventArgs.newSelection as IgxDropDownItemComponent).value;\n            this.expressionsList[this.expressionsList.indexOf(expression) + 1].beforeOperator = expression.afterOperator;\n\n            // update grid's filtering on the next cycle to ensure the drop-down is closed\n            // if the drop-down is not closed this event handler will be invoked multiple times\n            requestAnimationFrame(() => this.filter());\n        }\n    }\n\n    /**\n     * Scrolls the chips into the chip area when left or right arrows are pressed.\n     */\n    public scrollChipsOnArrowPress(arrowPosition: string) {\n        let count = 0;\n        const chipAraeChildren = this.chipsArea.element.nativeElement.children;\n        const containerRect = this.container.nativeElement.getBoundingClientRect();\n\n        if (arrowPosition === 'right') {\n            for (let index = 0; index < chipAraeChildren.length; index++) {\n                if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().right) < Math.ceil(containerRect.right)) {\n                    count++;\n                }\n            }\n\n            if (count < chipAraeChildren.length) {\n                this.chipAreaScrollOffset -= Math.ceil(chipAraeChildren[count].getBoundingClientRect().right) -\n                    Math.ceil(containerRect.right) + 1;\n                this.transform(this.chipAreaScrollOffset);\n            }\n        }\n\n        if (arrowPosition === 'left') {\n            for (let index = 0; index < chipAraeChildren.length; index++) {\n                if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().left) < Math.ceil(containerRect.left)) {\n                    count++;\n                }\n            }\n\n            if (count > 0) {\n                this.chipAreaScrollOffset += Math.ceil(containerRect.left) -\n                    Math.ceil(chipAraeChildren[count - 1].getBoundingClientRect().left) + 1;\n                this.transform(this.chipAreaScrollOffset);\n            }\n        }\n    }\n\n    private showHideArrowButtons() {\n        requestAnimationFrame(() => {\n            if (this.filteringService.isFilterRowVisible) {\n                const containerWidth = this.container.nativeElement.getBoundingClientRect().width;\n                this.chipsAreaWidth = this.chipsArea.element.nativeElement.getBoundingClientRect().width;\n\n                this.showArrows = this.chipsAreaWidth >= containerWidth && this.isColumnFiltered;\n\n                // TODO: revise the cdr.detectChanges() usage here\n                if (!(this.cdr as ViewRef).destroyed) {\n                this.cdr.detectChanges(); }\n            }\n        });\n    }\n\n    private transformValue(value): any {\n        if (this.column.dataType === DataType.Number) {\n            value = parseFloat(value);\n        } else if (this.column.dataType === DataType.Boolean) {\n            value = Boolean(value);\n        }\n\n        return value;\n    }\n\n    private addExpression(isSelected: boolean) {\n        const exprUI = new ExpressionUI();\n        exprUI.expression = this.expression;\n        exprUI.beforeOperator = this.expressionsList.length > 0 ? FilteringLogic.And : null;\n        exprUI.isSelected = isSelected;\n\n        this.expressionsList.push(exprUI);\n\n        const length = this.expressionsList.length;\n        if (this.expressionsList[length - 2]) {\n            this.expressionsList[length - 2].afterOperator = this.expressionsList[length - 1].beforeOperator;\n        }\n\n        this.showHideArrowButtons();\n    }\n\n    private removeExpression(indexToRemove: number, expression: IFilteringExpression) {\n        if (indexToRemove === 0 && this.expressionsList.length === 1) {\n            this.clearFiltering();\n            return;\n        }\n\n        this.filteringService.removeExpression(this.column.field, indexToRemove);\n\n        this.filter();\n\n        if (this.expression === expression) {\n            this.resetExpression();\n        }\n\n        this.showHideArrowButtons();\n    }\n\n    private resetExpression() {\n        this.expression = {\n            fieldName: this.column.field,\n            condition: null,\n            searchVal: null,\n            ignoreCase: this.column.filteringIgnoreCase\n        };\n\n        if (this.column.dataType !== DataType.Boolean) {\n            this.expression.condition = this.getCondition(this.conditions[0]);\n        }\n\n        if (this.column.dataType === DataType.Date && this.input) {\n            this.input.nativeElement.value = null;\n        }\n\n        this.showHideArrowButtons();\n    }\n\n    private scrollChipsWhenAddingExpression() {\n        const chipAraeChildren = this.chipsArea.element.nativeElement.children;\n        if (!chipAraeChildren || chipAraeChildren.length === 0) {\n            return;\n        }\n\n        const containerRectRight = Math.ceil(this.container.nativeElement.getBoundingClientRect().right);\n\n        const lastChipRectRight = Math.ceil(chipAraeChildren[chipAraeChildren.length - 1].getBoundingClientRect().right);\n        if (lastChipRectRight >= containerRectRight) {\n            this.chipAreaScrollOffset -= lastChipRectRight - containerRectRight;\n            this.transform(this.chipAreaScrollOffset);\n        }\n    }\n\n    /**\n     * @hidden\n     * Resets the chips area\n     * @memberof IgxGridFilteringRowComponent\n     */\n    public resetChipsArea() {\n        this.chipAreaScrollOffset = 0;\n        this.transform(this.chipAreaScrollOffset);\n        this.showHideArrowButtons();\n    }\n\n    private transform(offset: number) {\n        requestAnimationFrame(() => {\n            this.chipsArea.element.nativeElement.style.transform = `translate(${offset}px)`;\n        });\n    }\n\n    private scrollChipsOnRemove() {\n        let count = 0;\n        const chipAraeChildren = this.chipsArea.element.nativeElement.children;\n        const containerRect = this.container.nativeElement.getBoundingClientRect();\n\n        for (let index = 0; index < chipAraeChildren.length; index++) {\n            if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().right) < Math.ceil(containerRect.left)) {\n                count++;\n            }\n        }\n\n        if (count <= 2) {\n            this.chipAreaScrollOffset = 0;\n        } else {\n            const dif = chipAraeChildren[count].id === 'chip' ? count - 2 : count - 1;\n            this.chipAreaScrollOffset += Math.ceil(containerRect.left) - Math.ceil(chipAraeChildren[dif].getBoundingClientRect().left) + 1;\n        }\n\n        this.transform(this.chipAreaScrollOffset);\n    }\n\n    private conditionChangedCallback() {\n        if (!!this.expression.searchVal || this.expression.searchVal === 0) {\n            this.filter();\n        } else if (this.value) {\n            this.value = null;\n        }\n    }\n\n    private unaryConditionChangedCallback() {\n        if (this.value) {\n            this.value = null;\n        }\n        if (this.expressionsList.find(item => item.expression === this.expression) === undefined) {\n            this.addExpression(true);\n        }\n        this.filter();\n    }\n\n    private filter() {\n        this.filteringService.filterInternal(this.column.field);\n    }\n\n    private get isColumnFiltered() {\n        return this.column.filteringExpressionsTree && this.column.filteringExpressionsTree.filteringOperands.length > 0;\n    }\n}\n","import { IgxDropDownItemComponent } from './../drop-down/drop-down-item.component';\nimport { Component, DoCheck, Input } from '@angular/core';\n\n@Component({\n    selector: 'igx-select-item',\n    template: '<ng-content></ng-content>'\n})\nexport class IgxSelectItemComponent extends IgxDropDownItemComponent implements DoCheck {\n\n    private _text: any;\n\n    /**\n     * An @Input property that gets/sets the item's text to be displayed in the select component's input when the item is selected.\n     *\n     * ```typescript\n     *  //get\n     *  let mySelectedItem = this.dropDown.selectedItem;\n     *  let selectedItemText = mySelectedItem.text;\n     * ```\n\n     * ```html\n     * // set\n     * <igx-select-item [text]=\"'London'\"></igx-select-item>\n     * ```\n     */\n    @Input()\n    public get text(): string {\n        return this._text;\n    }\n\n    public set text(text: string) {\n        this._text = text;\n    }\n\n    /** @hidden @internal */\n    public get itemText() {\n        if (this._text !== undefined) {\n            return this._text;\n        }\n        // If text @Input is undefined, try extract a meaningful item text out of the item template\n        return this.elementRef.nativeElement.textContent.trim();\n    }\n\n    /**\n     * Sets/Gets if the item is the currently selected one in the select\n     *\n     * ```typescript\n     *  let mySelectedItem = this.select.selectedItem;\n     *  let isMyItemSelected = mySelectedItem.selected; // true\n     * ```\n     */\n    public get selected() {\n        return !this.isHeader && !this.disabled && this.selection.is_item_selected(this.dropDown.id, this);\n    }\n\n    public set selected(value: any) {\n        if (value && !this.isHeader && !this.disabled) {\n            this.dropDown.selectItem(this);\n        }\n    }\n\n    /** @hidden @internal */\n    public isHeader: boolean;\n\n    ngDoCheck(): void {\n    }\n}\n","import { VerticalAlignment, HorizontalAlignment, PositionSettings, Size, Point, Util } from '../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../services/overlay/position/connected-positioning-strategy';\nimport { IPositionStrategy } from '../services/overlay/position';\nimport { fadeOut, fadeIn } from '../animations/main';\nimport { IgxSelectBase } from './select.common';\nimport { isIE } from '../core/utils';\n\n/** @hidden */\nenum Direction {\n    Top = -1,\n    Bottom = 1,\n    None = 0\n}\n\n/** @hidden @internal */\nexport class SelectPositioningStrategy extends ConnectedPositioningStrategy implements IPositionStrategy {\n\n    private _selectDefaultSettings = {\n        target: null,\n        horizontalDirection: HorizontalAlignment.Right,\n        verticalDirection: VerticalAlignment.Bottom,\n        horizontalStartPoint: HorizontalAlignment.Left,\n        verticalStartPoint: VerticalAlignment.Top,\n        openAnimation: fadeIn,\n        closeAnimation: fadeOut\n    };\n    public settings: PositionSettings;\n\n    constructor(public select: IgxSelectBase, settings?: PositionSettings) {\n        super();\n        this.settings = Object.assign({}, this._selectDefaultSettings, settings);\n    }\n\n    private defaultWindowToListOffset = 5;\n    private viewPort = Util.getViewportRect(document);\n    private deltaY: number;\n    private deltaX: number;\n    private itemTextPadding: number;\n    private itemTextIndent: number;\n    private listContainerBoundRect: DOMRect;\n    private itemTextToInputTextDiff: number;\n\n    private positionAndScrollBottom(contentElement: HTMLElement, outBoundsAmount: number) {\n        contentElement.style.top = `${this.viewPort.bottom - this.listContainerBoundRect.height - this.defaultWindowToListOffset}px`;\n        contentElement.firstElementChild.scrollTop -= outBoundsAmount - (this.defaultWindowToListOffset);\n        this.deltaY = this.viewPort.bottom - this.listContainerBoundRect.height -\n            this.defaultWindowToListOffset - (this.select.input.nativeElement.getBoundingClientRect() as DOMRect).top;\n    }\n\n    private positionNoScroll(contentElement: HTMLElement, CURRENT_POSITION_Y: number) {\n        contentElement.style.top = `${CURRENT_POSITION_Y - this.itemTextToInputTextDiff}px`;\n        this.deltaY = CURRENT_POSITION_Y -\n            (this.select.input.nativeElement.getBoundingClientRect() as DOMRect).top - this.itemTextToInputTextDiff;\n    }\n\n    private positionAndScrollTop(contentElement: HTMLElement, outBoundsAmount: number) {\n        contentElement.style.top = `${this.viewPort.top + this.defaultWindowToListOffset}px`;\n        contentElement.firstElementChild.scrollTop += outBoundsAmount + this.itemTextToInputTextDiff + this.defaultWindowToListOffset;\n        this.deltaY = this.viewPort.top + this.defaultWindowToListOffset -\n            (this.select.input.nativeElement.getBoundingClientRect() as DOMRect).top;\n    }\n\n    private getItemsOutOfView(contentElement: HTMLElement, itemHeight: number): {\n        'currentScroll': number,\n        'remainingScroll': number\n    } {\n        if (contentElement.firstElementChild.scrollHeight <= contentElement.firstElementChild.clientHeight) {\n            return {\n                'currentScroll': 0,\n                'remainingScroll': 0\n            };\n        }\n        const currentScroll = contentElement.firstElementChild.scrollTop;\n        const remainingScroll = this.select.items.length * itemHeight - currentScroll - this.listContainerBoundRect.height;\n        return {\n            'currentScroll': currentScroll,\n            'remainingScroll': remainingScroll\n        };\n    }\n\n    private listOutOfBounds(elementContainer: { top: number, bottom: number }, document: Document): {\n        Direction: Direction,\n        Amount: number\n    } {\n        const container = {\n            TOP: elementContainer.top,\n            BOTTOM: elementContainer.bottom,\n        };\n        const viewPort = Util.getViewportRect(document);\n        const documentElement = {\n            TOP: viewPort.top,\n            BOTTOM: viewPort.bottom\n        };\n        const returnVals = {\n            Direction: Direction.None,\n            Amount: 0\n        };\n        if (documentElement.TOP + this.defaultWindowToListOffset > container.TOP) {\n            returnVals.Direction = Direction.Top;\n            returnVals.Amount = documentElement.TOP - container.TOP;\n        } else if (documentElement.BOTTOM - this.defaultWindowToListOffset < container.BOTTOM) {\n            returnVals.Direction = Direction.Bottom;\n            returnVals.Amount = container.BOTTOM - documentElement.BOTTOM;\n        } else {\n            return null;\n        }\n        return returnVals;\n    }\n\n    position(contentElement: HTMLElement, size: Size, document?: Document, initialCall?: boolean): void {\n        const inputElement = this.select.input.nativeElement;\n        const inputRect = inputElement.getBoundingClientRect() as DOMRect;\n        this.listContainerBoundRect = contentElement.getBoundingClientRect() as DOMRect;\n        const LIST_HEIGHT = this.listContainerBoundRect.height;\n        if (!initialCall) {\n            this.deltaX = inputRect.left - this.itemTextPadding - this.itemTextIndent;\n            const point = new Point(this.deltaX, inputRect.top + this.deltaY);\n            this.settings.target = point;\n            super.position(contentElement, size);\n            return;\n        }\n\n        const START = {\n            X: inputRect.left,\n            Y: inputRect.top\n        };\n\n        let itemElement;\n        if (this.select.selectedItem) {\n            itemElement = this.select.selectedItem.element.nativeElement;\n            // D.P. Feb 22 2019, #3921 Force item scroll before measuring in IE11, due to base scrollToItem delay\n            if (isIE()) {\n                contentElement.firstElementChild.scrollTop = this.select.calculateScrollPosition(this.select.selectedItem);\n            }\n        } else {\n            itemElement = this.select.getFirstItemElement();\n        }\n        const inputHeight = inputRect.height;\n        const itemBoundRect = itemElement.getBoundingClientRect() as DOMRect;\n        const itemTopListOffset = itemBoundRect.top - this.listContainerBoundRect.top;\n        const itemHeight = itemBoundRect.height;\n\n        const inputFontSize = window.getComputedStyle(inputElement).fontSize;\n        const numericInputFontSize = parseInt(inputFontSize.slice(0, inputFontSize.indexOf('p')), 10) || 0;\n        const itemFontSize = window.getComputedStyle(itemElement).fontSize;\n        const numericItemFontSize = parseInt(itemFontSize.slice(0, itemFontSize.indexOf('p')), 10) || 0;\n        const inputTextToInputTop = (inputHeight - numericInputFontSize) / 2;\n        const itemTextToItemTop = (itemHeight - numericItemFontSize) / 2;\n        this.itemTextToInputTextDiff = itemTextToItemTop - inputTextToInputTop;\n\n        let CURRENT_POSITION_Y = START.Y - itemTopListOffset;\n        const CURRENT_BOTTOM_Y = CURRENT_POSITION_Y + this.listContainerBoundRect.height;\n\n        const OUT_OF_BOUNDS: {\n            Direction: Direction,\n            Amount: number\n        } = this.listOutOfBounds({ top: CURRENT_POSITION_Y, bottom: CURRENT_BOTTOM_Y }, document);\n        if (OUT_OF_BOUNDS) {\n            if (OUT_OF_BOUNDS.Direction === Direction.Top) {\n                CURRENT_POSITION_Y = START.Y;\n            } else {\n                CURRENT_POSITION_Y = -1 * (LIST_HEIGHT - (itemHeight - (itemHeight - inputHeight) / 2));\n                CURRENT_POSITION_Y += START.Y;\n            }\n        }\n        const selectItemPaddingHorizontal = 24;\n        const itemLeftPadding = window.getComputedStyle(itemElement).paddingLeft;\n        const itemTextIndent = window.getComputedStyle(itemElement).textIndent;\n        const numericLeftPadding = parseInt(itemLeftPadding.slice(0, itemLeftPadding.indexOf('p')), 10) || 0;\n        const numericTextIndent = parseInt(itemTextIndent.slice(0, itemTextIndent.indexOf('r')), 10) || 0;\n        this.itemTextPadding = numericLeftPadding;\n        this.itemTextIndent = numericTextIndent;\n        contentElement.style.left += `${START.X - numericLeftPadding - numericTextIndent}px`;\n        contentElement.style.width = inputRect.width + 24 + selectItemPaddingHorizontal * 2 + 'px';\n        this.deltaX = START.X - numericLeftPadding - numericTextIndent;\n        const currentScroll = this.getItemsOutOfView(contentElement, itemHeight)['currentScroll'];\n        const remainingScroll = this.getItemsOutOfView(contentElement, itemHeight)['remainingScroll'];\n\n        // (5 items or less) no scroll and respectively no remaining scroll\n        if (remainingScroll === 0 && currentScroll === 0) {\n            this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n        }\n        // (more than 5 items) there is scroll OR remaining scroll\n        if (remainingScroll !== 0 || currentScroll !== 0) {\n            if (remainingScroll !== 0 && !OUT_OF_BOUNDS) {\n                this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n            }\n            // (more than 5 items) and container getting out of the visible port\n            if (remainingScroll !== 0 && OUT_OF_BOUNDS) {\n                // if there is enough remaining scroll to scroll the item\n                if (remainingScroll > itemHeight) {\n                    if (OUT_OF_BOUNDS.Direction === Direction.Top) {\n                        this.positionAndScrollTop(contentElement, OUT_OF_BOUNDS.Amount);\n                        return;\n                    }\n                    if (OUT_OF_BOUNDS.Direction === Direction.Bottom) {\n                        // (more than 5 items) and no current scroll\n                        if (currentScroll === 0) {\n                            this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n                            return;\n                            // (more than 5 items) and current scroll\n                        } else {\n                            this.positionAndScrollBottom(contentElement, OUT_OF_BOUNDS.Amount);\n                            return;\n                        }\n                    }\n                }\n                // if there is no enough remaining scroll to scroll the item\n                if (remainingScroll < itemHeight) {\n                    if (OUT_OF_BOUNDS.Direction === Direction.Top) {\n                        this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n\n                    }\n                    if (OUT_OF_BOUNDS.Direction === Direction.Bottom) {\n                        this.positionAndScrollBottom(contentElement, OUT_OF_BOUNDS.Amount);\n                    }\n                }\n            }\n            // (more than 5 items) and no remaining scroll\n            if (remainingScroll === 0 && currentScroll !== 0) {\n                if (OUT_OF_BOUNDS) {\n                    if (OUT_OF_BOUNDS.Direction === Direction.Bottom) {\n                        this.positionAndScrollBottom(contentElement, OUT_OF_BOUNDS.Amount);\n                        return;\n                    }\n                }\n                this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n            }\n        }\n    }\n}\n","import { IgxInputDirective, IgxInputState } from './../directives/input/input.directive';\nimport {\n    Component, ContentChildren, forwardRef, QueryList, ViewChild, Input, ContentChild,\n    AfterContentInit, HostBinding, Directive, TemplateRef, ElementRef, ChangeDetectorRef, Optional,\n    Injector, OnInit, AfterViewInit, OnDestroy, Inject, Type\n\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR, NgControl, AbstractControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\n\nimport { IgxDropDownItemBase } from '../drop-down/index';\nimport { IgxInputGroupComponent } from '../input-group/input-group.component';\n\nimport { IgxDropDownComponent } from './../drop-down/drop-down.component';\nimport { IgxSelectItemComponent } from './select-item.component';\nimport { SelectPositioningStrategy } from './select-positioning-strategy';\n\nimport { OverlaySettings, AbsoluteScrollStrategy } from '../services/index';\nimport { IGX_DROPDOWN_BASE, ISelectionEventArgs, Navigate } from '../drop-down/drop-down.common';\nimport { CancelableEventArgs } from '../core/utils';\nimport { IgxLabelDirective } from '../directives/label/label.directive';\nimport { IgxSelectBase } from './select.common';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\n\n/** @hidden @internal */\n@Directive({\n    selector: '[igxSelectToggleIcon]'\n})\nexport class IgxSelectToggleIconDirective {\n}\n\nconst noop = () => { };\n\n/**\n * **Ignite UI for Angular Select** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/select.html)\n *\n * The `igxSelect` provides an input with dropdown list allowing selection of a single item.\n *\n * Example:\n * ```html\n * <igx-select #select1 [placeholder]=\"'Pick One'\">\n *   <label igxLabel>Select Label</label>\n *   <igx-select-item *ngFor=\"let item of items\" [value]=\"item.field\">\n *     {{ item.field }}\n *   </igx-select-item>\n * </igx-select>\n * ```\n */\n@Component({\n    selector: 'igx-select',\n    templateUrl: './select.component.html',\n    providers: [\n        { provide: NG_VALUE_ACCESSOR, useExisting: IgxSelectComponent, multi: true },\n        { provide: IGX_DROPDOWN_BASE, useExisting: IgxSelectComponent }],\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxSelectComponent extends IgxDropDownComponent implements IgxSelectBase, ControlValueAccessor,\n    AfterContentInit, OnInit, AfterViewInit, OnDestroy, EditorProvider {\n\n    private ngControl: NgControl = null;\n    private _statusChanges$: Subscription;\n    private _overlayDefaults: OverlaySettings;\n    private _value: any;\n\n    /** @hidden @internal do not use the drop-down container class */\n    public cssClass = false;\n\n    /** @hidden @internal */\n    @ViewChild('inputGroup', { read: IgxInputGroupComponent, static: true }) public inputGroup: IgxInputGroupComponent;\n\n    /** @hidden @internal */\n    @ViewChild('input', { read: IgxInputDirective, static: true }) public input: IgxInputDirective;\n\n    /** @hidden @internal */\n    @ContentChildren(forwardRef(() => IgxSelectItemComponent), { descendants: true })\n    public children: QueryList<IgxSelectItemComponent>;\n\n    /** @hidden @internal */\n    @ContentChild(forwardRef(() => IgxLabelDirective), { static: true }) label: IgxLabelDirective;\n\n    /** @hidden @internal */\n    public allowItemsFocus = false;\n\n    /** @hidden @internal */\n    public height: string;\n\n    /**\n     * An @Input property that gets/sets the component value.\n     *\n     * ```typescript\n     * // get\n     * let selectValue = this.select.value;\n     * ```\n     *\n     * ```typescript\n     * // set\n     * this.select.value = 'London';\n     * ```\n     * ```html\n     * <igx-select [value]=\"value\"></igx-select>\n     * ```\n     */\n    @Input()\n    public get value(): any {\n        return this._value;\n    }\n    public set value(v: any) {\n        if (this._value === v) {\n            return;\n        }\n        this._value = v;\n        this.setSelection(this.items.find(x => x.value === this.value));\n        this.cdr.detectChanges();\n    }\n    /**\n     * An @Input property that sets input placeholder.\n     *\n     */\n    @Input() public placeholder;\n\n\n    /**\n     * An @Input property that disables the `IgxSelectComponent`.\n     * ```html\n     * <igx-select [disabled]=\"'true'\"></igx-select>\n     * ```\n     */\n    @Input() public disabled = false;\n\n    /**\n     * An @Input property that sets custom OverlaySettings `IgxSelectComponent`.\n     * ```html\n     * <igx-select [overlaySettings] = \"customOverlaySettings\"></igx-select>\n     * ```\n     */\n    @Input()\n    overlaySettings: OverlaySettings;\n\n    /** @hidden @internal */\n    @HostBinding('style.maxHeight')\n    public maxHeight = '256px';\n\n    /** @hidden @internal */\n    public width: string;\n\n    /**\n     * An @Input property that sets how the select will be styled.\n     * The allowed values are `line`, `box` and `border`. The default is `line`.\n     * ```html\n     *<igx-select [type]=\"'box'\"></igx-select>\n     * ```\n     */\n    @Input()\n    public type = 'line';\n\n    /**\n     * The custom template, if any, that should be used when rendering the select TOGGLE(open/close) button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.select.toggleIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-select #select>\n     *      ...\n     *      <ng-template igxSelectToggleIcon let-collapsed>\n     *          <igx-icon>{{ collapsed ? 'remove_circle' : 'remove_circle_outline'}}</igx-icon>\n     *      </ng-template>\n     *  </igx-select>\n     * ```\n     */\n    @ContentChild(IgxSelectToggleIconDirective, { read: TemplateRef, static: false })\n    public toggleIconTemplate: TemplateRef<any> = null;\n\n    /** @hidden @internal */\n    public get selectionValue() {\n        const selectedItem = this.selectedItem;\n        return selectedItem ? selectedItem.itemText : '';\n    }\n\n    /** @hidden @internal */\n    public get selectedItem(): IgxSelectItemComponent {\n        return this.selection.first_item(this.id);\n    }\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions,\n        private _injector: Injector) {\n        super(elementRef, cdr, selection, _displayDensityOptions);\n    }\n\n    /** @hidden @internal */\n    private _onChangeCallback: (_: any) => void = noop;\n\n    /** @hidden @internal */\n    public writeValue = (value: any) => {\n        this.value = value;\n    }\n\n    /** @hidden @internal */\n    public registerOnChange(fn: any): void {\n        this._onChangeCallback = fn;\n    }\n\n    /** @hidden @internal */\n    public registerOnTouched(fn: any): void { }\n\n    /** @hidden @internal */\n    public setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /** @hidden @internal */\n    public getEditElement(): HTMLElement {\n        return this.input.nativeElement;\n    }\n\n    /** @hidden @internal */\n    public selectItem(newSelection: IgxDropDownItemBase, event?) {\n        const oldSelection = this.selectedItem;\n\n        if (event) {\n            this.toggleDirective.close();\n        }\n        if (newSelection === null || newSelection === oldSelection || newSelection.disabled || newSelection.isHeader) {\n            return;\n        }\n\n        const args: ISelectionEventArgs = { oldSelection, newSelection, cancel: false };\n        this.onSelection.emit(args);\n\n        if (args.cancel) {\n            return;\n        }\n\n        this.setSelection(newSelection);\n        this._value = newSelection.value;\n        this.cdr.detectChanges();\n        this._onChangeCallback(this.value);\n    }\n\n    /** @hidden @internal */\n    public getFirstItemElement(): HTMLElement {\n        return this.children.first.element.nativeElement;\n    }\n\n    /**\n     * Opens the select\n     *\n     * ```typescript\n     * this.select.open();\n     * ```\n     */\n    public open(overlaySettings?: OverlaySettings) {\n        if (this.disabled || this.items.length === 0) {\n            return;\n        }\n        if (!this.selectedItem) {\n            this.navigateFirst();\n        }\n\n        super.open(Object.assign({}, this._overlayDefaults, this.overlaySettings, overlaySettings));\n    }\n\n    /** @hidden @internal */\n    ngAfterContentInit() {\n        this._overlayDefaults = {\n            modal: false,\n            closeOnOutsideClick: false,\n            positionStrategy: new SelectPositioningStrategy(this, { target: this.inputGroup.element.nativeElement }),\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            excludePositionTarget: true\n        };\n        this.children.changes.subscribe(() => {\n            this.setSelection(this.items.find(x => x.value === this.value));\n            this.cdr.detectChanges();\n        });\n        Promise.resolve().then(() => this.children.notifyOnChanges());\n    }\n\n    /** @hidden @internal */\n    public onToggleOpening(event: CancelableEventArgs) {\n        this.onOpening.emit(event);\n        if (event.cancel) {\n            return;\n        }\n        this.scrollToItem(this.selectedItem);\n    }\n\n    protected navigate(direction: Navigate, currentIndex?: number) {\n        if (this.collapsed && this.selectedItem) {\n            this.navigateItem(this.selectedItem.itemIndex);\n        }\n        super.navigate(direction, currentIndex);\n    }\n\n    protected manageRequiredAsterisk(): void {\n        if (this.ngControl && this.ngControl.control.validator) {\n            // Run the validation with empty object to check if required is enabled.\n            const error = this.ngControl.control.validator({} as AbstractControl);\n            this.inputGroup.isRequired = error && error.required;\n            this.cdr.markForCheck();\n        }\n    }\n    private setSelection(item: IgxDropDownItemBase) {\n        if (item && item.value !== undefined && item.value !== null) {\n            this.selection.set(this.id, new Set([item]));\n        } else {\n            this.selection.clear(this.id);\n        }\n    }\n\n    /** @hidden @internal */\n    public onBlur(): void {\n        if (this.ngControl && !this.ngControl.valid) {\n             this.input.valid = IgxInputState.INVALID;\n        } else {\n            this.input.valid = IgxInputState.INITIAL;\n        }\n        if (!this.collapsed) {\n            this.toggleDirective.close();\n        }\n    }\n\n    protected onStatusChanged() {\n        if ((this.ngControl.control.touched || this.ngControl.control.dirty) &&\n            (this.ngControl.control.validator || this.ngControl.control.asyncValidator)) {\n            if (this.inputGroup.isFocused) {\n                this.input.valid = this.ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;\n            } else {\n                this.input.valid = this.ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;\n            }\n        }\n        this.manageRequiredAsterisk();\n    }\n    /**\n     * @hidden @internal\n     */\n    public ngOnInit() {\n        this.ngControl = this._injector.get<NgControl>(NgControl as Type<NgControl>, null);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngAfterViewInit() {\n        if (this.ngControl) {\n            this._statusChanges$ = this.ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));\n            this.manageRequiredAsterisk();\n        }\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnDestroy() {\n        this.selection.clear(this.id);\n        if (this._statusChanges$) {\n            this._statusChanges$.unsubscribe();\n        }\n    }\n}\n\n","import {\n    Component, Input, ViewChild, ChangeDetectorRef, ViewChildren, QueryList, ElementRef, AfterViewInit, OnDestroy, HostBinding\n} from '@angular/core';\nimport { VerticalAlignment, HorizontalAlignment, Point, OverlaySettings } from '../../../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../../../services/overlay/position/connected-positioning-strategy';\nimport { IgxFilteringService } from '../grid-filtering.service';\nimport { IgxOverlayService } from '../../../services/overlay/overlay';\nimport { IgxGridBaseComponent, IgxColumnComponent } from '../../grid';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../../../data-operations/filtering-expressions-tree';\nimport { FilteringLogic, IFilteringExpression } from '../../../data-operations/filtering-expression.interface';\nimport { IgxChipComponent } from '../../../chips/chip.component';\nimport { IgxSelectComponent } from '../../../select/select.component';\nimport { IDragStartEventArgs, IDragBaseEventArgs } from '../../../directives/drag-drop/drag-drop.directive';\nimport { CloseScrollStrategy } from '../../../services/overlay/scroll/close-scroll-strategy';\nimport { IgxToggleDirective, IgxOverlayOutletDirective } from '../../../directives/toggle/toggle.directive';\nimport { IButtonGroupEventArgs } from '../../../buttonGroup/buttonGroup.component';\nimport { takeUntil, first } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { KEYS } from '../../../core/utils';\nimport { AbsoluteScrollStrategy, AutoPositionStrategy } from '../../../services/index';\n\n/**\n *@hidden\n */\nclass ExpressionItem {\n    constructor(parent?: ExpressionGroupItem) {\n        this.parent = parent;\n    }\n    parent: ExpressionGroupItem;\n    selected: boolean;\n}\n\n/**\n *@hidden\n */\nclass ExpressionGroupItem extends ExpressionItem {\n    constructor(operator: FilteringLogic, parent?: ExpressionGroupItem) {\n        super(parent);\n        this.operator = operator;\n        this.children = [];\n    }\n    operator: FilteringLogic;\n    children: ExpressionItem[];\n}\n\n/**\n *@hidden\n */\nclass ExpressionOperandItem extends ExpressionItem {\n    constructor(expression: IFilteringExpression, parent: ExpressionGroupItem) {\n        super(parent);\n        this.expression = expression;\n    }\n    expression: IFilteringExpression;\n    inEditMode: boolean;\n    inAddMode: boolean;\n    hovered: boolean;\n}\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-advanced-filtering-dialog',\n    templateUrl: './advanced-filtering-dialog.component.html'\n})\nexport class IgxAdvancedFilteringDialogComponent implements AfterViewInit, OnDestroy {\n    @Input()\n    public filteringService: IgxFilteringService;\n\n    @Input()\n    public overlayComponentId: string;\n\n    @Input()\n    public overlayService: IgxOverlayService;\n\n    public rootGroup: ExpressionGroupItem;\n\n    public selectedExpressions: ExpressionOperandItem[] = [];\n\n    public selectedGroups: ExpressionGroupItem[] = [];\n\n    public currentGroup: ExpressionGroupItem;\n\n    public editedExpression: ExpressionOperandItem;\n\n    public addModeExpression: ExpressionOperandItem;\n\n    public contextualGroup: ExpressionGroupItem;\n\n    public filteringLogics;\n\n    public selectedCondition: string;\n    public searchValue: any;\n\n    public _positionSettings = {\n        horizontalStartPoint: HorizontalAlignment.Right,\n        verticalStartPoint: VerticalAlignment.Top\n    };\n    public _overlaySettings: OverlaySettings = {\n        closeOnOutsideClick: false,\n        modal: false,\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings),\n        scrollStrategy: new CloseScrollStrategy()\n    };\n\n    public columnSelectOverlaySettings: OverlaySettings = {\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: false,\n        excludePositionTarget: true\n    };\n\n    public conditionSelectOverlaySettings: OverlaySettings = {\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: false,\n        excludePositionTarget: true\n    };\n\n    @ViewChild('columnSelect', { read: IgxSelectComponent, static: false })\n    public columnSelect: IgxSelectComponent;\n\n    @ViewChild('conditionSelect', { read: IgxSelectComponent, static: false })\n    public conditionSelect: IgxSelectComponent;\n\n    @ViewChild('searchValueInput', { read: ElementRef, static: false })\n    public searchValueInput: ElementRef;\n\n    @ViewChild('addRootAndGroupButton', { read: ElementRef, static: false })\n    public addRootAndGroupButton: ElementRef;\n\n    @ViewChild('addConditionButton', { read: ElementRef, static: false })\n    public addConditionButton: ElementRef;\n\n    @ViewChild('editingInputsContainer', { read: ElementRef, static: false })\n    public set editingInputsContainer(value: ElementRef) {\n        if ((value && !this._editingInputsContainer) ||\n            (value && this._editingInputsContainer && this._editingInputsContainer.nativeElement !== value.nativeElement)) {\n            requestAnimationFrame(() => {\n                this.scrollElementIntoView(value.nativeElement);\n            });\n        }\n\n        this._editingInputsContainer = value;\n    }\n\n    public get editingInputsContainer(): ElementRef {\n        return this._editingInputsContainer;\n    }\n\n    @ViewChild('addModeContainer', { read: ElementRef, static: false })\n    public set addModeContainer(value: ElementRef) {\n        if ((value && !this._addModeContainer) ||\n            (value && this._addModeContainer && this._addModeContainer.nativeElement !== value.nativeElement)) {\n            requestAnimationFrame(() => {\n                this.scrollElementIntoView(value.nativeElement);\n            });\n        }\n\n        this._addModeContainer = value;\n    }\n\n    public get addModeContainer(): ElementRef {\n        return this._addModeContainer;\n    }\n\n    @ViewChild('currentGroupButtonsContainer', { read: ElementRef, static: false })\n    public set currentGroupButtonsContainer(value: ElementRef) {\n        if ((value && !this._currentGroupButtonsContainer) ||\n            (value && this._currentGroupButtonsContainer && this._currentGroupButtonsContainer.nativeElement !== value.nativeElement)) {\n            requestAnimationFrame(() => {\n                this.scrollElementIntoView(value.nativeElement);\n            });\n        }\n\n        this._currentGroupButtonsContainer = value;\n    }\n\n    public get currentGroupButtonsContainer(): ElementRef {\n        return this._currentGroupButtonsContainer;\n    }\n\n    @ViewChild(IgxToggleDirective, { static: true })\n    public contextMenuToggle: IgxToggleDirective;\n\n    @ViewChildren(IgxChipComponent)\n    public chips: QueryList<IgxChipComponent>;\n\n    @ViewChild('expressionsContainer', { static: true })\n    protected expressionsContainer: ElementRef;\n\n    @ViewChild('overlayOutlet', { read: IgxOverlayOutletDirective, static: true })\n    public overlayOutlet: IgxOverlayOutletDirective;\n\n    @HostBinding('style.display')\n    display = 'block';\n\n    private destroy$ = new Subject<any>();\n    private _selectedColumn: IgxColumnComponent;\n    private _clickTimer;\n    private _dblClickDelay = 200;\n    private _preventChipClick = false;\n    private _editingInputsContainer: ElementRef;\n    private _addModeContainer: ElementRef;\n    private _currentGroupButtonsContainer: ElementRef;\n\n    constructor(private element: ElementRef, public cdr: ChangeDetectorRef) { }\n\n    public ngAfterViewInit(): void {\n        if (this.addRootAndGroupButton) {\n            this.addRootAndGroupButton.nativeElement.focus();\n        } else if (this.addConditionButton) {\n            this.addConditionButton.nativeElement.focus();\n        }\n\n        this._overlaySettings.outlet = this.overlayOutlet;\n        this.columnSelectOverlaySettings.outlet = this.overlayOutlet;\n        this.conditionSelectOverlaySettings.outlet = this.overlayOutlet;\n\n        this.contextMenuToggle.onClosed.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n            this.contextualGroup = null;\n        });\n    }\n\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    public get displayDensity() {\n        return this.grid.displayDensity;\n    }\n\n    public get selectedColumn(): IgxColumnComponent {\n        return this._selectedColumn;\n    }\n\n    public set selectedColumn(value: IgxColumnComponent) {\n        const oldValue = this._selectedColumn;\n\n        if (this._selectedColumn !== value) {\n            this._selectedColumn = value;\n            if (oldValue && this._selectedColumn && this._selectedColumn.dataType !== oldValue.dataType) {\n                this.selectedCondition = null;\n                this.searchValue = null;\n                this.cdr.detectChanges();\n            }\n        }\n    }\n\n    get grid(): IgxGridBaseComponent {\n        return this.filteringService.grid;\n    }\n\n    get filterableColumns(): IgxColumnComponent[] {\n        return this.grid.columns.filter((col) => !col.columnGroup && col.filterable);\n    }\n\n    public dragStart(dragArgs: IDragStartEventArgs) {\n        if (!this.contextMenuToggle.collapsed) {\n            this.contextMenuToggle.element.style.display = 'none';\n        }\n    }\n\n    public dragEnd(dragArgs: IDragBaseEventArgs) {\n        if (!this.contextMenuToggle.collapsed) {\n            this.calculateContextMenuTarget();\n            this.contextMenuToggle.reposition();\n            this.contextMenuToggle.element.style.display = '';\n        }\n    }\n\n    public addCondition(parent: ExpressionGroupItem, afterExpression?: ExpressionItem) {\n        this.cancelOperandAdd();\n\n        const operandItem = new ExpressionOperandItem({\n            fieldName: null,\n            condition: null,\n            ignoreCase: true,\n            searchVal: null\n        }, parent);\n\n        if (afterExpression) {\n            const index = parent.children.indexOf(afterExpression);\n            parent.children.splice(index + 1, 0, operandItem);\n        } else {\n            parent.children.push(operandItem);\n        }\n\n        this.enterExpressionEdit(operandItem);\n    }\n\n    public addAndGroup(parent?: ExpressionGroupItem, afterExpression?: ExpressionItem) {\n        this.addGroup(FilteringLogic.And, parent, afterExpression);\n    }\n\n    public addOrGroup(parent?: ExpressionGroupItem, afterExpression?: ExpressionItem) {\n        this.addGroup(FilteringLogic.Or, parent, afterExpression);\n    }\n\n    public endGroup(groupItem: ExpressionGroupItem) {\n        this.currentGroup = groupItem.parent;\n    }\n\n    public commitOperandEdit() {\n        if (this.editedExpression) {\n            this.editedExpression.expression.fieldName = this.selectedColumn.field;\n            this.editedExpression.expression.condition = this.selectedColumn.filters.condition(this.selectedCondition);\n            this.editedExpression.expression.searchVal = this.searchValue;\n\n            this.editedExpression.inEditMode = false;\n            this.editedExpression = null;\n        }\n    }\n\n    public cancelOperandAdd() {\n        if (this.addModeExpression) {\n            this.addModeExpression.inAddMode = false;\n            this.addModeExpression = null;\n        }\n    }\n\n    public cancelOperandEdit() {\n        if (this.editedExpression) {\n            this.editedExpression.inEditMode = false;\n\n            if (!this.editedExpression.expression.fieldName) {\n                this.deleteItem(this.editedExpression);\n            }\n\n            this.editedExpression = null;\n        }\n    }\n\n    public operandCanBeCommitted(): boolean {\n        return this.selectedColumn && this.selectedCondition &&\n            (!!this.searchValue || this.selectedColumn.filters.condition(this.selectedCondition).isUnary);\n    }\n\n    public exitOperandEdit() {\n        if (!this.editedExpression) {\n            return;\n        }\n\n        if (this.operandCanBeCommitted()) {\n            this.commitOperandEdit();\n        } else {\n            this.cancelOperandEdit();\n        }\n    }\n\n    public isExpressionGroup(expression: ExpressionItem): boolean {\n        return expression instanceof ExpressionGroupItem;\n    }\n\n    private addGroup(operator: FilteringLogic, parent?: ExpressionGroupItem, afterExpression?: ExpressionItem) {\n        this.cancelOperandAdd();\n\n        const groupItem = new ExpressionGroupItem(operator, parent);\n\n        if (parent) {\n            if (afterExpression) {\n                const index = parent.children.indexOf(afterExpression);\n                parent.children.splice(index + 1, 0, groupItem);\n            } else {\n                parent.children.push(groupItem);\n            }\n        } else {\n            this.rootGroup = groupItem;\n        }\n\n        this.addCondition(groupItem);\n        this.currentGroup = groupItem;\n    }\n\n    private createExpressionGroupItem(expressionTree: IFilteringExpressionsTree, parent?: ExpressionGroupItem): ExpressionGroupItem {\n        let groupItem: ExpressionGroupItem;\n        if (expressionTree) {\n            groupItem = new ExpressionGroupItem(expressionTree.operator, parent);\n\n            for (const expr of expressionTree.filteringOperands) {\n                if (expr instanceof FilteringExpressionsTree) {\n                    groupItem.children.push(this.createExpressionGroupItem(expr, groupItem));\n                } else {\n                    const filteringExpr = expr as IFilteringExpression;\n                    const exprCopy: IFilteringExpression = {\n                        fieldName: filteringExpr.fieldName,\n                        condition: filteringExpr.condition,\n                        searchVal: filteringExpr.searchVal,\n                        ignoreCase: filteringExpr.ignoreCase\n                    };\n                    const operandItem = new ExpressionOperandItem(exprCopy, groupItem);\n                    groupItem.children.push(operandItem);\n                }\n            }\n        }\n\n        return groupItem;\n    }\n\n    private createExpressionsTreeFromGroupItem(groupItem: ExpressionGroupItem): FilteringExpressionsTree {\n        if (!groupItem) {\n            return null;\n        }\n\n        const expressionsTree = new FilteringExpressionsTree(groupItem.operator);\n\n        for (const item of groupItem.children) {\n            if (item instanceof ExpressionGroupItem) {\n                const subTree = this.createExpressionsTreeFromGroupItem((item as ExpressionGroupItem));\n                expressionsTree.filteringOperands.push(subTree);\n            } else {\n                expressionsTree.filteringOperands.push((item as ExpressionOperandItem).expression);\n            }\n        }\n\n        return expressionsTree;\n    }\n\n    public onChipRemove(expressionItem: ExpressionItem) {\n       this.deleteItem(expressionItem);\n    }\n\n    public onChipClick(expressionItem: ExpressionOperandItem) {\n        this._clickTimer = setTimeout(() => {\n            if (!this._preventChipClick) {\n                this.onToggleExpression(expressionItem);\n            }\n            this._preventChipClick = false;\n        }, this._dblClickDelay);\n    }\n\n    public onChipDblClick(expressionItem: ExpressionOperandItem) {\n        clearTimeout(this._clickTimer);\n        this._preventChipClick = true;\n        this.enterExpressionEdit(expressionItem);\n    }\n\n    public enterExpressionEdit(expressionItem: ExpressionOperandItem) {\n        this.clearSelection();\n        this.exitOperandEdit();\n        this.cancelOperandAdd();\n\n        if (this.editedExpression) {\n            this.editedExpression.inEditMode = false;\n        }\n\n        expressionItem.hovered = false;\n\n        this.selectedColumn = expressionItem.expression.fieldName ?\n            this.grid.getColumnByName(expressionItem.expression.fieldName) : null;\n        this.selectedCondition = expressionItem.expression.condition ?\n            expressionItem.expression.condition.name : null;\n        this.searchValue = expressionItem.expression.searchVal;\n\n        expressionItem.inEditMode = true;\n        this.editedExpression = expressionItem;\n\n        this.cdr.detectChanges();\n\n        this.columnSelectOverlaySettings.positionStrategy = new AutoPositionStrategy({target: this.columnSelect.element});\n        this.conditionSelectOverlaySettings.positionStrategy = new AutoPositionStrategy({target: this.conditionSelect.element});\n\n        if (!this.selectedColumn) {\n            this.columnSelect.input.nativeElement.focus();\n        } else if (this.selectedColumn.filters.condition(this.selectedCondition).isUnary) {\n            this.conditionSelect.input.nativeElement.focus();\n        } else {\n            this.searchValueInput.nativeElement.focus();\n        }\n    }\n\n    public clearSelection() {\n        for (const group of this.selectedGroups) {\n            group.selected = false;\n        }\n        this.selectedGroups = [];\n\n        for (const expr of this.selectedExpressions) {\n            expr.selected = false;\n        }\n        this.selectedExpressions = [];\n\n        this.toggleContextMenu();\n    }\n\n    public enterExpressionAdd(expressionItem: ExpressionOperandItem) {\n        this.clearSelection();\n        this.exitOperandEdit();\n\n        if (this.addModeExpression) {\n            this.addModeExpression.inAddMode = false;\n        }\n\n        expressionItem.inAddMode = true;\n        this.addModeExpression = expressionItem;\n        if (expressionItem.selected) {\n            this.toggleExpression(expressionItem);\n        }\n    }\n\n    private onToggleExpression(expressionItem: ExpressionOperandItem) {\n        this.exitOperandEdit();\n        this.toggleExpression(expressionItem);\n\n        this.toggleContextMenu();\n    }\n\n    private toggleExpression(expressionItem: ExpressionOperandItem) {\n        expressionItem.selected = !expressionItem.selected;\n\n        if (expressionItem.selected) {\n            this.selectedExpressions.push(expressionItem);\n        } else {\n            const index = this.selectedExpressions.indexOf(expressionItem);\n            this.selectedExpressions.splice(index, 1);\n            this.deselectParentRecursive(expressionItem);\n        }\n    }\n\n    private toggleContextMenu() {\n        const contextualGroup = this.findSingleSelectedGroup();\n\n        if (contextualGroup || this.selectedExpressions.length > 1) {\n            this.contextualGroup = contextualGroup;\n\n            if (contextualGroup) {\n                this.filteringLogics = [\n                    {\n                        label: this.grid.resourceStrings.igx_grid_filter_operator_and,\n                        selected: contextualGroup.operator === FilteringLogic.And\n                    },\n                    {\n                        label: this.grid.resourceStrings.igx_grid_filter_operator_or,\n                        selected: contextualGroup.operator === FilteringLogic.Or\n                    }\n                ];\n            }\n        } else {\n            this.contextMenuToggle.close();\n        }\n    }\n\n    private findSingleSelectedGroup(): ExpressionGroupItem {\n        for (const group of this.selectedGroups) {\n            const containsAllSelectedExpressions = this.selectedExpressions.every(op => this.isInsideGroup(op, group));\n\n            if (containsAllSelectedExpressions) {\n                return group;\n            }\n        }\n\n        return null;\n    }\n\n    private isInsideGroup(item: ExpressionItem, group: ExpressionGroupItem): boolean {\n        if (!item) {\n            return false;\n        }\n\n        if (item.parent === group) {\n            return true;\n        }\n\n        return this.isInsideGroup(item.parent, group);\n    }\n\n    private deleteItem(expressionItem: ExpressionItem) {\n        if (!expressionItem.parent) {\n            this.rootGroup = null;\n            this.currentGroup = null;\n            return;\n        }\n\n        if (expressionItem === this.currentGroup) {\n            this.currentGroup = this.currentGroup.parent;\n        }\n\n        const children = expressionItem.parent.children;\n        const index = children.indexOf(expressionItem);\n        children.splice(index, 1);\n\n        if (!children.length) {\n            this.deleteItem(expressionItem.parent);\n        }\n    }\n\n    public onKeyDown(eventArgs: KeyboardEvent) {\n        eventArgs.stopPropagation();\n        if (!this.contextMenuToggle.collapsed &&\n            (eventArgs.key === KEYS.ESCAPE || eventArgs.key === KEYS.ESCAPE_IE)) {\n            this.clearSelection();\n        }\n    }\n\n    public createAndGroup() {\n        this.createGroup(FilteringLogic.And);\n    }\n\n    public createOrGroup() {\n        this.createGroup(FilteringLogic.Or);\n    }\n\n    private createGroup(operator: FilteringLogic) {\n        const chips = this.chips.toArray();\n        const minIndex = this.selectedExpressions.reduce((i, e) => Math.min(i, chips.findIndex(c => c.data === e)), Number.MAX_VALUE);\n        const firstExpression = chips[minIndex].data;\n\n        const parent = firstExpression.parent;\n        const groupItem = new ExpressionGroupItem(operator, parent);\n\n        const index = parent.children.indexOf(firstExpression);\n        parent.children.splice(index, 0, groupItem);\n\n        for (const expr of this.selectedExpressions) {\n            this.deleteItem(expr);\n            groupItem.children.push(expr);\n            expr.parent = groupItem;\n        }\n\n        this.clearSelection();\n    }\n\n    public deleteFilters() {\n        for (const expr of this.selectedExpressions) {\n            this.deleteItem(expr);\n        }\n\n        this.clearSelection();\n    }\n\n    public onGroupClick(groupItem: ExpressionGroupItem) {\n        this.toggleGroup(groupItem);\n    }\n\n    private toggleGroup(groupItem: ExpressionGroupItem) {\n        this.exitOperandEdit();\n        if (groupItem.children && groupItem.children.length) {\n            this.toggleGroupRecursive(groupItem, !groupItem.selected);\n            if (!groupItem.selected) {\n                this.deselectParentRecursive(groupItem);\n            }\n            this.toggleContextMenu();\n        }\n    }\n\n    private toggleGroupRecursive(groupItem: ExpressionGroupItem, selected: boolean) {\n        if (groupItem.selected !== selected) {\n            groupItem.selected = selected;\n\n            if (groupItem.selected) {\n                this.selectedGroups.push(groupItem);\n            } else {\n                const index = this.selectedGroups.indexOf(groupItem);\n                this.selectedGroups.splice(index, 1);\n            }\n        }\n\n        for (const expr of groupItem.children) {\n            if (expr instanceof ExpressionGroupItem) {\n                this.toggleGroupRecursive(expr, selected);\n            } else {\n                const operandExpression = expr as ExpressionOperandItem;\n                if (operandExpression.selected !== selected) {\n                    this.toggleExpression(operandExpression);\n                }\n            }\n        }\n    }\n\n    private deselectParentRecursive(expressionItem: ExpressionItem) {\n        const parent = expressionItem.parent;\n        if (parent) {\n            if (parent.selected) {\n                parent.selected = false;\n                const index = this.selectedGroups.indexOf(parent);\n                this.selectedGroups.splice(index, 1);\n            }\n            this.deselectParentRecursive(parent);\n        }\n    }\n\n    private calculateContextMenuTarget() {\n        const containerRect = this.expressionsContainer.nativeElement.getBoundingClientRect();\n        const chips = this.chips.filter(c => this.selectedExpressions.indexOf(c.data) !== -1);\n        let minTop = chips.reduce((t, c) =>\n            Math.min(t, c.elementRef.nativeElement.getBoundingClientRect().top), Number.MAX_VALUE);\n        minTop = Math.max(containerRect.top, minTop);\n        minTop = Math.min(containerRect.bottom, minTop);\n        let maxRight = chips.reduce((r, c) =>\n            Math.max(r, c.elementRef.nativeElement.getBoundingClientRect().right), 0);\n        maxRight = Math.max(maxRight, containerRect.left);\n        maxRight = Math.min(maxRight, containerRect.right);\n        this._overlaySettings.positionStrategy.settings.target = new Point(maxRight, minTop);\n    }\n\n    private scrollElementIntoView(target: HTMLElement) {\n        const container = this.expressionsContainer.nativeElement;\n        const targetOffset = target.offsetTop - container.offsetTop;\n        const delta = 10;\n\n        if (container.scrollTop + delta > targetOffset) {\n            container.scrollTop = targetOffset - delta;\n        } else if (container.scrollTop + container.clientHeight < targetOffset + target.offsetHeight + delta) {\n            container.scrollTop = targetOffset + target.offsetHeight + delta - container.clientHeight;\n        }\n    }\n\n    public ungroup() {\n        const selectedGroup = this.contextualGroup;\n        const parent = selectedGroup.parent;\n        if (parent) {\n            const index = parent.children.indexOf(selectedGroup);\n            parent.children.splice(index, 1, ...selectedGroup.children);\n\n            for (const expr of selectedGroup.children) {\n                expr.parent = parent;\n            }\n        }\n\n        this.clearSelection();\n    }\n\n    public deleteGroup() {\n        const selectedGroup = this.contextualGroup;\n        const parent = selectedGroup.parent;\n        if (parent) {\n            const index = parent.children.indexOf(selectedGroup);\n            parent.children.splice(index, 1);\n        } else {\n            this.rootGroup = null;\n        }\n\n        this.clearSelection();\n    }\n\n    public selectFilteringLogic(event: IButtonGroupEventArgs) {\n        this.contextualGroup.operator = event.index as FilteringLogic;\n    }\n\n    public getConditionFriendlyName(name: string): string {\n        return this.grid.resourceStrings[`igx_grid_filter_${name}`] || name;\n    }\n\n    public isDate(value: any) {\n        return value instanceof Date;\n    }\n\n    public onExpressionsScrolled() {\n        if (!this.contextMenuToggle.collapsed) {\n            this.calculateContextMenuTarget();\n            this.contextMenuToggle.reposition();\n        }\n    }\n\n    public invokeClick(eventArgs: KeyboardEvent) {\n        if (eventArgs.key === KEYS.ENTER || eventArgs.key === KEYS.SPACE || eventArgs.key === KEYS.SPACE_IE) {\n            eventArgs.preventDefault();\n            (eventArgs.currentTarget as HTMLElement).click();\n        }\n    }\n\n    public onOutletPointerDown(event) {\n        // This prevents closing the select's dropdown when clicking the scroll\n        event.preventDefault();\n    }\n\n    public getConditionList(): string[] {\n        return this.selectedColumn ? this.selectedColumn.filters.conditionList() : [];\n    }\n\n    public initialize(filteringService: IgxFilteringService, overlayService: IgxOverlayService,\n        overlayComponentId: string) {\n        this.filteringService = filteringService;\n        this.overlayService = overlayService;\n        this.overlayComponentId = overlayComponentId;\n\n        this.filteringService.registerSVGIcons();\n\n        // Set pointer-events to none of the overlay content element which blocks the grid interaction after dragging\n        this.overlayService.onOpened.pipe(first()).subscribe(() => {\n            if (this.element.nativeElement.parentElement) {\n                this.element.nativeElement.parentElement.style['pointer-events'] = 'none';\n            }\n        });\n\n        if (this.grid.advancedFilteringExpressionsTree) {\n            this.rootGroup = this.createExpressionGroupItem(this.grid.advancedFilteringExpressionsTree);\n            this.currentGroup = this.rootGroup;\n        }\n    }\n\n    public context(expression: ExpressionItem, afterExpression?: ExpressionItem) {\n        return {\n            $implicit: expression,\n            afterExpression\n        };\n    }\n\n    public onClearButtonClick() {\n        this.clearSelection();\n        this.cancelOperandAdd();\n        this.cancelOperandEdit();\n        this.currentGroup = null;\n        this.rootGroup = null;\n        this.grid.advancedFilteringExpressionsTree = null;\n    }\n\n    public closeDialog() {\n        if (this.overlayComponentId) {\n            this.overlayService.hide(this.overlayComponentId);\n        }\n    }\n\n    public applyChanges() {\n        this.exitOperandEdit();\n        this.grid.advancedFilteringExpressionsTree = this.createExpressionsTreeFromGroupItem(this.rootGroup);\n    }\n\n    public onApplyButtonClick() {\n        this.applyChanges();\n        this.closeDialog();\n    }\n\n    public onChipSelectionEnd() {\n        const contextualGroup = this.findSingleSelectedGroup();\n        if (contextualGroup || this.selectedExpressions.length > 1) {\n            this.contextualGroup = contextualGroup;\n            this.calculateContextMenuTarget();\n            if (this.contextMenuToggle.collapsed) {\n                this.contextMenuToggle.open(this._overlaySettings);\n            } else {\n                this.contextMenuToggle.reposition();\n            }\n        }\n    }\n}\n","import { Directive, NgModule, TemplateRef } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowSelector]'\n})\nexport class IgxRowSelectorDirective {\n    constructor(public templateRef: TemplateRef<any>) { }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxHeadSelector]'\n})\nexport class IgxHeadSelectorDirective {\n    constructor(public templateRef: TemplateRef<any>) { }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxRowSelectorDirective, IgxHeadSelectorDirective],\n    exports: [IgxRowSelectorDirective, IgxHeadSelectorDirective]\n})\nexport class IgxRowSelectorsModule {\n}\n","import { Directive, ElementRef, Renderer2, NgZone, HostBinding, TemplateRef } from '@angular/core';\nimport { IgxDropDirective } from '../../directives/drag-drop/drag-drop.directive';\nimport { IgxColumnMovingDragDirective } from '../grid.common';\nimport { IgxColumnComponent } from '../column.component';\nimport { IgxGridComponent } from './grid.component';\nimport { SortingDirection } from '../../data-operations/sorting-expression.interface';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxGroupByRow]'\n})\nexport class IgxGroupByRowTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowExpandedIndicator]'\n})\nexport class IgxRowExpandedIndicatorDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowCollapsedIndicator]'\n})\nexport class IgxRowCollapsedIndicatorDirective {\n}\n\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxHeaderExpandedIndicator]'\n})\nexport class IgxHeaderExpandIndicatorDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxHeaderCollapsedIndicator]'\n})\nexport class IgxHeaderCollapseIndicatorDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxGroupAreaDrop]'\n})\nexport class IgxGroupAreaDropDirective extends IgxDropDirective {\n\n    constructor(private elementRef: ElementRef, private renderer: Renderer2, private zone: NgZone) {\n        super(elementRef, renderer, zone);\n    }\n\n    @HostBinding('class.igx-drop-area--hover')\n    public hovered = false;\n\n\n    public onDragEnter(event) {\n        const drag: IgxColumnMovingDragDirective = event.detail.owner;\n        const column: IgxColumnComponent = drag.column;\n        if (!this.columnBelongsToGrid(column)) {\n            return;\n        }\n        const grid = <IgxGridComponent>column.grid;\n        const isGrouped = grid.groupingExpressions.findIndex((item) => item.fieldName === column.field) !== -1;\n        if (column.groupable && !isGrouped && !column.columnGroup && !!column.field) {\n            drag.icon.innerText = 'group_work';\n            this.hovered = true;\n        } else {\n            drag.icon.innerText = 'block';\n            this.hovered = false;\n        }\n    }\n\n    public onDragLeave(event) {\n        const drag: IgxColumnMovingDragDirective = event.detail.owner;\n        const column: IgxColumnComponent = drag.column;\n        if (!this.columnBelongsToGrid(column)) {\n            return;\n        }\n        event.detail.owner.icon.innerText = 'block';\n        this.hovered = false;\n    }\n\n    public onDragDrop(event) {\n        const drag: IgxColumnMovingDragDirective = event.detail.owner;\n        if (drag instanceof IgxColumnMovingDragDirective) {\n            const column: IgxColumnComponent = drag.column;\n            if (!this.columnBelongsToGrid(column)) {\n                return;\n            }\n            const grid = <IgxGridComponent>column.grid;\n            const isGrouped = grid.groupingExpressions.findIndex((item) => item.fieldName === column.field) !== -1;\n            if (column.groupable && !isGrouped && !column.columnGroup && !!column.field) {\n                grid.groupBy({ fieldName: column.field, dir: SortingDirection.Asc, ignoreCase: column.sortingIgnoreCase,\n                    strategy: column.sortStrategy, groupingComparer: column.groupingComparer });\n            }\n        }\n    }\n\n    private closestParentByAttr(elem, attr) {\n        return elem.hasAttribute(attr) ?\n            elem :\n            this.closestParentByAttr(elem.parentElement, attr);\n    }\n\n    private columnBelongsToGrid(column) {\n        const elem = this.elementRef.nativeElement;\n        const closestGridID = this.closestParentByAttr(elem, 'igxGroupAreaDrop').getAttribute('gridId');\n        if (!column) {\n            return false;\n        } else {\n            const grid = <IgxGridComponent>column.grid;\n            if (!grid || grid.id !== closestGridID) {\n                return false;\n            }\n            return true;\n        }\n    }\n}\n","import { Directive, Input, OnDestroy, NgModule, TemplateRef } from '@angular/core';\nimport { IgxDragDirective } from '../directives/drag-drop/drag-drop.directive';\nimport { IRowDragEndEventArgs, IRowDragStartEventArgs } from './grid-base.component';\nimport { KEYS } from '../core/utils';\nimport { fromEvent, Subscription } from 'rxjs';\nimport { IgxRowComponent, IgxGridBaseComponent, IGridDataBindable } from './grid';\n\n\nconst ghostBackgroundClass = 'igx-grid__tr--ghost';\nconst gridCellClass = 'igx-grid__td';\nconst rowSelectedClass = 'igx-grid__tr--selected';\nconst cellSelectedClass = 'igx-grid__td--selected';\nconst cellActiveClass = 'igx-grid__td--active';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowDrag]'\n})\nexport class IgxRowDragDirective extends IgxDragDirective implements OnDestroy {\n    private row: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>;\n    private subscription$: Subscription;\n    private _rowDragStarted = false;\n\n    @Input('igxRowDrag')\n    set data(val) {\n        this.row = val;\n    }\n\n    get data() {\n        return this.row;\n    }\n\n    public onPointerDown(event) {\n        event.preventDefault();\n        this._rowDragStarted = false;\n        this._removeOnDestroy = false;\n        super.onPointerDown(event);\n    }\n\n    public onPointerMove(event) {\n        super.onPointerMove(event);\n        if (this._dragStarted && !this._rowDragStarted) {\n            this._rowDragStarted = true;\n            const args: IRowDragStartEventArgs = {\n                dragDirective: this,\n                dragData: this.row,\n                cancel: false,\n                owner: this.row.grid\n            };\n\n            this.row.grid.onRowDragStart.emit(args);\n            if (args.cancel) {\n                this.ghostElement.parentNode.removeChild(this.ghostElement);\n                this.ghostElement = null;\n                this._dragStarted = false;\n                this._clicked = false;\n                return;\n            }\n            this.row.dragging = true;\n            this.row.grid.rowDragging = true;\n            this.row.grid.markForCheck();\n\n            this.subscription$ = fromEvent(this.row.grid.document.defaultView, 'keydown').subscribe((ev: KeyboardEvent) => {\n                if (ev.key === KEYS.ESCAPE || ev.key === KEYS.ESCAPE_IE) {\n                    this._lastDropArea = false;\n                    this.onPointerUp(event);\n                }\n            });\n        }\n    }\n\n    public onPointerUp(event) {\n\n        if (!this._clicked) {\n            return;\n        }\n\n        const args: IRowDragEndEventArgs = {\n            dragDirective: this,\n            dragData: this.row,\n            animation: false,\n            owner: this.row.grid\n        };\n        this.zone.run(() => {\n            this.row.grid.onRowDragEnd.emit(args);\n        });\n\n        const dropArea = this._lastDropArea;\n        super.onPointerUp(event);\n        if (!dropArea && this.ghostElement) {\n            this.ghostElement.addEventListener('transitionend', this.transitionEndEvent, false);\n        }   else {\n            this.endDragging();\n        }\n    }\n\n    protected createGhost(pageX, pageY) {\n        this.row.grid.endEdit(true);\n        this.row.grid.markForCheck();\n        this.ghostContext = {\n            $implicit: this.row.rowData,\n            data: this.row.rowData,\n            grid: this.row.grid\n        };\n        super.createGhost(pageX, pageY, this.row.nativeElement);\n\n        const ghost = this.ghostElement;\n\n        const gridRect = this.row.grid.nativeElement.getBoundingClientRect();\n        const rowRect = this.row.nativeElement.getBoundingClientRect();\n        ghost.style.overflow = 'hidden';\n        ghost.style.width = gridRect.width + 'px';\n        ghost.style.height = rowRect.height + 'px';\n\n        this.renderer.addClass(ghost, ghostBackgroundClass);\n        this.renderer.removeClass(ghost, rowSelectedClass);\n\n        const ghostCells = ghost.getElementsByClassName(gridCellClass);\n        for (let index = 0; index < ghostCells.length; index++) {\n            this.renderer.removeClass(ghostCells[index], cellSelectedClass);\n            this.renderer.removeClass(ghostCells[index], cellActiveClass);\n        }\n    }\n\n    private _unsubscribe() {\n        if (this.subscription$ && !this.subscription$.closed) {\n            this.subscription$.unsubscribe();\n        }\n    }\n\n    private endDragging() {\n        this.onTransitionEnd(null);\n        this.row.dragging = false;\n        this.row.grid.rowDragging = false;\n        this.row.grid.markForCheck();\n        this._unsubscribe();\n    }\n\n    private transitionEndEvent = (evt?) => {\n        if (this.ghostElement) {\n            this.ghostElement.removeEventListener('transitionend', this.transitionEndEvent, false);\n        }\n        this.endDragging();\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxDragIndicatorIcon]'\n})\n\nexport class IgxDragIndicatorIconDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowDragGhost]'\n})\n\nexport class IgxRowDragGhostDirective  {\n    constructor(public templateRef: TemplateRef<any>) { }\n}\n\n@NgModule({\n    declarations: [IgxRowDragDirective, IgxDragIndicatorIconDirective, IgxRowDragGhostDirective],\n    entryComponents: [],\n    exports: [IgxRowDragDirective, IgxDragIndicatorIconDirective, IgxRowDragGhostDirective],\n    imports: []\n})\n\nexport class IgxRowDragModule {\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectorRef,\n    ComponentFactoryResolver,\n    ContentChildren,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    Input,\n    IterableChangeRecord,\n    IterableDiffers,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n    ViewContainerRef,\n    InjectionToken,\n    Optional,\n    DoCheck,\n    Injectable\n} from '@angular/core';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { Subject, combineLatest, pipe } from 'rxjs';\nimport { takeUntil, first, filter, throttleTime, map } from 'rxjs/operators';\nimport { cloneArray, isEdge, isNavigationKey, CancelableEventArgs, flatten, mergeObjects, isIE, IBaseEventArgs } from '../core/utils';\nimport { DataType } from '../data-operations/data-util';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { IGroupByRecord } from '../data-operations/groupby-record.interface';\nimport { ISortingExpression } from '../data-operations/sorting-expression.interface';\nimport { IForOfState, IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { IgxTextHighlightDirective } from '../directives/text-highlight/text-highlight.directive';\nimport {\n    IgxBaseExporter,\n    IgxExporterOptionsBase,\n    AbsoluteScrollStrategy,\n    HorizontalAlignment,\n    VerticalAlignment,\n    IgxOverlayService,\n    OverlaySettings,\n    PositionSettings,\n    ConnectedPositioningStrategy,\n    ContainerPositionStrategy\n} from '../services/index';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IColumnVisibilityChangedEventArgs } from './column-hiding-item.directive';\nimport { IgxColumnComponent, IgxColumnGroupComponent } from './column.component';\nimport { ISummaryExpression } from './summaries/grid-summary';\nimport { DropPosition, RowEditPositionStrategy, IgxDecimalPipeComponent, IgxDatePipeComponent } from './grid.common';\nimport { IgxGridToolbarComponent } from './grid-toolbar.component';\nimport { IgxRowComponent } from './row.component';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { IgxOverlayOutletDirective, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport {\n    FilteringExpressionsTree, IFilteringExpressionsTree, FilteringExpressionsTreeType\n} from '../data-operations/filtering-expressions-tree';\nimport { IFilteringOperation } from '../data-operations/filtering-condition';\nimport { Transaction, TransactionType, TransactionService, State } from '../services/index';\nimport {\n    IgxRowEditTemplateDirective,\n    IgxRowEditTabStopDirective,\n    IgxRowEditTextDirective,\n    IgxRowEditActionsDirective\n} from './grid.rowEdit.directive';\nimport { IgxGridNavigationService } from './grid-navigation.service';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase, DisplayDensity } from '../core/displayDensity';\nimport { IgxGridRowComponent } from './grid';\nimport { IgxFilteringService } from './filtering/grid-filtering.service';\nimport { IgxGridFilteringCellComponent } from './filtering/grid-filtering-cell.component';\nimport { WatchChanges } from './watch-changes';\nimport { IgxGridHeaderGroupComponent } from './grid-header-group.component';\nimport { IgxGridToolbarCustomContentDirective } from './grid-toolbar.component';\nimport { IGridResourceStrings } from '../core/i18n/grid-resources';\nimport { CurrentResourceStrings } from '../core/i18n/resources';\nimport { IgxGridSummaryService } from './summaries/grid-summary.service';\nimport { IgxSummaryRowComponent } from './summaries/summary-row.component';\nimport { IgxGridSelectionService, GridSelectionRange, IgxGridCRUDService, IgxRow, IgxCell, isChromium } from '../core/grid-selection';\nimport { DragScrollDirection } from './drag-select.directive';\nimport { ICachedViewLoadedEventArgs, IgxTemplateOutletDirective } from '../directives/template-outlet/template_outlet.directive';\nimport { IgxExcelStyleLoadingValuesTemplateDirective } from './filtering/excel-style/excel-style-search.component';\nimport {\n    IgxExcelStyleSortingTemplateDirective,\n    IgxExcelStylePinningTemplateDirective,\n    IgxExcelStyleHidingTemplateDirective,\n    IgxExcelStyleMovingTemplateDirective\n} from './filtering/excel-style/grid.excel-style-filtering.component';\nimport { IgxGridColumnResizerComponent } from './grid-column-resizer.component';\nimport { IgxGridFilteringRowComponent } from './filtering/grid-filtering-row.component';\nimport { IgxDragDirective } from '../directives/drag-drop/drag-drop.directive';\nimport { CharSeparatedValueData } from '../services/csv/char-separated-value-data';\nimport { IgxAdvancedFilteringDialogComponent } from './filtering/advanced-filtering/advanced-filtering-dialog.component';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxHeadSelectorDirective, IgxRowSelectorDirective } from './igx-row-selectors.module';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\nimport { IFilteringStrategy } from '../data-operations/filtering-strategy';\nimport { IgxRowExpandedIndicatorDirective, IgxRowCollapsedIndicatorDirective,\n     IgxHeaderExpandIndicatorDirective, IgxHeaderCollapseIndicatorDirective } from './grid/grid.directives';\nimport { IgxRowDragGhostDirective  } from './row-drag.directive';\nimport { GridKeydownTargetType, GridSelectionMode, GridSummaryPosition, GridSummaryCalculationMode, FilterMode } from './common/enums';\n\nconst MINIMUM_COLUMN_WIDTH = 136;\nconst FILTER_ROW_HEIGHT = 50;\n\n// By default row editing overlay outlet is inside grid body so that overlay is hidden below grid header when scrolling.\n// In cases when grid has 1-2 rows there isn't enough space in grid body and row editing overlay should be shown above header.\n// Default row editing overlay height is higher then row height that is why the case is valid also for row with 2 rows.\n// More accurate calculation is not possible, cause row editing overlay is still not shown and we don't know its height,\n// but in the same time we need to set row editing overlay outlet before opening the overlay itself.\nconst MIN_ROW_EDITING_COUNT_THRESHOLD = 2;\n\nexport const IgxGridTransaction = new InjectionToken<string>('IgxGridTransaction');\n\nexport interface IGridClipboardEvent {\n    data: any[];\n    cancel: boolean;\n}\n\nexport interface IGridCellEventArgs extends IBaseEventArgs {\n    cell: IgxGridCellComponent;\n    event: Event;\n}\n\nexport interface IGridEditEventArgs extends CancelableEventArgs, IBaseEventArgs {\n    rowID: any;\n    cellID?: {\n        rowID: any,\n        columnID: any,\n        rowIndex: number\n    };\n    oldValue: any;\n    newValue?: any;\n    event?: Event;\n}\n\nexport interface IPinColumnEventArgs extends IBaseEventArgs {\n    column: IgxColumnComponent;\n    insertAtIndex: number;\n    isPinned: boolean;\n}\n\nexport interface IPageEventArgs extends IBaseEventArgs {\n    previous: number;\n    current: number;\n}\n\nexport interface IRowDataEventArgs extends IBaseEventArgs {\n    data: any;\n}\n\nexport interface IColumnResizeEventArgs extends IBaseEventArgs {\n    column: IgxColumnComponent;\n    prevWidth: string;\n    newWidth: string;\n}\n\nexport interface IRowSelectionEventArgs extends CancelableEventArgs, IBaseEventArgs {\n    oldSelection: any[];\n    newSelection: any[];\n    added: any[];\n    removed: any[];\n    event?: Event;\n}\n\nexport interface ISearchInfo {\n    searchText: string;\n    caseSensitive: boolean;\n    exactMatch: boolean;\n    activeMatchIndex: number;\n    matchInfoCache: any[];\n}\n\nexport interface IGridToolbarExportEventArgs extends IBaseEventArgs {\n    grid: IgxGridBaseComponent;\n    exporter: IgxBaseExporter;\n    options: IgxExporterOptionsBase;\n    cancel: boolean;\n}\n\nexport interface IColumnMovingStartEventArgs extends IBaseEventArgs {\n    source: IgxColumnComponent;\n}\n\nexport interface IColumnMovingEventArgs extends IBaseEventArgs {\n    source: IgxColumnComponent;\n    cancel: boolean;\n}\n\nexport interface IColumnMovingEndEventArgs extends IBaseEventArgs {\n    source: IgxColumnComponent;\n    target: IgxColumnComponent;\n}\n\nexport interface IGridKeydownEventArgs extends IBaseEventArgs {\n    targetType: GridKeydownTargetType;\n    target: Object;\n    event: Event;\n    cancel: boolean;\n}\n\nexport interface ICellPosition {\n    rowIndex: number;\n    visibleColumnIndex: number;\n}\nexport interface IGridDataBindable {\n    data: any[];\n    filteredData: any[];\n}\n\nexport interface IRowDragEndEventArgs extends IBaseEventArgs {\n    dragDirective: IgxDragDirective;\n    dragData: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>;\n    animation: boolean;\n}\n\nexport interface IRowDragStartEventArgs extends CancelableEventArgs, IBaseEventArgs {\n    dragDirective: IgxDragDirective;\n    dragData: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>;\n}\n\n@Injectable()\nexport abstract class IgxGridBaseComponent extends DisplayDensityBase implements\n    OnInit, DoCheck, OnDestroy, AfterContentInit, AfterViewInit {\n    private _scrollWidth: number;\n    protected _init = true;\n    private _tick;\n    private _cdrRequests = false;\n    protected _cdrRequestRepaint = false;\n\n    public get scrollWidth() {\n        return this._scrollWidth;\n    }\n\n    private _resourceStrings = CurrentResourceStrings.GridResStrings;\n    private _emptyGridMessage = null;\n    private _emptyFilteredGridMessage = null;\n    private _isLoading = false;\n    private _locale = null;\n    public _destroyed = false;\n    private overlayIDs = [];\n    private _filteringStrategy: IFilteringStrategy;\n\n    private _hostWidth;\n    private _advancedFilteringOverlayId: string;\n    private _advancedFilteringPositionSettings: PositionSettings = {\n        verticalDirection: VerticalAlignment.Middle,\n        horizontalDirection: HorizontalAlignment.Center,\n        horizontalStartPoint: HorizontalAlignment.Center,\n        verticalStartPoint: VerticalAlignment.Middle\n    };\n\n    private _advancedFilteringOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: false,\n        modal: false,\n        positionStrategy: new ConnectedPositioningStrategy(this._advancedFilteringPositionSettings),\n    };\n\n\n    /**\n    * @hidden\n    */\n    @ViewChild('defaultExpandedTemplate', { read: TemplateRef, static: true })\n    protected defaultExpandedTemplate: TemplateRef<any>;\n\n    /**\n    * @hidden\n    */\n    @ViewChild('defaultCollapsedTemplate', { read: TemplateRef, static: true })\n    protected defaultCollapsedTemplate: TemplateRef<any>;\n\n\n    /**\n     * An accessor that sets the resource strings.\n     * By default it uses EN resources.\n    */\n    @Input()\n    set resourceStrings(value: IGridResourceStrings) {\n        this._resourceStrings = Object.assign({}, this._resourceStrings, value);\n    }\n\n    /**\n     * An accessor that returns the resource strings.\n    */\n    get resourceStrings(): IGridResourceStrings {\n        return this._resourceStrings;\n    }\n\n    /**\n     * An @Input property that autogenerates the `IgxGridComponent` columns.\n     * The default value is false.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public autoGenerate = false;\n\n    public abstract id: string;\n\n    /**\n     * An @Input property that sets a custom template when the `IgxGridComponent` is empty.\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [emptyGridTemplate]=\"myTemplate\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public emptyGridTemplate: TemplateRef<any>;\n\n    /**\n     * An @Input property that sets a custom template when the `IgxGridComponent` is loading.\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [loadingGridTemplate]=\"myTemplate\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public loadingGridTemplate: TemplateRef<any>;\n\n    @WatchChanges()\n    @Input()\n    public get filteringLogic() {\n        return this._filteringExpressionsTree.operator;\n    }\n\n    /**\n     * Sets the filtering logic of the `IgxGridComponent`.\n     * The default is AND.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\" [filteringLogic]=\"filtering\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set filteringLogic(value: FilteringLogic) {\n        this._filteringExpressionsTree.operator = value;\n    }\n\n    /**\n     * Returns the filtering state of `IgxGridComponent`.\n     * ```typescript\n     * let filteringExpressionsTree = this.grid.filteringExpressionsTree;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get filteringExpressionsTree() {\n        return this._filteringExpressionsTree;\n    }\n\n    /**\n     * Sets the filtering state of the `IgxGridComponent`.\n     * ```typescript\n     * const logic = new FilteringExpressionsTree(FilteringLogic.And, \"ID\");\n     * logic.filteringOperands = [\n     *     {\n     *          condition: IgxNumberFilteringOperand.instance().condition('greaterThan'),\n     *          fieldName: 'ID',\n     *          searchVal: 1\n     *     }\n     * ];\n     * this.grid.filteringExpressionsTree = (logic);\n     * ```\n     * Two-way data binding.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [(filteringExpressionsTree)]=\"model.filteringExpressions\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set filteringExpressionsTree(value) {\n        if (value && value instanceof FilteringExpressionsTree) {\n            const val = (value as FilteringExpressionsTree);\n            for (let index = 0; index < val.filteringOperands.length; index++) {\n                if (!(val.filteringOperands[index] instanceof FilteringExpressionsTree)) {\n                    const newExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And, val.filteringOperands[index].fieldName);\n                    newExpressionsTree.filteringOperands.push(val.filteringOperands[index] as IFilteringExpression);\n                    val.filteringOperands[index] = newExpressionsTree;\n                }\n            }\n\n            // clone the filtering expression tree in order to trigger the filtering pipe\n            const filteringExpressionTreeClone = new FilteringExpressionsTree(value.operator, value.fieldName);\n            filteringExpressionTreeClone.type = FilteringExpressionsTreeType.Regular;\n            filteringExpressionTreeClone.filteringOperands = value.filteringOperands;\n            this._filteringExpressionsTree = filteringExpressionTreeClone;\n            this.filteringExpressionsTreeChange.emit(this._filteringExpressionsTree);\n\n            if (this.filteringService.isFilteringExpressionsTreeEmpty() && !this.advancedFilteringExpressionsTree) {\n                this.filteredData = null;\n            }\n\n            this.filteringService.refreshExpressions();\n            this.selectionService.clearHeaderCBState();\n            this.summaryService.clearSummaryCache();\n            this.notifyChanges();\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public filteringExpressionsTreeChange = new EventEmitter<IFilteringExpressionsTree>();\n\n    /**\n     * Returns the advanced filtering state of `IgxGridComponent`.\n     * ```typescript\n     * let advancedFilteringExpressionsTree = this.grid.advancedFilteringExpressionsTree;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get advancedFilteringExpressionsTree() {\n        return this._advancedFilteringExpressionsTree;\n    }\n\n    /**\n     * Sets the advanced filtering state of the `IgxGridComponent`.\n     * ```typescript\n     * const logic = new FilteringExpressionsTree(FilteringLogic.And);\n     * logic.filteringOperands = [\n     *     {\n     *          condition: IgxNumberFilteringOperand.instance().condition('greaterThan'),\n     *          fieldName: 'ID',\n     *          searchVal: 1\n     *     },\n     *     {\n     *          condition: IgxStringFilteringOperand.instance().condition('contains'),\n     *          fieldName: 'CompanyName',\n     *          searchVal: 'a'\n     *     }\n     * ];\n     * this.grid.advancedFilteringExpressionsTree = logic;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set advancedFilteringExpressionsTree(value) {\n        if (value && value instanceof FilteringExpressionsTree) {\n            // clone the filtering expression tree in order to trigger the filtering pipe\n            const filteringExpressionTreeClone = new FilteringExpressionsTree(value.operator, value.fieldName);\n            filteringExpressionTreeClone.type = FilteringExpressionsTreeType.Advanced;\n            filteringExpressionTreeClone.filteringOperands = value.filteringOperands;\n            this._advancedFilteringExpressionsTree = filteringExpressionTreeClone;\n        } else {\n            this._advancedFilteringExpressionsTree = null;\n        }\n\n        if (this.filteringService.isFilteringExpressionsTreeEmpty() && !this.advancedFilteringExpressionsTree) {\n            this.filteredData = null;\n        }\n\n        this.selectionService.clearHeaderCBState();\n        this.summaryService.clearSummaryCache();\n        this.markForCheck();\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.onFilteringDone.emit(this._advancedFilteringExpressionsTree));\n    }\n\n    /**\n     * Returns the locale of the grid.\n     * If not set, returns browser's language.\n     */\n    @Input()\n    get locale(): string {\n        if (this._locale) {\n            return this._locale;\n        } else {\n            return 'en';\n        }\n    }\n\n    /**\n     * Sets the locale of the grid.\n     */\n    set locale(value) {\n        this._locale = value;\n    }\n\n    /**\n     * Returns whether the paging feature is enabled/disabled.\n     * The default state is disabled (false).\n     * ```\n     * const paging = this.grid.paging;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get paging(): boolean {\n        return this._paging;\n    }\n\n    /**\n     * Enables/Disables the paging feature.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [paging]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set paging(value: boolean) {\n        this._paging = value;\n        this._pipeTrigger++;\n        this.notifyChanges(true);\n    }\n\n    /**\n     * Returns the current page index.\n     * ```html\n     * let gridPage = this.grid.page;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get page(): number {\n        return this._page;\n    }\n\n    /**\n     * Sets the current page index.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [page]=\"5\" [autoGenerate]=\"true\"></igx-grid>\n     *```\n     * Two-way data binding.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [(page)]=\"model.page\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set page(val: number) {\n        if (val === this._page || val < 0 || val > this.totalPages - 1) {\n            return;\n        }\n        this.selectionService.clear(true);\n        this.onPagingDone.emit({ previous: this._page, current: val });\n        this._page = val;\n        this.pageChange.emit(this._page);\n        this.notifyChanges();\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public pageChange = new EventEmitter<number>();\n\n    /**\n     * Returns the number of visible items per page of the `IgxGridComponent`.\n     * The default is 15.\n     * ```html\n     * let itemsPerPage = this.grid.perPage;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get perPage(): number {\n        return this._perPage;\n    }\n\n    /**\n     * Sets the number of visible items per page of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [perPage]=\"5\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [(perPage)]=\"model.perPage\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set perPage(val: number) {\n        if (val < 0) {\n            return;\n        }\n        this.selectionService.clear(true);\n        this._perPage = val;\n        this.perPageChange.emit(this._perPage);\n        this.page = 0;\n        this.endEdit(true);\n        this.notifyChanges();\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public perPageChange = new EventEmitter<number>();\n\n    /**\n     * You can provide a custom `ng-template` for the pagination UI of the grid.\n     * ```html\n     * <igx-grid #grid [paging]=\"true\" [myTemplate]=\"myTemplate\" [height]=\"'305px'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public paginationTemplate: TemplateRef<any>;\n\n    /**\n     * Returns whether the column hiding UI for the `IgxGridComponent` is enabled.\n     * By default it is disabled (false).\n     * ```typescript\n     * let gridColHiding = this.grid.columnHiding;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get columnHiding() {\n        return this._columnHiding;\n    }\n\n    /**\n     * Sets whether the column hiding UI for the `IgxGridComponent` is enabled.\n     * In order for the UI to work, you need to enable the toolbar as shown in the example below.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\" [showToolbar]=\"true\" [columnHiding]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set columnHiding(value) {\n        if (this._columnHiding !== value) {\n            this._columnHiding = value;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    @DeprecateProperty('rowSelectable property is deprecated. Use rowSelection property instead.')\n    @WatchChanges()\n    @Input()\n    get rowSelectable(): boolean {\n        return this.isRowSelectable;\n    }\n\n    set rowSelectable(val: boolean) {\n        this.rowSelection = val ? GridSelectionMode.multiple : GridSelectionMode.none;\n    }\n\n    /**\n     * Returns if the row selectors are hidden\n     * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get hideRowSelectors() {\n        return this._hideRowSelectors;\n    }\n\n    /**\n     * Allows you to change the visibility of the row selectors\n     * By default row selectors are shown\n     * @memberof IgxGridBaseComponent\n     */\n    set hideRowSelectors(value: boolean) {\n        this._hideRowSelectors = value;\n        this.notifyChanges(true);\n    }\n\n    @Input()\n    get rowDraggable(): boolean {\n        return this._rowDrag && this.hasVisibleColumns;\n    }\n\n    /**\n     * Sets whether rows can be moved.\n     * ```html\n     * <igx-grid #grid [rowDraggable]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set rowDraggable(val: boolean) {\n        this._rowDrag = val;\n        this.notifyChanges(true);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public rowDragging = false;\n\n\n    /**\n * Sets whether the `IgxGridRowComponent` is editable.\n * By default it is set to false.\n * ```typescript\n * let rowEditable = this.grid.rowEditable;\n * ```\n * @memberof IgxGridBaseComponent\n */\n    @WatchChanges()\n    @Input()\n    get rowEditable(): boolean {\n        return this._rowEditable;\n    }\n    /**\n    * Sets whether rows can be edited.\n    * ```html\n    * <igx-grid #grid [showToolbar]=\"true\" [rowEditable]=\"true\" [primaryKey]=\"'ProductID'\" [columnHiding]=\"true\"></igx-grid>\n    * ```\n    * @memberof IgxGridBaseComponent\n    */\n    set rowEditable(val: boolean) {\n        if (!this._init) {\n            this.refreshGridState();\n        }\n        this._rowEditable = val;\n        this.notifyChanges();\n    }\n\n    /**\n     * Returns the height of the `IgxGridComponent`.\n     * ```typescript\n     * let gridHeight = this.grid.height;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @HostBinding('style.height')\n    @Input()\n    public get height() {\n        return this._height;\n    }\n\n    /**\n     * Sets the height of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set height(value: string) {\n        if (this._height !== value) {\n            this._height = value;\n            this.nativeElement.style.height = value;\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     * @hidden\n    */\n    @HostBinding('style.width')\n    get hostWidth() {\n        return this._width || this._hostWidth;\n    }\n    /**\n     * Returns the width of the `IgxGridComponent`.\n     * ```typescript\n     * let gridWidth = this.grid.width;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get width() {\n        return this._width;\n    }\n    set width(value) {\n        if (this._width !== value) {\n            this._width = value;\n            this.nativeElement.style.width = value;\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     * Returns the width of the header of the `IgxGridComponent`.\n     * ```html\n     * let gridHeaderWidth = this.grid.headerWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get headerWidth() {\n        return parseInt(this.width, 10) - 17;\n    }\n\n    /**\n     * An @Input property that adds styling classes applied to all even `IgxGridRowComponent`s in the grid.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [evenRowCSS]=\"'igx-grid--my-even-class'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public evenRowCSS = 'igx-grid__tr--even';\n\n    /**\n     * An @Input property that adds styling classes applied to all odd `IgxGridRowComponent`s in the grid.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [evenRowCSS]=\"'igx-grid--my-odd-class'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public oddRowCSS = 'igx-grid__tr--odd';\n\n    /**\n     * Returns the row height.\n     * ```typescript\n     * const rowHeight = this.grid.rowHeight;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get rowHeight() {\n        return this._rowHeight ? this._rowHeight : this.defaultRowHeight;\n    }\n\n    /**\n     * Sets the row height.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [rowHeight]=\"100\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set rowHeight(value) {\n        this._rowHeight = parseInt(value, 10);\n    }\n\n    /**\n     * An @Input property that sets the default width of the `IgxGridComponent`'s columns.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [columnWidth]=\"100\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get columnWidth(): string {\n        return this._columnWidth;\n    }\n    public set columnWidth(value: string) {\n        this._columnWidth = value;\n        this.columnWidthSetByUser = true;\n        this.notifyChanges(true);\n    }\n\n    /**\n     * An @Input property that sets the primary key of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [primaryKey]=\"'ProductID'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public primaryKey;\n\n    /**\n     * An @Input property that sets the message displayed when there are no records.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [emptyGridMessage]=\"'The grid is empty'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    set emptyGridMessage(value: string) {\n        this._emptyGridMessage = value;\n    }\n\n    /**\n     * An accessor that returns the message displayed when there are no records.\n    */\n    get emptyGridMessage(): string {\n        return this._emptyGridMessage || this.resourceStrings.igx_grid_emptyGrid_message;\n    }\n\n    /**\n     * An @Input property that sets whether the grid is going to show loading indicator.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [isLoading]=\"true\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    set isLoading(value: boolean) {\n        if (this._isLoading !== value) {\n            this._isLoading = value;\n            this.evaluateLoadingState();\n        }\n        Promise.resolve().then(() => {\n            // wait for the current detection cycle to end before triggering a new one.\n            this.notifyChanges();\n        });\n    }\n\n    /**\n     * An accessor that returns whether the grid is showing loading indicator.\n     */\n    get isLoading(): boolean {\n        return this._isLoading;\n    }\n\n    /**\n     * A property that allows the columns to be auto-generated once again after the initialization of the grid.\n     * This will allow to bind the grid to remote data and having auto-generated columns at the same time.\n     * Note that after generating the columns, this property would be disabled to avoid re-creating\n     * columns each time a new data is assigned.\n     * ```typescript\n     *  this.grid.shouldGenerate = true;\n     *  this.remoteData = this.remoteService.remoteData;\n     * ```\n     */\n    public shouldGenerate: boolean;\n\n    /**\n     * An @Input property that sets the message displayed when there are no records and the grid is filtered.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [emptyGridMessage]=\"'The grid is empty'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    set emptyFilteredGridMessage(value: string) {\n        this._emptyFilteredGridMessage = value;\n    }\n\n    /**\n     * An accessor that returns the message displayed when there are no records and the grid is filtered.\n    */\n    get emptyFilteredGridMessage(): string {\n        return this._emptyFilteredGridMessage || this.resourceStrings.igx_grid_emptyFilteredGrid_message;\n    }\n\n    /**\n     * An @Input property that sets the title to be displayed in the built-in column hiding UI.\n     * ```html\n     * <igx-grid [showToolbar]=\"true\" [columnHiding]=\"true\" columnHidingTitle=\"Column Hiding\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public columnHidingTitle = '';\n\n    /**\n     * Returns if the built-in column pinning UI should be shown in the toolbar.\n     * ```typescript\n     *  let colPinning = this.grid.columnPinning;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get columnPinning() {\n        return this._columnPinning;\n    }\n\n    /**\n     * Sets if the built-in column pinning UI should be shown in the toolbar.\n     * By default it's disabled.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [columnPinning]=\"'true\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set columnPinning(value) {\n        if (this._columnPinning !== value) {\n            this._columnPinning = value;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * An @Input property that sets the title to be displayed in the UI of the column pinning.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [columnPinning]=\"'true\" [columnPinningTitle]=\"'Column Hiding'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public columnPinningTitle = '';\n\n    /**\n     * Returns if the filtering is enabled.\n     * ```typescript\n     *  let filtering = this.grid.allowFiltering;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get allowFiltering() {\n        return this._allowFiltering;\n    }\n\n    /**\n     * Sets if the filtering is enabled.\n     * By default it's disabled.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [allowFiltering]=\"true\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set allowFiltering(value) {\n        if (this._allowFiltering !== value) {\n            this._allowFiltering = value;\n            this.filteringService.registerSVGIcons();\n\n            if (!this._init) {\n                this.calcGridHeadRow();\n            }\n\n            this.filteringService.isFilterRowVisible = false;\n            this.filteringService.filteredColumn = null;\n\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     * Returns a value indicating whether the advanced filtering is enabled.\n     * ```typescript\n     *  let filtering = this.grid.allowAdvancedFiltering;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get allowAdvancedFiltering() {\n        return this._allowAdvancedFiltering;\n    }\n\n    /**\n     * Sets a value indicating whether the advanced filtering is enabled.\n     * By default it's disabled.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [allowAdvancedFiltering]=\"true\" [showToolbar]=\"true\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set allowAdvancedFiltering(value) {\n        if (this._allowAdvancedFiltering !== value) {\n            this._allowAdvancedFiltering = value;\n            this.filteringService.registerSVGIcons();\n\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Returns the filter mode.\n     * ```typescript\n     *  let filtering = this.grid.filterMode;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get filterMode() {\n        return this._filterMode;\n    }\n\n    /**\n     * Sets filter mode.\n     * By default it's set to FilterMode.quickFilter.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [filterMode]=\"'quickFilter'\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set filterMode(value) {\n        this._filterMode = value;\n\n        if (this.filteringService.isFilterRowVisible) {\n            this.filteringRow.close();\n        }\n        this.notifyChanges(true);\n    }\n\n    /**\n     * Returns the summary position.\n     * ```typescript\n     *  let summaryPosition = this.grid.summaryPosition;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get summaryPosition() {\n        return this._summaryPosition;\n    }\n\n    /**\n     * Sets summary position.\n     * By default it is bottom.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" summaryPosition=\"top\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set summaryPosition(value) {\n        this._summaryPosition = value;\n        this.notifyChanges();\n    }\n\n    /**\n     * Returns the summary calculation mode.\n     * ```typescript\n     *  let summaryCalculationMode = this.grid.summaryCalculationMode;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get summaryCalculationMode() {\n        return this._summaryCalculationMode;\n    }\n\n    /**\n     * Sets summary calculation mode.\n     * By default it is rootAndChildLevels which means the summaries are calculated for the root level and each child level.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" summaryCalculationMode=\"rootLevelOnly\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set summaryCalculationMode(value) {\n        this._summaryCalculationMode = value;\n        if (!this._init) {\n            this.endEdit(true);\n            this.summaryService.resetSummaryHeight();\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     * Gets the filtering strategy of the grid.\n     * ```typescript\n     *  let filterStrategy = this.grid.filterStrategy\n     * ```\n     */\n    @Input()\n    get filterStrategy(): IFilteringStrategy {\n        return this._filteringStrategy;\n    }\n\n    /**\n     * Sets the filtering strategy of the grid.\n     * ```html\n     *  <igx-grid #grid [data]=\"localData\" [filterStrategy]=\"filterStrategy\"></igx-grid>\n     * ```\n     */\n    set filterStrategy(classRef: IFilteringStrategy) {\n        this._filteringStrategy = classRef;\n    }\n\n    /**\n     * An @Input property that provides a callback for loading unique column values on demand.\n     * If this property is provided, the unique values it generates will be used by the Excel Style Filtering.\n     * ```html\n     * <igx-grid [data]=\"localData\" [filterMode]=\"'excelStyleFilter'\" [uniqueColumnValuesStrategy]=\"columnValuesStrategy\"></igx-grid>\n     * ```\n     *\n     * ```typescript\n     * public columnValuesStrategy = (column: IgxColumnComponent,\n     *                               filteringExpressionsTree: IFilteringExpressionsTree,\n     *                               done: (uniqueValues: any[]) => void) => {\n     *     this.dataService.getColumnData(column, filteringExpressionsTree, uniqueValues => done(uniqueValues));\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public uniqueColumnValuesStrategy: (column: IgxColumnComponent,\n                                        filteringExpressionsTree: IFilteringExpressionsTree,\n                                        done: (values: any[]) => void) => void;\n\n    /**\n     * Emitted when `IgxGridCellComponent` is clicked. Returns the `IgxGridCellComponent`.\n     * ```html\n     * <igx-grid #grid (onCellClick)=\"onCellClick($event)\" [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onCellClick(e){\n     *     alert(\"The cell has been clicked!\");\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onCellClick = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     * Emitted when `IgxGridCellComponent` is selected. Returns the `IgxGridCellComponent`.\n     * ```html\n     * <igx-grid #grid (onSelection)=\"onCellSelect($event)\" [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onCellSelect(e){\n     *     alert(\"The cell has been selected!\");\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onSelection = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     *  Emitted when `IgxGridRowComponent` is selected.\n     * ```html\n     * <igx-grid #grid (onRowSelectionChange)=\"onCellClickChange($event)\" [data]=\"localData\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onCellClickChange(e){\n     *     alert(\"The selected row has been changed!\");\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowSelectionChange = new EventEmitter<IRowSelectionEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` is pinned.\n     * The index that the column is inserted at may be changed through the `insertAtIndex` property.\n     * ```typescript\n     * public columnPinning(event) {\n     *     if (event.column.field === \"Name\") {\n     *       event.insertAtIndex = 0;\n     *     }\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnPinning = new EventEmitter<IPinColumnEventArgs>();\n\n    /**\n     * An @Output property emitting an event when `IgxGridCellComponent`\n     * editing has been performed in the grid and the values have **not** been submitted (e.g. `Esc` key was pressed).\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      cellID: {\n     *          columnID: int,\n     *          rowID: int,\n     *          rowIndex: int\n     *      }\n     *      newValue: object,\n     *      oldValue: object,\n     *      rowID: int\n     *  }\n     *\n     * ```typescript\n     * editCancel(event: IGridEditEventArgs){\n     *    const rowID: IgxColumnComponent = event.rowID;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid3 (onCellEditCancel)=\"editCancel($event)\" [data]=\"remote | async\" [primaryKey]=\"'ProductID'\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onCellEditCancel = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when `IgxGridCellComponent` enters edit mode.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      cellID: {\n     *          columnID: int,\n     *          rowID: int,\n     *          rowIndex: int\n     *      }\n     *      oldValue: object,\n     *      rowID: int\n     *  }\n     *\n     * ```typescript\n     * editStart(event: IGridEditEventArgs){\n     *    const value: IgxColumnComponent = event.newValue;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid3 (onCellEditEnter)=\"editStart($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onCellEditEnter = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when `IgxGridCellComponent` editing has been performed in the grid.\n     * Event is fired after editing is completed, when the cell is exiting edit mode.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      cellID: {\n     *          columnID: int,\n     *          rowID: int,\n     *          rowIndex: int\n     *      }\n     *      newValue: object,\n     *      oldValue: object,\n     *      rowID: int\n     *  }\n     *\n     * ```typescript\n     * editDone(event: IGridEditEventArgs){\n     *    const value: IgxColumnComponent = event.newValue;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid3 (onCellEdit)=\"editDone($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onCellEdit = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when [rowEditable]=\"true\" a row enters edit mode.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      oldValue: <rowObj>,\n     *      rowID: int\n     *  }\n     *\n     * Bind to the event in markup as follows:\n     * ```html\n     * <igx-grid #grid3 (onRowEditEnter)=\"editStart($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowEditable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n     * ```typescript\n     *      editStart(event: IGridEditEventArgs) {\n     *          const editedRowObj = event.oldValue;\n     *          const cancelValue = event.cancel;\n     *          const rowID = event.rowID;\n     *      }\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onRowEditEnter = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when [rowEditable]=\"true\" & `endEdit(true)` is called.\n     * Emitted when changing rows during edit mode, selecting an un-editable cell in the edited row,\n     * performing paging operation, column resizing, pinning, moving or hitting  `Done`\n     * button inside of the rowEditingOverlay, or hitting the `Enter` key while editing a cell.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      newValue: <rowObj>,\n     *      oldValue: <rowObj>,\n     *      rowID: int\n     *  }\n     *\n     * Bind to the event in markup as follows:\n     * ```html\n     * <igx-grid #grid3 (onRowEdit)=\"editDone($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowEditable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n     *\n     * ```typescript\n     *      editDone(event: IGridEditEventArgs) {\n     *          const originalRowObj = event.oldValue;\n     *          const updatedRowObj = event.newValue;\n     *          const cancelValue = event.cancel;\n     *          const rowID = event.rowID;\n     *      }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowEdit = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when [rowEditable]=\"true\" & `endEdit(false)` is called.\n     * Emitted when changing hitting `Esc` key during cell editing and when click on the `Cancel` button\n     * in the row editing overlay.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      newValue: <rowObj>,\n     *      oldValue: <rowObj>,\n     *      rowID: int\n     *  }\n     *\n     * Bind to the event in markup as follows:\n     * ```html\n     * <igx-grid #grid3 (onRowEditCancel)=\"editCancel($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowEditable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n     * ```typescript\n     *      editCancel(emitted: { row: IgxGridRowComponent, newValue: any, oldValue: any }): void {\n     *          const originalRowObj = event.oldValue;\n     *          const updatedRowObj = event.newValue;\n     *          const cancelValue = event.cancel;\n     *          const rowID = event.rowID;\n     *      }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowEditCancel = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * Emitted when a grid column is initialized. Returns the column object.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [onColumnInit]=\"initColumns($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * initColumns(event: IgxColumnComponent) {\n     * const column: IgxColumnComponent = event;\n     *       column.filterable = true;\n     *       column.sortable = true;\n     *       column.editable = true;\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnInit = new EventEmitter<IgxColumnComponent>();\n\n    /**\n     * Emitted when sorting is performed through the UI. Returns the sorting expression.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [autoGenerate]=\"true\" (onSortingDone)=\"sortingDone($event)\"></igx-grid>\n     * ```\n     * ```typescript\n     * sortingDone(event: SortingDirection){\n     *     const sortingDirection = event;\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onSortingDone = new EventEmitter<ISortingExpression | Array<ISortingExpression>>();\n\n    /**\n     * Emitted when filtering is performed through the UI.\n     * Returns the filtering expressions tree of the column for which filtering was performed.\n     * ```typescript\n     * filteringDone(event: IFilteringExpressionsTree){\n     *     const filteringTree = event;\n     *}\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\" (onFilteringDone)=\"filteringDone($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onFilteringDone = new EventEmitter<IFilteringExpressionsTree>();\n\n    /**\n     * Emitted when paging is performed. Returns an object consisting of the previous and next pages.\n     * ```typescript\n     * pagingDone(event: IPageEventArgs){\n     *     const paging = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\" (onPagingDone)=\"pagingDone($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onPagingDone = new EventEmitter<IPageEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridRowComponent` is being added to the `IgxGridComponent` through the API.\n     * Returns the data for the new `IgxGridRowComponent` object.\n     * ```typescript\n     * rowAdded(event: IRowDataEventArgs){\n     *    const rowInfo = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onRowAdded)=\"rowAdded($event)\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowAdded = new EventEmitter<IRowDataEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridRowComponent` is deleted through the `IgxGridComponent` API.\n     * Returns an `IRowDataEventArgs` object.\n     * ```typescript\n     * rowDeleted(event: IRowDataEventArgs){\n     *    const rowInfo = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onRowDeleted)=\"rowDeleted($event)\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowDeleted = new EventEmitter<IRowDataEventArgs>();\n\n    /**\n     * Emitted when a new chunk of data is loaded from virtualization.\n     * ```typescript\n     *  <igx-grid #grid [data]=\"localData\" [autoGenerate]=\"true\" (onDataPreLoad)='handleDataPreloadEvent()'></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onDataPreLoad = new EventEmitter<IForOfState>();\n\n    /**\n     * Emitted when `IgxColumnComponent` is resized.\n     * Returns the `IgxColumnComponent` object's old and new width.\n     * ```typescript\n     * resizing(event: IColumnResizeEventArgs){\n     *     const grouping = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onColumnResized)=\"resizing($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnResized = new EventEmitter<IColumnResizeEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridCellComponent` is right clicked. Returns the `IgxGridCellComponent` object.\n     * ```typescript\n     * contextMenu(event: IGridCellEventArgs){\n     *     const resizing = event;\n     *     console.log(resizing);\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onContextMenu)=\"contextMenu($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onContextMenu = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridCellComponent` is double clicked. Returns the `IgxGridCellComponent` object.\n     * ```typescript\n     * dblClick(event: IGridCellEventArgs){\n     *     const dblClick = event;\n     *     console.log(dblClick);\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onDoubleClick)=\"dblClick($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onDoubleClick = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` visibility is changed. Args: { column: any, newValue: boolean }\n     * ```typescript\n     * visibilityChanged(event: IColumnVisibilityChangedEventArgs){\n     *    const visiblity = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnVisibilityChanged)=\"visibilityChanged($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnVisibilityChanged = new EventEmitter<IColumnVisibilityChangedEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` moving starts. Returns the moved `IgxColumnComponent` object.\n     * ```typescript\n     * movingStart(event: IColumnMovingStartEventArgs){\n     *     const movingStarts = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMovingStart)=\"movingStart($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnMovingStart = new EventEmitter<IColumnMovingStartEventArgs>();\n\n    /**\n     * Emitted throughout the `IgxColumnComponent` moving operation.\n     * Returns the source and target `IgxColumnComponent` objects. This event is cancelable.\n     * ```typescript\n     * moving(event: IColumnMovingEventArgs){\n     *     const moving = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMoving)=\"moving($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnMoving = new EventEmitter<IColumnMovingEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` moving ends.\n     * Returns the source and target `IgxColumnComponent` objects.\n     * ```typescript\n     * movingEnds(event: IColumnMovingEndEventArgs){\n     *     const movingEnds = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMovingEnd)=\"movingEnds($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnMovingEnd = new EventEmitter<IColumnMovingEndEventArgs>();\n\n    /**\n     * Emitted when keydown is triggered over element inside grid's body.\n     * This event is fired only if the key combination is supported in the grid.\n     * Return the target type, target object and the original event. This event is cancelable.\n     * ```typescript\n     * customKeydown(args: IGridKeydownEventArgs) {\n     *  const keydownEvent = args.event;\n     * }\n     * ```\n     * ```html\n     *  <igx-grid (onGridKeydown)=\"customKeydown($event)\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onGridKeydown = new EventEmitter<IGridKeydownEventArgs>();\n\n    /**\n     * Emitted when start dragging a row.\n     * Return the dragged row.\n     */\n    @Output()\n    public onRowDragStart = new EventEmitter<IRowDragStartEventArgs>();\n\n    /**\n     * Emitted when dropping a row.\n     * Return the dropped row.\n     */\n    @Output()\n    public onRowDragEnd = new EventEmitter<IRowDragEndEventArgs>();\n\n    /**\n     * Emitted when a copy operation is executed.\n     * Fired only if copy behavior is enabled through the [`clipboardOptions`]{@link IgxGridBaseComponent#clipboardOptions}.\n     */\n    @Output()\n    onGridCopy = new EventEmitter<IGridClipboardEvent>();\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxGridColumnResizerComponent, { static: false })\n    public resizeLine: IgxGridColumnResizerComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('loadingOverlay', { static: true })\n    public loadingOverlay: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxLoadingOverlayOutlet', { read: IgxOverlayOutletDirective, static: true })\n    public loadingOutlet: IgxOverlayOutletDirective;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxColumnComponent, { read: IgxColumnComponent, descendants: true })\n    public columnList: QueryList<IgxColumnComponent> = new QueryList<IgxColumnComponent>();\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStyleSortingTemplateDirective, { read: IgxExcelStyleSortingTemplateDirective, static: false })\n    public excelStyleSortingTemplateDirective: IgxExcelStyleSortingTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStyleMovingTemplateDirective, { read: IgxExcelStyleMovingTemplateDirective, static: false })\n    public excelStyleMovingTemplateDirective: IgxExcelStyleMovingTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStyleHidingTemplateDirective, { read: IgxExcelStyleHidingTemplateDirective, static: false })\n    public excelStyleHidingTemplateDirective: IgxExcelStyleHidingTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStylePinningTemplateDirective, { read: IgxExcelStylePinningTemplateDirective, static: false })\n    public excelStylePinningTemplateDirective: IgxExcelStylePinningTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStyleLoadingValuesTemplateDirective, { read: IgxExcelStyleLoadingValuesTemplateDirective, static: true })\n    public excelStyleLoadingValuesTemplateDirective: IgxExcelStyleLoadingValuesTemplateDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxGridHeaderGroupComponent, { read: IgxGridHeaderGroupComponent })\n    public headerGroups: QueryList<IgxGridHeaderGroupComponent>;\n\n    /**\n     * A list of all `IgxGridHeaderGroupComponent`.\n     * ```typescript\n     * const headerGroupsList = this.grid.headerGroupsList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get headerGroupsList(): IgxGridHeaderGroupComponent[] {\n        return this.headerGroups ? flatten(this.headerGroups.toArray()) : [];\n    }\n\n    /**\n     * A list of all `IgxGridHeaderComponent`.\n     * ```typescript\n     * const headers = this.grid.headerCellList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get headerCellList(): IgxGridHeaderComponent[] {\n        return this.headerGroupsList.map((headerGroup) => headerGroup.headerCell).filter((headerCell) => headerCell);\n    }\n\n    /**\n     * A list of all `IgxGridFilteringCellComponent`.\n     * ```typescript\n     * const filterCells = this.grid.filterCellList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get filterCellList(): IgxGridFilteringCellComponent[] {\n        return this.headerGroupsList.map((headerGroup) => headerGroup.filterCell).filter((filterCell) => filterCell);\n    }\n\n    @ViewChildren('row')\n    private _rowList: QueryList<IgxGridRowComponent>;\n\n    @ViewChildren('summaryRow', { read: IgxSummaryRowComponent })\n    protected _summaryRowList: QueryList<IgxSummaryRowComponent>;\n\n    public get summariesRowList() {\n        const res = new QueryList<any>();\n        if (!this._summaryRowList) {\n            return res;\n        }\n        const sumList = this._summaryRowList.filter((item) => {\n            return item.element.nativeElement.parentElement !== null;\n        });\n        res.reset(sumList);\n        return res;\n    }\n\n    /**\n     * A list of `IgxGridRowComponent`.\n     * ```typescript\n     * const rowList = this.grid.rowList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public get rowList() {\n        const res = new QueryList<any>();\n        if (!this._rowList) {\n            return res;\n        }\n        const rList = this._rowList\n            .filter((item) => {\n                return item.element.nativeElement.parentElement !== null;\n            })\n            .sort((a, b) => {\n                return a.index - b.index;\n            });\n        res.reset(rList);\n        return res;\n    }\n\n    @ViewChildren(IgxRowComponent, { read: IgxRowComponent })\n    private _dataRowList: QueryList<IgxRowComponent<IgxGridBaseComponent>>;\n\n    /**\n     * A list of `IgxGridRowComponent`, currently rendered.\n     * ```typescript\n     * const dataList = this.grid.dataRowList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public get dataRowList(): QueryList<IgxRowComponent<IgxGridBaseComponent>> {\n        const res = new QueryList<IgxRowComponent<IgxGridBaseComponent>>();\n        if (!this._dataRowList) {\n            return res;\n        }\n        const rList = this._dataRowList.filter((item) => {\n            return item.element.nativeElement.parentElement !== null;\n        }).sort((a, b) => {\n            return a.index - b.index;\n        });\n        res.reset(rList);\n        return res;\n    }\n\n    /**\n     * A template reference for the template when the filtered `IgxGridComponent` is empty.\n     * ```\n     * const emptyTempalte = this.grid.emptyGridTemplate;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @ViewChild('emptyFilteredGrid', { read: TemplateRef, static: true })\n    public emptyFilteredGridTemplate: TemplateRef<any>;\n\n    /**\n     * A template reference for the template when the `IgxGridComponent` is empty.\n     * ```\n     * const emptyTempalte = this.grid.emptyGridTemplate;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @ViewChild('defaultEmptyGrid', { read: TemplateRef, static: true })\n    public emptyGridDefaultTemplate: TemplateRef<any>;\n\n    @ViewChild('defaultLoadingGrid', { read: TemplateRef, static: true })\n    public loadingGridDefaultTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('scrollContainer', { read: IgxGridForOfDirective, static: true })\n    public parentVirtDir: IgxGridForOfDirective<any>;\n\n    /**\n     * Returns the template which will be used by the toolbar to show custom content.\n     * ```typescript\n     * let customContentTemplate = this.grid.toolbarCustomContentTemplate;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    public get toolbarCustomContentTemplate(): IgxGridToolbarCustomContentDirective {\n        return this.toolbarCustomContentTemplates.first;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxGridToolbarCustomContentDirective, { read: IgxGridToolbarCustomContentDirective, descendants: false })\n    public toolbarCustomContentTemplates: QueryList<IgxGridToolbarCustomContentDirective>;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get headSelectorTemplate(): TemplateRef<IgxHeadSelectorDirective> {\n        if (this.headSelectorsTemplates && this.headSelectorsTemplates.first) {\n            return this.headSelectorsTemplates.first.templateRef;\n        }\n\n        return null;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxHeadSelectorDirective, { read: IgxHeadSelectorDirective, descendants: false })\n    public headSelectorsTemplates: QueryList<IgxHeadSelectorDirective>;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get rowSelectorTemplate(): TemplateRef<IgxRowSelectorDirective> {\n        if (this.rowSelectorsTemplates && this.rowSelectorsTemplates.first) {\n            return this.rowSelectorsTemplates.first.templateRef;\n        }\n\n        return null;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxRowSelectorDirective, { read: IgxRowSelectorDirective, descendants: false })\n    public rowSelectorsTemplates: QueryList<IgxRowSelectorDirective>;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxRowDragGhostDirective, { read: TemplateRef, descendants: false })\n    public dragGhostCustomTemplates: QueryList<TemplateRef<any>>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('verticalScrollContainer', { read: IgxGridForOfDirective, static: true })\n    public verticalScrollContainer: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('verticalScrollHolder', { read: IgxGridForOfDirective, static: true })\n    public verticalScroll: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('scr', { read: ElementRef, static: true })\n    public scr: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('footer', { read: ElementRef, static: false })\n    public footer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('hContainer', { read: IgxGridForOfDirective, static: true })\n    public headerContainer: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerSelectorContainer', { static: false })\n    public headerSelectorContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerDragContainer', { static: false })\n    public headerDragContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerGroupContainer', { static: false })\n    public headerGroupContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('filteringRow', { read: IgxGridFilteringRowComponent, static: false })\n    public filteringRow: IgxGridFilteringRowComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('theadRow', { static: true })\n    public theadRow: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('tbody', { static: true })\n    public tbody: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('tfoot', { static: true })\n    public tfoot: ElementRef;\n\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxFilteringOverlayOutlet', { read: IgxOverlayOutletDirective, static: true })\n    protected _outletDirective: IgxOverlayOutletDirective;\n\n    /**\n     * @hidden\n     */\n    public get outletDirective() {\n        return this._outletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxRowEditingOverlayOutlet', { read: IgxOverlayOutletDirective, static: true })\n    public rowEditingOutletDirective: IgxOverlayOutletDirective;\n\n    /**\n     * @hidden\n    */\n    @ViewChildren(IgxTemplateOutletDirective, { read: IgxTemplateOutletDirective })\n    public tmpOutlets: QueryList<any> = new QueryList<any>();\n\n\n    /**\n     * @hidden\n     */\n    public get rowOutletDirective() {\n        return this.rowEditingOutletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    public get parentRowOutletDirective() {\n        return null;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('dragIndicatorIconBase', { read: TemplateRef, static: true })\n    public dragIndicatorIconBase: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultRowEditTemplate', { read: TemplateRef, static: true })\n    private defaultRowEditTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxRowEditTemplateDirective, { read: TemplateRef, static: false })\n    public rowEditCustom: TemplateRef<any>;\n\n    /** @hidden */\n    public get rowEditContainer(): TemplateRef<any> {\n        return this.rowEditCustom ? this.rowEditCustom : this.defaultRowEditTemplate;\n    }\n    /** @hidden */\n    @ContentChild(IgxRowEditTextDirective, { read: TemplateRef, static: false })\n    public rowEditText: TemplateRef<any>;\n\n    /** @hidden */\n    @ContentChild(IgxRowEditActionsDirective, { read: TemplateRef, static: false })\n    public rowEditActions: TemplateRef<any>;\n\n\n    /**\n    * The custom template, if any, that should be used when rendering a row expand indicator.\n    */\n   @ContentChild(IgxRowExpandedIndicatorDirective, { read: TemplateRef, static: false })\n   public rowExpandedIndicatorTemplate: TemplateRef<any> = null;\n\n   /**\n   * The custom template, if any, that should be used when rendering a row collapse indicator.\n   */\n   @ContentChild(IgxRowCollapsedIndicatorDirective, { read: TemplateRef, static: false })\n   public rowCollapsedIndicatorTemplate: TemplateRef<any> = null;\n\n    /**\n    * The custom template, if any, that should be used when rendering a header expand indicator.\n    */\n   @ContentChild(IgxHeaderExpandIndicatorDirective, { read: TemplateRef, static: false })\n   public headerExpandIndicatorTemplate: TemplateRef<any> = null;\n\n   /**\n   * The custom template, if any, that should be used when rendering a header collapse indicator.\n   */\n   @ContentChild(IgxHeaderCollapseIndicatorDirective, { read: TemplateRef, static: false })\n   public headerCollapseIndicatorTemplate: TemplateRef<any> = null;\n\n    /**\n     * @hidden\n     */\n    public get rowInEditMode(): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        const editRowState = this.crudService.row;\n        return editRowState !== null ? this.rowList.find(e => e.rowID === editRowState.id) : null;\n    }\n\n    /**\n     * @hidden\n     */\n    public get firstEditableColumnIndex(): number {\n        const index = this.navigation.gridOrderedColumns.findIndex(e => e.editable);\n        return index !== -1 ? index : null;\n    }\n\n    /**\n     * @hidden\n     */\n    public get lastEditableColumnIndex(): number {\n        const orderedColumns = this.navigation.gridOrderedColumns;\n        const index = orderedColumns.reverse().findIndex(e => e.editable);\n        return index !== -1 ? orderedColumns.length - 1 - index : null;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxRowEditTabStopDirective)\n    public rowEditTabsDEFAULT: QueryList<IgxRowEditTabStopDirective>;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowEditTabStopDirective)\n    public rowEditTabsCUSTOM: QueryList<IgxRowEditTabStopDirective>;\n\n    /**\n     * @hidden\n     * TODO: Nav service logic doesn't handle 0 results from this querylist\n     */\n    public get rowEditTabs(): QueryList<IgxRowEditTabStopDirective> {\n        return this.rowEditTabsCUSTOM.length ? this.rowEditTabsCUSTOM : this.rowEditTabsDEFAULT;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxToggleDirective, { static: false })\n    public rowEditingOverlay: IgxToggleDirective;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    get hostClass(): string {\n        return this.getComponentDensityClass('igx-grid');\n    }\n\n    get bannerClass(): string {\n        const position = this.rowEditPositioningStrategy.isTop ? 'igx-banner__border-top' : 'igx-banner__border-bottom';\n        return `${this.getComponentDensityClass('igx-banner')} ${position}`;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public hostRole = 'grid';\n\n    /**\n     * @hidden\n     */\n    get pipeTrigger(): number {\n        return this._pipeTrigger;\n    }\n\n    /**\n     * @hidden\n     */\n    get summaryPipeTrigger(): number {\n        return this._summaryPipeTrigger;\n    }\n\n    /**\n     * Returns the sorting state of the `IgxGridComponent`.\n     * ```typescript\n     * const sortingState = this.grid.sortingExpressions;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get sortingExpressions(): ISortingExpression[] {\n        return this._sortingExpressions;\n    }\n\n    /**\n     * Sets the sorting state of the `IgxGridComponent`.\n     * ```typescript\n     * this.grid.sortingExpressions = [{\n     *     fieldName: \"ID\",\n     *     dir: SortingDirection.Desc,\n     *     ignoreCase: true\n     * }];\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [(sortingExpressions)]=\"model.sortingExpressions\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set sortingExpressions(value: ISortingExpression[]) {\n        this._sortingExpressions = cloneArray(value);\n        this.sortingExpressionsChange.emit(this._sortingExpressions);\n        this.notifyChanges();\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public sortingExpressionsChange = new EventEmitter<ISortingExpression[]>();\n\n    /**\n     * @hidden\n     */\n    get maxLevelHeaderDepth() {\n        if (this._maxLevelHeaderDepth === null) {\n            this._maxLevelHeaderDepth = this.hasColumnLayouts ?\n                this.columnList.reduce((acc, col) => Math.max(acc, col.rowStart), 0) :\n                this.columnList.reduce((acc, col) => Math.max(acc, col.level), 0);\n        }\n        return this._maxLevelHeaderDepth;\n    }\n\n    /**\n     * Returns the number of hidden `IgxColumnComponent`.\n     * ```typescript\n     * const hiddenCol = this.grid.hiddenColumnsCount;\n     * ``\n     */\n    get hiddenColumnsCount() {\n        return this.columnList.filter((col) => col.columnGroup === false && col.hidden === true).length;\n    }\n\n    /**\n     * Returns the text to be displayed inside the toggle button\n     * for the built-in column hiding UI of the`IgxColumnComponent`.\n     * ```typescript\n     * const hiddenColText = this.grid.hiddenColumnsText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get hiddenColumnsText() {\n        return this._hiddenColumnsText;\n    }\n\n    /**\n     * Sets the text to be displayed inside the toggle button\n     * for the built-in column hiding UI of the`IgxColumnComponent`.\n     * ```typescript\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" [hiddenColumnsText]=\"'Hidden Columns'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set hiddenColumnsText(value) {\n        this._hiddenColumnsText = value;\n\n    }\n\n    /**\n     * Returns the text to be displayed inside the toggle button\n     * for the built-in column pinning UI of the`IgxColumnComponent`.\n     * ```typescript\n     * const pinnedText = this.grid.pinnedColumnsText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get pinnedColumnsText() {\n        return this._pinnedColumnsText;\n    }\n\n    /**\n     * Sets the text to be displayed inside the toggle button\n     * for the built-in column pinning UI of the`IgxColumnComponent`.\n     * ```html\n     * <igx-grid [pinnedColumnsText]=\"'PinnedCols Text\" [data]=\"data\" [width]=\"'100%'\" [height]=\"'500px'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set pinnedColumnsText(value) {\n        this._pinnedColumnsText = value;\n    }\n\n    /**\n     * Get transactions service for the grid.\n     */\n    get transactions(): TransactionService<Transaction, State> {\n        return this._transactions;\n    }\n\n    /**\n     * @hidden\n    */\n    public columnsWithNoSetWidths = null;\n\n    /* Toolbar related definitions */\n    private _showToolbar = false;\n    private _exportExcel = false;\n    private _exportCsv = false;\n    private _toolbarTitle: string = null;\n    private _exportText: string = null;\n    private _exportExcelText: string = null;\n    private _exportCsvText: string = null;\n    private _rowEditable = false;\n    private _currentRowState: any;\n    private _filteredSortedData = null;\n    /**\n     * @hidden\n    */\n    public get currentRowState(): any {\n        return this._currentRowState;\n    }\n\n    /**\n     * Provides access to the `IgxToolbarComponent`.\n     * ```typescript\n     * const gridToolbar = this.grid.toolbar;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @ViewChild('toolbar', { read: IgxGridToolbarComponent, static: false })\n    public toolbar: IgxGridToolbarComponent = null;\n\n    @ViewChild('toolbar', { read: ElementRef, static: false })\n    private toolbarHtml: ElementRef = null;\n\n    /**\n     * Returns whether the `IgxGridComponent`'s toolbar is shown or hidden.\n     * ```typescript\n     * const toolbarGrid = this.grid.showToolbar;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get showToolbar(): boolean {\n        return this._showToolbar;\n    }\n\n    /**\n     * Shows or hides the `IgxGridComponent`'s toolbar.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" ></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set showToolbar(newValue: boolean) {\n        if (this._showToolbar !== newValue) {\n            this._showToolbar = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Returns the toolbar's title.\n     * ```typescript\n     * const toolbarTitle  = this.grid.toolbarTitle;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get toolbarTitle(): string {\n        return this._toolbarTitle;\n    }\n\n    /**\n     * Sets the toolbar's title.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [toolbarTitle]=\"'My Grid'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set toolbarTitle(newValue: string) {\n        if (this._toolbarTitle !== newValue) {\n            this._toolbarTitle = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Returns whether the option for exporting to MS Excel is enabled or disabled.\n     * ```typescript\n     * cosnt excelExporter = this.grid.exportExcel;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportExcel(): boolean {\n        return this.getExportExcel();\n    }\n\n    /**\n     * Enable or disable the option for exporting to MS Excel.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [exportExcel]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportExcel(newValue: boolean) {\n        if (this._exportExcel !== newValue) {\n            this._exportExcel = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Returns whether the option for exporting to CSV is enabled or disabled.\n     * ```typescript\n     * const exportCsv = this.grid.exportCsv;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportCsv(): boolean {\n        return this.getExportCsv();\n    }\n\n    /**\n     * Enable or disable the option for exporting to CSV.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportCsv(newValue: boolean) {\n        if (this._exportCsv !== newValue) {\n            this._exportCsv = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Returns the textual content for the main export button.\n     * ```typescript\n     * const exportText = this.grid.exportText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportText(): string {\n        return this._exportText;\n    }\n\n    /**\n     * Sets the textual content for the main export button.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportText(newValue: string) {\n        if (this._exportText !== newValue) {\n            this._exportText = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Returns the textual content for the MS Excel export button.\n     * ```typescript\n     * const excelText = this.grid.exportExcelText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportExcelText(): string {\n        return this._exportExcelText;\n    }\n\n    /**\n     * Sets the textual content for the MS Excel export button.\n     * ```html\n     * <igx-grid [exportExcelText]=\"'My Excel Exporter\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportExcelText(newValue: string) {\n        if (this._exportExcelText !== newValue) {\n            this._exportExcelText = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Returns the textual content for the CSV export button.\n     * ```typescript\n     * const csvText = this.grid.exportCsvText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportCsvText(): string {\n        return this._exportCsvText;\n    }\n\n    /**\n     * Sets the textual content for the CSV export button.\n     * ```html\n     * <igx-grid [exportCsvText]=\"'My Csv Exporter\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportExcel]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportCsvText(newValue: string) {\n        if (this._exportCsvText !== newValue) {\n            this._exportCsvText = newValue;\n            if (!this._init) {\n                this.notifyChanges(true);\n            }\n        }\n    }\n\n    /**\n     * Controls the copy behavior of the grid.\n     */\n    @Input()\n    clipboardOptions = {\n        /**\n         * Enables/disables the copy behavior\n         */\n        enabled: true,\n        /**\n         * Include the columns headers in the clipboard output.\n         */\n        copyHeaders: true,\n        /**\n         * Apply the columns formatters (if any) on the data in the clipboard output.\n         */\n        copyFormatters: true,\n        /**\n         * The separator used for formatting the copy output. Defaults to `\\t`.\n         */\n        separator: '\\t'\n    };\n\n    /**\n     * Returns the current cell selection state, which can be none, single or multiple\n     * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get cellSelection() {\n        return this._cellSelectionMode;\n    }\n\n    /**\n     * Allows you to set cell selection mode\n     * By default the cell selection mode is multiple\n     * @param selectionMode: GridSelectionMode\n     * @memberof IgxGridBaseComponent\n     */\n    set cellSelection(selectionMode:  GridSelectionMode) {\n        this._cellSelectionMode = selectionMode;\n        if (this.gridAPI.grid) {\n            this.selectionService.clear(true);\n            this.notifyChanges();\n        }\n    }\n\n    /**\n     * Returns the current row selection state, which can be none, single or multiple\n     * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get rowSelection() {\n        return this._rowSelectionMode;\n    }\n\n    /**\n     * Allows you to set row selection mode\n     * By default the row selection mode is none\n     * @param selectionMode: GridSelectionMode\n     * @memberof IgxGridBaseComponent\n     */\n    set rowSelection(selectionMode:  GridSelectionMode) {\n        this._rowSelectionMode = selectionMode;\n        if (this.gridAPI.grid && this.columnList) {\n            this.selectionService.clearAllSelectedRows();\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public rowEditMessage;\n\n    /**\n     * Emitted when an export process is initiated by the user.\n     * ```typescript\n     * toolbarExporting(event: IGridToolbarExportEventArgs){\n     *     const toolbarExporting = event;\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onToolbarExporting = new EventEmitter<IGridToolbarExportEventArgs>();\n\n    /* End of toolbar related definitions */\n\n    /**\n     * Emitted when making a range selection either through\n     * drag selection or through keyboard selection.\n     */\n    @Output()\n    onRangeSelection = new EventEmitter<GridSelectionRange>();\n\n    /**\n     * @hidden\n     */\n    public pagingState;\n    /**\n     * @hidden\n     */\n    public calcWidth: number;\n    /**\n     * @hidden\n     */\n    public calcHeight = 0;\n    /**\n     * @hidden\n     */\n    public tfootHeight: number;\n    /**\n     * @hidden\n     */\n    public chipsGoupingExpressions = [];\n    /**\n     * @hidden\n     */\n    public summariesHeight: number;\n\n    /**\n     * @hidden\n     */\n    public draggedColumn: IgxColumnComponent;\n\n\n    /**\n     * @hidden\n     */\n    public disableTransitions = false;\n\n    /**\n     * @hidden\n     */\n    public lastSearchInfo: ISearchInfo = {\n        searchText: '',\n        caseSensitive: false,\n        exactMatch: false,\n        activeMatchIndex: 0,\n        matchInfoCache: []\n    };\n\n    /**\n     * @hidden\n     */\n    public columnWidthSetByUser = false;\n\n    abstract data: any[];\n    abstract filteredData: any[];\n\n    /**\n     * @hidden\n     */\n    protected destroy$ = new Subject<any>();\n\n    /**\n     * @hidden\n     */\n    protected _perPage = 15;\n    /**\n     * @hidden\n     */\n    protected _page = 0;\n    /**\n     * @hidden\n     */\n    protected _paging = false;\n    /**\n     * @hidden\n     */\n    protected _hideRowSelectors = false;\n    /**\n     * @hidden\n     */\n    protected _rowDrag = false;\n    /**\n     * @hidden\n     */\n    protected _pipeTrigger = 0;\n    /**\n     * @hidden\n     */\n    protected _summaryPipeTrigger = 0;\n    /**\n     * @hidden\n     */\n    protected _columns: IgxColumnComponent[] = [];\n    /**\n     * @hidden\n     */\n    protected _pinnedColumns: IgxColumnComponent[] = [];\n    /**\n     * @hidden\n     */\n    protected _unpinnedColumns: IgxColumnComponent[] = [];\n    /**\n     * @hidden\n     */\n    protected _filteringExpressionsTree: IFilteringExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And);\n    /**\n     * @hidden\n     */\n    protected _advancedFilteringExpressionsTree: IFilteringExpressionsTree;\n    /**\n     * @hidden\n     */\n    protected _sortingExpressions: Array<ISortingExpression> = [];\n    /**\n     * @hidden\n     */\n    protected _maxLevelHeaderDepth = null;\n    /**\n     * @hidden\n     */\n    protected _columnHiding = false;\n    /**\n     * @hidden\n     */\n    protected _columnPinning = false;\n\n\n    /**\n     * @hidden\n     */\n    protected _hasVisibleColumns;\n    protected _allowFiltering = false;\n    protected _allowAdvancedFiltering = false;\n    protected _filterMode = FilterMode.quickFilter;\n\n    protected observer: ResizeObserver = new ResizeObserver(() => {});\n\n    protected resizeNotify = new Subject();\n\n\n    private columnListDiffer;\n    private _hiddenColumnsText = '';\n    private _pinnedColumnsText = '';\n    private _height = '100%';\n    private _width = '100%';\n    private _rowHeight;\n    protected _baseFontSize: number;\n    private _horizontalForOfs: Array<IgxGridForOfDirective<any>> = [];\n    private _multiRowLayoutRowSize = 1;\n    protected _loadingId;\n\n    // Caches\n    private _totalWidth = NaN;\n    private _pinnedVisible = [];\n    private _unpinnedVisible = [];\n    private _pinnedWidth = NaN;\n    private _unpinnedWidth = NaN;\n    private _visibleColumns = [];\n    private _columnGroups = false;\n\n    private _columnWidth: string;\n\n    protected _defaultTargetRecordNumber = 10;\n\n    private _summaryPosition = GridSummaryPosition.bottom;\n    private _summaryCalculationMode = GridSummaryCalculationMode.rootAndChildLevels;\n    private _cellSelectionMode = GridSelectionMode.multiple;\n    private _rowSelectionMode = GridSelectionMode.none;\n\n    private rowEditPositioningStrategy = new RowEditPositionStrategy({\n        horizontalDirection: HorizontalAlignment.Right,\n        verticalDirection: VerticalAlignment.Bottom,\n        horizontalStartPoint: HorizontalAlignment.Left,\n        verticalStartPoint: VerticalAlignment.Bottom,\n        closeAnimation: null\n    });\n\n    private rowEditSettings = {\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: false,\n        outlet: this.rowOutletDirective,\n        positionStrategy: this.rowEditPositioningStrategy\n    };\n\n    private verticalScrollHandler = (event) => {\n        this.verticalScrollContainer.onScroll(event);\n        if (isEdge()) { this.wheelHandler(false); }\n        this.disableTransitions = true;\n\n        this.zone.run(() => {\n            this.zone.onStable.pipe(first()).subscribe(() => {\n                this.verticalScrollContainer.onChunkLoad.emit(this.verticalScrollContainer.state);\n            });\n\n            if (this.rowEditable) {\n                this.changeRowEditingOverlayStateOnScroll(this.rowInEditMode);\n            }\n            this.disableTransitions = false;\n        });\n\n        this.hideOverlays();\n    }\n\n    private horizontalScrollHandler = (event) => {\n        const scrollLeft = event.target.scrollLeft;\n        if (isEdge()) { this.wheelHandler(true); }\n        this.headerContainer.onHScroll(scrollLeft);\n        this._horizontalForOfs.forEach(vfor => vfor.onHScroll(scrollLeft));\n        this.cdr.markForCheck();\n\n        this.zone.run(() => {\n            this.zone.onStable.pipe(first()).subscribe(() => {\n                this.parentVirtDir.onChunkLoad.emit(this.headerContainer.state);\n            });\n        });\n\n        this.hideOverlays();\n    }\n\n    /**\n    * @hidden\n    * @internal\n    */\n    public hideOverlays() {\n        this.overlayIDs.forEach(overlayID => {\n            this.overlayService.hide(overlayID);\n            this.overlayService.onClosed.pipe(\n                filter(o => o.id === overlayID),\n                takeUntil(this.destroy$)).subscribe(() => {\n                    this.nativeElement.focus();\n                });\n        });\n    }\n\n    private keydownHandler = (event) => {\n        const key = event.key.toLowerCase();\n        if ((isNavigationKey(key) && event.keyCode !== 32) || key === 'tab' || key === 'pagedown' || key === 'pageup') {\n            event.preventDefault();\n            if (key === 'pagedown') {\n                this.verticalScrollContainer.scrollNextPage();\n                this.nativeElement.focus();\n            } else if (key === 'pageup') {\n                this.verticalScrollContainer.scrollPrevPage();\n                this.nativeElement.focus();\n            }\n        }\n    }\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        public crudService: IgxGridCRUDService,\n        public colResizingService: IgxColumnResizingService,\n        protected gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        @Inject(IgxGridTransaction) protected _transactions: TransactionService<Transaction, State>,\n        private elementRef: ElementRef,\n        private zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        public cdr: ChangeDetectorRef,\n        protected resolver: ComponentFactoryResolver,\n        protected differs: IterableDiffers,\n        protected viewRef: ViewContainerRef,\n        public navigation: IgxGridNavigationService,\n        public filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n            this.cdr.detach();\n    }\n\n    _setupServices() {\n        this.gridAPI.grid = this;\n        this.crudService.grid = this;\n        this.selectionService.grid = this;\n        this.navigation.grid = this;\n        this.filteringService.grid = this;\n        this.summaryService.grid = this;\n    }\n\n    _setupListeners() {\n        const destructor = takeUntil<any>(this.destroy$);\n\n        this.onRowAdded.pipe(destructor).subscribe(args => this.refreshGridState(args));\n        this.onRowDeleted.pipe(destructor).subscribe(args => {\n            this.summaryService.deleteOperation = true;\n            this.summaryService.clearSummaryCache(args);\n        });\n\n        this.transactions.onStateUpdate.pipe(destructor).subscribe(() => {\n            this.selectionService.clearHeaderCBState();\n            this.summaryService.clearSummaryCache();\n            this._pipeTrigger++;\n            this.notifyChanges();\n            if (this.transactions.getAggregatedChanges(false).length === 0) {\n                // Needs better check, calling 'transactions.clear()' will also trigger this\n                if (this.gridAPI.atInexistingPage()) {\n                    this.page--;\n                }\n            }\n        });\n\n        this.resizeNotify.pipe(destructor, filter(() => !this._init), throttleTime(100))\n            .subscribe(() => {\n                this.zone.run(() => {\n                    this.notifyChanges(true);\n                });\n            });\n\n        this.onPagingDone.pipe(destructor).subscribe(() => {\n            this.endEdit(true);\n            this.selectionService.clear(true);\n        });\n\n        this.onColumnMoving.pipe(destructor).subscribe(() => this.endEdit(true));\n        this.onColumnResized.pipe(destructor).subscribe(() => this.endEdit(true));\n\n        this.overlayService.onOpening.pipe(destructor).subscribe((event) => {\n            if (this._advancedFilteringOverlayId === event.id) {\n                const instance = event.componentRef.instance as IgxAdvancedFilteringDialogComponent;\n                if (instance) {\n                    instance.initialize(this.filteringService, this.overlayService, event.id);\n                }\n            }\n        });\n\n        this.overlayService.onOpened.pipe(destructor).subscribe((event) => {\n            // do not hide the advanced filtering overlay on scroll\n            if (this._advancedFilteringOverlayId === event.id) {\n                return;\n            }\n\n            if (this.overlayService.getOverlayById(event.id).settings.outlet === this.outletDirective &&\n                this.overlayIDs.indexOf(event.id) < 0) {\n                this.overlayIDs.push(event.id);\n            }\n        });\n\n        this.overlayService.onClosed.pipe(destructor, filter(() => !this._init)).subscribe((event) => {\n            if (this._advancedFilteringOverlayId === event.id) {\n                this._advancedFilteringOverlayId = null;\n                return;\n            }\n\n            const ind = this.overlayIDs.indexOf(event.id);\n            if (ind !== -1) {\n                this.overlayIDs.splice(ind, 1);\n            }\n        });\n\n        this.verticalScrollContainer.onDataChanging.pipe(destructor, filter(() => !this._init)).subscribe(($event) => {\n            this.calculateGridHeight();\n            $event.containerSize = this.calcHeight;\n            this.evaluateLoadingState();\n            this.notifyChanges(true);\n        });\n\n        this.verticalScrollContainer.onContentSizeChange.pipe(destructor, filter(() => !this._init)).subscribe(($event) => {\n            this.calculateGridSizes();\n        });\n\n        this.onDensityChanged.pipe(destructor).subscribe(() => {\n            this.summaryService.summaryHeight = 0;\n            this.endEdit(true);\n            this.cdr.markForCheck();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        super.ngOnInit();\n        this._setupServices();\n        this._setupListeners();\n        this.columnListDiffer = this.differs.find([]).create(null);\n        this.calcWidth = this.width && this.width.indexOf('%') === -1 ? parseInt(this.width, 10) : 0;\n        this.shouldGenerate = this.autoGenerate;\n        this._scrollWidth = this.getScrollWidth();\n    }\n\n    protected setupColumns() {\n        if (this.autoGenerate) {\n            this.autogenerateColumns();\n        }\n\n        this.initColumns(this.columnList, (col: IgxColumnComponent) => this.onColumnInit.emit(col));\n        this.columnListDiffer.diff(this.columnList);\n\n        this.columnList.changes\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((change: QueryList<IgxColumnComponent>) => { this.onColumnsChanged(change); });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetColumnsCaches() {\n        this.columnList.forEach(column => column.resetCaches());\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetForOfCache() {\n        const firstVirtRow = this.dataRowList.first;\n        if (firstVirtRow) {\n            if (this._cdrRequests) {\n                firstVirtRow.virtDirRow.cdr.detectChanges();\n            }\n            firstVirtRow.virtDirRow.assumeMaster();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetColumnCollections() {\n        this._visibleColumns.length = 0;\n        this._pinnedVisible.length = 0;\n        this._unpinnedVisible.length = 0;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetCachedWidths() {\n        this._unpinnedWidth = NaN;\n        this._pinnedWidth = NaN;\n        this._totalWidth = NaN;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetCaches() {\n        this.resetForOfCache();\n        this.resetColumnsCaches();\n        this.resetColumnCollections();\n        this.resetCachedWidths();\n        this.hasVisibleColumns = undefined;\n        this._columnGroups = this.columnList.some(col => col.columnGroup);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        this.setupColumns();\n    }\n\n    public _setupRowObservers() {\n        const elementFilter = (item: IgxRowComponent<any> | IgxSummaryRowComponent) => this.isDefined(item.nativeElement.parentElement);\n        const extractForOfs = pipe(map((collection: any[]) => collection.filter(elementFilter).map(item => item.virtDirRow)));\n        const rowListObserver = extractForOfs(this._dataRowList.changes);\n        const summaryRowObserver = extractForOfs(this._summaryRowList.changes);\n\n        combineLatest([rowListObserver, summaryRowObserver]).pipe(takeUntil(this.destroy$))\n            .subscribe(([row, summary]) => this._horizontalForOfs = [...row, ...summary]);\n\n        this._horizontalForOfs = [\n            ...this._dataRowList.filter(elementFilter).map(item => item.virtDirRow),\n            ...this._summaryRowList.filter(elementFilter).map(item => item.virtDirRow)\n        ];\n    }\n\n    public _zoneBegoneListeners() {\n        this.zone.runOutsideAngular(() => {\n            this.nativeElement.addEventListener('keydown', this.keydownHandler);\n            this.verticalScrollContainer.getScroll().addEventListener('scroll', this.verticalScrollHandler);\n            this.headerContainer.getScroll().addEventListener('scroll', this.horizontalScrollHandler);\n\n            this.observer = new ResizeObserver(() => this.resizeNotify.next());\n            this.observer.observe(this.nativeElement);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        this.initPinning();\n        this.calculateGridSizes();\n        this._init = false;\n        this.cdr.reattach();\n        this._setupRowObservers();\n        this._zoneBegoneListeners();\n\n        const vertScrDC = this.verticalScrollContainer.displayContainer;\n        vertScrDC.addEventListener('scroll', this.scrollHandler);\n        vertScrDC.addEventListener('wheel', () => this.wheelHandler());\n\n    }\n\n    public notifyChanges(repaint = false) {\n        this._cdrRequests = true;\n        this._cdrRequestRepaint = repaint;\n        this.cdr.markForCheck();\n    }\n\n    protected resetNotifyChanges() {\n        this._cdrRequestRepaint = false;\n        this._cdrRequests = false;\n    }\n\n    public ngDoCheck() {\n        super.ngDoCheck();\n        if (this._init) {\n            return;\n        }\n\n        if (this._cdrRequestRepaint) {\n            this.resetNotifyChanges();\n            this.calculateGridSizes();\n            this.refreshSearch(true);\n            return;\n        }\n\n        if (this._cdrRequests) {\n            this.resetNotifyChanges();\n            this.cdr.detectChanges();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n    */\n    public getDragGhostCustomTemplate() {\n        if (this.dragGhostCustomTemplates && this.dragGhostCustomTemplates.first) {\n            return this.dragGhostCustomTemplates.first;\n        }\n\n        return null;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.tmpOutlets.forEach((tmplOutlet) => {\n            tmplOutlet.cleanCache();\n        });\n\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this._destroyed = true;\n\n        if (this._advancedFilteringOverlayId) {\n            this.overlayService.hide(this._advancedFilteringOverlayId);\n        }\n\n        this.zone.runOutsideAngular(() => {\n            this.observer.disconnect();\n            this.nativeElement.removeEventListener('keydown', this.keydownHandler);\n            this.verticalScrollContainer.getScroll().removeEventListener('scroll', this.verticalScrollHandler);\n            this.headerContainer.getScroll().removeEventListener('scroll', this.horizontalScrollHandler);\n            const vertScrDC = this.verticalScrollContainer.displayContainer;\n            vertScrDC.removeEventListener('scroll', this.scrollHandler);\n            vertScrDC.removeEventListener('wheel', () => this.wheelHandler());\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public dataLoading(event) {\n        this.onDataPreLoad.emit(event);\n    }\n\n    /**\n     * Toggles the specified column's visibility.\n     * ```typescript\n     * this.grid1.toggleColumnVisibility({\n     *       column: this.grid1.columns[0],\n     *       newValue: true\n     * });\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public toggleColumnVisibility(args: IColumnVisibilityChangedEventArgs) {\n        const col = args.column ? this.columnList.find((c) => c === args.column) : undefined;\n\n        if (!col) {\n            return;\n        }\n\n        col.hidden = args.newValue;\n        this.onColumnVisibilityChanged.emit(args);\n    }\n\n    /**\n     * Returns the native element of the `IgxGridComponent`.\n     * ```typescript\n     * const nativeEl = this.grid.nativeElement.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    protected get outlet() {\n        return this.outletDirective;\n    }\n\n    /**\n     * Returns the `IgxGridComponent`'s rows height.\n     * ```typescript\n     * const rowHeigh = this.grid.defaultRowHeight;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get defaultRowHeight(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 40;\n            case DisplayDensity.compact:\n                return 32;\n            default:\n                return 50;\n        }\n    }\n\n    get defaultSummaryHeight(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 30;\n            case DisplayDensity.compact:\n                return 24;\n            default:\n                return 36;\n        }\n    }\n\n    /**\n     * Returns the `IgxGridHeaderGroupComponent`'s minimum allowed width.\n     * Used internally for restricting header group component width.\n     * The values below depend on the header cell default right/left padding values.\n\t * @memberof IgxGridBaseComponent\n     */\n    get defaultHeaderGroupMinWidth(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 32;\n            case DisplayDensity.compact:\n                return 24;\n            default:\n                return 48;\n        }\n    }\n\n    public paginatorClassName(): string {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 'igx-paginator--cosy';\n            case DisplayDensity.compact:\n                return 'igx-paginator--compact';\n            default:\n                return 'igx-paginator';\n        }\n    }\n\n    /**\n     * Returns the maximum width of the container for the pinned `IgxColumnComponent`s.\n     * The width is 80% of the total grid width.\n     * ```typescript\n     * const maxPinnedColWidth = this.grid.calcPinnedContainerMaxWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get calcPinnedContainerMaxWidth(): number {\n        return (this.calcWidth * 80) / 100;\n    }\n\n    /**\n     * Returns the minimum width of the container for the unpinned `IgxColumnComponent`s.\n     * The width is 20% of the total grid width.\n     * ```typescript\n     * const minUnpinnedColWidth = this.grid.unpinnedAreaMinWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get unpinnedAreaMinWidth(): number {\n        return (this.calcWidth * 20) / 100;\n    }\n\n    /**\n     * Returns the current width of the container for the pinned `IgxColumnComponent`s.\n     * ```typescript\n     * const pinnedWidth = this.grid.getPinnedWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get pinnedWidth() {\n        if (!isNaN(this._pinnedWidth)) { return this._pinnedWidth; }\n        this._pinnedWidth = this.getPinnedWidth();\n        return this._pinnedWidth;\n    }\n\n    /**\n     * Returns the current width of the container for the unpinned `IgxColumnComponent`s.\n     * ```typescript\n     * const unpinnedWidth = this.grid.getUnpinnedWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get unpinnedWidth() {\n        if (!isNaN(this._unpinnedWidth)) { return this._unpinnedWidth; }\n        this._unpinnedWidth = this.getUnpinnedWidth();\n        return this._unpinnedWidth;\n    }\n\n    get isHorizontalScrollHidden() {\n        const diff = this.unpinnedWidth - this.totalWidth;\n        return this.width === null || diff >= 0;\n    }\n\n    /**\n     * @hidden\n     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.\n     * TODO: Update for Angular 8. Calling parent class getter using super is not supported for now.\n     */\n    public get featureColumnsWidth() {\n        return this.getFeatureColumnsWidth();\n    }\n\n    /**\n     * @hidden\n     */\n    get summariesMargin() {\n        return this.featureColumnsWidth;\n    }\n\n    /**\n     * Returns an array of `IgxColumnComponent`s.\n     * ```typescript\n     * const colums = this.grid.columns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get columns(): IgxColumnComponent[] {\n        return this._columns;\n    }\n\n    /**\n     * Returns an array of the pinned `IgxColumnComponent`s.\n     * ```typescript\n     * const pinnedColumns = this.grid.pinnedColumns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get pinnedColumns(): IgxColumnComponent[] {\n        if (this._pinnedVisible.length) {\n            return this._pinnedVisible;\n        }\n        this._pinnedVisible = this._pinnedColumns.filter(col => !col.hidden);\n        return this._pinnedVisible;\n    }\n\n    /**\n     * Returns an array of unpinned `IgxColumnComponent`s.\n     * ```typescript\n     * const unpinnedColumns = this.grid.unpinnedColumns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get unpinnedColumns(): IgxColumnComponent[] {\n        if (this._unpinnedVisible.length) {\n            return this._unpinnedVisible;\n        }\n        this._unpinnedVisible = this._unpinnedColumns.filter((col) => !col.hidden);\n        return this._unpinnedVisible;\n    }\n\n    /**\n     * Returns the `width` to be set on `IgxGridHeaderGroupComponent`.\n\t * @memberof IgxGridBaseComponent\n     */\n    public getHeaderGroupWidth(column: IgxColumnComponent): string {\n        if (this.hasColumnLayouts) {\n            return '';\n        }\n        const colWidth = column.width;\n        const minWidth = this.defaultHeaderGroupMinWidth;\n        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n\n        if (!isPercentageWidth && parseInt(column.width, 10) < minWidth) {\n            return minWidth.toString();\n        }\n\n        return column.width;\n    }\n\n    /**\n     * Returns the `IgxColumnComponent` by field name.\n     * ```typescript\n     * const myCol = this.grid1.getColumnByName(\"ID\");\n     * ```\n     * @param name\n     * @memberof IgxGridBaseComponent\n     */\n    public getColumnByName(name: string): IgxColumnComponent {\n        return this.columnList.find((col) => col.field === name);\n    }\n\n    /**\n     * Returns the `IgxRowComponent` by index.\n     * ```typescript\n     * const myRow = this.grid1.getRowByIndex(1);\n     * ```\n     * @param index\n     * @memberof IgxGridBaseComponent\n     */\n    public getRowByIndex(index: number): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        return this.gridAPI.get_row_by_index(index);\n    }\n\n    /**\n     * Returns `IgxGridRowComponent` object by the specified primary key .\n     * Requires that the `primaryKey` property is set.\n     * ```typescript\n     * const myRow = this.grid1.getRowByKey(\"cell5\");\n     * ```\n     * @param keyValue\n     * @memberof IgxGridBaseComponent\n     */\n    public getRowByKey(keyValue: any): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        return this.gridAPI.get_row_by_key(keyValue);\n    }\n\n    /**\n     * Returns an array of visible `IgxColumnComponent`s.\n     * ```typescript\n     * const visibleColumns = this.grid.visibleColumns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get visibleColumns(): IgxColumnComponent[] {\n        if (this._visibleColumns.length) {\n            return this._visibleColumns;\n        }\n        this._visibleColumns = this.columnList.filter(c => !c.hidden);\n        return this._visibleColumns;\n    }\n\n    /**\n     * Returns the `IgxGridCellComponent` that matches the conditions.\n     * ```typescript\n     * const myCell = this.grid1.getCellByColumn(2,\"UnitPrice\");\n     * ```\n     * @param rowIndex\n     * @param columnField\n     * @memberof IgxGridBaseComponent\n     */\n    public getCellByColumn(rowIndex: number, columnField: string): IgxGridCellComponent {\n        const columnId = this.columnList.map((column) => column.field).indexOf(columnField);\n        if (columnId !== -1) {\n            return this.gridAPI.get_cell_by_index(rowIndex, columnId);\n        }\n    }\n\n    /**\n     * Returns an `IgxGridCellComponent` object by the specified primary key and column field.\n     * Requires that the primaryKey property is set.\n     * ```typescript\n     * grid.getCellByKey(1, 'index');\n     * ```\n     * @param rowSelector match any rowID\n     * @param columnField\n     * @memberof IgxGridBaseComponent\n     */\n    public getCellByKey(rowSelector: any, columnField: string): IgxGridCellComponent {\n        return this.gridAPI.get_cell_by_key(rowSelector, columnField);\n    }\n\n    /**\n     * Returns the total number of pages.\n     * ```typescript\n     * const totalPages = this.grid.totalPages;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get totalPages(): number {\n        if (this.pagingState) {\n            return this.pagingState.metadata.countPages;\n        }\n        return -1;\n    }\n\n    /**\n     * Returns if the current page is the first page.\n     * ```typescript\n     * const firstPage = this.grid.isFirstPage;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get isFirstPage(): boolean {\n        return this.page === 0;\n    }\n\n    /**\n     * Goes to the next page of the `IgxGridComponent`, if the grid is not already at the last page.\n     * ```typescript\n     * this.grid1.nextPage();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public nextPage(): void {\n        if (!this.isLastPage) {\n            this.page += 1;\n        }\n    }\n\n    /**\n     * Goes to the previous page of the `IgxGridComponent`, if the grid is not already at the first page.\n     * ```typescript\n     * this.grid1.previousPage();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public previousPage(): void {\n        if (!this.isFirstPage) {\n            this.page -= 1;\n        }\n    }\n\n    /**\n     * Returns the total number of records.\n     * Only functions when paging is enabled.\n     * ```typescript\n     * const totalRecords = this.grid.totalRecords;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get totalRecords(): number {\n        if (this.pagingState) {\n            return this.pagingState.metadata.countRecords;\n        }\n    }\n\n    /**\n     * Returns if the current page is the last page.\n     * ```typescript\n     * const lastPage = this.grid.isLastPage;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get isLastPage(): boolean {\n        return this.page + 1 >= this.totalPages;\n    }\n\n    /**\n     * Returns the total width of the `IgxGridComponent`.\n     * ```typescript\n     * const gridWidth = this.grid.totalWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get totalWidth(): number {\n        if (!isNaN(this._totalWidth)) { return this._totalWidth; }\n        // Take only top level columns\n        const cols = this.visibleColumns.filter(col => col.level === 0 && !col.pinned);\n        let totalWidth = 0;\n        let i = 0;\n        for (i; i < cols.length; i++) {\n            totalWidth += parseInt(cols[i].calcWidth, 10) || 0;\n        }\n        this._totalWidth = totalWidth;\n        return totalWidth;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    get showRowSelectors(): boolean {\n        return this.isRowSelectable  && this.hasVisibleColumns && !this.hideRowSelectors;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    get showDragIcons(): boolean {\n        return this.rowDraggable && this.columns.length > this.hiddenColumnsCount;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _moveColumns(from: IgxColumnComponent, to: IgxColumnComponent, pos: DropPosition) {\n        const list = this.columnList.toArray();\n        const fromIndex = list.indexOf(from);\n        let toIndex = list.indexOf(to);\n\n        if (pos === DropPosition.BeforeDropTarget) {\n            toIndex--;\n            if (toIndex < 0) {\n                toIndex = 0;\n            }\n        }\n\n        if (pos === DropPosition.AfterDropTarget) {\n            toIndex++;\n        }\n\n        list.splice(toIndex, 0, ...list.splice(fromIndex, 1));\n        const newList = this._resetColumnList(list);\n        this.columnList.reset(newList);\n        this.columnList.notifyOnChanges();\n        this._columns = this.columnList.toArray();\n    }\n\n    /**\n     * @hidden\n     */\n    protected _resetColumnList(list?) {\n        if (!list) {\n            list = this.columnList.toArray();\n        }\n        let newList = [];\n        list.filter(c => c.level === 0).forEach(p => {\n            newList.push(p);\n            if (p.columnGroup) {\n                newList = newList.concat(p.allChildren);\n            }\n        });\n        return newList;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _reorderPinnedColumns(from: IgxColumnComponent, to: IgxColumnComponent, position: DropPosition) {\n        const pinned = this._pinnedColumns;\n        let dropIndex = pinned.indexOf(to);\n\n        if (to.columnGroup) {\n            dropIndex += to.allChildren.length;\n        }\n\n        if (position === DropPosition.BeforeDropTarget) {\n            dropIndex--;\n        }\n\n        if (position === DropPosition.AfterDropTarget) {\n            dropIndex++;\n        }\n\n        pinned.splice(dropIndex, 0, ...pinned.splice(pinned.indexOf(from), 1));\n    }\n\n    /**\n     * @hidden\n     */\n    protected _moveChildColumns(parent: IgxColumnComponent, from: IgxColumnComponent, to: IgxColumnComponent, pos: DropPosition) {\n        const buffer = parent.children.toArray();\n        const fromIndex = buffer.indexOf(from);\n        let toIndex = buffer.indexOf(to);\n\n        if (pos === DropPosition.BeforeDropTarget) {\n            toIndex--;\n        }\n\n        if (pos === DropPosition.AfterDropTarget) {\n            toIndex++;\n        }\n\n        buffer.splice(toIndex, 0, ...buffer.splice(fromIndex, 1));\n        parent.children.reset(buffer);\n    }\n    /**\n     * Moves a column to the specified drop target.\n     * ```typescript\n     * grid.moveColumn(compName, persDetails);\n     * ```\n\t  * @memberof IgxGridBaseComponent\n\t  */\n    public moveColumn(column: IgxColumnComponent, dropTarget: IgxColumnComponent, pos: DropPosition = DropPosition.None) {\n\n        let position = pos;\n        const fromIndex = column.visibleIndex;\n        const toIndex = dropTarget.visibleIndex;\n\n        if (pos === DropPosition.BeforeDropTarget && fromIndex < toIndex) {\n            position = DropPosition.BeforeDropTarget;\n        } else if (pos === DropPosition.AfterDropTarget && fromIndex > toIndex) {\n            position = DropPosition.AfterDropTarget;\n        } else {\n            position = DropPosition.None;\n        }\n\n\n        if ((column.level !== dropTarget.level) ||\n            (column.topLevelParent !== dropTarget.topLevelParent)) {\n            return;\n        }\n\n        this.endEdit(true);\n        if (column.level) {\n            this._moveChildColumns(column.parent, column, dropTarget, position);\n        }\n\n        if (dropTarget.pinned && column.pinned) {\n            this._reorderPinnedColumns(column, dropTarget, position);\n        }\n\n        if (dropTarget.pinned && !column.pinned) {\n            column.pin();\n            this._reorderPinnedColumns(column, dropTarget, position);\n        }\n\n        if (!dropTarget.pinned && column.pinned) {\n            column.unpin();\n\n            const list = this.columnList.toArray();\n            const fi = list.indexOf(column);\n            const ti = list.indexOf(dropTarget);\n\n            if (pos === DropPosition.BeforeDropTarget && fi < ti) {\n                position = DropPosition.BeforeDropTarget;\n            } else if (pos === DropPosition.AfterDropTarget && fi > ti) {\n                position = DropPosition.AfterDropTarget;\n            } else {\n                position = DropPosition.None;\n            }\n        }\n\n        this._moveColumns(column, dropTarget, position);\n        this.notifyChanges();\n        if (this.hasColumnLayouts) {\n            this.columns.filter(x => x.columnLayout).forEach(x => x.populateVisibleIndexes());\n        }\n\n        const args = {\n            source: column,\n            target: dropTarget\n        };\n\n        this.onColumnMovingEnd.emit(args);\n    }\n\n    /**\n     * Goes to the desired page index.\n     * ```typescript\n     * this.grid1.paginate(1);\n     * ```\n     * @param val\n     * @memberof IgxGridBaseComponent\n     */\n    public paginate(val: number): void {\n        if (val < 0 || val > this.totalPages - 1) {\n            return;\n        }\n\n        this.page = val;\n    }\n\n    /**\n     * Manually marks the `IgxGridComponent` for change detection.\n     * ```typescript\n     * this.grid1.markForCheck();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public markForCheck() {\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Creates a new `IgxGridRowComponent` and adds the data record to the end of the data source.\n     * ```typescript\n     * const record = {\n     *     ID: this.grid1.data[this.grid1.data.length - 1].ID + 1,\n     *     Name: this.newRecord\n     * };\n     * this.grid1.addRow(record);\n     * ```\n     * @param data\n     * @memberof IgxGridBaseComponent\n     */\n    public addRow(data: any): void {\n        // commit pending states prior to adding a row\n        this.endEdit(true);\n        this.gridAPI.addRowToData(data);\n\n        this.onRowAdded.emit({ data });\n        this._pipeTrigger++;\n        this.notifyChanges();\n    }\n\n    /**\n     * Removes the `IgxGridRowComponent` and the corresponding data record by primary key.\n     * Requires that the `primaryKey` property is set.\n     * The method accept rowSelector as a parameter, which is the rowID.\n     * ```typescript\n     * this.grid1.deleteRow(0);\n     * ```\n     * @param rowSelector\n     * @memberof IgxGridBaseComponent\n     */\n    public deleteRow(rowSelector: any): void {\n        if (this.primaryKey !== undefined && this.primaryKey !== null) {\n            this.deleteRowById(rowSelector);\n        }\n    }\n\n    /** @hidden */\n    public deleteRowById(rowId: any) {\n        this.gridAPI.deleteRowById(rowId);\n    }\n\n    /**\n     * @hidden\n     */\n    protected deleteRowFromData(rowID: any, index: number) {\n        //  if there is a row (index !== 0) delete it\n        //  if there is a row in ADD or UPDATE state change it's state to DELETE\n        if (index !== -1) {\n            if (this.transactions.enabled) {\n                const transaction: Transaction = { id: rowID, type: TransactionType.DELETE, newValue: null };\n                this.transactions.add(transaction, this.data[index]);\n            } else {\n                this.data.splice(index, 1);\n            }\n        } else {\n            const state: State = this.transactions.getState(rowID);\n            this.transactions.add({ id: rowID, type: TransactionType.DELETE, newValue: null }, state && state.recordRef);\n        }\n    }\n\n    /**\n     * Updates the `IgxGridRowComponent` and the corresponding data record by primary key.\n     * Requires that the `primaryKey` property is set.\n     * ```typescript\n     * this.gridWithPK.updateCell('Updated', 1, 'ProductName');\n     * ```\n     * @param value the new value which is to be set.\n     * @param rowSelector corresponds to rowID.\n     * @param column corresponds to column field.\n     * @memberof IgxGridBaseComponent\n     */\n    public updateCell(value: any, rowSelector: any, column: string): void {\n        if (this.isDefined(this.primaryKey)) {\n            const col = this.columnList.toArray().find(c => c.field === column);\n            if (col) {\n                // Simplify\n                const rowData = this.gridAPI.getRowData(rowSelector);\n                const index = this.gridAPI.get_row_index_in_data(rowSelector);\n                // If row passed is invalid\n                if (index < 0) {\n                    return;\n                }\n                const id = {\n                    rowID: rowSelector,\n                    columnID: col.index,\n                    rowIndex: index\n                };\n\n                const cell = new IgxCell(id, index, col, rowData[col.field], rowData[col.field], rowData);\n                const args = this.gridAPI.update_cell(cell, value);\n\n                if (this.crudService.cell && this.crudService.sameCell(cell)) {\n                    if (args.cancel) {\n                        return;\n                    }\n                    this.gridAPI.escape_editMode();\n                }\n                this.cdr.detectChanges();\n            }\n        }\n    }\n\n    /**\n     * Updates the `IgxGridRowComponent`, which is specified by\n     * rowSelector parameter and the data source record with the passed value.\n     * This method will apply requested update only if primary key is specified in the grid.\n     * ```typescript\n     * grid.updateRow({\n     *       ProductID: 1, ProductName: 'Spearmint', InStock: true, UnitsInStock: 1, OrderDate: new Date('2005-03-21')\n     *   }, 1);\n     * ```\n     * @param value\n     * @param rowSelector correspond to rowID\n     * @memberof IgxGridBaseComponent\n     */\n    public updateRow(value: any, rowSelector: any): void {\n        if (this.isDefined(this.primaryKey)) {\n            const editableCell = this.crudService.cell;\n            if (editableCell && editableCell.id.rowID === rowSelector) {\n                this.gridAPI.escape_editMode();\n            }\n            const row = new IgxRow(rowSelector, -1, this.gridAPI.getRowData(rowSelector));\n            this.gridAPI.update_row(row, value);\n\n            // TODO: fix for #5934 and probably break for #5763\n            // consider adding of third optional boolean parameter in updateRow.\n            // If developer set this parameter to true we should call notifyChanges(true), and\n            // vise-versa if developer set it to false we should call notifyChanges(false).\n            // The parameter should default to false\n            this.notifyChanges();\n        }\n    }\n\n    /**\n     * Sort a single `IgxColumnComponent`.\n     * Sort the `IgxGridComponent`'s `IgxColumnComponent` based on the provided array of sorting expressions.\n     * ```typescript\n     * this.grid.sort({ fieldName: name, dir: SortingDirection.Asc, ignoreCase: false });\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public sort(expression: ISortingExpression | Array<ISortingExpression>): void {\n        this.endEdit(false);\n        if (expression instanceof Array) {\n            this.gridAPI.sort_multiple(expression);\n        } else {\n            this.gridAPI.sort(expression);\n        }\n        this.onSortingDone.emit(expression);\n    }\n\n    /**\n     * Filters a single `IgxColumnComponent`.\n     * ```typescript\n     * public filter(term) {\n     *      this.grid.filter(\"ProductName\", term, IgxStringFilteringOperand.instance().condition(\"contains\"));\n     * }\n     * ```\n     * @param name\n     * @param value\n     * @param conditionOrExpressionTree\n     * @param ignoreCase\n     * @memberof IgxGridBaseComponent\n     */\n    public filter(name: string, value: any, conditionOrExpressionTree?: IFilteringOperation | IFilteringExpressionsTree,\n        ignoreCase?: boolean) {\n        this.filteringService.filter(name, value, conditionOrExpressionTree, ignoreCase);\n    }\n\n    /**\n     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.\n     * ```typescript\n     * grid.filterGlobal('some', IgxStringFilteringOperand.instance().condition('contains'));\n     * ```\n     * @param value\n     * @param condition\n     * @param ignoreCase\n     * @memberof IgxGridBaseComponent\n     */\n    public filterGlobal(value: any, condition, ignoreCase?) {\n        this.filteringService.filterGlobal(value, condition, ignoreCase);\n    }\n\n    /**\n     * Enables summaries for the specified column and applies your customSummary.\n     * If you do not provide the customSummary, then the default summary for the column data type will be applied.\n     * ```typescript\n     * grid.enableSummaries([{ fieldName: 'ProductName' }, { fieldName: 'ID' }]);\n     * ```\n     * Enable summaries for the listed columns.\n     * ```typescript\n     * grid.enableSummaries('ProductName');\n     * ```\n     * @param rest\n     * @memberof IgxGridBaseComponent\n     */\n    public enableSummaries(...rest) {\n        if (rest.length === 1 && Array.isArray(rest[0])) {\n            this._multipleSummaries(rest[0], true);\n        } else {\n            this._summaries(rest[0], true, rest[1]);\n        }\n    }\n\n    /**\n     * Disable summaries for the specified column.\n     * ```typescript\n     * grid.disableSummaries('ProductName');\n     * ```\n     *\n     * Disable summaries for the listed columns.\n     * ```typescript\n     * grid.disableSummaries([{ fieldName: 'ProductName' }]);\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public disableSummaries(...rest) {\n        if (rest.length === 1 && Array.isArray(rest[0])) {\n            this._disableMultipleSummaries(rest[0]);\n        } else {\n            this._summaries(rest[0], false);\n        }\n    }\n\n    /**\n     * If name is provided, clears the filtering state of the corresponding `IgxColumnComponent`,\n     * otherwise clears the filtering state of all `IgxColumnComponent`s.\n     * ```typescript\n     * this.grid.clearFilter();\n     * ```\n     * @param name\n     * @memberof IgxGridBaseComponent\n     */\n    public clearFilter(name?: string) {\n        this.filteringService.clearFilter(name);\n    }\n\n    /**\n     * If name is provided, clears the sorting state of the corresponding `IgxColumnComponent`,\n     * otherwise clears the sorting state of all `IgxColumnComponent`.\n     * ```typescript\n     * this.grid.clearSort();\n     * ```\n     * @param name\n     * @memberof IgxGridBaseComponent\n     */\n    public clearSort(name?: string) {\n        if (!name) {\n            this.sortingExpressions = [];\n            return;\n        }\n        if (!this.gridAPI.get_column_by_name(name)) {\n            return;\n        }\n        this.gridAPI.clear_sort(name);\n    }\n\n    /**\n     * @hidden\n     */\n    public refreshGridState(args?) {\n        this.endEdit(true);\n        this.selectionService.clearHeaderCBState();\n        this.summaryService.clearSummaryCache(args);\n    }\n\n    // TODO: We have return values here. Move them to event args ??\n\n    /**\n     * Pins a column by field name. Returns whether the operation is successful.\n     * ```typescript\n     * this.grid.pinColumn(\"ID\");\n     * ```\n     * @param columnName\n     * @param index\n     * @memberof IgxGridBaseComponent\n     */\n    public pinColumn(columnName: string | IgxColumnComponent, index?): boolean {\n        const col = columnName instanceof IgxColumnComponent ? columnName : this.getColumnByName(columnName);\n        return col.pin(index);\n    }\n\n    /**\n     * Unpins a column by field name. Returns whether the operation is successful.\n     * ```typescript\n     * this.grid.pinColumn(\"ID\");\n     * ```\n     * @param columnName\n     * @param index\n     * @memberof IgxGridBaseComponent\n     */\n    public unpinColumn(columnName: string | IgxColumnComponent, index?): boolean {\n        const col = columnName instanceof IgxColumnComponent ? columnName : this.getColumnByName(columnName);\n        return col.unpin(index);\n    }\n\n\n    /**\n     * Recalculates grid width/height dimensions. Should be run when changing DOM elements dimentions manually that affect the grid's size.\n     * ```typescript\n     * this.grid.reflow();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public reflow() {\n        this.calculateGridSizes();\n    }\n\n    /**\n     * Finds the next occurrence of a given string in the grid and scrolls to the cell if it isn't visible.\n     * Returns how many times the grid contains the string.\n     * ```typescript\n     * this.grid.findNext(\"financial\");\n     * ```\n     * @param text the string to search.\n     * @param caseSensitive optionally, if the search should be case sensitive (defaults to false).\n     * @param exactMatch optionally, if the text should match the entire value  (defaults to false).\n     * @memberof IgxGridBaseComponent\n     */\n    public findNext(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return this.find(text, 1, caseSensitive, exactMatch);\n    }\n\n    /**\n     * Finds the previous occurrence of a given string in the grid and scrolls to the cell if it isn't visible.\n     * Returns how many times the grid contains the string.\n     * ```typescript\n     * this.grid.findPrev(\"financial\");\n     * ```\n     * @param text the string to search.\n     * @param caseSensitive optionally, if the search should be case sensitive (defaults to false).\n     * @param exactMatch optionally, if the text should match the entire value (defaults to false).\n     * @memberof IgxGridBaseComponent\n     */\n    public findPrev(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return this.find(text, -1, caseSensitive, exactMatch);\n    }\n\n    /**\n     * Reapplies the existing search.\n     * Returns how many times the grid contains the last search.\n     * ```typescript\n     * this.grid.refreshSearch();\n     * ```\n     * @param updateActiveInfo\n     * @memberof IgxGridBaseComponent\n     */\n    public refreshSearch(updateActiveInfo?: boolean): number {\n        if (this.lastSearchInfo.searchText) {\n            this.rebuildMatchCache();\n\n            if (updateActiveInfo) {\n                const activeInfo = IgxTextHighlightDirective.highlightGroupsMap.get(this.id);\n                this.lastSearchInfo.matchInfoCache.forEach((match, i) => {\n                    if (match.column === activeInfo.column &&\n                        match.row === activeInfo.row &&\n                        match.index === activeInfo.index) {\n                        this.lastSearchInfo.activeMatchIndex = i;\n                    }\n                });\n            }\n\n            return this.find(this.lastSearchInfo.searchText, 0, this.lastSearchInfo.caseSensitive, this.lastSearchInfo.exactMatch, false);\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Removes all the highlights in the cell.\n     * ```typescript\n     * this.grid.clearSearch();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public clearSearch() {\n        this.lastSearchInfo = {\n            searchText: '',\n            caseSensitive: false,\n            exactMatch: false,\n            activeMatchIndex: 0,\n            matchInfoCache: []\n        };\n\n        this.rowList.forEach((row) => {\n            if (row.cells) {\n                row.cells.forEach((c) => {\n                    c.clearHighlight();\n                });\n            }\n        });\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has sortable columns.\n     * ```typescript\n     * const sortableGrid = this.grid.hasSortableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasSortableColumns(): boolean {\n        return this.columnList.some((col) => col.sortable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has editable columns.\n     * ```typescript\n     * const editableGrid = this.grid.hasEditableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasEditableColumns(): boolean {\n        return this.columnList.some((col) => col.editable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has fiterable columns.\n     * ```typescript\n     * const filterableGrid = this.grid.hasFilterableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasFilterableColumns(): boolean {\n        return this.columnList.some((col) => col.filterable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has summarized columns.\n     * ```typescript\n     * const summarizedGrid = this.grid.hasSummarizedColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasSummarizedColumns(): boolean {\n        return this.summaryService.hasSummarizedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    get rootSummariesEnabled(): boolean {\n        return this.summaryCalculationMode !== GridSummaryCalculationMode.childLevelsOnly;\n    }\n\n    /**\n     * @hidden\n     */\n    get hasVisibleColumns(): boolean {\n        if (this._hasVisibleColumns === undefined) {\n            return this.columnList ? this.columnList.some(c => !c.hidden) : false;\n        }\n        return this._hasVisibleColumns;\n    }\n\n    set hasVisibleColumns(value) {\n        this._hasVisibleColumns = value;\n    }\n    /**\n     * Returns if the `IgxGridComponent` has moveable columns.\n     * ```typescript\n     * const movableGrid = this.grid.hasMovableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasMovableColumns(): boolean {\n        return this.columnList && this.columnList.some((col) => col.movable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has column groups.\n     * ```typescript\n     * const groupGrid = this.grid.hasColumnGroups;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasColumnGroups(): boolean {\n        return this._columnGroups;\n    }\n    /**\n     * Returns if the `IgxGridComponent` has column layouts for multi-row layout definition.\n     * ```typescript\n     * const layoutGrid = this.grid.hasColumnLayouts;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public get hasColumnLayouts() {\n        return !!this.columnList.some(col => col.columnLayout);\n    }\n\n    /**\n     * Returns an array of the selected `IgxGridCellComponent`s.\n     * ```typescript\n     * const selectedCells = this.grid.selectedCells;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get selectedCells(): IgxGridCellComponent[] | any[] {\n        if (this.dataRowList) {\n            return this.dataRowList.map((row) => row.cells.filter((cell) => cell.selected))\n                .reduce((a, b) => a.concat(b), []);\n        }\n        return [];\n    }\n\n    /**\n     * @hidden\n     */\n    get multiRowLayoutRowSize() {\n        return this._multiRowLayoutRowSize;\n    }\n\n    /**\n     * @hidden\n     */\n    protected get rowBasedHeight() {\n        return this.dataLength * this.rowHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected get isPercentWidth() {\n        return this.width && this.width.indexOf('%') !== -1;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get isPercentHeight() {\n        return this._height && this._height.indexOf('%') !== -1;\n    }\n\n    /**\n     * @hidden\n     * Sets columns defaultWidth property\n     */\n    protected _derivePossibleWidth() {\n        if (!this.columnWidthSetByUser) {\n            this._columnWidth = this.width !== null ? this.getPossibleColumnWidth() : MINIMUM_COLUMN_WIDTH + 'px';\n        }\n        this.columnList.forEach((column: IgxColumnComponent) => {\n            if (this.hasColumnLayouts && parseInt(this._columnWidth, 10)) {\n                const columnWidthCombined = parseInt(this._columnWidth, 10) * (column.colEnd ? column.colEnd - column.colStart : 1);\n                column.defaultWidth = columnWidthCombined + 'px';\n            } else {\n                column.defaultWidth = this._columnWidth;\n                column.resetCaches();\n            }\n        });\n        this.resetCachedWidths();\n    }\n\n    /**\n     * @hidden\n     */\n    protected get defaultTargetBodyHeight(): number {\n        const allItems = this.dataLength;\n        return this.renderedRowHeight * Math.min(this._defaultTargetRecordNumber,\n            this.paging ? Math.min(allItems, this.perPage) : allItems);\n    }\n\n    /**\n     * @hidden @internal\n     * The rowHeight input is bound to min-height css prop of rows that adds a 1px border in all cases\n     */\n    public get renderedRowHeight(): number {\n        return this.rowHeight + 1;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected calcGridHeadRow() {\n        if (this.maxLevelHeaderDepth) {\n            this._baseFontSize = parseFloat(getComputedStyle(this.document.documentElement).getPropertyValue('font-size'));\n            let minSize = (this.maxLevelHeaderDepth + 1) * this.defaultRowHeight / this._baseFontSize;\n            if (this._allowFiltering && this._filterMode === FilterMode.quickFilter) {\n                minSize += (FILTER_ROW_HEIGHT + 1) / this._baseFontSize;\n            }\n            this.theadRow.nativeElement.style.minHeight = `${minSize}rem`;\n        }\n    }\n\n    /**\n     * @hidden\n     * Sets TBODY height i.e. this.calcHeight\n     */\n    protected calculateGridHeight() {\n        this.calcGridHeadRow();\n        this.summariesHeight = 0;\n        if (this.hasSummarizedColumns && this.rootSummariesEnabled) {\n            this.summariesHeight = this.summaryService.calcMaxSummaryHeight();\n        }\n\n        this.calcHeight = this._calculateGridBodyHeight();\n    }\n\n    /**\n     * @hidden\n     */\n    protected getGroupAreaHeight(): number {\n        return 0;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getToolbarHeight(): number {\n        let toolbarHeight = 0;\n        if (this.showToolbar && this.toolbarHtml != null) {\n            toolbarHeight = this.toolbarHtml.nativeElement.firstElementChild ?\n                this.toolbarHtml.nativeElement.offsetHeight : 0;\n        }\n        return toolbarHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getPagingHeight(): number {\n        let pagingHeight = 0;\n        if (this.paging && this.footer) {\n            pagingHeight = this.footer.nativeElement.firstElementChild ?\n                this.footer.nativeElement.offsetHeight : 0;\n        }\n        return pagingHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getFilterCellHeight(): number {\n        const headerGroupNativeEl = (this.headerGroupsList.length !== 0) ?\n                                        this.headerGroupsList[0].element.nativeElement : null;\n        const filterCellNativeEl = (headerGroupNativeEl) ?\n                                    headerGroupNativeEl.querySelector('igx-grid-filtering-cell') : null;\n        return (filterCellNativeEl) ? filterCellNativeEl.offsetHeight : 0;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calculateGridBodyHeight(): number {\n        if (!this._height) {\n            return null;\n        }\n\n        const actualTheadRow = (!this.allowFiltering || (this.allowFiltering && this.filterMode !== FilterMode.quickFilter)) ?\n                                 this.theadRow.nativeElement.offsetHeight - this.getFilterCellHeight() :\n                                 this.theadRow.nativeElement.offsetHeight;\n        const footerHeight = this.summariesHeight || this.tfoot.nativeElement.offsetHeight - this.tfoot.nativeElement.clientHeight;\n        const toolbarHeight = this.getToolbarHeight();\n        const pagingHeight = this.getPagingHeight();\n        const groupAreaHeight = this.getGroupAreaHeight();\n        const renderedHeight = toolbarHeight + actualTheadRow +\n            footerHeight + pagingHeight + groupAreaHeight +\n            this.scr.nativeElement.clientHeight;\n\n        const computed = this.document.defaultView.getComputedStyle(this.nativeElement).getPropertyValue('height');\n        let gridHeight = 0;\n\n        if (this.isPercentHeight) {\n            const autoSize = this._shouldAutoSize(renderedHeight);\n            if (autoSize || computed.indexOf('%') !== -1) {\n                const bodyHeight = this.getDataBasedBodyHeight();\n                return bodyHeight > 0 ? bodyHeight : null;\n            }\n            gridHeight = parseInt(computed, 10);\n        } else {\n            gridHeight = parseInt(this._height, 10);\n        }\n        const height = Math.abs(gridHeight - renderedHeight);\n\n        if (height === 0 || isNaN(gridHeight)) {\n            const bodyHeight = this.defaultTargetBodyHeight;\n            return bodyHeight > 0 ? bodyHeight : null;\n        }\n        return height;\n    }\n\n    protected checkContainerSizeChange() {\n        const origHeight = this.nativeElement.parentElement.offsetHeight;\n        this.nativeElement.style.display = 'none';\n        const height = this.nativeElement.parentElement.offsetHeight;\n        this.nativeElement.style.display = '';\n        return origHeight !== height;\n    }\n\n    protected _shouldAutoSize(renderedHeight) {\n        this.tbody.nativeElement.style.display = 'none';\n        let res = !this.nativeElement.parentElement ||\n        this.nativeElement.parentElement.clientHeight === 0 ||\n        this.nativeElement.parentElement.clientHeight === renderedHeight;\n        if (!isChromium()) {\n            // If grid causes the parent container to extend (for example when container is flex)\n            // we should always auto-size since the actual size of the container will continuously change as the grid renders elements.\n           res = this.checkContainerSizeChange();\n        }\n        this.tbody.nativeElement.style.display = '';\n        return res;\n    }\n\n    public get outerWidth() {\n        return this.hasVerticalSroll() ? this.calcWidth + this.scrollWidth : this.calcWidth;\n    }\n\n    /**\n     * @hidden\n     * Gets the visible content height that includes header + tbody + footer.\n     */\n    public getVisibleContentHeight() {\n        let height = this.theadRow.nativeElement.clientHeight + this.tbody.nativeElement.clientHeight;\n        if (this.hasSummarizedColumns) {\n            height += this.tfoot.nativeElement.clientHeight;\n        }\n        return height;\n    }\n\n    /**\n     * @hidden\n     */\n    public getPossibleColumnWidth(baseWidth: number = null) {\n        let computedWidth;\n        if (baseWidth !== null) {\n            computedWidth = baseWidth;\n        } else {\n            computedWidth = this.calcWidth ||\n                parseInt(this.document.defaultView.getComputedStyle(this.nativeElement).getPropertyValue('width'), 10);\n        }\n\n        computedWidth -= this.getFeatureColumnsWidth();\n\n        if (this.showDragIcons) {\n            computedWidth -= this.headerDragContainer ? this.headerDragContainer.nativeElement.offsetWidth : 0;\n        }\n\n        const visibleChildColumns = this.visibleColumns.filter(c => !c.columnGroup);\n\n\n        // Column layouts related\n        let visibleCols = [];\n        const columnBlocks = this.visibleColumns.filter(c => c.columnGroup);\n        const colsPerBlock = columnBlocks.map(block => block.getInitialChildColumnSizes(block.children));\n        const combinedBlocksSize = colsPerBlock.reduce((acc, item) => acc + item.length, 0);\n        colsPerBlock.forEach(blockCols => visibleCols = visibleCols.concat(blockCols));\n        //\n\n        const columnsWithSetWidths = this.hasColumnLayouts ?\n            visibleCols.filter(c => c.widthSetByUser) :\n            visibleChildColumns.filter(c => c.widthSetByUser);\n\n        const columnsToSize = this.hasColumnLayouts ?\n            combinedBlocksSize - columnsWithSetWidths.length :\n            visibleChildColumns.length - columnsWithSetWidths.length;\n\n        const sumExistingWidths = columnsWithSetWidths\n            .reduce((prev, curr) => {\n                const colWidth = curr.width;\n                const widthValue = parseInt(colWidth, 10);\n                const currWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1 ?\n                    widthValue / 100 * computedWidth :\n                    widthValue;\n                return prev + currWidth;\n            }, 0);\n\n        const columnWidth = Math.floor(!Number.isFinite(sumExistingWidths) ?\n            Math.max(computedWidth / columnsToSize, MINIMUM_COLUMN_WIDTH) :\n            Math.max((computedWidth - sumExistingWidths) / columnsToSize, MINIMUM_COLUMN_WIDTH));\n\n        return columnWidth.toString();\n    }\n\n    /**\n     * @hidden\n     * Sets grid width i.e. this.calcWidth\n     */\n    protected calculateGridWidth() {\n        let width;\n        const computed = this.document.defaultView.getComputedStyle(this.nativeElement).getPropertyValue('width');\n\n        if (this.isPercentWidth) {\n            /* width in %*/\n            width = computed.indexOf('%') === -1 ? parseInt(computed, 10) : null;\n        } else {\n            width = parseInt(this.width, 10);\n        }\n\n        if (!width && this.nativeElement) {\n            width = this.nativeElement.offsetWidth;\n        }\n\n\n        if (this.width === null || !width) {\n            width = this.getColumnWidthSum();\n        }\n\n        if (this.hasVerticalSroll() && this.width !== null) {\n            width -= this.scrollWidth;\n        }\n        if ((Number.isFinite(width) || width === null) && width !== this.calcWidth) {\n            this.calcWidth = width;\n        }\n        this._derivePossibleWidth();\n    }\n\n    private getColumnWidthSum(): number {\n        let colSum = 0;\n        const  cols = this.hasColumnLayouts ?\n         this.visibleColumns.filter(x => x.columnLayout) : this.visibleColumns.filter(x => !x.columnGroup);\n        cols.forEach((item) => {\n            const isWidthInPercent = item.width && typeof item.width === 'string' && item.width.indexOf('%') !== -1;\n            if (isWidthInPercent) {\n                item.width = item.calcWidth || MINIMUM_COLUMN_WIDTH + 'px';\n            }\n            colSum +=  parseInt((item.width || item.defaultWidth), 10) || MINIMUM_COLUMN_WIDTH;\n        });\n        if (!colSum) {\n            return null;\n        }\n        this.cdr.detectChanges();\n        colSum += this.getFeatureColumnsWidth();\n        return colSum;\n    }\n\n    public hasVerticalSroll() {\n        if (this._init) { return false; }\n        const isScrollable = this.verticalScrollContainer ? this.verticalScrollContainer.isScrollable() : false;\n        return !!(this.calcWidth && this.dataView &&\n            this.dataView.length > 0 &&\n            isScrollable);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    protected getDataBasedBodyHeight(): number {\n        return !this.data || (this.data.length < this._defaultTargetRecordNumber) ?\n            0 : this.defaultTargetBodyHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected onColumnsChanged(change: QueryList<IgxColumnComponent>) {\n        const diff = this.columnListDiffer.diff(change);\n        if (diff) {\n            let added = false;\n            let removed = false;\n\n            this.initColumns(this.columnList);\n\n\n            diff.forEachAddedItem((record: IterableChangeRecord<IgxColumnComponent>) => {\n                this.onColumnInit.emit(record.item);\n                added = true;\n            });\n\n            diff.forEachRemovedItem((record: IterableChangeRecord<IgxColumnComponent | IgxColumnGroupComponent>) => {\n                const isColumnGroup = record.item instanceof IgxColumnGroupComponent;\n                if (!isColumnGroup) {\n                    // Clear Grouping\n                    this.gridAPI.clear_groupby(record.item.field);\n\n                    // Clear Filtering\n                    this.gridAPI.clear_filter(record.item.field);\n\n                    // Close filter row\n                    if ( this.filteringService.isFilterRowVisible\n                        && this.filteringService.filteredColumn\n                        && this.filteringService.filteredColumn.field === record.item.field) {\n                        this.filteringRow.close();\n                    }\n\n                    // Clear Sorting\n                    this.gridAPI.clear_sort(record.item.field);\n                }\n                removed = true;\n            });\n\n            this.resetCaches();\n\n            if (added || removed) {\n                this.summaryService.clearSummaryCache();\n                Promise.resolve().then(() => {\n                    // `onColumnsChanged` can be executed midway a current detectChange cycle and markForCheck will be ignored then.\n                    // This ensures that we will wait for the current cycle to end so we can trigger a new one and ngDoCheck to fire.\n                    this.notifyChanges(true);\n                });\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected calculateGridSizes() {\n        /*\n            TODO: (R.K.) This layered lasagne should be refactored\n            ASAP. The reason I have to reset the caches so many times is because\n            after teach `detectChanges` call they are filled with invalid\n            state. Of course all of this happens midway through the grid\n            sizing process which of course, uses values from the caches, thus resulting\n            in a broken layout.\n        */\n        this.resetCaches();\n        this.cdr.detectChanges();\n        const hasScroll = this.hasVerticalSroll();\n        this.calculateGridWidth();\n        this.resetCaches();\n        this.cdr.detectChanges();\n        this.calculateGridHeight();\n\n        if (this.rowEditable) {\n            this.repositionRowEditingOverlay(this.rowInEditMode);\n        }\n\n        if (this.filteringService.isFilterRowVisible) {\n            this.filteringRow.resetChipsArea();\n        }\n\n        this.cdr.detectChanges();\n        // in case scrollbar has appeared recalc to size correctly.\n        if (hasScroll !== this.hasVerticalSroll()) {\n            this.calculateGridWidth();\n            this.cdr.detectChanges();\n        }\n        if (this.zone.isStable) {\n            this.zone.run(() => {\n                this._applyWidthHostBinding();\n                this.cdr.detectChanges();\n            });\n        } else {\n            this.zone.onStable.pipe(first()).subscribe(() => {\n                this.zone.run(() => {\n                    this._applyWidthHostBinding();\n                });\n            });\n        }\n        this.resetCaches();\n    }\n\n    private _applyWidthHostBinding() {\n        let width = this._width;\n        if (width === null) {\n            let currentWidth = this.calcWidth;\n            if (this.hasVerticalSroll()) {\n                currentWidth += this.scrollWidth;\n            }\n            width = currentWidth + 'px';\n            this.resetCaches();\n        }\n        this._hostWidth = width;\n        this.cdr.markForCheck();\n    }\n\n\n    /**\n     * @hidden\n     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.\n     * Method used to override the calculations.\n     * TODO: Remove for Angular 8. Calling parent class getter using super is not supported for now.\n     */\n    public getFeatureColumnsWidth() {\n        let width = 0;\n\n        if (this.isRowSelectable) {\n            width += this.headerSelectorContainer ? this.headerSelectorContainer.nativeElement.getBoundingClientRect().width : 0;\n        }\n        if (this.rowDraggable) {\n            width += this.headerDragContainer ? this.headerDragContainer.nativeElement.getBoundingClientRect().width : 0;\n        }\n        return width;\n    }\n\n    /**\n     * Gets calculated width of the pinned area.\n     * ```typescript\n     * const pinnedWidth = this.grid.getPinnedWidth();\n     * ```\n     * @param takeHidden If we should take into account the hidden columns in the pinned area.\n     * @memberof IgxGridBaseComponent\n     */\n    public getPinnedWidth(takeHidden = false) {\n        const fc = takeHidden ? this._pinnedColumns : this.pinnedColumns;\n        let sum = 0;\n        for (const col of fc) {\n            if (col.level === 0) {\n                sum += parseInt(col.calcWidth, 10);\n            }\n        }\n        sum += this.featureColumnsWidth;\n\n        return sum;\n    }\n\n    /**\n     * @hidden\n     * Gets calculated width of the unpinned area\n     * @param takeHidden If we should take into account the hidden columns in the pinned area.\n     * @memberof IgxGridBaseComponent\n     */\n    protected getUnpinnedWidth(takeHidden = false) {\n        let width = this.isPercentWidth ?\n            this.calcWidth :\n            parseInt(this.width, 10) ||  parseInt(this.hostWidth, 10) || this.calcWidth;\n        if (this.hasVerticalSroll() && !this.isPercentWidth) {\n            width -= this.scrollWidth;\n        }\n        return width - this.getPinnedWidth(takeHidden);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _summaries(fieldName: string, hasSummary: boolean, summaryOperand?: any) {\n        const column = this.gridAPI.get_column_by_name(fieldName);\n        if (column) {\n            column.hasSummary = hasSummary;\n            if (summaryOperand) {\n                if (this.rootSummariesEnabled) { this.summaryService.retriggerRootPipe++; }\n                column.summaries = summaryOperand;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected _multipleSummaries(expressions: ISummaryExpression[], hasSummary: boolean) {\n        expressions.forEach((element) => {\n            this._summaries(element.fieldName, hasSummary, element.customSummary);\n        });\n    }\n    /**\n     * @hidden\n     */\n    protected _disableMultipleSummaries(expressions) {\n        expressions.forEach((column) => {\n            const columnName = column && column.fieldName ? column.fieldName : column;\n            this._summaries(columnName, false);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveDataTypes(rec) {\n        if (typeof rec === 'number') {\n            return DataType.Number;\n        } else if (typeof rec === 'boolean') {\n            return DataType.Boolean;\n        } else if (typeof rec === 'object' && rec instanceof Date) {\n            return DataType.Date;\n        }\n        return DataType.String;\n    }\n\n    private getScrollWidth() {\n        const div = document.createElement('div');\n        const style = div.style;\n        style.width = '100px';\n        style.height = '100px';\n        style.position = 'absolute';\n        style.top = '-10000px';\n        style.top = '-10000px';\n        style.overflow = 'scroll';\n        document.body.appendChild(div);\n        const scrollWidth = div.offsetWidth - div.clientWidth;\n        document.body.removeChild(div);\n        return scrollWidth;\n    }\n\n    /**\n     * @hidden\n     */\n    protected autogenerateColumns() {\n        const data = this.gridAPI.get_data();\n        const factory = this.resolver.resolveComponentFactory(IgxColumnComponent);\n        const fields = this.generateDataFields(data);\n        const columns = [];\n\n        fields.forEach((field) => {\n            const ref = factory.create(this.viewRef.injector);\n            ref.instance.field = field;\n            ref.instance.dataType = this.resolveDataTypes(data[0][field]);\n            ref.changeDetectorRef.detectChanges();\n            columns.push(ref.instance);\n        });\n\n        this.columnList.reset(columns);\n        if (data && data.length > 0) {\n            this.shouldGenerate = false;\n        }\n    }\n\n    protected generateDataFields(data: any[]): string[] {\n        return Object.keys(data && data.length !== 0 ? data[0] : []);\n    }\n\n    /**\n     * @hidden\n     */\n    onlyTopLevel(arr) {\n        return arr.filter(c => c.level === 0);\n    }\n\n    /**\n     * @hidden\n     */\n    protected initColumns(collection: QueryList<IgxColumnComponent>, cb: Function = null) {\n        this._columnGroups = this.columnList.some(col => col.columnGroup);\n        if (this.hasColumnLayouts) {\n            // Set overall row layout size\n            this.columnList.forEach((col) => {\n                if (col.columnLayout) {\n                    const layoutSize = col.children ?\n                        col.children.reduce((acc, val) => Math.max(val.rowStart + val.gridRowSpan - 1, acc), 1) :\n                        1;\n                    this._multiRowLayoutRowSize = Math.max(layoutSize, this._multiRowLayoutRowSize);\n                }\n            });\n        }\n        if (this.hasColumnLayouts && this.hasColumnGroups) {\n            // invalid configuration - multi-row and column groups\n            // remove column groups\n            const columnLayoutColumns = this.columnList.filter((col) => col.columnLayout || col.columnLayoutChild);\n            this.columnList.reset(columnLayoutColumns);\n        }\n        this._maxLevelHeaderDepth = null;\n        this._columns = this.columnList.toArray();\n        collection.forEach((column: IgxColumnComponent) => {\n            column.defaultWidth = this.columnWidthSetByUser ? this._columnWidth : column.defaultWidth ? column.defaultWidth : '';\n\n            if (cb) {\n                cb(column);\n            }\n        });\n\n        this.reinitPinStates();\n\n        if (this.hasColumnLayouts) {\n            collection.forEach((column: IgxColumnComponent) => {\n                column.populateVisibleIndexes();\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected reinitPinStates() {\n        this._pinnedColumns = (this.hasColumnGroups) ? this.columnList.filter((c) => c.pinned) :\n            this.columnList.filter((c) => c.pinned).sort((a, b) => this._pinnedColumns.indexOf(a) - this._pinnedColumns.indexOf(b));\n        this._unpinnedColumns = this.columnList.filter((c) => !c.pinned);\n    }\n\n    /**\n     * @hidden\n     */\n    public isColumnGrouped(fieldName: string): boolean {\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    public onHeaderSelectorClick(event) {\n        if (!this.isMultiRowSelectionEnabled) { return; }\n        this.selectionService.areAllRowSelected() ?\n            this.selectionService.clearRowSelection(event) : this.selectionService.selectAllRows(event);\n    }\n\n    /**\n     * @hidden\n     */\n    get headSelectorBaseAriaLabel() {\n        if (this._filteringExpressionsTree.filteringOperands.length > 0) {\n            return this.selectionService.areAllRowSelected() ? 'Deselect all filtered' : 'Select all filtered';\n        }\n\n        return this.selectionService.areAllRowSelected() ? 'Deselect all' : 'Select all';\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get totalRowsCountAfterFilter() {\n        if (this.data) {\n            return this.selectionService.allData.length;\n        }\n\n        return 0;\n    }\n\n    /**\n     * Returns the currently transformed paged/filtered/sorted/grouped data, displayed in the grid.\n     * ```typescript\n     *      const dataView = this.grid.dataView;\n     * ```\n     * @memberof IgxGridComponent\n     */\n    get dataView(): any[] {\n        return this.verticalScrollContainer.igxForOf;\n    }\n\n    /**\n     * Get current selection state.\n     * Returns an array with selected rows' IDs (primaryKey or rowData)\n     * ```typescript\n     * const selectedRows = this.grid.selectedRows();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public selectedRows(): any[] {\n        return this.selectionService.getSelectedRows();\n    }\n\n    /**\n     * Select specified rows by ID.\n     * ```typescript\n     * this.grid.selectRows([1,2,5], true);\n     * ```\n     * @param rowIDs\n     * @param clearCurrentSelection if true clears the current selection\n     * @memberof IgxGridBaseComponent\n     */\n    public selectRows(rowIDs: any[], clearCurrentSelection?: boolean) {\n        this.selectionService.selectRowsWithNoEvent(rowIDs, clearCurrentSelection);\n        this.notifyChanges();\n    }\n\n    /**\n     * Deselect specified rows by ID.\n     * ```typescript\n     * this.grid.deselectRows([1,2,5]);\n     * ```\n     * @param rowIDs\n     * @memberof IgxGridBaseComponent\n     */\n    public deselectRows(rowIDs: any[]) {\n        this.selectionService.deselectRowsWithNoEvent(rowIDs);\n        this.notifyChanges();\n    }\n\n    /**\n     * Selects all rows\n     * Note: By default if filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.\n     * If you set the parameter onlyFilterData to false that will select all rows in the grid exept deleted rows.\n     * ```typescript\n     * this.grid.selectAllRows();\n     * this.grid.selectAllRows(false);\n     * ```\n     * @param onlyFilterData\n\t * @memberof IgxGridBaseComponent\n     */\n    public selectAllRows(onlyFilterData = true) {\n        const data = onlyFilterData && this.filteredData ? this.filteredData : this.gridAPI.get_all_data(true);\n        const rowIDs = this.selectionService.getRowIDs(data).filter(rID => !this.gridAPI.row_deleted_transaction(rID));\n        this.selectRows(rowIDs);\n    }\n\n    /**\n     * Deselects all rows\n     * Note: By default if filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.\n     * If you set the parameter onlyFilterData to false that will select all rows in the grid exept deleted rows.\n     * ```typescript\n     * this.grid.deselectAllRows();\n     * ```\n     * @param onlyFilterData\n\t * @memberof IgxGridBaseComponent\n     */\n    public deselectAllRows(onlyFilterData = true) {\n        if (onlyFilterData && this.filteredData && this.filteredData.length > 0) {\n            this.deselectRows(this.selectionService.getRowIDs(this.filteredData));\n        } else {\n            this.selectionService.clearAllSelectedRows();\n            this.notifyChanges();\n        }\n    }\n\n    clearCellSelection(): void {\n        this.selectionService.clear(true);\n        this.notifyChanges();\n    }\n\n    dragScroll(dir: DragScrollDirection): void {\n        const scrollDelta = 48;\n        const horizontal = this.headerContainer.getScroll();\n        const vertical = this.verticalScrollContainer.getScroll();\n        switch (dir) {\n            case DragScrollDirection.LEFT:\n                horizontal.scrollLeft -= scrollDelta;\n                break;\n            case DragScrollDirection.RIGHT:\n                horizontal.scrollLeft += scrollDelta;\n                break;\n            case DragScrollDirection.TOP:\n                vertical.scrollTop -= scrollDelta;\n                break;\n            case DragScrollDirection.BOTTOM:\n                vertical.scrollTop += scrollDelta;\n                break;\n            case DragScrollDirection.BOTTOMLEFT:\n                horizontal.scrollLeft -= scrollDelta;\n                vertical.scrollTop += scrollDelta;\n                break;\n            case DragScrollDirection.BOTTOMRIGHT:\n                horizontal.scrollLeft += scrollDelta;\n                vertical.scrollTop += scrollDelta;\n                break;\n            case DragScrollDirection.TOPLEFT:\n                horizontal.scrollLeft -= scrollDelta;\n                vertical.scrollTop -= scrollDelta;\n                break;\n            case DragScrollDirection.TOPRIGHT:\n                horizontal.scrollLeft += scrollDelta;\n                vertical.scrollTop -= scrollDelta;\n                break;\n            default:\n                return;\n        }\n        this.wheelHandler();\n    }\n\n    isDefined(arg: any): boolean {\n        return arg !== undefined && arg !== null;\n    }\n\n    selectRange(arg: GridSelectionRange | GridSelectionRange[] | null | undefined): void {\n        if (!this.isDefined(arg)) {\n            this.clearCellSelection();\n            return;\n        }\n        if (arg instanceof Array) {\n            arg.forEach(range => this.setSelection(range));\n        } else {\n            this.setSelection(arg);\n        }\n        this.notifyChanges();\n    }\n\n    columnToVisibleIndex(field: string | number): number {\n        const visibleColumns = this.visibleColumns;\n        if (typeof field === 'number') {\n            return field;\n        }\n        return visibleColumns.find(column => column.field === field).visibleIndex;\n    }\n\n\n    setSelection(range: GridSelectionRange): void {\n        const startNode = { row: range.rowStart, column: this.columnToVisibleIndex(range.columnStart) };\n        const endNode = { row: range.rowEnd, column: this.columnToVisibleIndex(range.columnEnd) };\n\n        this.selectionService.pointerState.node = startNode;\n        this.selectionService.selectRange(endNode, this.selectionService.pointerState);\n        this.selectionService.addRangeMeta(endNode, this.selectionService.pointerState);\n        this.selectionService.initPointerState();\n    }\n\n    getSelectedRanges(): GridSelectionRange[] {\n        return this.selectionService.ranges;\n    }\n\n\n    protected extractDataFromSelection(source: any[], formatters = false, headers = false): any[] {\n        let columnsArray: IgxColumnComponent[];\n        let record = {};\n        const selectedData = [];\n        const activeEl = this.selectionService.activeElement;\n\n        const selectionMap = Array.from(this.selectionService.selection)\n            .filter((tuple) => tuple[0] < source.length);\n\n        if (this.cellSelection === GridSelectionMode.single && activeEl) {\n            selectionMap.push([activeEl.row, new Set<number>().add(activeEl.column)]);\n        }\n\n        for (const [row, set] of selectionMap) {\n            if (!source[row]) {\n                continue;\n            }\n            const temp = Array.from(set);\n            for (const each of temp) {\n                columnsArray = this.getSelectableColumnsAt(each);\n                columnsArray.forEach((col) => {\n                    if (col) {\n                        const key = headers ? col.header || col.field : col.field;\n                        record[key] = formatters && col.formatter ? col.formatter(source[row][col.field])\n                            : source[row][col.field];\n                    }\n                });\n            }\n            if (Object.keys(record).length) {\n                selectedData.push(record);\n            }\n            record = {};\n        }\n        return selectedData;\n    }\n\n    protected getSelectableColumnsAt(index) {\n        if (this.hasColumnLayouts) {\n            const visibleLayoutColumns = this.visibleColumns\n                .filter(col => col.columnLayout)\n                .sort((a, b) => a.visibleIndex - b.visibleIndex);\n            const colLayout = visibleLayoutColumns[index];\n            return colLayout ? colLayout.children.toArray() : [];\n        } else {\n            const visibleColumns = this.visibleColumns\n                .filter(col => !col.columnGroup)\n                .sort((a, b) => a.visibleIndex - b.visibleIndex);\n            return [visibleColumns[index]];\n        }\n    }\n\n    /**\n     *\n     * Returns an array of the current cell selection in the form of `[{ column.field: cell.value }, ...]`.\n     * If `formatters` is enabled, the cell value will be formatted by its respective column formatter (if any).\n     * If `headers` is enabled, it will use the column header (if any) instead of the column field.\n     */\n    getSelectedData(formatters = false, headers = false) {\n        const source = this.dataView;\n        return this.extractDataFromSelection(source, formatters, headers);\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollHandler = (event) => {\n        this.headerContainer.scrollPosition += event.target.scrollLeft;\n        this.verticalScrollContainer.scrollPosition += event.target.scrollTop;\n        event.target.scrollLeft = 0;\n        event.target.scrollTop = 0;\n    }\n\n    copyHandlerIE() {\n        if (isIE()) {\n            this.copyHandler(null, true);\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public copyHandler(event, ie11 = false) {\n        if (!this.clipboardOptions.enabled || this.crudService.inEditMode) {\n            return;\n        }\n\n        const data = this.getSelectedData(this.clipboardOptions.copyFormatters, this.clipboardOptions.copyHeaders);\n        const ev = { data, cancel: false } as IGridClipboardEvent;\n        this.onGridCopy.emit(ev);\n\n        if (ev.cancel) {\n            return;\n        }\n\n        const transformer = new CharSeparatedValueData(ev.data, this.clipboardOptions.separator);\n        let result = transformer.prepareData();\n\n        if (!this.clipboardOptions.copyHeaders) {\n            result = result.substring(result.indexOf('\\n') + 1);\n        }\n\n        if (ie11) {\n            (window as any).clipboardData.setData('Text', result);\n            return;\n        }\n\n        event.preventDefault();\n\n        /* Necessary for the hiearachical case but will probably have to\n           change how getSelectedData is propagated in the hiearachical grid\n        */\n        event.stopPropagation();\n        event.clipboardData.setData('text/plain', result);\n    }\n\n    /**\n     * This method allows you to navigate to a position\n     * in the grid based on provided `rowindex` and `visibleColumnIndex`,\n     * also to execute a custom logic over the target element,\n     * through a callback function that accepts { targetType: GridKeydownTargetType, target: Object }\n     * ```typescript\n     *  this.grid.navigateTo(10, 3, (args) => { args.target.nativeElement.focus(); });\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public navigateTo(rowIndex: number, visibleColIndex = -1, cb: Function = null) {\n        if (rowIndex < 0 || rowIndex > this.dataView.length - 1\n            || (visibleColIndex !== -1 && this.columnList.map(col => col.visibleIndex).indexOf(visibleColIndex) === -1)) {\n            return;\n        }\n        this.wheelHandler();\n        if (this.dataView.slice(rowIndex, rowIndex + 1).find(rec => rec.expression || rec.childGridsData)) {\n            visibleColIndex = -1;\n        }\n        const shouldScrollVertically = this.navigation.shouldPerformVerticalScroll(rowIndex, visibleColIndex);\n        const shouldScrollHorizontally = visibleColIndex !== -1 && !this.navigation.isColumnFullyVisible(visibleColIndex);\n        if (shouldScrollVertically) {\n            this.navigation.performVerticalScrollToCell(rowIndex, visibleColIndex,\n                () => { this.navigateTo(rowIndex, visibleColIndex, cb); });\n        } else if (shouldScrollHorizontally) {\n            this.navigation.performHorizontalScrollToCell(rowIndex, visibleColIndex, false,\n                     () => { this.navigateTo(rowIndex, visibleColIndex, cb); });\n        } else {\n            this.executeCallback(rowIndex, visibleColIndex, cb);\n        }\n    }\n\n    /**\n    * Returns `ICellPosition` which defines the next cell,\n    * according to the current position, that match specific criteria.\n    * You can pass callback function as a third parameter of `getPreviousCell` method.\n    * The callback function accepts IgxColumnComponent as a param\n    * ```typescript\n    *  const nextEditableCellPosition = this.grid.getNextCell(0, 3, (column) => column.editable);\n    * ```\n    * @memberof IgxGridBaseComponent\n    */\n    public getNextCell(currRowIndex: number, curVisibleColIndex: number,\n        callback: (IgxColumnComponent) => boolean = null): ICellPosition {\n        const columns = this.columnList.filter(col => !col.columnGroup && col.visibleIndex >= 0);\n\n        if (!this.isValidPosition(currRowIndex, curVisibleColIndex)) {\n            return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };\n        }\n        const colIndexes = callback ? columns.filter((col) => callback(col)).map(editCol => editCol.visibleIndex).sort((a, b) => a - b) :\n            columns.map(editCol => editCol.visibleIndex).sort((a, b) => a - b);\n        const nextCellIndex = colIndexes.find(index => index > curVisibleColIndex);\n        if (this.dataView.slice(currRowIndex, currRowIndex + 1)\n            .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData) && nextCellIndex !== undefined) {\n            return { rowIndex: currRowIndex, visibleColumnIndex: nextCellIndex };\n        } else {\n            if (colIndexes.length === 0 || this.getNextDataRowIndex(currRowIndex) === currRowIndex) {\n                return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };\n            } else {\n                return { rowIndex: this.getNextDataRowIndex(currRowIndex), visibleColumnIndex: colIndexes[0] };\n            }\n        }\n    }\n\n    /**\n    * Returns `ICellPosition` which defines the previous cell,\n    * according to the current position, that match specific criteria.\n    * You can pass callback function as a third parameter of `getPreviousCell` method.\n    * The callback function accepts IgxColumnComponent as a param\n    * ```typescript\n    *  const previousEditableCellPosition = this.grid.getPreviousCell(0, 3, (column) => column.editable);\n    * ```\n    * @memberof IgxGridBaseComponent\n    */\n    public getPreviousCell(currRowIndex: number, curVisibleColIndex: number,\n        callback: (IgxColumnComponent) => boolean = null): ICellPosition {\n        const columns = this.columnList.filter(col => !col.columnGroup && col.visibleIndex >= 0);\n\n        if (!this.isValidPosition(currRowIndex, curVisibleColIndex)) {\n            return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };\n        }\n        const colIndexes = callback ? columns.filter((col) => callback(col)).map(editCol => editCol.visibleIndex).sort((a, b) => b - a) :\n            columns.map(editCol => editCol.visibleIndex).sort((a, b) => b - a);\n        const prevCellIndex = colIndexes.find(index => index < curVisibleColIndex);\n        if (this.dataView.slice(currRowIndex, currRowIndex + 1)\n            .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData) && prevCellIndex !== undefined) {\n            return { rowIndex: currRowIndex, visibleColumnIndex: prevCellIndex };\n        } else {\n            if (colIndexes.length === 0 || this.getPrevDataRowIndex(currRowIndex) === currRowIndex) {\n                return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };\n            } else {\n                return { rowIndex: this.getPrevDataRowIndex(currRowIndex), visibleColumnIndex: colIndexes[0] };\n            }\n        }\n    }\n\n    private executeCallback(rowIndex, visibleColIndex = -1, cb: Function = null) {\n        if (!cb) { return; }\n        let targetType, target;\n        const row = this.summariesRowList.filter(s => s.index !== 0).concat(this.rowList.toArray()).find(r => r.index === rowIndex);\n        if (!row) { return; }\n        switch (row.nativeElement.tagName.toLowerCase()) {\n            case 'igx-grid-groupby-row':\n                targetType = GridKeydownTargetType.groupRow;\n                target = row;\n                break;\n            case 'igx-grid-summary-row':\n                targetType = GridKeydownTargetType.summaryCell;\n                target = visibleColIndex !== -1 ?\n                    row.summaryCells.find(c => c.visibleColumnIndex === visibleColIndex) : row.summaryCells.first;\n                break;\n            case 'igx-child-grid-row':\n                targetType = GridKeydownTargetType.hierarchicalRow;\n                target = row;\n                break;\n            default:\n                targetType = GridKeydownTargetType.dataCell;\n                target = visibleColIndex !== -1 ? row.cells.find(c => c.visibleColumnIndex === visibleColIndex) : row.cells.first;\n                break;\n        }\n        const args = { targetType: targetType, target: target };\n        cb(args);\n    }\n\n    private getPrevDataRowIndex(currentRowIndex): number {\n        if (currentRowIndex <= 0) { return currentRowIndex; }\n\n        const prevRow = this.dataView.slice(0, currentRowIndex).reverse()\n            .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData);\n        return prevRow ? this.dataView.indexOf(prevRow) : currentRowIndex;\n    }\n\n    private getNextDataRowIndex(currentRowIndex): number {\n        if (currentRowIndex === this.dataView.length) { return currentRowIndex; }\n\n        const nextRow = this.dataView.slice(currentRowIndex + 1, this.dataView.length)\n            .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData);\n        return nextRow ? this.dataView.indexOf(nextRow) : currentRowIndex;\n    }\n\n    private isValidPosition(rowIndex, colIndex): boolean {\n        const rows = this.summariesRowList.filter(s => s.index !== 0).concat(this.rowList.toArray()).length;\n        const cols = this.columnList.filter(col => !col.columnGroup && col.visibleIndex >= 0).length;\n        if (rows < 1 || cols < 1) { return false; }\n        if (rowIndex > -1 && rowIndex < this.dataView.length &&\n            colIndex > - 1 && colIndex <= this.unpinnedColumns[this.unpinnedColumns.length - 1].visibleIndex) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    public wheelHandler = (isScroll = false) => {\n        if (this.document.activeElement &&\n            // tslint:disable-next-line:no-bitwise\n            (this.document.activeElement.compareDocumentPosition(this.tbody.nativeElement) & Node.DOCUMENT_POSITION_CONTAINS ||\n            // tslint:disable-next-line:no-bitwise\n            (this.document.activeElement.\n                compareDocumentPosition(this.tfoot.nativeElement) & Node.DOCUMENT_POSITION_CONTAINS && isScroll))) {\n            (this.document.activeElement as HTMLElement).blur();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public trackColumnChanges(index, col) {\n        return col.field + col._calcWidth;\n    }\n\n    private find(text: string, increment: number, caseSensitive?: boolean, exactMatch?: boolean, scroll?: boolean) {\n        if (!this.rowList) {\n            return 0;\n        }\n\n        this.endEdit(false);\n\n        if (!text) {\n            this.clearSearch();\n            return 0;\n        }\n\n        const caseSensitiveResolved = caseSensitive ? true : false;\n        const exactMatchResolved = exactMatch ? true : false;\n        let rebuildCache = false;\n\n        if (this.lastSearchInfo.searchText !== text ||\n            this.lastSearchInfo.caseSensitive !== caseSensitiveResolved ||\n            this.lastSearchInfo.exactMatch !== exactMatchResolved) {\n            this.lastSearchInfo = {\n                searchText: text,\n                activeMatchIndex: 0,\n                caseSensitive: caseSensitiveResolved,\n                exactMatch: exactMatchResolved,\n                matchInfoCache: []\n            };\n\n            rebuildCache = true;\n        } else {\n            this.lastSearchInfo.activeMatchIndex += increment;\n        }\n\n        if (rebuildCache) {\n            this.rowList.forEach((row) => {\n                if (row.cells) {\n                    row.cells.forEach((c) => {\n                        c.highlightText(text, caseSensitiveResolved, exactMatchResolved);\n                    });\n                }\n            });\n\n            this.rebuildMatchCache();\n        }\n\n        if (this.lastSearchInfo.activeMatchIndex >= this.lastSearchInfo.matchInfoCache.length) {\n            this.lastSearchInfo.activeMatchIndex = 0;\n        } else if (this.lastSearchInfo.activeMatchIndex < 0) {\n            this.lastSearchInfo.activeMatchIndex = this.lastSearchInfo.matchInfoCache.length - 1;\n        }\n\n        if (this.lastSearchInfo.matchInfoCache.length) {\n            const matchInfo = this.lastSearchInfo.matchInfoCache[this.lastSearchInfo.activeMatchIndex];\n            this.lastSearchInfo = { ...this.lastSearchInfo };\n\n            if (scroll !== false) {\n                this.scrollTo(matchInfo.row, matchInfo.column);\n            }\n\n            IgxTextHighlightDirective.setActiveHighlight(this.id, {\n                column: matchInfo.column,\n                row: matchInfo.row,\n                index: matchInfo.index,\n            });\n\n        } else {\n            IgxTextHighlightDirective.clearActiveHighlight(this.id);\n        }\n\n        return this.lastSearchInfo.matchInfoCache.length;\n    }\n\n    /**\n     * Returns an array containing the filtered sorted data.\n     * ```typescript\n     * const filteredSortedData = this.grid1.filteredSortedData;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    get filteredSortedData(): any[] {\n        return this._filteredSortedData;\n    }\n    set filteredSortedData(value: any[]) {\n        this._filteredSortedData = value;\n        this.refreshSearch(true);\n    }\n\n    /**\n     * @hidden\n     */\n    protected initPinning() {\n        let currentPinnedWidth = 0;\n        const pinnedColumns = [];\n        const unpinnedColumns = [];\n        const newUnpinnedCols = [];\n\n        this.calculateGridWidth();\n        this.resetCaches();\n        // When a column is a group or is inside a group, pin all related.\n        this._pinnedColumns.forEach(col => {\n            if (col.parent) {\n                col.parent.pinned = true;\n            }\n            if (col.columnGroup) {\n                col.children.forEach(child => child.pinned = true);\n            }\n        });\n\n        // Make sure we don't exceed unpinned area min width and get pinned and unpinned col collections.\n        // We take into account top level columns (top level groups and non groups).\n        // If top level is unpinned the pinning handles all children to be unpinned as well.\n        for (let i = 0; i < this._columns.length; i++) {\n            if (this._columns[i].pinned && !this._columns[i].parent) {\n                // Pinned column. Check if with it the unpinned min width is exceeded.\n                const colWidth = parseInt(this._columns[i].width, 10);\n                if (currentPinnedWidth + colWidth > this.calcWidth - this.unpinnedAreaMinWidth) {\n                    // unpinned min width is exceeded. Unpin the columns and add it to the unpinned collection.\n                    this._columns[i].pinned = false;\n                    unpinnedColumns.push(this._columns[i]);\n                    newUnpinnedCols.push(this._columns[i]);\n                } else {\n                    // unpinned min width is not exceeded. Keep it pinned and add it to the pinned collection.\n                    currentPinnedWidth += colWidth;\n                    pinnedColumns.push(this._columns[i]);\n                }\n            } else if (this._columns[i].pinned && this._columns[i].parent) {\n                if (this._columns[i].topLevelParent.pinned) {\n                    pinnedColumns.push(this._columns[i]);\n                } else {\n                    this._columns[i].pinned = false;\n                    unpinnedColumns.push(this._columns[i]);\n                }\n            } else {\n                unpinnedColumns.push(this._columns[i]);\n            }\n        }\n\n        if (newUnpinnedCols.length) {\n            console.warn(\n                'igxGrid - The pinned area exceeds maximum pinned width. ' +\n                'The following columns were unpinned to prevent further issues:' +\n                newUnpinnedCols.map(col => '\"' + col.header + '\"').toString() + '. For more info see our documentation.'\n            );\n        }\n\n        // Assign the applicaple collections.\n        this._pinnedColumns = pinnedColumns;\n        this._unpinnedColumns = unpinnedColumns;\n        this.notifyChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollTo(row: any | number, column: any | number, inCollection = this.filteredSortedData): void {\n        let delayScrolling = false;\n\n        if (this.paging && typeof (row) !== 'number') {\n            const rowIndex = inCollection.indexOf(row);\n            const page = Math.floor(rowIndex / this.perPage);\n\n            if (this.page !== page) {\n                delayScrolling = true;\n                this.page = page;\n            }\n        }\n\n        if (delayScrolling) {\n            this.verticalScrollContainer.onDataChanged.pipe(first()).subscribe(() => {\n                this.scrollDirective(this.verticalScrollContainer,\n                    typeof (row) === 'number' ? row : this.dataView.indexOf(row));\n            });\n        } else {\n            this.scrollDirective(this.verticalScrollContainer,\n                typeof (row) === 'number' ? row : this.dataView.indexOf(row));\n        }\n\n        this.scrollToHorizontally(column);\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollToHorizontally(column: any | number) {\n        let columnIndex = typeof column === 'number' ? column : this.getColumnByName(column).visibleIndex;\n        const scrollRow = this.rowList.find(r => r.virtDirRow);\n        const virtDir = scrollRow ? scrollRow.virtDirRow : null;\n        if (this.pinnedColumns.length) {\n            if (columnIndex >= this.pinnedColumns.length) {\n                columnIndex -= this.pinnedColumns.length;\n                this.scrollDirective(virtDir, columnIndex);\n            }\n        } else {\n            this.scrollDirective(virtDir, columnIndex);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollDirective(directive: IgxGridForOfDirective<any>, goal: number): void {\n        if (!directive) {\n            return;\n        }\n        directive.scrollTo(goal);\n    }\n\n    private rebuildMatchCache() {\n        this.lastSearchInfo.matchInfoCache = [];\n\n        const caseSensitive = this.lastSearchInfo.caseSensitive;\n        const exactMatch = this.lastSearchInfo.exactMatch;\n        const searchText = caseSensitive ? this.lastSearchInfo.searchText : this.lastSearchInfo.searchText.toLowerCase();\n        const data = this.filteredSortedData;\n        const columnItems = this.visibleColumns.filter((c) => !c.columnGroup).sort((c1, c2) => c1.visibleIndex - c2.visibleIndex);\n\n        const numberPipe = new IgxDecimalPipeComponent(this.locale);\n        const datePipe = new IgxDatePipeComponent(this.locale);\n        data.forEach((dataRow) => {\n            columnItems.forEach((c) => {\n                const value = c.formatter ? c.formatter(dataRow[c.field]) :\n                    c.dataType === 'number' ? numberPipe.transform(dataRow[c.field], this.locale) :\n                        c.dataType === 'date' ? datePipe.transform(dataRow[c.field], this.locale)\n                            : dataRow[c.field];\n                if (value !== undefined && value !== null && c.searchable) {\n                    let searchValue = caseSensitive ? String(value) : String(value).toLowerCase();\n\n                    if (exactMatch) {\n                        if (searchValue === searchText) {\n                            this.lastSearchInfo.matchInfoCache.push({\n                                row: dataRow,\n                                column: c.field,\n                                index: 0,\n                            });\n                        }\n                    } else {\n                        let occurenceIndex = 0;\n                        let searchIndex = searchValue.indexOf(searchText);\n\n                        while (searchIndex !== -1) {\n                            this.lastSearchInfo.matchInfoCache.push({\n                                row: dataRow,\n                                column: c.field,\n                                index: occurenceIndex++,\n                            });\n\n                            searchValue = searchValue.substring(searchIndex + searchText.length);\n                            searchIndex = searchValue.indexOf(searchText);\n                        }\n                    }\n                }\n            });\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public isExpandedGroup(_group: IGroupByRecord): boolean {\n        return undefined;\n    }\n\n    protected changeRowEditingOverlayStateOnScroll(row: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>) {\n        if (!this.rowEditable || !this.rowEditingOverlay || this.rowEditingOverlay.collapsed) {\n            return;\n        }\n        if (!row) {\n            this.toggleRowEditingOverlay(false);\n        } else {\n            this.repositionRowEditingOverlay(row);\n        }\n    }\n\n    /**\n     * Should be called when data and/or isLoading input changes so that the overlay can be\n     * hidden/shown based on the current value of shouldOverlayLoading\n     */\n    protected evaluateLoadingState() {\n        if (this.shouldOverlayLoading) {\n            // a new overlay should be shown\n            const overlaySettings: OverlaySettings = {\n                outlet: this.loadingOutlet,\n                closeOnOutsideClick: false,\n                positionStrategy: new ContainerPositionStrategy()\n            };\n            if (!this._loadingId) {\n                this._loadingId = this.overlayService.attach(this.loadingOverlay, overlaySettings);\n                this.overlayService.show(this._loadingId, overlaySettings);\n            }\n        } else {\n            if (this._loadingId) {\n                this.overlayService.hide(this._loadingId);\n                this._loadingId = null;\n            }\n        }\n    }\n\n    openRowOverlay(id) {\n        this.configureRowEditingOverlay(id, this.rowList.length <= MIN_ROW_EDITING_COUNT_THRESHOLD);\n\n        this.rowEditingOverlay.open(this.rowEditSettings);\n        this.rowEditPositioningStrategy.isTopInitialPosition = this.rowEditPositioningStrategy.isTop;\n        this.rowEditingOverlay.element.addEventListener('wheel', this.rowEditingWheelHandler);\n    }\n\n    /**\n     * @hidden\n     */\n    public closeRowEditingOverlay() {\n        this.rowEditingOverlay.element.removeEventListener('wheel', this.rowEditingWheelHandler);\n        this.rowEditPositioningStrategy.isTopInitialPosition = null;\n        this.rowEditingOverlay.close();\n        this.rowEditingOverlay.element.parentElement.style.display = '';\n    }\n\n    /**\n     * @hidden\n     */\n    public toggleRowEditingOverlay(show) {\n        const rowStyle = this.rowEditingOverlay.element.style;\n        if (show) {\n            rowStyle.display = 'block';\n        } else {\n            rowStyle.display = 'none';\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public repositionRowEditingOverlay(row: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>) {\n        if (row && !this.rowEditingOverlay.collapsed) {\n            const rowStyle = this.rowEditingOverlay.element.parentElement.style;\n            if (row) {\n                rowStyle.display = '';\n                this.configureRowEditingOverlay(row.rowID);\n                this.rowEditingOverlay.reposition();\n            } else {\n                rowStyle.display = 'none';\n            }\n        }\n    }\n\n    private configureRowEditingOverlay(rowID: any, useOuter = false) {\n        this.rowEditSettings.outlet = useOuter ? this.parentRowOutletDirective : this.rowOutletDirective;\n        this.rowEditPositioningStrategy.settings.container = this.tbody.nativeElement;\n        const targetRow = this.gridAPI.get_row_by_key(rowID);\n        if (!targetRow) {\n            return;\n        }\n        this.rowEditPositioningStrategy.settings.target = targetRow.element.nativeElement;\n        this.toggleRowEditingOverlay(true);\n    }\n\n    /**\n     * @hidden\n     */\n    public get rowChangesCount() {\n        if (!this.crudService.row) {\n            return 0;\n        }\n        const rowChanges = this.transactions.getAggregatedValue(this.crudService.row.id, false);\n        return rowChanges ? Object.keys(rowChanges).length : 0;\n    }\n\n    protected writeToData(rowIndex: number, value: any) {\n        mergeObjects(this.gridAPI.get_all_data()[rowIndex], value);\n    }\n\n    endRowTransaction(commit: boolean, row: IgxRow) {\n        row.newData = this.transactions.getAggregatedValue(row.id, true);\n\n        let args = row.createEditEventArgs();\n\n        if (!commit) {\n            this.onRowEditCancel.emit(args);\n            this.transactions.endPending(false);\n        } else {\n            args = this.gridAPI.update_row(row, row.newData);\n        }\n        if (args.cancel) {\n            this.transactions.startPending();\n            return;\n        }\n        this.crudService.endRowEdit();\n        this.closeRowEditingOverlay();\n    }\n\n    // TODO: Refactor\n    /**\n     * Finishes the row transactions on the current row.\n     * If `commit === true`, passes them from the pending state to the data (or transaction service)\n     *\n     * Binding to the event\n     * ```html\n     * <button igxButton (click)=\"grid.endEdit(true)\">Commit Row</button>\n     * ```\n     * @param commit\n     */\n    public endEdit(commit = true, event?: Event) {\n        const row = this.crudService.row;\n        const cell = this.crudService.cell;\n\n        // TODO: Merge the crudService with wht BaseAPI service\n        if (!row && !cell) { return; }\n\n        commit ? this.gridAPI.submit_value() : this.gridAPI.escape_editMode();\n\n        if (!this.rowEditable || this.rowEditingOverlay && this.rowEditingOverlay.collapsed || !row) {\n            return;\n        }\n\n        this.endRowTransaction(commit, row);\n\n        const activeCell = this.selectionService.activeElement;\n        if (event && activeCell) {\n            const rowIndex = activeCell.row;\n            const visibleColIndex = activeCell.layout ? activeCell.layout.columnVisibleIndex : activeCell.column;\n            this.navigateTo(rowIndex, visibleColIndex, (c) => {\n                if (c.targetType === GridKeydownTargetType.dataCell && c.target) {\n                    c.target.nativeElement.focus();\n                }\n            });\n        }\n    }\n    /**\n     * @hidden\n     */\n    private rowEditingWheelHandler = (event: WheelEvent) => {\n        if (event.deltaY > 0) {\n            this.verticalScrollContainer.scrollNext();\n        } else {\n            this.verticalScrollContainer.scrollPrev();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public get dataWithAddedInTransactionRows() {\n        const result = <any>cloneArray(this.gridAPI.get_all_data());\n        if (this.transactions.enabled) {\n            result.push(...this.transactions.getAggregatedChanges(true)\n                .filter(t => t.type === TransactionType.ADD)\n                .map(t => t.newValue));\n        }\n\n        return result;\n    }\n\n    public get dataLength() {\n        return this.transactions.enabled ? this.dataWithAddedInTransactionRows.length : this.gridAPI.get_all_data().length;\n    }\n\n    public hasHorizontalScroll() {\n        return this.totalWidth - this.unpinnedWidth > 0;\n    }\n\n    protected _restoreVirtState(row) {\n        // check virtualization state of data record added from cache\n        // in case state is no longer valid - update it.\n        const rowForOf = row.virtDirRow;\n        const gridScrLeft = rowForOf.getScroll().scrollLeft;\n        const left = -parseInt(rowForOf.dc.instance._viewContainer.element.nativeElement.style.left, 10);\n        const actualScrollLeft = left + rowForOf.getColumnScrollLeft(rowForOf.state.startIndex);\n        if (gridScrLeft !== actualScrollLeft) {\n            rowForOf.onHScroll(gridScrLeft);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected getExportExcel(): boolean {\n        return this._exportExcel;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getExportCsv(): boolean {\n        return this._exportCsv;\n    }\n\n    /**\n     * @hidden\n     */\n    get shouldOverlayLoading(): boolean {\n        return this.isLoading && this.data && this.data.length > 0;\n    }\n\n    /**\n    * @hidden\n    */\n    public isSummaryRow(rowData): boolean {\n        return rowData.summaries && (rowData.summaries instanceof Map);\n    }\n\n    /** @hidden */\n    public get isMultiRowSelectionEnabled(): boolean {\n        return this.rowSelection === GridSelectionMode.multiple;\n    }\n\n    /** @hidden */\n    public get isRowSelectable(): boolean {\n        return this.rowSelection !== GridSelectionMode.none;\n    }\n\n    /** @hidden */\n    public get isCellSelectable() {\n        return this.cellSelection !== GridSelectionMode.none;\n    }\n\n    /**\n     * @hidden\n     */\n    public cachedViewLoaded(args: ICachedViewLoadedEventArgs) {\n        if (args.context['templateID'] === 'dataRow' && args.context['$implicit'] === args.oldContext['$implicit']) {\n            args.view.detectChanges();\n            const row = this.getRowByIndex(args.context.index);\n            if (row && row.cells) {\n                row.cells.forEach((c) => {\n                    c.highlightText(\n                        this.lastSearchInfo.searchText,\n                        this.lastSearchInfo.caseSensitive,\n                        this.lastSearchInfo.exactMatch);\n                });\n            }\n        }\n        if (this.hasHorizontalScroll()) {\n            const tmplId = args.context.templateID;\n            const index = args.context.index;\n            args.view.detectChanges();\n            const row = tmplId === 'dataRow' ? this.getRowByIndex(index) : null;\n            const summaryRow = tmplId === 'summaryRow' ? this.summariesRowList.find((sr) => sr.dataRowIndex === index) : null;\n            if (row && row instanceof IgxRowComponent) {\n                this._restoreVirtState(row);\n            } else if (summaryRow) {\n                this._restoreVirtState(summaryRow);\n            }\n        }\n    }\n\n    /**\n     * Opens the advanced filtering dialog.\n     */\n    public openAdvancedFilteringDialog() {\n        if (!this._advancedFilteringOverlayId) {\n            this._advancedFilteringOverlaySettings.positionStrategy.settings.target =\n                (this as any).rootGrid ? (this as any).rootGrid.nativeElement : this.nativeElement;\n            this._advancedFilteringOverlaySettings.outlet = this.outletDirective;\n\n            this._advancedFilteringOverlayId = this.overlayService.attach(\n                IgxAdvancedFilteringDialogComponent,\n                this._advancedFilteringOverlaySettings,\n                {\n                    injector: this.viewRef.injector,\n                    componentFactoryResolver: this.resolver\n                });\n            this.overlayService.show(this._advancedFilteringOverlayId, this._advancedFilteringOverlaySettings);\n        }\n    }\n\n    /**\n     * Closes the advanced filtering dialog.\n     * @param applyChanges indicates whether the changes should be applied\n     */\n    public closeAdvancedFilteringDialog(applyChanges: boolean) {\n        if (this._advancedFilteringOverlayId) {\n            const advancedFilteringOverlay = this.overlayService.getOverlayById(this._advancedFilteringOverlayId);\n            const advancedFilteringDialog = advancedFilteringOverlay.componentRef.instance as IgxAdvancedFilteringDialogComponent;\n\n            if (applyChanges) {\n                advancedFilteringDialog.applyChanges();\n            }\n            advancedFilteringDialog.closeDialog();\n        }\n    }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'igx-grid-footer',\n    template: '<ng-content></ng-content>'\n})\nexport class IgxGridFooterComponent {\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\n\n@Pipe({\n    name: 'igxGridSummaryDataPipe',\n    pure: true\n})\nexport class IgxSummaryDataPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) { }\n\n    transform(id: string, trigger: number = 0) {\n        const summaryService = this.gridAPI.grid.summaryService;\n        return summaryService.calculateSummaries(\n            summaryService.rootSummaryID,\n            this.gridAPI.get_summary_data()\n        );\n    }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n\n@Directive({\n    selector: '[igxProcessBarText]'\n})\nexport class IgxProcessBarTextTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Renderer2,\n    ViewChild,\n    ContentChild\n} from '@angular/core';\nimport { IgxProcessBarTextTemplateDirective } from './progressbar.common';\nimport { IBaseEventArgs } from '../core/utils';\n\nconst ONE_PERCENT = 0.01;\nconst MIN_VALUE = 0;\n\nexport enum IgxTextAlign {\n    START = 'start',\n    CENTER = 'center',\n    END = 'end'\n}\n\nexport enum IgxProgressType {\n    DANGER = 'danger',\n    INFO = 'info',\n    WARNING = 'warning',\n    SUCCESS = 'success'\n}\n\nexport interface IChangeProgressEventArgs extends IBaseEventArgs {\n    previousValue: number;\n    currentValue: number;\n}\n\nexport abstract class BaseProgress {\n    /**\n     * @hidden\n     */\n    private requestAnimationId: number = undefined;\n\n    /**\n     * @hidden\n     */\n    protected _valueInPercent = MIN_VALUE;\n    /**\n     * @hidden\n     */\n    protected _max = 100;\n    /**\n     * @hidden\n     */\n    protected _value = MIN_VALUE;\n    /**\n     * @hidden\n     */\n    protected _animate = true;\n\n    /**\n     * @hidden\n     */\n    protected _step;\n\n    /**\n     *Returns the `IgxLinearProgressBarComponent`/`IgxCircularProgressBarComponent` value in percentage.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent; // IgxCircularProgressBarComponent\n     *public valuePercent(event){\n     *    let percentValue = this.progressBar.valueInPercent;\n     *    alert(percentValue);\n     *}\n     *```\n     */\n    public get valueInPercent(): number {\n        return this._valueInPercent;\n    }\n\n    /**\n     *Sets the `IgxLinearProgressBarComponent`/`IgxCircularProgressBarComponent` value in percentage.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent; // IgxCircularProgressBarComponent\n     *    public setValue(event){\n     *    this.progressBar.valueInPercent = 56;\n     *}\n     * //...\n     *```\n     *```html\n     *<button igxButton=\"fab\" igxRipple=\"\" (click)=\"setValue()\">setValue</button>\n     *```\n     */\n    public set valueInPercent(value: number) {\n        this._valueInPercent = value;\n    }\n\n    /**\n     * @hidden\n     */\n    protected runAnimation(val: number, step: number) {\n        this.requestAnimationId = requestAnimationFrame(\n            () => this.updateProgressSmoothly.call(this, val, step));\n    }\n\n    /**\n     * @hidden\n     */\n    protected updateProgressSmoothly(val: number, step: number) {\n        this._value += step;\n        const passedValue = convertInPercentage(val, this._max);\n        const progressValue = convertInPercentage(this._value, this._max);\n        if (this.valueInPercent === passedValue) {\n            this.updateProgress(val);\n            cancelAnimationFrame(this.requestAnimationId);\n        } else if (this.isInLimitRange(progressValue, passedValue, step)) {\n            this.updateProgress(val);\n            cancelAnimationFrame(this.requestAnimationId);\n        } else {\n            this.valueInPercent = progressValue;\n            this.requestAnimationId = requestAnimationFrame(() => this.updateProgressSmoothly.call(this, val, step));\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected updateProgressDirectly(val: number) {\n        this._value = val;\n        this.valueInPercent = convertInPercentage(this._value, this._max);\n    }\n\n    /**\n     * @hidden\n     */\n    protected directionFlow(currentValue: number, prevValue: number, step: number): number {\n        if (currentValue < prevValue) {\n            return step;\n        }\n\n        return -step;\n    }\n\n    /**\n     * @hidden\n     */\n    private isInLimitRange(val: number, comparator: number, step: number) {\n        return this.isExceedingUpperLimit(val, comparator, step) || this.isExceedingLowerLimit(val, comparator, step);\n    }\n\n    /**\n     * @hidden\n     *\n     *\n     * @param val\n     * @param comparator\n     * @param step\n     */\n    private isExceedingUpperLimit(val: number, comparator: number, step: number) {\n        return val > comparator && step > 0;\n    }\n\n    /**\n     * @hidden\n     *\n     * @param val\n     * @param comparator\n     * @param step\n     */\n    private isExceedingLowerLimit(val: number, comparator: number, step: number) {\n        return val < comparator && step < 0;\n    }\n\n    /**\n     * @hidden\n     * @param step\n     */\n    private updateProgress(val: number) {\n        this._value = val;\n        this.valueInPercent = convertInPercentage(this._value, this._max);\n    }\n}\nlet NEXT_LINEAR_ID = 0;\nlet NEXT_CIRCULAR_ID = 0;\n@Component({\n    selector: 'igx-linear-bar',\n    templateUrl: 'templates/linear-bar.component.html'\n})\nexport class IgxLinearProgressBarComponent extends BaseProgress {\n\n    /**\n     *Animation on progress `IgxLinearProgressBarComponent`. By default it is set to true.\n     *```html\n     *<igx-linear-bar [animate]=\"false\" [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    set animate(animate: boolean) {\n        this._animate = animate;\n    }\n\n    /**\n     *Returns whether the `IgxLinearProgressBarComponent` has animation true/false.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public animationStatus(event) {\n     *    let animationStatus = this.progressBar.animate;\n     *    alert(animationStatus);\n     *}\n     *```\n     */\n    get animate(): boolean {\n        return this._animate;\n    }\n\n    /**\n     *Set maximum value that can be passed. By default it is set to 100.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"0\"></igx-linear-bar>\n     *```\n     */\n    @HostBinding('attr.aria-valuemax')\n    @Input()\n    set max(maxNum: number) {\n        this._max = maxNum;\n    }\n\n    /**\n     *Returns the the maximum progress value of the `IgxLinearProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public maxValue(event) {\n     *    let max = this.progressBar.max;\n     *    alert(max);\n     *}\n     *```\n     */\n    get max() {\n        return this._max;\n    }\n\n    /**\n     *Returns the value which update the progress indicator of the `IgxLinearProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public stepValue(event) {\n     *    let step = this.progressBar.step;\n     *    alert(step);\n     *}\n     *```\n     */\n    @Input()\n    get step(): number {\n        if (this._step) {\n            return this._step;\n        }\n\n        return this._max * ONE_PERCENT;\n    }\n\n    /**\n     *Sets the value by which progress indicator is updated. By default it is 1% of the maximum value.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"0\" [step]=\"1\"></igx-linear-bar>\n     *```\n     */\n    set step(val: number) {\n        this._step = Number(val);\n    }\n\n    constructor() {\n        super();\n    }\n\n    @HostBinding('attr.aria-valuemin')\n    public valueMin = 0;\n\n    @HostBinding('class.igx-linear-bar')\n    public cssClass = 'igx-linear-bar';\n\n    /**\n     *Set `IgxLinearProgressBarComponent` to have striped style. By default it is set to false.\n     *```html\n     *<igx-linear-bar [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     *```\n     */\n    @HostBinding('class.igx-linear-bar--striped')\n    @Input()\n    public striped = false;\n\n    /**\n     *Set `IgxLinearProgressBarComponent` to have indeterminate. By default it is set to false.\n     *```html\n     *<igx-linear-bar [indeterminate]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @HostBinding('class.igx-linear-bar--indeterminate')\n    @Input()\n    public indeterminate = false;\n\n    /**An @Input property that sets the value of the `role` attribute. If not provided it will be automatically set to `progressbar`.\n     * ```html\n     *<igx-linear-bar role=\"progressbar\"></igx-linear-bar>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'progressbar';\n\n    /**An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     *<igx-linear-bar [id]=\"'igx-linear-bar-55'\" [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-linear-bar-${NEXT_LINEAR_ID++}`;\n\n    /**\n     *Set the position that defines where the text is aligned.\n     Possible options - `IgxTextAlign.START` (default), `IgxTextAlign.CENTER`, `IgxTextAlign.END`.\n     *```typescript\n     *public positionCenter: IgxTextAlign;\n     *public ngOnInit() {\n     *    this.positionCenter = IgxTextAlign.CENTER;\n     *}\n     * //...\n     *```\n     * ```html\n     *<igx-linear-bar type=\"warning\" [text]=\"'Custom text'\" [textAlign]=\"positionCenter\" [striped]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public textAlign: IgxTextAlign = IgxTextAlign.START;\n\n    /**\n     *Set the text to be visible. By default it is set to true.\n     * ```html\n     *<igx-linear-bar type=\"default\" [textVisibility]=\"false\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public textVisibility = true;\n\n    /**\n     *Set the position that defines if the text should be aligned above the progress line. By default is set to false.\n     *```html\n     *<igx-linear-bar type=\"danger\" [textTop]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public textTop = false;\n\n    /**\n     *Set a custom text that is displayed according to the defined position.\n     * ```html\n     *<igx-linear-bar type=\"warning\" [text]=\"'Custom text'\" [textAlign]=\"positionCenter\" [striped]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public text: string;\n\n    /**\n     *Set type of the `IgxLinearProgressBarComponent`. Possible options - `default`, `success`, `info`, `warning`, and `danger`.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"100\" [value]=\"0\" type=\"danger\"></igx-linear-bar>\n     *```\n     */\n\n    @Input()\n    public type = 'default';\n\n    /**\n    *Returns value that indicates the current `IgxLinearProgressBarComponent` position.\n    *```typescript\n    *@ViewChild(\"MyProgressBar\")\n    *public progressBar: IgxLinearProgressBarComponent;\n    *public getValue(event) {\n    *    let value = this.progressBar.value;\n    *    alert(value);\n    *}\n    *```\n    */\n    @HostBinding('attr.aria-valuenow')\n    @Input()\n    get value(): number {\n        return this._value;\n    }\n\n    /**\n     *Set value that indicates the current `IgxLinearProgressBarComponent` position.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     *```\n     */\n    set value(val) {\n        val = Number(val);\n        if (this._value === val || this.indeterminate) {\n            return;\n        }\n\n        const valueInRange = getValueInProperRange(val, this.max);\n        if (isNaN(valueInRange)) {\n            return;\n        }\n        const changedValues = {\n            currentValue: valueInRange,\n            previousValue: this._value\n        };\n\n        const updateValue = super.directionFlow(this._value, val, this.step);\n        if (this._animate && val >= this.step) {\n            super.runAnimation(valueInRange, updateValue);\n        } else {\n            super.updateProgressDirectly(valueInRange);\n        }\n\n        this.onProgressChanged.emit(changedValues);\n    }\n\n    /**\n     *An event, which is triggered after a progress is changed.\n     *```typescript\n     *public progressChange(event) {\n     *    alert(\"Progress made!\");\n     *}\n     * //...\n     *```\n     *```html\n     *<igx-linear-bar (onProgressChanged)=\"progressChange($event)\" type=\"success\">\n     *```\n     */\n    @Output() public onProgressChanged = new EventEmitter<IChangeProgressEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--danger')\n    public get danger() {\n        return this.type === IgxProgressType.DANGER;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--info')\n    public get info() {\n        return this.type === IgxProgressType.INFO;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--warning')\n    public get warning() {\n        return this.type === IgxProgressType.WARNING;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--success')\n    public get success() {\n        return this.type === IgxProgressType.SUCCESS;\n    }\n}\n\n@Component({\n    selector: 'igx-circular-bar',\n    templateUrl: 'templates/circular-bar.component.html'\n})\nexport class IgxCircularProgressBarComponent extends BaseProgress {\n\n    private readonly STROKE_OPACITY_DVIDER = 100;\n    private readonly STROKE_OPACITY_ADDITION = .2;\n\n    /** @hidden */\n    @HostBinding('class.igx-circular-bar')\n    public cssClass = 'igx-circular-bar';\n\n    /**\n     *An event, which is triggered after a progress is changed.\n     *```typescript\n     *public progressChange(event) {\n     *    alert(\"Progress made!\");\n     *}\n     * //...\n     *```\n     *```html\n     *<igx-circular-bar [value]=\"currentValue\" (onProgressChanged)=\"progressChange($event)\"></igx-circular-bar>\n     *```\n     */\n    @Output()\n    public onProgressChanged = new EventEmitter<IChangeProgressEventArgs>();\n\n    /**\n     *An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     *```html\n     *<igx-circular-bar [id]=\"'igx-circular-bar-55'\" [value]=\"50\"></igx-circular-bar>\n     *```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-circular-bar-${NEXT_CIRCULAR_ID++}`;\n\n    /**\n     *An @Input property that sets the value of the `indeterminate` attribute. If not provided it will be automatically set to false.\n     *```html\n     *<igx-circular-bar [indeterminate]=\"true\"></igx-circular-bar>\n     *```\n     */\n    @HostBinding('class.igx-circular-bar--indeterminate')\n    @Input()\n    public indeterminate = false;\n\n    /**\n     *Sets the text visibility. By default it is set to true.\n     *```html\n     *<igx-circular-bar [textVisibility]=\"false\"></igx-circular-bar>\n     *```\n     */\n    @Input()\n    public textVisibility = true;\n\n    /**\n     * Sets/gets the text to be displayed inside the `igxCircularBar`.\n     *```html\n     *<igx-circular-bar text=\"Progress\"></igx-circular-bar>\n     *```\n     *```typescript\n     *let text = this.circularBar.text;\n     *```\n     */\n    @Input()\n    public text: string;\n\n    @ContentChild(IgxProcessBarTextTemplateDirective, { read: IgxProcessBarTextTemplateDirective, static: false })\n    public textTemplate: IgxProcessBarTextTemplateDirective;\n\n    /**\n     * @hidden\n    */\n    public get context(): any {\n        return {\n            $implicit: { value: this.value, valueInPercent: this.valueInPercent, max: this.max }\n        };\n    }\n\n    /**\n    *Animation on progress `IgxCircularProgressBarComponent`. By default it is set to true.\n     *```html\n     *<igx-circular-bar [animate]=\"false\" [value]=\"50\"></igx-circular-bar>\n     *```\n     */\n    @Input()\n    set animate(animate: boolean) {\n        this._animate = animate;\n    }\n\n    /**\n     *Returns whether the `IgxCircularProgressBarComponent` has animation true/false.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public animationStatus(event) {\n     *    let animationStatus = this.progressBar.animate;\n     *    alert(animationStatus);\n     *}\n     *```\n     */\n    get animate(): boolean {\n        return this._animate;\n    }\n\n    /**\n     *Set maximum value that can be passed. By default it is set to 100.\n     *```html\n     *<igx-circular-bar [max]=\"200\" [value]=\"0\"></igx-circular-bar>\n     *```\n     */\n    @Input()\n    set max(maxNum: number) {\n        this._max = maxNum;\n    }\n\n    /**\n     *Returns the the maximum progress value of the `IgxCircularProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public maxValue(event) {\n     *    let max = this.progressBar.max;\n     *    alert(max);\n     *}\n     *```\n     *```html\n     *<igx-circular-bar [max]=\"245\" [animate]=\"false\" [value]=\"currentValue\"></igx-circular-bar>\n     *```\n     */\n    get max(): number {\n        return this._max;\n    }\n\n    /**\n     *Returns the value which update the progress indicator of the `IgxCircularProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public stepValue(event) {\n     *    let step = this.progressBar.step;\n     *    alert(step);\n     *}\n     *```\n     */\n    @Input()\n    get step(): number {\n        if (this._step) {\n            return this._step;\n        }\n\n        return this._max * ONE_PERCENT;\n    }\n\n    /**\n     *Sets the value by which progress indicator is updated. By default it is 1% of the maximum value.\n     *```html\n     *<igx-circular-bar [striped]=\"false\" [max]=\"200\" [value]=\"0\" [step]=\"1\"></igx-circular-bar>\n     *```\n    */\n    set step(val: number) {\n        this._step = Number(val);\n    }\n\n    /**\n     *Returns value that indicates the current `IgxCircularProgressBarComponent` position.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public getValue(event) {\n     *    let value = this.progressBar.value;\n     *    alert(value);\n     *}\n     *```\n     *```html\n     *<button igxButton=\"fab\" igxRipple=\"\" (click)=\"getValue()\">Click</button>\n     *```\n     */\n    @Input()\n    get value(): number {\n        return this._value;\n    }\n\n    /**\n     *Set value that indicates the current `IgxCircularProgressBarComponent` position.\n     *```html\n     *<igx-circular-bar [value]=\"50\"></igx-circular-bar>\n     *```\n     */\n    set value(val: number) {\n        val = Number(val);\n        if (this._value === val || this.indeterminate) {\n            return;\n        }\n\n        const valueInProperRange = getValueInProperRange(val, this.max);\n        if (isNaN(valueInProperRange)) {\n            return;\n        }\n\n        const changedValues = {\n            currentValue: valueInProperRange,\n            previousValue: this._value\n        };\n\n        const updateValue = super.directionFlow(this._value, val, this.step);\n        if (this.animate && val >= this.step) {\n            super.runAnimation(valueInProperRange, updateValue);\n        } else {\n            this.updateProgressDirectly(valueInProperRange);\n        }\n\n        this.onProgressChanged.emit(changedValues);\n    }\n\n    private _circleRadius = 46;\n    private _circumference = 2 * Math.PI * this._circleRadius;\n\n    @ViewChild('circle', { static: true }) private _svgCircle: ElementRef;\n\n    constructor(private renderer: Renderer2) {\n        super();\n    }\n\n    /**\n     * @hidden\n     */\n    public updateProgressSmoothly(val: number, step: number) {\n        // Set frames for the animation\n        const FRAMES = [{\n            strokeDashoffset: this.getProgress(this._value),\n            strokeOpacity: (this._value / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION\n        }, {\n            strokeDashoffset: this.getProgress(this.valueInPercent),\n            strokeOpacity: (this.valueInPercent / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION\n        }];\n        this._svgCircle.nativeElement.animate(FRAMES, {\n            easing: 'ease-out',\n            fill: 'forwards'\n        });\n\n        super.updateProgressSmoothly(val, step);\n    }\n\n    /**\n     * @hidden\n    */\n    public get textContent(): string {\n        return this.text;\n    }\n\n    /**\n     * @hidden\n    */\n    public updateProgressDirectly(val: number) {\n        super.updateProgressDirectly(val);\n\n        this.renderer.setStyle(\n            this._svgCircle.nativeElement,\n            'stroke-dashoffset',\n            this.getProgress(this.valueInPercent));\n\n        this.renderer.setStyle(\n            this._svgCircle.nativeElement,\n            'stroke-opacity',\n            (this.valueInPercent / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION);\n    }\n\n    private getProgress(percentage: number) {\n        // Reverse the sign here: '-' should become '+' in RTL mode\n        return this._circumference - (percentage * this._circumference / 100);\n    }\n}\n\nexport function getValueInProperRange(value: number, max: number, min = 0): number {\n    return Math.max(Math.min(value, max), min);\n}\n\nexport function convertInPercentage(value: number, max: number) {\n    return Math.floor(100 * value / max);\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxLinearProgressBarComponent, IgxCircularProgressBarComponent, IgxProcessBarTextTemplateDirective],\n    exports: [IgxLinearProgressBarComponent, IgxCircularProgressBarComponent, IgxProcessBarTextTemplateDirective],\n    imports: [CommonModule]\n})\nexport class IgxProgressBarModule {\n}\n","import { Component } from '@angular/core';\nimport { IgxDropDownGroupComponent } from '../drop-down/index';\n\n/**\n * The `<igx-select-item>` is a container intended for row items in\n * a `<igx-select>` container.\n */\n@Component({\n    selector: 'igx-select-item-group',\n    template: `\n        <label id=\"{{labelId}}\">{{ label }}</label>\n        <ng-content select=\"igx-select-item\"></ng-content>\n    `\n})\nexport class IgxSelectGroupComponent extends IgxDropDownGroupComponent {\n}\n","import { IgxDropDownItemNavigationDirective } from '../drop-down/drop-down-navigation.directive';\nimport { Directive, Input, HostListener, OnDestroy } from '@angular/core';\nimport { Subscription, timer } from 'rxjs';\nimport { IgxSelectItemComponent } from './select-item.component';\nimport { IgxSelectBase } from './select.common';\n\n/** @hidden @internal */\n@Directive({\n    selector: '[igxSelectItemNavigation]'\n})\nexport class IgxSelectItemNavigationDirective extends IgxDropDownItemNavigationDirective implements OnDestroy {\n\n    @Input('igxSelectItemNavigation')\n    public target: IgxSelectBase;\n\n    constructor() { super(null); }\n\n    /** Captures keydown events and calls the appropriate handlers on the target component */\n    handleKeyDown(event: KeyboardEvent) {\n        if (!event || event.shiftKey) {\n            return;\n        }\n\n        const key = event.key.toLowerCase();\n        if (event.altKey && (key === 'arrowdown' || key === 'arrowup' || key === 'down' || key === 'up')) {\n            this.target.toggle();\n            return;\n        }\n\n        if (this.target.collapsed) {\n            switch (key) {\n                case 'space':\n                case 'spacebar':\n                case ' ':\n                case 'enter':\n                    event.preventDefault();\n                    this.target.open();\n                    return;\n                case 'arrowdown':\n                case 'down':\n                    this.target.navigateNext();\n                    this.target.selectItem(this.target.focusedItem);\n                    event.preventDefault();\n                    return;\n                case 'arrowup':\n                case 'up':\n                    this.target.navigatePrev();\n                    this.target.selectItem(this.target.focusedItem);\n                    event.preventDefault();\n                    return;\n                default:\n                    break;\n            }\n        }\n\n        super.handleKeyDown(event);\n    }\n\n    // tslint:disable:member-ordering\n    private inputStream = '';\n    private clearStream$ = Subscription.EMPTY;\n\n    /** Handle continuous letter typing navigation */\n    @HostListener('keyup', ['$event'])\n    public captureKey(event: KeyboardEvent) {\n        // relying only on key, available on all major browsers:\n        // https://caniuse.com/#feat=keyboardevent-key (IE/Edge quirk doesn't affect letter typing)\n        if (!event || !event.key || event.key.length > 1) {\n            // ignore longer keys ('Alt', 'ArrowDown', etc)\n            return;\n        }\n\n        this.clearStream$.unsubscribe();\n        this.clearStream$ = timer(500).subscribe(() => {\n            this.inputStream = '';\n        });\n        this.inputStream += event.key;\n        const focusedItem = this.target.focusedItem as IgxSelectItemComponent;\n\n        // select the item\n        if (focusedItem && this.inputStream.length > 1 && focusedItem.itemText.toLowerCase().startsWith(this.inputStream.toLowerCase())) {\n            return;\n        }\n        this.activateItemByText(this.inputStream);\n    }\n\n    public activateItemByText(text: string) {\n        const items = this.target.items as IgxSelectItemComponent[];\n        const activeItemIndex = items.indexOf(this.target.focusedItem as IgxSelectItemComponent) || 0;\n        // ^ this is focused OR selected if the dd is closed\n        let nextItem = items.slice(activeItemIndex + 1).find(x => !x.disabled && (x.itemText.toLowerCase().startsWith(text.toLowerCase())));\n\n        if (!nextItem) {\n            nextItem = items.slice(0, activeItemIndex).find(x => !x.disabled && (x.itemText.toLowerCase().startsWith(text.toLowerCase())));\n        }\n\n        if (!nextItem) {\n            return;\n        }\n\n        if (this.target.collapsed) {\n            this.target.selectItem(nextItem);\n        }\n        this.target.navigateItem(items.indexOf(nextItem));\n    }\n\n    ngOnDestroy(): void {\n        this.clearStream$.unsubscribe();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxDropDownModule } from './../drop-down/index';\nimport { IgxToggleModule } from './../directives/toggle/toggle.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { IgxButtonModule } from '../directives/button/button.directive';\n\nimport { IgxSelectComponent, IgxSelectToggleIconDirective } from './select.component';\nimport { IgxSelectItemComponent } from './select-item.component';\nimport { IgxSelectItemNavigationDirective } from './select-navigation.directive';\nimport { IgxSelectGroupComponent } from './select-group.component';\n\n/** @hidden */\n@NgModule({\n    declarations: [IgxSelectComponent, IgxSelectItemComponent, IgxSelectItemNavigationDirective,\n        IgxSelectToggleIconDirective, IgxSelectGroupComponent],\n    exports: [IgxSelectComponent, IgxSelectItemComponent, IgxSelectItemNavigationDirective,\n         IgxSelectToggleIconDirective, IgxSelectGroupComponent],\n    imports: [IgxRippleModule, CommonModule, IgxInputGroupModule, FormsModule, ReactiveFormsModule,\n        IgxToggleModule, IgxDropDownModule, IgxButtonModule, IgxIconModule],\n    providers: []\n})\nexport class IgxSelectModule { }\n","import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Component, Input, Output, NgModule, Optional, Inject, EventEmitter, HostBinding } from '@angular/core';\nimport { CurrentResourceStrings } from '../core/i18n/resources';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase, DisplayDensity } from '../core/displayDensity';\nimport { IgxSelectModule } from '../select/index';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\n\n@Component({\n    selector: 'igx-paginator',\n    templateUrl: 'paginator.component.html',\n})\nexport class IgxPaginatorComponent extends DisplayDensityBase {\n\n    /**\n     * Total pages calculated from totalRecords and perPage\n     */\n    public totalPages: number;\n    protected _page = 0;\n    protected _totalRecords: number;\n    protected _selectOptions;\n    private defaultSelectValues = [5, 10, 15, 25, 50, 100, 500];\n    protected _perPage = 15;\n\n    /**\n     * Sets the class of the IgxPaginatorComponent based\n     * on the provided displayDensity.\n     */\n    @HostBinding('class.igx-paginator--cosy')\n    public get classCosy(): boolean {\n        return this.displayDensity === DisplayDensity.cosy;\n    }\n\n    @HostBinding('class.igx-paginator--compact')\n    public get classCompact(): boolean {\n        return this.displayDensity === DisplayDensity.compact;\n    }\n\n    @HostBinding('class.igx-paginator')\n    public get classComfortable(): boolean {\n        return this.displayDensity === DisplayDensity.comfortable;\n    }\n\n    /**\n   * An @Input property, sets current page of the `IgxPaginatorComponent`.\n   * The default is 0.\n   * ```typescript\n   * let page = this.paginator.page;\n   * ```\n   * @memberof IgxPaginatorComponent\n   */\n    @Input()\n    public get page() {\n        return this._page;\n    }\n\n    public set page(value: number) {\n        this._page = value;\n        this.pageChange.emit(this._page);\n    }\n\n    /**\n   * An @Input property, sets number of visible items per page in the `IgxPaginatorComponent`.\n   * The default is 15.\n   * ```typescript\n   * let itemsPerPage = this.paginator.perPage;\n   * ```\n   * @memberof IgxPaginatorComponent\n   */\n    @Input()\n    public get perPage() {\n        return this._perPage;\n    }\n\n    public set perPage(value: number) {\n        this._perPage = Number(value);\n        this.perPageChange.emit(this._perPage);\n        this._selectOptions = this.sortUniqueOptions(this.defaultSelectValues, this._perPage);\n        this.totalPages = Math.ceil(this.totalRecords / this._perPage);\n    }\n\n    /**\n    * An @Input property that sets the total records.\n    * ```typescript\n    * let totalRecords = this.paginator.totalRecords;\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public get totalRecords() {\n        return this._totalRecords;\n    }\n\n    public set totalRecords(value: number) {\n        this._totalRecords = value;\n        this.totalPages = Math.ceil(this.totalRecords / this.perPage);\n    }\n\n    /**\n    * An @Input property that sets custom options in the select of the paginator\n    * ```typescript\n    * let options = this.paginator.selectOptions;\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public get selectOptions() {\n        return this._selectOptions;\n    }\n\n    public set selectOptions(value: Array<number>) {\n        this._selectOptions = this.sortUniqueOptions(value, this._perPage);\n        this.defaultSelectValues = [...this._selectOptions];\n    }\n    /**\n    * An @Input property that sets if the pager in the paginator should be enabled.\n    * ```html\n    * <igx-paginator [pagerEnabled]=\"true\"></igx-paginator>\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public pagerEnabled = true;\n\n    /**\n    * An @Input property that sets if the pager in the paginator should be hidden.\n    * ```html\n    * <igx-paginator [pagerHidden]=\"true\"></igx-paginator>\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public pagerHidden = false;\n\n    /**\n    * An @Input property that sets if the dropdown in the paginator should be enabled.\n    * ```html\n    * <igx-paginator [dropdownEnabled]=\"true\"></igx-paginator>\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public dropdownEnabled = true;\n\n    /**\n    * An @Input property that sets if the dropdown in the paginator should be hidden.\n    * ```html\n    * <igx-paginator [dropdownHidden]=\"true\"></igx-paginator>\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public dropdownHidden = false;\n\n    /**\n    * An @Input property, sets number of label of the select.\n    * The default is 'Items per page' localized string.\n    * ```html\n    * <igx-paginator label=\"My custom label\"></igx-paginator>\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public selectLabel = CurrentResourceStrings.PaginatorResStrings.igx_paginator_label;\n\n    /**\n     *An event that is emitted when the select in the `IgxPaginatorComponent` changes its value.\n    */\n    @Output()\n    public perPageChange = new EventEmitter<number>();\n    /**\n     *An event that is emitted when the paginating is used.\n    */\n    @Output()\n    public pageChange = new EventEmitter<number>();\n\n    constructor(@Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions\n    ) {\n        super(_displayDensityOptions);\n    }\n\n    /**\n     * Returns if the current page is the last page.\n     * ```typescript\n     * const lastPage = this.paginator.isLastPage;\n     * ```\n     */\n    get isLastPage(): boolean {\n        return this.page + 1 >= this.totalPages;\n    }\n\n    /**\n     * Returns if the current page is the first page.\n     * ```typescript\n     * const lastPage = this.paginator.isFirstPage;\n     * ```\n     */\n    get isFirstPage(): boolean {\n        return this.page === 0;\n    }\n\n    private sortUniqueOptions(values: Array<number>, newOption: number): number[] {\n        return Array.from(new Set([...values, newOption])).sort((a, b) => a - b);\n    }\n\n    /**\n     * Sets DisplayDensity for the <select> inside the paginator\n     * @hidden\n     */\n    public paginatorSelectDisplayDensity(): string {\n        if (this.displayDensity === DisplayDensity.comfortable) {\n            return DisplayDensity.cosy;\n        }\n        return DisplayDensity.compact;\n    }\n    /**\n     * Goes to the next page of the `IgxPaginatorComponent`, if the paginator is not already at the last page.\n     * ```typescript\n     * this.paginator.nextPage();\n     * ```\n\t * @memberof IgxPaginatorComponent\n     */\n    public nextPage(): void {\n        if (!this.isLastPage) {\n            this.page += 1;\n        }\n    }\n    /**\n     * Goes to the previous page of the `IgxPaginatorComponent`, if the paginator is not already at the first page.\n     * ```typescript\n     * this.paginator.previousPage();\n     * ```\n\t * @memberof IgxPaginatorComponent\n     */\n    public previousPage(): void {\n        if (!this.isFirstPage) {\n            this.page -= 1;\n        }\n    }\n    /**\n     * Goes to the desired page index.\n     * ```typescript\n     * this.pagiantor.paginate(1);\n     * ```\n     * @param val\n     * @memberof IgxPaginatorComponent\n     */\n    public paginate(val: number): void {\n        if (val < 0 || val > this.totalPages - 1) {\n            return;\n        }\n        this.page = val;\n    }\n}\n\n@NgModule({\n    declarations: [IgxPaginatorComponent],\n    exports: [IgxPaginatorComponent],\n    imports: [CommonModule, IgxSelectModule, FormsModule, IgxIconModule, IgxButtonModule, IgxRippleModule]\n})\nexport class IgxPaginatorModule { }\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { DataUtil } from '../data-operations/data-util';\nimport { cloneArray } from '../core/utils';\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'igxCellStyleClasses'\n})\nexport class IgxGridCellStyleClassesPipe implements PipeTransform {\n\n    transform(cssClasses: { [prop: string]: any }, value: any, data: any, field: string, index: number): string {\n        if (!cssClasses) {\n            return '';\n        }\n\n        const result = [];\n\n        for (const cssClass of Object.keys(cssClasses)) {\n            const callbackOrValue = cssClasses[cssClass];\n            const apply = typeof callbackOrValue === 'function' ? callbackOrValue(data, field, value, index) : callbackOrValue;\n            if (apply) {\n                result.push(cssClass);\n            }\n        }\n\n        return result.join(' ');\n    }\n}\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'igxCellStyles'\n})\nexport class IgxGridCellStylesPipe implements PipeTransform {\n\n    transform(styles: { [prop: string]: any }, value: any, data: any, field: string, index: number): { [prop: string]: any } {\n        const css = {};\n        if (!styles) {\n            return css;\n        }\n\n        for (const prop of Object.keys(styles)) {\n            const res = styles[prop];\n            css[prop] = typeof res === 'function' ? res(data, field, value, index) : res;\n        }\n\n        return css;\n    }\n}\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'igxNotGrouped'\n})\nexport class IgxGridNotGroupedPipe implements PipeTransform {\n\n    transform(value: any[]): any[] {\n        return value.filter(item => !item.columnGroup);\n    }\n}\n\n@Pipe({\n    name: 'igxTopLevel'\n})\nexport class IgxGridTopLevelColumns implements PipeTransform {\n\n    transform(value: any[]): any[] {\n        return value.filter(item => item.level === 0);\n    }\n}\n/**\n *@hidden\n */\n@Pipe({\n    name: 'filterCondition',\n    pure: true\n})\nexport class IgxGridFilterConditionPipe implements PipeTransform {\n\n    public transform(value: string): string {\n        return value.split(/(?=[A-Z])/).join(' ');\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'gridTransaction',\n    pure: true\n})\nexport class IgxGridTransactionPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) { }\n\n    transform(collection: any[], id: string, pipeTrigger: number) {\n        const grid: IgxGridBaseComponent = this.gridAPI.grid;\n\n        if ( grid.transactions.enabled) {\n            const result = DataUtil.mergeTransactions(\n                cloneArray(collection),\n                grid.transactions.getAggregatedChanges(true),\n                grid.primaryKey);\n            return result;\n        }\n        return collection;\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'paginatorOptions',\n    pure: true,\n})\nexport class IgxGridPaginatorOptionsPipe implements PipeTransform {\n    public transform(values: Array<number>) {\n        return Array.from(new Set([...values])).sort((a, b) => a - b);\n    }\n}\n\n@Pipe({\n    name: 'visibleColumns',\n    pure: true\n})\nexport class IgxHasVisibleColumnsPipe implements PipeTransform {\n    transform(values: any[], hasVisibleColumns) {\n        if (!(values && values.length)) {\n            return values;\n        }\n        return hasVisibleColumns ? values : [];\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IgxDatePipeComponent, IgxDecimalPipeComponent } from './grid.common';\nimport {\n    IgxGridFilterConditionPipe,\n    IgxGridTransactionPipe,\n    IgxGridNotGroupedPipe,\n    IgxGridTopLevelColumns,\n    IgxGridCellStylesPipe,\n    IgxGridCellStyleClassesPipe,\n    IgxGridPaginatorOptionsPipe,\n    IgxHasVisibleColumnsPipe\n} from './grid-common.pipes';\n\n@NgModule({\n    declarations: [\n        IgxDatePipeComponent,\n        IgxDecimalPipeComponent,\n        IgxGridFilterConditionPipe,\n        IgxGridTransactionPipe,\n        IgxGridNotGroupedPipe,\n        IgxGridTopLevelColumns,\n        IgxGridCellStylesPipe,\n        IgxGridCellStyleClassesPipe,\n        IgxGridPaginatorOptionsPipe,\n        IgxHasVisibleColumnsPipe\n    ],\n    exports: [\n        IgxDatePipeComponent,\n        IgxDecimalPipeComponent,\n        IgxGridFilterConditionPipe,\n        IgxGridTransactionPipe,\n        IgxGridNotGroupedPipe,\n        IgxGridTopLevelColumns,\n        IgxGridCellStylesPipe,\n        IgxGridCellStyleClassesPipe,\n        IgxGridPaginatorOptionsPipe,\n        IgxHasVisibleColumnsPipe\n    ],\n    imports: [\n        CommonModule\n    ]\n  })\nexport class IgxGridPipesModule { }\n","import { Component, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { IgxColumnComponent, IgxColumnGroupComponent } from '../../column.component';\nimport { IgxGridBaseComponent } from '../../grid-base.component';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-column-moving',\n    templateUrl: './excel-style-column-moving.component.html'\n})\nexport class IgxExcelStyleColumnMovingComponent {\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public grid: IgxGridBaseComponent;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @Input()\n    public isColumnPinnable: boolean;\n\n    constructor() {}\n\n    private get visibleColumns() {\n        return this.grid.visibleColumns.filter(col => !(col instanceof IgxColumnGroupComponent));\n    }\n\n    get canNotMoveLeft() {\n        return this.column.visibleIndex === 0 ||\n            (this.grid.unpinnedColumns.indexOf(this.column) === 0 && this.column.disablePinning) ||\n            (this.grid.unpinnedColumns.indexOf(this.column) === 0 && !this.isColumnPinnable) ||\n            (this.column.level !== 0 && !this.findColumn(0, this.visibleColumns));\n    }\n\n    get canNotMoveRight() {\n        return this.column.visibleIndex === this.visibleColumns.length - 1 ||\n            (this.column.level !== 0 && !this.findColumn(1, this.visibleColumns));\n    }\n\n    public onMoveButtonClicked(moveDirection) {\n        let targetColumn;\n        if (this.column.pinned) {\n            if (this.column.isLastPinned && moveDirection === 1) {\n                targetColumn = this.grid.unpinnedColumns[0];\n                moveDirection = 0;\n            } else {\n                targetColumn = this.findColumn(moveDirection, this.grid.pinnedColumns);\n            }\n        } else if (this.grid.unpinnedColumns.indexOf(this.column) === 0 && moveDirection === 0) {\n            targetColumn = this.grid.pinnedColumns[this.grid.pinnedColumns.length - 1];\n            if (targetColumn.parent) {\n                targetColumn = targetColumn.topLevelParent;\n            }\n            moveDirection = 1;\n        } else {\n            targetColumn = this.findColumn(moveDirection, this.grid.unpinnedColumns);\n        }\n        this.grid.moveColumn(this.column, targetColumn, moveDirection);\n    }\n\n    private findColumn(moveDirection: number, columns: IgxColumnComponent[]) {\n        let index = columns.indexOf(this.column);\n        if (moveDirection === 0) {\n            while (index > 0) {\n                index--;\n                if (columns[index].level === this.column.level && columns[index].parent === this.column.parent) {\n                    return columns[index];\n                }\n            }\n        } else {\n            while (index < columns.length - 1) {\n                index++;\n                if (columns[index].level === this.column.level && columns[index].parent === this.column.parent) {\n                    return columns[index];\n                }\n            }\n        }\n    }\n}\n","import { Directive, TemplateRef, EventEmitter, QueryList, Optional, Inject } from '@angular/core';\nimport { DisplayDensityBase, IDisplayDensityOptions, DisplayDensityToken } from '../core/density';\n\nexport interface IListChild {\n    index: number;\n}\n\n/** @hidden */\nexport abstract class IgxListBase extends DisplayDensityBase {\n    onItemClicked: EventEmitter<any>;\n    allowLeftPanning: boolean;\n    allowRightPanning: boolean;\n    panEndTriggeringThreshold: number;\n    onLeftPan: EventEmitter<any>;\n    onRightPan: EventEmitter<any>;\n    onPanStateChange: EventEmitter<any>;\n    children: QueryList<any>;\n    listItemLeftPanningTemplate: IgxListItemLeftPanningTemplateDirective;\n    listItemRightPanningTemplate: IgxListItemRightPanningTemplateDirective;\n\n    constructor(@Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n    }\n}\n\nexport enum IgxListPanState { NONE, LEFT, RIGHT }\n\n@Directive({\n    selector: '[igxEmptyList]'\n})\nexport class IgxEmptyListTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxDataLoading]'\n})\nexport class IgxDataLoadingTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxListItemLeftPanning]'\n})\nexport class IgxListItemLeftPanningTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxListItemRightPanning]'\n})\nexport class IgxListItemRightPanningTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    Renderer2,\n    ViewChild\n} from '@angular/core';\n\nimport {\n    IgxListPanState,\n    IListChild,\n    IgxListBase\n} from './list.common';\n\nimport { HammerGesturesManager } from '../core/touch';\n\n/**\n * The Ignite UI List Item component is a container intended for row items in the Ignite UI for Angular List component.\n *\n * Example:\n * ```html\n * <igx-list>\n *   <igx-list-item isHeader=\"true\">Contacts</igx-list-item>\n *   <igx-list-item *ngFor=\"let contact of contacts\">\n *     <span class=\"name\">{{ contact.name }}</span>\n *     <span class=\"phone\">{{ contact.phone }}</span>\n *   </igx-list-item>\n * </igx-list>\n * ```\n */\n@Component({\n    providers: [HammerGesturesManager],\n    selector: 'igx-list-item',\n    templateUrl: 'list-item.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class IgxListItemComponent implements IListChild {\n\n    /**\n     *@hidden\n     */\n    private _panState: IgxListPanState = IgxListPanState.NONE;\n\n    /**\n     *@hidden\n     */\n    private panOffset = 0;\n\n    /**\n     * @hidden\n     */\n    private _index: number = null;\n\n    /**\n     *@hidden\n     */\n    private lastPanDir = IgxListPanState.NONE;\n\n    /**\n     * Provides a reference to the template's base element shown when left panning a list item.\n     * ```typescript\n     * const leftPanTmpl = this.listItem.leftPanningTemplateElement;\n     * ```\n     */\n    @ViewChild('leftPanningTmpl', { static: false })\n    public leftPanningTemplateElement;\n\n    /**\n     * Provides a reference to the template's base element shown when right panning a list item.\n     * ```typescript\n     * const rightPanTmpl = this.listItem.rightPanningTemplateElement;\n     * ```\n     */\n    @ViewChild('rightPanningTmpl', { static: false })\n    public rightPanningTemplateElement;\n\n    constructor(\n        public list: IgxListBase,\n        private elementRef: ElementRef,\n        private _renderer: Renderer2) {\n    }\n\n    /**\n     * Sets/gets whether the `list item` is a header.\n     * ```html\n     * <igx-list-item [isHeader] = \"true\">Header</igx-list-item>\n     * ```\n     * ```typescript\n     * let isHeader =  this.listItem.isHeader;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @Input()\n    public isHeader: boolean;\n\n    /**\n     * Sets/gets whether the `list item` is hidden.\n     * By default the `hidden` value is `false`.\n     * ```html\n     * <igx-list-item [hidden] = \"true\">Hidden Item</igx-list-item>\n     * ```\n     * ```typescript\n     * let isHidden =  this.listItem.hidden;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @Input()\n    public hidden = false;\n\n    /**\n     * Gets the `role` attribute of the `list item`.\n     * ```typescript\n     * let itemRole =  this.listItem.role;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('attr.role')\n    public get role() {\n        return this.isHeader ? 'separator' : 'listitem';\n    }\n\n    /**\n     * Sets/gets the `aria-label` attribute of the `list item`.\n     * ```typescript\n     * this.listItem.ariaLabel = \"Item1\";\n     * ```\n     * ```typescript\n     * let itemAriaLabel = this.listItem.ariaLabel;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel: string;\n\n    /**\n     * Gets the `touch-action` style of the `list item`.\n     * ```typescript\n     * let touchAction = this.listItem.touchAction;\n     * ```\n     */\n    @HostBinding('style.touch-action')\n    public touchAction = 'pan-y';\n\n    /**\n     * Indicates whether `list item` should have header style.\n     * ```typescript\n     * let headerStyle =  this.listItem.headerStyle;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('class.igx-list__header')\n    get headerStyle(): boolean {\n        return this.isHeader;\n    }\n\n    /**\n     * Applies the inner style of the `list item` if the item is not counted as header.\n     * ```typescript\n     * let innerStyle =  this.listItem.innerStyle;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('class.igx-list__item-base')\n    get innerStyle(): boolean {\n        return !this.isHeader;\n    }\n\n    /**\n     * Returns string value which describes the display mode of the `list item`.\n     * ```typescript\n     * let isHidden = this.listItem.display;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('style.display')\n    get display(): string {\n        return this.hidden ? 'none' : '';\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('click', ['$event'])\n    clicked(evt) {\n        this.list.onItemClicked.emit({ item: this, event: evt, direction: this.lastPanDir });\n        this.lastPanDir = IgxListPanState.NONE;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('panstart', ['$event'])\n    panStart(ev) {\n        if (this.isTrue(this.isHeader)) {\n            return;\n        }\n        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {\n            return;\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('panmove', ['$event'])\n    panMove(ev) {\n        if (this.isTrue(this.isHeader)) {\n            return;\n        }\n        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {\n            return;\n        }\n        const isPanningToLeft = ev.deltaX < 0;\n        if (isPanningToLeft && this.isTrue(this.list.allowLeftPanning)) {\n            this.showLeftPanTemplate();\n            this.setContentElementLeft(Math.max(this.maxLeft, ev.deltaX));\n        } else if (!isPanningToLeft && this.isTrue(this.list.allowRightPanning)) {\n            this.showRightPanTemplate();\n            this.setContentElementLeft(Math.min(this.maxRight, ev.deltaX));\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('panend', ['$event'])\n    panEnd(ev) {\n        if (this.isTrue(this.isHeader)) {\n            return;\n        }\n        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {\n            return;\n        }\n\n        // the translation offset of the current list item content\n        const relativeOffset = this.panOffset;\n        const widthTriggeringGrip = this.width * this.list.panEndTriggeringThreshold;\n\n        if (relativeOffset === 0) {\n            return; // no panning has occured\n        }\n\n        const dir = relativeOffset > 0 ? IgxListPanState.RIGHT : IgxListPanState.LEFT;\n        this.lastPanDir = dir;\n\n        const oldPanState = this._panState;\n        if (Math.abs(relativeOffset) < widthTriggeringGrip) {\n            this.setContentElementLeft(0);\n            this._panState = IgxListPanState.NONE;\n            this.hideLeftAndRightPanTemplates();\n            return;\n        }\n\n        const args = { item: this, direction: dir, keepItem: false};\n\n        if (dir === IgxListPanState.LEFT) {\n            this.list.onLeftPan.emit(args);\n        } else {\n            this.list.onRightPan.emit(args);\n        }\n\n        if (args.keepItem === true) {\n            this.setContentElementLeft(0);\n            this._panState = IgxListPanState.NONE;\n        } else {\n            if (dir === IgxListPanState.LEFT) {\n                this.setContentElementLeft(this.maxLeft);\n                this._panState = IgxListPanState.LEFT;\n            } else {\n                this.setContentElementLeft(this.maxRight);\n                this._panState = IgxListPanState.RIGHT;\n            }\n        }\n\n        if (oldPanState !== this._panState) {\n            const args2 = { oldState: oldPanState, newState: this._panState, item: this };\n            this.list.onPanStateChange.emit(args2);\n        }\n        this.hideLeftAndRightPanTemplates();\n    }\n\n    /**\n     *@hidden\n     */\n    private showLeftPanTemplate() {\n        this.setLeftAndRightTemplatesVisibility('visible', 'hidden');\n    }\n\n    /**\n     *@hidden\n     */\n    private showRightPanTemplate() {\n        this.setLeftAndRightTemplatesVisibility('hidden', 'visible');\n    }\n\n    /**\n     *@hidden\n     */\n    private hideLeftAndRightPanTemplates() {\n        setTimeout(() => {\n            this.setLeftAndRightTemplatesVisibility('hidden', 'hidden');\n        }, 500);\n    }\n\n    /**\n     *@hidden\n     */\n    private setLeftAndRightTemplatesVisibility(leftVisibility, rightVisibility) {\n        if (this.leftPanningTemplateElement && this.leftPanningTemplateElement.nativeElement) {\n            this.leftPanningTemplateElement.nativeElement.style.visibility = leftVisibility;\n        }\n        if (this.rightPanningTemplateElement && this.rightPanningTemplateElement.nativeElement) {\n            this.rightPanningTemplateElement.nativeElement.style.visibility = rightVisibility;\n        }\n    }\n\n    /**\n     * Gets the `panState` of a `list item`.\n     * ```typescript\n     * let itemPanState =  this.listItem.panState;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get panState(): IgxListPanState {\n        return this._panState;\n    }\n\n    /**\n     * Gets the `index` of a `list item`.\n     * ```typescript\n     * let itemIndex =  this.listItem.index;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @Input()\n    public get index(): number {\n        return this._index !== null ? this._index : this.list.children.toArray().indexOf(this);\n    }\n\n    /**\n     * Sets the `index` of the `list item`.\n     * ```typescript\n     * this.listItem.index = index;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public set index(value: number) {\n        this._index = value;\n    }\n\n    /**\n     * Returns an element reference to the list item.\n     * ```typescript\n     * let listItemElement =  this.listItem.element.\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Returns a reference container which contains the list item's content.\n     * ```typescript\n     * let listItemContainer =  this.listItem.contentElement.\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get contentElement() {\n        const candidates = this.element.getElementsByClassName('igx-list__item-content');\n        return (candidates && candidates.length > 0) ? candidates[0] : null;\n    }\n\n    /**\n     * Returns the `context` object which represents the `template context` binding into the `list item container`\n     * by providing the `$implicit` declaration which is the `IgxListItemComponent` itself.\n     * ```typescript\n     * let listItemComponent = this.listItem.context;\n     * ```\n     */\n    public get context(): any {\n        return {\n            $implicit: this\n        };\n    }\n\n    /**\n     * Gets the width of a `list item`.\n     * ```typescript\n     * let itemWidth = this.listItem.width;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get width() {\n        if (this.element) {\n            return this.element.offsetWidth;\n        }\n    }\n\n    /**\n     * Gets the maximum left position of the `list item`.\n     * ```typescript\n     * let maxLeft = this.listItem.maxLeft;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get maxLeft() {\n        return -this.width;\n    }\n\n    /**\n     * Gets the maximum right position of the `list item`.\n     * ```typescript\n     * let maxRight = this.listItem.maxRight;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get maxRight() {\n        return this.width;\n    }\n\n    /**\n     *@hidden\n     */\n    private setContentElementLeft(value: number) {\n        this.panOffset = value;\n        this.contentElement.style.transform = 'translateX(' + value + 'px)';\n    }\n\n    /**\n     *@hidden\n     */\n    private isTrue(value: boolean): boolean {\n        if (typeof (value) === 'boolean') {\n            return value;\n        } else {\n            return value === 'true';\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    Optional,\n    Inject, Directive\n} from '@angular/core';\n\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\n\nimport { IgxListItemComponent } from './list-item.component';\nimport {\n    IgxListBase,\n    IgxDataLoadingTemplateDirective,\n    IgxEmptyListTemplateDirective,\n    IgxListPanState,\n    IgxListItemLeftPanningTemplateDirective,\n    IgxListItemRightPanningTemplateDirective\n} from './list.common';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensity } from '../core/density';\nimport { IBaseEventArgs } from '../core/utils';\n\nlet NEXT_ID = 0;\nexport interface IPanStateChangeEventArgs extends IBaseEventArgs {\n    oldState: IgxListPanState;\n    newState: IgxListPanState;\n    item: IgxListItemComponent;\n}\n\nexport interface IListItemClickEventArgs extends IBaseEventArgs {\n    item: IgxListItemComponent;\n    event: Event;\n    direction: IgxListPanState;\n}\n\nexport interface IListItemPanningEventArgs extends IBaseEventArgs {\n    item: IgxListItemComponent;\n    direction: IgxListPanState;\n    keepItem: boolean;\n}\n\n/**\n * **Ignite UI for Angular List** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/list.html)\n *\n * The Ignite UI List displays rows of items and supports one or more header items as well as search and filtering\n * of list items. Each list item is completely templateable and will support any valid HTML or Angular component.\n *\n * Example:\n * ```html\n * <igx-list>\n *   <igx-list-item isHeader=\"true\">Contacts</igx-list-item>\n *   <igx-list-item *ngFor=\"let contact of contacts\">\n *     <span class=\"name\">{{ contact.name }}</span>\n *     <span class=\"phone\">{{ contact.phone }}</span>\n *   </igx-list-item>\n * </igx-list>\n * ```\n */\n\n/**\n * igxListThumbnail is container for the List media\n * Use it to wrap anything you want to be used as a thumbnail.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListThumbnail]'\n})\n\nexport class IgxListThumbnailDirective {}\n\n/**\n * igxListAction is container for the List action\n * Use it to wrap anything you want to be used as a list action: icon, checkbox...\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListAction]'\n})\n\nexport class IgxListActionDirective {}\n\n/**\n * igxListLine is container for the List text content\n * Use it to wrap anything you want to be used as a plane text.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListLine]'\n})\n\nexport class IgxListLineDirective {}\n\n/**\n * igxListLineTitle is a directive that add class to the target element\n * Use it to make anything to look like list Title.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListLineTitle]'\n})\n\nexport class IgxListLineTitleDirective {\n    @HostBinding('class.igx-list__item-line-title')\n    public cssClass = 'igx-list__item-line-title';\n}\n\n/**\n * igxListLineSubTitle is a directive that add class to the target element\n * Use it to make anything to look like list Subtitle.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListLineSubTitle]'\n})\n\nexport class IgxListLineSubTitleDirective {\n    @HostBinding('class.igx-list__item-line-subtitle')\n    public cssClass = 'igx-list__item-line-subtitle';\n}\n\n@Component({\n    selector: 'igx-list',\n    templateUrl: 'list.component.html',\n    providers: [{ provide: IgxListBase, useExisting: IgxListComponent }]\n})\nexport class IgxListComponent extends IgxListBase {\n\n    constructor(public element: ElementRef,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n    }\n\n    /**\n     * Returns a collection of all items and headers in the list.\n     * ```typescript\n     * let listChildren: QueryList = this.list.children;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChildren(forwardRef(() => IgxListItemComponent))\n    public children: QueryList<IgxListItemComponent>;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected get sortedChildren(): IgxListItemComponent[] {\n        if (this.children !== undefined) {\n            return this.children.toArray()\n                .sort((a: IgxListItemComponent, b: IgxListItemComponent) => {\n                    return a.index - b.index;\n                });\n        }\n        return null;\n    }\n\n    /**\n     * Returns the template which will be used by the IgxList in case there are no list items defined and `isLoading` is set to `false`.\n     * ```typescript\n     * let emptyTemplate = this.list.emptyListTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxEmptyListTemplateDirective, { read: IgxEmptyListTemplateDirective, static: false })\n    public emptyListTemplate: IgxEmptyListTemplateDirective;\n\n    /**\n     * Returns the template which will be used by the IgxList in case there are no list items defined and `isLoading` is set to `true`.\n     * ```typescript\n     * let loadingTemplate = this.list.dataLoadingTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxDataLoadingTemplateDirective, { read: IgxDataLoadingTemplateDirective, static: false })\n    public dataLoadingTemplate: IgxDataLoadingTemplateDirective;\n\n    /**\n     * Sets/gets the template shown when left panning a list item.\n     * Default value is `null`.\n     * ```html\n     *  <igx-list [allowLeftPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let itemLeftPanTmpl = this.list.listItemLeftPanningTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxListItemLeftPanningTemplateDirective, { read: IgxListItemLeftPanningTemplateDirective, static: false })\n    public listItemLeftPanningTemplate: IgxListItemLeftPanningTemplateDirective;\n\n    /**\n     * Sets/gets the template shown when right panning a list item.\n     * Default value is `null`.\n     * ```html\n     *  <igx-list [allowLeftPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let itemRightPanTmpl = this.list.listItemRightPanningTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxListItemRightPanningTemplateDirective, { read: IgxListItemRightPanningTemplateDirective, static: false })\n    public listItemRightPanningTemplate: IgxListItemRightPanningTemplateDirective;\n\n    /**\n     * Provides a threshold after which the item's panning will be completed automatically.\n     * By default this property is set to 0.5 which is 50% of the list item's width.\n     * ```typescript\n     * this.list.panEndTriggeringThreshold = 0.8;\n     * ```\n     */\n    @Input()\n    public panEndTriggeringThreshold = 0.5;\n\n    /**@hidden*/\n    @ViewChild('defaultEmptyList', { read: TemplateRef, static: true })\n    protected defaultEmptyListTemplate: TemplateRef<any>;\n\n    /**@hidden*/\n    @ViewChild('defaultDataLoading', { read: TemplateRef, static: true })\n    protected defaultDataLoadingTemplate: TemplateRef<any>;\n\n    /**\n     * Sets/gets the `id` of the list.\n     * If not set, the `id` of the first list component will be `\"igx-list-0\"`.\n     * ```html\n     * <igx-list id = \"my-first-list\"></igx-list>\n     * ```\n     * ```typescript\n     * let listId =  this.list.id;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-list-${NEXT_ID++}`;\n\n    /**\n     * Sets/gets whether the left panning of an item is allowed.\n     * Default value is `false`.\n     * ```html\n     *  <igx-list [allowLeftPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let isLeftPanningAllowed = this.list.allowLeftPanning;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Input()\n    public allowLeftPanning = false;\n\n    /**\n     * Sets/gets whether the right panning of an item is allowed.\n     * Default value is `false`.\n     * ```html\n     *  <igx-list [allowRightPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let isRightPanningAllowed = this.list.allowRightPanning;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Input()\n    public allowRightPanning = false;\n\n    /**\n     * Sets/gets whether the list is currently loading data.\n     * Set it to display the dataLoadingTemplate while data is being retrieved.\n     * Default value is `false`.\n     * ```html\n     *  <igx-list [isLoading]=\"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let isLoading = this.list.isLoading;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Input()\n    public isLoading = false;\n\n    /**\n     * Emits an event within the current list when left pan gesture is executed on a list item.\n     * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.\n     * ```html\n     * <igx-list [allowLeftPanning]=\"true\" (onLeftPan)=\"onLeftPan($event)\"></igx-list>\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Output()\n    public onLeftPan = new EventEmitter<IListItemPanningEventArgs>();\n\n    /**\n     * Emits an event within the current list when right pan gesture is executed on a list item.\n     * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.\n     * ```html\n     * <igx-list [allowRightPanning]=\"true\" (onRightPan)=\"onRightPan($event)\"></igx-list>\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Output()\n    public onRightPan = new EventEmitter<IListItemPanningEventArgs>();\n\n    /**\n    * Emits an event within the current list when pan gesture is executed on list item.\n    * Provides references to the `IgxListItemComponent` and `IgxListPanState` as event arguments.\n    * ```html\n    * <igx-list (onPanStateChange) = \"onPanStateChange($event)\"></igx-list>\n    * ```\n    * @memberof IgxListComponent\n    */\n    @Output()\n    public onPanStateChange = new EventEmitter<IPanStateChangeEventArgs>();\n\n    /**\n     * Emits an event within the current list when a list item has been clicked.\n     * Provides references to the `IgxListItemComponent` and `Event` as event arguments.\n     *  ```html\n     * <igx-list (onItemClicked) = \"onItemClicked($event)\"></igx-list>\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Output()\n    public onItemClicked = new EventEmitter<IListItemClickEventArgs>();\n\n    /**\n     * Gets the `role` attribute.\n     * ```typescript\n     * let listRole =  this.list.role;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @HostBinding('attr.role')\n    public get role() {\n        return 'list';\n    }\n\n    /**\n     * Returns boolean indicating if the list is empty.\n     * ```typescript\n     * let isEmpty =  this.list.isListEmpty;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @HostBinding('class.igx-list-empty')\n    public get isListEmpty(): boolean {\n        return !this.children || this.children.length === 0;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-list')\n    public get cssClass(): boolean {\n        return !this.isListEmpty && this.displayDensity === DisplayDensity.comfortable;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-list--compact')\n    public get cssClassCompact(): boolean {\n        return !this.isListEmpty && this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-list--cosy')\n    public get cssClassCosy(): boolean {\n        return !this.isListEmpty && this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     * Returns the `items` in the list excluding the headers.\n     * ```typescript\n     * let listItems: IgxListItemComponent[] = this.list.items;\n     * ```\n     * @memberof IgxListComponent\n     */\n    public get items(): IgxListItemComponent[] {\n        const items: IgxListItemComponent[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.sortedChildren) {\n                if (!child.isHeader) {\n                    items.push(child);\n                }\n            }\n        }\n        return items;\n    }\n\n    /**\n     * Returns the headers in the list.\n     * ```typescript\n     * let listHeaders: IgxListItemComponent[] =  this.list.headers;\n     * ```\n     * @memberof IgxListComponent\n     */\n    public get headers(): IgxListItemComponent[] {\n        const headers: IgxListItemComponent[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (child.isHeader) {\n                    headers.push(child);\n                }\n            }\n        }\n        return headers;\n    }\n\n    /**\n     * Returns the `context` object which represents the `template context` binding into the `list container`\n     * by providing the `$implicit` declaration which is the `IgxListComponent` itself.\n     * ```typescript\n     * let listComponent =  this.list.context;\n     * ```\n     */\n    public get context(): any {\n        return {\n            $implicit: this\n        };\n    }\n\n    /**\n     * Returns the `template` of an empty list.\n     * ```typescript\n     * let listTemplate = this.list.template;\n     * ```\n     * @memberof IgxListComponent\n     */\n    public get template(): TemplateRef<any> {\n        if (this.isLoading) {\n            return this.dataLoadingTemplate ? this.dataLoadingTemplate.template : this.defaultDataLoadingTemplate;\n        } else {\n            return this.emptyListTemplate ? this.emptyListTemplate.template : this.defaultEmptyListTemplate;\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxListComponent,\n        IgxListItemComponent,\n        IgxListThumbnailDirective,\n        IgxListActionDirective,\n        IgxListLineDirective,\n        IgxListLineTitleDirective,\n        IgxListLineSubTitleDirective,\n        IgxDataLoadingTemplateDirective,\n        IgxEmptyListTemplateDirective,\n        IgxListItemLeftPanningTemplateDirective,\n        IgxListItemRightPanningTemplateDirective\n    ],\n    exports: [\n        IgxListComponent,\n        IgxListItemComponent,\n        IgxListThumbnailDirective,\n        IgxListActionDirective,\n        IgxListLineDirective,\n        IgxListLineTitleDirective,\n        IgxListLineSubTitleDirective,\n        IgxDataLoadingTemplateDirective,\n        IgxEmptyListTemplateDirective,\n        IgxListItemLeftPanningTemplateDirective,\n        IgxListItemRightPanningTemplateDirective\n    ],\n    imports: [\n        CommonModule,\n        IgxRippleModule\n    ]\n})\nexport class IgxListModule {\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { FilterListItem, IgxGridExcelStyleFilteringComponent } from './grid.excel-style-filtering.component';\nimport { cloneArray } from '../../../core/utils';\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'excelStyleSearchFilter'\n})\nexport class IgxExcelStyleSearchFilterPipe implements PipeTransform {\n\n    constructor(private esf: IgxGridExcelStyleFilteringComponent) { }\n\n    transform(items: FilterListItem[], searchText: string): any[] {\n        if (!items || !items.length) {\n            return [];\n        }\n\n        if (!searchText) {\n            this.esf.excelStyleSearch.filteredData = null;\n            return items;\n        }\n\n        searchText = searchText.toLowerCase();\n        const result = items.filter((it, i) => (i === 0 && it.isSpecial) ||\n            (it.value !== null && it.value !== undefined) &&\n            it.value.toString().toLowerCase().indexOf(searchText) > -1);\n\n        // If 'result' contains the 'Select All' item and at least one more, we use it as a 'finalResult',\n        // otherwise we use an empty array as a 'finalResult' of the filtering.\n        const finalResult = result.length > 1 ? result : [];\n\n        // Update the filteredData of the search component.\n        this.esf.excelStyleSearch.filteredData = cloneArray(finalResult);\n        this.esf.cdr.detectChanges();\n\n        return finalResult;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IgxExcelStyleLoadingValuesTemplateDirective } from './excel-style-search.component';\nimport {\n    IgxGridExcelStyleFilteringComponent,\n    IgxExcelStyleSortingTemplateDirective,\n    IgxExcelStyleHidingTemplateDirective,\n    IgxExcelStyleMovingTemplateDirective,\n    IgxExcelStylePinningTemplateDirective\n} from './grid.excel-style-filtering.component';\nimport { IgxExcelStyleSortingComponent } from './excel-style-sorting.component';\nimport { IgxExcelStyleColumnMovingComponent } from './excel-style-column-moving.component';\nimport { IgxExcelStyleSearchComponent } from './excel-style-search.component';\nimport { IgxExcelStyleCustomDialogComponent } from './excel-style-custom-dialog.component';\nimport { IgxExcelStyleDefaultExpressionComponent } from './excel-style-default-expression.component';\nimport { IgxExcelStyleDateExpressionComponent } from './excel-style-date-expression.component';\nimport { IgxSelectionAPIService } from '../../../core/selection';\nimport { FormsModule } from '@angular/forms';\nimport { IgxGridPipesModule } from '../../grid-pipes.module';\nimport { IgxButtonModule } from '../../../directives/button/button.directive';\nimport { IgxButtonGroupModule } from '../../../buttonGroup/buttonGroup.component';\nimport { IgxDatePickerModule } from '../../../date-picker/date-picker.component';\nimport { IgxIconModule } from '../../../icon/index';\nimport { IgxRippleModule } from '../../../directives/ripple/ripple.directive';\nimport { IgxInputGroupModule } from '../../../input-group/input-group.component';\nimport { IgxDropDownModule } from '../../../drop-down/index';\nimport { IgxForOfModule } from '../../../directives/for-of/for_of.directive';\nimport { IgxCheckboxModule } from '../../../checkbox/checkbox.component';\nimport { IgxFilterModule } from '../../../directives/filter/filter.directive';\nimport { IgxToggleModule } from '../../../directives/toggle/toggle.directive';\nimport { IgxListModule } from '../../../list/list.component';\nimport { IgxExcelStyleSearchFilterPipe } from './excel-style-search.pipe';\nimport { IgxProgressBarModule } from '../../../progressbar/progressbar.component';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxGridExcelStyleFilteringComponent,\n        IgxExcelStyleSortingComponent,\n        IgxExcelStyleColumnMovingComponent,\n        IgxExcelStyleSearchComponent,\n        IgxExcelStyleCustomDialogComponent,\n        IgxExcelStyleDefaultExpressionComponent,\n        IgxExcelStyleDateExpressionComponent,\n        IgxExcelStyleSortingTemplateDirective,\n        IgxExcelStyleHidingTemplateDirective,\n        IgxExcelStyleMovingTemplateDirective,\n        IgxExcelStylePinningTemplateDirective,\n        IgxExcelStyleLoadingValuesTemplateDirective,\n        IgxExcelStyleSearchFilterPipe\n    ],\n    exports: [\n        IgxGridExcelStyleFilteringComponent,\n        IgxExcelStyleSortingTemplateDirective,\n        IgxExcelStyleHidingTemplateDirective,\n        IgxExcelStyleMovingTemplateDirective,\n        IgxExcelStylePinningTemplateDirective,\n        IgxExcelStyleLoadingValuesTemplateDirective,\n        IgxExcelStyleDateExpressionComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        IgxGridPipesModule,\n        IgxButtonModule,\n        IgxButtonGroupModule,\n        IgxDatePickerModule,\n        IgxIconModule,\n        IgxRippleModule,\n        IgxInputGroupModule,\n        IgxDropDownModule,\n        IgxForOfModule,\n        IgxCheckboxModule,\n        IgxFilterModule,\n        IgxToggleModule,\n        IgxListModule,\n        IgxProgressBarModule\n    ],\n    entryComponents: [\n        IgxGridExcelStyleFilteringComponent\n    ],\n    providers: [\n        IgxSelectionAPIService\n    ]\n})\nexport class IgxGridExcelStyleFilteringModule {\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxBadgeModule } from '../badge/badge.component';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxDatePickerModule } from '../date-picker/date-picker.component';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxFocusModule } from '../directives/focus/focus.directive';\nimport { IgxForOfModule } from '../directives/for-of/for_of.directive';\nimport { IgxTemplateOutletModule } from '../directives/template-outlet/template_outlet.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxTextHighlightModule } from '../directives/text-highlight/text-highlight.directive';\nimport { IgxTextSelectionModule } from '../directives/text-selection/text-selection.directive';\nimport { IgxToggleModule } from '../directives/toggle/toggle.directive';\nimport { IgxDropDownModule } from '../drop-down/index';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxColumnComponent, IgxColumnGroupComponent, IgxColumnLayoutComponent } from './column.component';\nimport { IgxColumnHidingModule } from './column-hiding.component';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { IgxGridToolbarComponent } from './grid-toolbar.component';\nimport { IgxGridFilteringCellComponent } from './filtering/grid-filtering-cell.component';\nimport { IgxGridFilteringRowComponent } from './filtering/grid-filtering-row.component';\nimport { IgxGridFooterComponent } from './grid-footer/grid-footer.component';\nimport {\n    IgxColumnResizerDirective,\n    IgxColumnMovingDragDirective,\n    IgxColumnMovingDropDirective,\n    IgxGridBodyDirective,\n    IgxColumnMovingService,\n    IgxResizeHandleDirective\n} from './grid.common';\nimport { IgxGridTransaction } from './grid-base.component';\nimport { IgxChipsModule } from '../chips/chips.module';\nimport { IgxDragDropModule } from '../directives/drag-drop/drag-drop.directive';\nimport { IgxButtonGroupModule } from '../buttonGroup/buttonGroup.component';\nimport { IgxColumnPinningModule } from './column-pinning.component';\nimport { IgxBaseTransactionService } from '../services/transaction/base-transaction';\nimport {\n    IgxRowEditTemplateDirective,\n    IgxRowEditActionsDirective,\n    IgxRowEditTextDirective,\n    IgxRowEditTabStopDirective\n} from './grid.rowEdit.directive';\nimport { IgxGridNavigationService } from './grid-navigation.service';\nimport { IgxGridHeaderGroupComponent } from './grid-header-group.component';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxGridToolbarCustomContentDirective } from './grid-toolbar.component';\nimport { IgxSummaryRowComponent } from './summaries/summary-row.component';\nimport { IgxSummaryCellComponent } from './summaries/summary-cell.component';\nimport { IgxSummaryDataPipe } from './summaries/grid-root-summary.pipe';\nimport { IgxGridSelectionService } from '../core/grid-selection';\nimport { IgxGridSummaryService } from './summaries/grid-summary.service';\nimport { IgxProgressBarModule } from '../progressbar/progressbar.component';\nimport { IgxPaginatorModule } from '../paginator/paginator.component';\nimport { IgxFilterModule } from '../directives/filter/filter.directive';\nimport { IgxGridPipesModule } from './grid-pipes.module';\nimport { IgxGridExcelStyleFilteringModule } from './filtering/excel-style/grid.excel-style-filtering.module';\nimport { IgxGridDragSelectDirective } from './drag-select.directive';\nimport { IgxGridColumnResizerComponent } from './grid-column-resizer.component';\nimport { IgxRowDragModule } from './row-drag.directive';\nimport { IgxAdvancedFilteringDialogComponent } from './filtering/advanced-filtering/advanced-filtering-dialog.component';\nimport { IgxSelectModule } from '../select/select.module';\nimport {\n    IgxCellFooterTemplateDirective,\n    IgxCellHeaderTemplateDirective,\n    IgxCellEditorTemplateDirective,\n    IgxCellTemplateDirective,\n    IgxFilterCellTemplateDirective\n} from './common/templates';\nimport { IgxRowSelectorsModule } from './igx-row-selectors.module';\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxGridCellComponent,\n        IgxColumnComponent,\n        IgxColumnGroupComponent,\n        IgxColumnLayoutComponent,\n        IgxGridHeaderComponent,\n        IgxGridToolbarComponent,\n        IgxGridToolbarCustomContentDirective,\n        IgxCellFooterTemplateDirective,\n        IgxCellHeaderTemplateDirective,\n        IgxCellEditorTemplateDirective,\n        IgxCellTemplateDirective,\n        IgxRowEditTemplateDirective,\n        IgxRowEditActionsDirective,\n        IgxRowEditTextDirective,\n        IgxRowEditTabStopDirective,\n        IgxColumnResizerDirective,\n        IgxResizeHandleDirective,\n        IgxColumnMovingDragDirective,\n        IgxColumnMovingDropDirective,\n        IgxGridBodyDirective,\n        IgxGridFilteringCellComponent,\n        IgxGridFilteringRowComponent,\n        IgxSummaryDataPipe,\n        IgxGridHeaderGroupComponent,\n        IgxSummaryRowComponent,\n        IgxSummaryCellComponent,\n        IgxGridDragSelectDirective,\n        IgxGridColumnResizerComponent,\n        IgxFilterCellTemplateDirective,\n        IgxGridFooterComponent,\n        IgxAdvancedFilteringDialogComponent\n    ],\n    entryComponents: [\n        IgxColumnComponent,\n        IgxColumnGroupComponent,\n        IgxColumnLayoutComponent,\n        IgxAdvancedFilteringDialogComponent\n    ],\n    exports: [\n        IgxGridCellComponent,\n        IgxColumnComponent,\n        IgxColumnGroupComponent,\n        IgxColumnLayoutComponent,\n        IgxGridHeaderComponent,\n        IgxGridToolbarComponent,\n        IgxGridToolbarCustomContentDirective,\n        IgxCellFooterTemplateDirective,\n        IgxCellHeaderTemplateDirective,\n        IgxCellEditorTemplateDirective,\n        IgxCellTemplateDirective,\n        IgxRowEditTemplateDirective,\n        IgxRowEditActionsDirective,\n        IgxRowEditTextDirective,\n        IgxRowEditTabStopDirective,\n        IgxColumnResizerDirective,\n        IgxColumnMovingDragDirective,\n        IgxColumnMovingDropDirective,\n        IgxGridBodyDirective,\n        IgxSummaryDataPipe,\n        IgxButtonModule,\n        IgxDatePickerModule,\n        IgxIconModule,\n        IgxRippleModule,\n        IgxInputGroupModule,\n        IgxToggleModule,\n        IgxForOfModule,\n        IgxTemplateOutletModule,\n        IgxFocusModule,\n        IgxTextHighlightModule,\n        IgxTextSelectionModule,\n        IgxCheckboxModule,\n        IgxBadgeModule,\n        IgxChipsModule,\n        IgxDragDropModule,\n        IgxColumnHidingModule,\n        IgxDropDownModule,\n        IgxButtonGroupModule,\n        IgxColumnPinningModule,\n        IgxProgressBarModule,\n        IgxGridFilteringCellComponent,\n        IgxGridFilteringRowComponent,\n        IgxGridHeaderGroupComponent,\n        IgxSummaryRowComponent,\n        IgxSummaryCellComponent,\n        IgxGridDragSelectDirective,\n        IgxGridColumnResizerComponent,\n        IgxFilterModule,\n        IgxGridPipesModule,\n        IgxGridExcelStyleFilteringModule,\n        IgxFilterCellTemplateDirective,\n        IgxRowDragModule,\n        IgxPaginatorModule,\n        IgxGridFooterComponent,\n        IgxAdvancedFilteringDialogComponent,\n        IgxRowSelectorsModule\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        IgxButtonModule,\n        IgxDatePickerModule,\n        IgxIconModule,\n        IgxRippleModule,\n        IgxInputGroupModule,\n        IgxToggleModule,\n        IgxForOfModule,\n        IgxTemplateOutletModule,\n        IgxFocusModule,\n        IgxTextHighlightModule,\n        IgxTextSelectionModule,\n        IgxCheckboxModule,\n        IgxBadgeModule,\n        IgxChipsModule,\n        IgxDragDropModule,\n        IgxColumnHidingModule,\n        IgxDropDownModule,\n        IgxButtonGroupModule,\n        IgxColumnPinningModule,\n        IgxProgressBarModule,\n        IgxFilterModule,\n        IgxGridPipesModule,\n        IgxGridExcelStyleFilteringModule,\n        IgxRowDragModule,\n        IgxSelectModule,\n        IgxPaginatorModule,\n        IgxRowSelectorsModule\n    ],\n    providers: [\n        IgxGridSelectionService,\n        IgxSelectionAPIService,\n        IgxColumnMovingService,\n        IgxGridNavigationService,\n        IgxColumnResizingService,\n        IgxGridSummaryService,\n        { provide: IgxGridTransaction, useClass: IgxBaseTransactionService }\n    ]\n})\nexport class IgxGridCommonModule { }\n","import { GridBaseAPIService } from '../api.service';\nimport { IgxGridComponent } from './grid.component';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { cloneArray } from '../../core/utils';\nimport { IGroupingExpression } from '../../data-operations/grouping-expression.interface';\n\nexport class IgxGridAPIService extends GridBaseAPIService<IgxGridComponent> {\n\n    public groupBy(expression: IGroupingExpression): void {\n        const groupingState = cloneArray(this.grid.groupingExpressions);\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n        this.prepare_sorting_expression([sortingState, groupingState], expression);\n        this.grid.groupingExpressions = groupingState;\n        this.arrange_sorting_expressions();\n    }\n\n    public groupBy_multiple(expressions: IGroupingExpression[]): void {\n        const groupingState = cloneArray(this.grid.groupingExpressions);\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n\n        for (const each of expressions) {\n            this.prepare_sorting_expression([sortingState, groupingState], each);\n        }\n\n        this.grid.groupingExpressions = groupingState;\n        this.arrange_sorting_expressions();\n    }\n\n    public clear_groupby(name?: string | Array<string>) {\n        const groupingState = cloneArray(this.grid.groupingExpressions);\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n\n        if (name) {\n            const names = typeof name === 'string' ? [ name ] : name;\n            const groupedCols = groupingState.filter((state) => names.indexOf(state.fieldName) < 0);\n            const newSortingExpr = sortingState.filter((state) => names.indexOf(state.fieldName) < 0);\n            this.grid.groupingExpressions = groupedCols;\n            this.grid.sortingExpressions = newSortingExpr;\n            names.forEach((colName) => {\n                const grExprIndex = groupingState.findIndex((exp) => exp.fieldName === colName);\n                const grpExpandState = this.grid.groupingExpansionState;\n                /* remove expansion states related to the cleared group\n                and all with deeper hierarchy than the cleared group */\n                this.grid.groupingExpansionState = grpExpandState\n                    .filter((val) => {\n                        return val.hierarchy && val.hierarchy.length <= grExprIndex;\n                    });\n            });\n        } else {\n            // clear all\n            this.grid.groupingExpressions = [];\n            this.grid.groupingExpansionState = [];\n            for (const grExpr of groupingState) {\n                const sortExprIndex = sortingState.findIndex((exp) => exp.fieldName === grExpr.fieldName);\n                if (sortExprIndex > -1) {\n                    sortingState.splice(sortExprIndex, 1);\n                }\n            }\n            this.grid.sortingExpressions = sortingState;\n        }\n    }\n\n    public groupBy_get_expanded_for_group(groupRow: IGroupByRecord): IGroupByExpandState {\n        const grState = this.grid.groupingExpansionState;\n        const hierarchy = DataUtil.getHierarchy(groupRow);\n        return grState.find((state) =>\n            DataUtil.isHierarchyMatch(state.hierarchy || [{ fieldName: groupRow.expression.fieldName, value: groupRow.value }], hierarchy));\n    }\n\n    public groupBy_is_row_in_group(groupRow: IGroupByRecord, rowID): boolean {\n        const grid = this.grid;\n        let rowInGroup = false;\n        groupRow.records.forEach(row => {\n            if (grid.primaryKey ? row[grid.primaryKey] === rowID : row === rowID) {\n                rowInGroup = true;\n            }\n        });\n        return rowInGroup;\n    }\n\n    public groupBy_toggle_group(groupRow: IGroupByRecord) {\n        const grid = this.grid;\n        if (grid.crudService.isInEditMode) {\n            grid.endEdit(true);\n        }\n\n        const expansionState = grid.groupingExpansionState;\n        const state: IGroupByExpandState = this.groupBy_get_expanded_for_group(groupRow);\n        if (state) {\n            state.expanded = !state.expanded;\n        } else {\n            expansionState.push({\n                expanded: !grid.groupsExpanded,\n                hierarchy: DataUtil.getHierarchy(groupRow)\n            });\n        }\n        this.grid.groupingExpansionState = [...expansionState];\n        if (grid.rowEditable) {\n            grid.repositionRowEditingOverlay(grid.rowInEditMode);\n        }\n    }\n\n    public groupBy_fully_expand_group(groupRow: IGroupByRecord) {\n        const state: IGroupByExpandState = this.groupBy_get_expanded_for_group(groupRow);\n        const expanded = state ? state.expanded : this.grid.groupsExpanded;\n        if (!expanded) {\n            this.groupBy_toggle_group(groupRow);\n        }\n        if (groupRow.groupParent) {\n            this.groupBy_fully_expand_group(groupRow.groupParent);\n        }\n    }\n\n    protected remove_grouping_expression(fieldName) {\n        const groupingExpressions = this.grid.groupingExpressions;\n        const index = groupingExpressions.findIndex((expr) => expr.fieldName === fieldName);\n        if (index !== -1) {\n            groupingExpressions.splice(index, 1);\n        }\n    }\n\n    public arrange_sorting_expressions() {\n        const groupingState = this.grid.groupingExpressions;\n        this.grid.sortingExpressions.sort((a, b) => {\n            const groupExprA = groupingState.find((expr) => expr.fieldName === a.fieldName);\n            const groupExprB = groupingState.find((expr) => expr.fieldName === b.fieldName);\n            if (groupExprA && groupExprB) {\n                return groupingState.indexOf(groupExprA) > groupingState.indexOf(groupExprB) ? 1 : -1;\n            } else if (groupExprA) {\n                return -1;\n            } else if (groupExprB) {\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n    }\n\n    public get_groupBy_record_id(gRow: IGroupByRecord): string {\n        let recordId = '{ ';\n        const hierrarchy = DataUtil.getHierarchy(gRow);\n\n        for (let i = 0; i < hierrarchy.length; i++) {\n            const groupByKey = hierrarchy[i];\n            recordId += `'${groupByKey.fieldName}': '${groupByKey.value}'`;\n\n            if (i < hierrarchy.length - 1) {\n                recordId += ', ';\n            }\n        }\n        recordId += ' }';\n\n        return recordId;\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { IgxGridBaseComponent } from './grid-base.component';\nimport { first } from 'rxjs/operators';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxGridNavigationService } from './grid-navigation.service';\nimport { ISelectionNode } from '../core/grid-selection';\n\n\nexport interface IStartNavigationCell {\n    rowStart: number;\n    colStart: number;\n    direction: NavigationDirection;\n}\n\nexport enum NavigationDirection {\n    horizontal = 'horizontal',\n    vertical = 'vertical'\n}\n\n\n/** @hidden */\n@Injectable()\nexport class IgxGridMRLNavigationService extends IgxGridNavigationService {\n\n    private startNavigationCell: IStartNavigationCell;\n\n    public grid: IgxGridBaseComponent;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public setStartNavigationCell(colStart: number, rowStart: number, dir: NavigationDirection) {\n        this.startNavigationCell = {\n            colStart: colStart,\n            rowStart: rowStart,\n            direction: dir\n        };\n    }\n\n    private applyNavigationCell(colStart: number, rowStart: number, navDirection: NavigationDirection): number {\n        const oppositeDir = navDirection === NavigationDirection.vertical ?\n            NavigationDirection.horizontal : NavigationDirection.vertical;\n        if (this.startNavigationCell && this.startNavigationCell.direction !== navDirection) {\n            this.startNavigationCell.direction = oppositeDir;\n        } else {\n            this.setStartNavigationCell(colStart, rowStart, oppositeDir);\n        }\n\n        return navDirection === NavigationDirection.vertical ?\n            this.startNavigationCell.colStart : this.startNavigationCell.rowStart;\n    }\n\n    public navigateUp(rowElement: HTMLElement, selectedNode: ISelectionNode) {\n        this.focusCellUpFromLayout(rowElement, selectedNode);\n    }\n\n    public navigateDown(rowElement: HTMLElement, selectedNode: ISelectionNode) {\n        this.focusCellDownFromLayout(rowElement, selectedNode);\n    }\n\n    public isColumnRightEdgeVisible(visibleColumnIndex: number): boolean {\n        const column = this.grid.columnList.filter(c => !c.columnGroup).find((col) => col.visibleIndex === visibleColumnIndex);\n        const forOfDir =  this.grid.headerContainer;\n        const horizontalScroll = forOfDir.getScroll();\n        if (!horizontalScroll.clientWidth || (column && column.pinned)) {\n            return true;\n        } else if (column) {\n            if (this.isParentColumnFullyVisible(column)) { return true; }\n            const scrollPos = this.getChildColumnScrollPositions(visibleColumnIndex);\n            return this.displayContainerWidth >= scrollPos.rightScroll - this.displayContainerScrollLeft &&\n            this.displayContainerScrollLeft <= scrollPos.leftScroll;\n        }\n        return false;\n    }\n    private isParentColumnFullyVisible(parent: IgxColumnComponent): boolean {\n        const forOfDir = this.grid.dataRowList.length > 0 ? this.grid.dataRowList.first.virtDirRow : this.grid.headerContainer;\n        const horizontalScroll = forOfDir.getScroll();\n        if (!horizontalScroll.clientWidth || parent.pinned) { return true; }\n        const index = forOfDir.igxForOf.indexOf(parent);\n        return this.displayContainerWidth >= forOfDir.getColumnScrollLeft(index + 1) - this.displayContainerScrollLeft &&\n            this.displayContainerScrollLeft <= forOfDir.getColumnScrollLeft(index);\n    }\n\n    public isColumnLeftEdgeVisible(visibleColumnIndex: number): boolean {\n        const forOfDir = this.grid.headerContainer;\n        const horizontalScroll = forOfDir.getScroll();\n        const column = this.grid.columnList.filter(c => !c.columnGroup).find((col) => col.visibleIndex === visibleColumnIndex);\n        if (!horizontalScroll.clientWidth || column.pinned) {\n            return true;\n        }\n        if (this.isParentColumnFullyVisible(column)) { return true; }\n        const scrollPos = this.getChildColumnScrollPositions(visibleColumnIndex);\n        return this.displayContainerScrollLeft <= scrollPos.leftScroll;\n    }\n\n    public onKeydownArrowRight(element: HTMLElement, selectedNode: ISelectionNode) {\n        this.focusNextCellFromLayout(element, selectedNode);\n    }\n\n    public onKeydownArrowLeft(element: HTMLElement, selectedNode: ISelectionNode) {\n        this.focusPrevCellFromLayout(element, selectedNode);\n    }\n    public get gridOrderedColumns(): IgxColumnComponent[] {\n        return [...this.grid.pinnedColumns, ...this.grid.unpinnedColumns].filter(c => !c.columnGroup)\n        .sort((a, b) => a.visibleIndex - b.visibleIndex);\n    }\n\n    public performTab(currentRowEl: HTMLElement, selectedNode: ISelectionNode) {\n        const visibleColumnIndex = selectedNode.layout ? selectedNode.layout.columnVisibleIndex : 0;\n        const nextElementColumn = this.grid.columns.find(x => !x.columnGroup && x.visibleIndex === visibleColumnIndex + 1);\n        const rowIndex = selectedNode.row;\n        const row = this.grid.getRowByIndex(rowIndex);\n        this._moveFocusToCell(currentRowEl, nextElementColumn, row, selectedNode, 'next');\n        if (nextElementColumn) {\n            this.setStartNavigationCell(nextElementColumn.colStart, nextElementColumn.rowStart, null);\n        }\n    }\n\n    protected _moveFocusToCell(currentRowEl: HTMLElement, nextElementColumn, row, selectedNode, dir) {\n        if (nextElementColumn && row.cells) {\n            let nextCell = row.cells.find(currCell => currCell.column === nextElementColumn);\n            const isVisible = this.isColumnRightEdgeVisible(nextElementColumn.visibleIndex);\n            if (!nextCell || !isVisible) {\n                this.grid.nativeElement.focus({ preventScroll: true });\n                const cb = () => {\n                    nextCell = row.cells.find(currCell => currCell.column === nextElementColumn);\n                    if (this.grid.rowEditable && this.isRowInEditMode(row.index)) {\n                        if (dir === 'next') {\n                            this.moveNextEditable(row.index, selectedNode.layout.columnVisibleIndex);\n                        } else {\n                            this.movePreviousEditable(row.index, selectedNode.layout.columnVisibleIndex);\n                        }\n                        return;\n                    }\n                    this._focusCell(nextCell.nativeElement);\n                };\n                this.performHorizontalScrollToCell(row.index, nextElementColumn.visibleIndex, false, cb);\n            } else {\n                if (this.grid.rowEditable && this.isRowInEditMode(row.index)) {\n                    if (dir === 'next') {\n                        this.moveNextEditable(row.index, selectedNode.layout.columnVisibleIndex);\n                    } else {\n                        this.movePreviousEditable(row.index, selectedNode.layout.columnVisibleIndex);\n                    }\n                    return;\n                }\n                this._focusCell(nextCell.nativeElement);\n            }\n        } else {\n            // end of layout reached\n            if (this.isRowInEditMode(row.index)) {\n                //  TODO: make gridAPI visible for internal use and remove cast to any\n                (this.grid as any).gridAPI.submit_value();\n                if (dir === 'next') {\n                    this.grid.rowEditTabs.first.element.nativeElement.focus();\n                } else {\n                    this.grid.rowEditTabs.last.element.nativeElement.focus();\n                }\n                return;\n            }\n            if (dir === 'next') {\n                super.navigateDown(currentRowEl, {row: row.index, column: 0});\n            } else {\n                 let lastVisibleIndex = 0;\n                this.grid.unpinnedColumns.forEach((col) => {\n                    lastVisibleIndex = Math.max(lastVisibleIndex, col.visibleIndex);\n                });\n                super.navigateUp(currentRowEl, {row: row.index, column: lastVisibleIndex});\n            }\n        }\n    }\n\n    public performShiftTabKey(currentRowEl: HTMLElement, selectedNode: ISelectionNode) {\n        const visibleColumnIndex = selectedNode.layout ? selectedNode.layout.columnVisibleIndex : 0;\n        const rowIndex = selectedNode.row;\n        const row = this.grid.getRowByIndex(rowIndex);\n        const prevElementColumn =\n         this.grid.columns.find(x => !x.columnGroup && x.visibleIndex === visibleColumnIndex - 1 && !x.hidden);\n         this._moveFocusToCell(currentRowEl, prevElementColumn, row, selectedNode, 'prev');\n        if (prevElementColumn) {\n            this.setStartNavigationCell(prevElementColumn.colStart, prevElementColumn.rowStart, null);\n        }\n    }\n\n    private focusCellUpFromLayout(rowElement: HTMLElement, selectedNode: ISelectionNode) {\n        const isGroupRow = rowElement.tagName.toLowerCase() === 'igx-grid-groupby-row';\n        const currentRowStart = selectedNode.layout ?  selectedNode.layout.rowStart : 1;\n        const currentColStart = this.applyNavigationCell(selectedNode.layout ? selectedNode.layout.colStart : 1,\n            currentRowStart,\n            NavigationDirection.vertical);\n        const parentIndex = selectedNode.column;\n        const columnLayout = this.grid.columns.find( x => x.columnLayout && x.visibleIndex === parentIndex);\n        let movePrev;\n        // check if element up is from the same layout\n        let upperElementColumn = columnLayout.children.find(c =>\n            (c.rowEnd === currentRowStart || c.rowStart + c.gridRowSpan === currentRowStart)  &&\n            c.colStart <= currentColStart &&\n            (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan));\n        if (isGroupRow || !upperElementColumn) {\n            // no prev row in current row layout, go to next row last rowstart\n            const layoutRowEnd = this.grid.multiRowLayoutRowSize + 1;\n            upperElementColumn = columnLayout.children.find(c =>\n                (c.rowEnd === layoutRowEnd || c.rowStart + c.gridRowSpan === layoutRowEnd) &&\n                c.colStart <= currentColStart &&\n                (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan));\n            movePrev = true;\n        }\n        const rowIndex = movePrev ? selectedNode.row - 1 : selectedNode.row;\n        if (rowIndex < 0) {\n            // end of rows reached.\n            return;\n        }\n        let prevRow;\n        const cb = () => {\n            prevRow = this.grid.getRowByIndex(rowIndex);\n            if (prevRow && prevRow.cells) {\n                this._focusCell(upperElementColumn.cells.find((c) => c.rowIndex === prevRow.index).nativeElement);\n            } else if (prevRow) {\n                prevRow.nativeElement.focus({ preventScroll: true });\n            }\n        };\n        if (this.shouldPerformVerticalScroll(rowIndex, upperElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n                this.performVerticalScrollToCell(rowIndex, upperElementColumn.visibleIndex, cb);\n        } else {\n            cb();\n        }\n    }\n\n    private focusCellDownFromLayout(rowElement: HTMLElement, selectedNode: ISelectionNode) {\n        const isGroupRow = rowElement.tagName.toLowerCase() === 'igx-grid-groupby-row';\n        const parentIndex = selectedNode.column;\n        const columnLayout = this.grid.columns.find( x => x.columnLayout && x.visibleIndex === parentIndex);\n        const currentRowEnd = selectedNode.layout ? selectedNode.layout.rowEnd || selectedNode.layout.rowStart + 1 : 2;\n        const currentColStart = this.applyNavigationCell(selectedNode.layout ? selectedNode.layout.colStart : 1,\n            selectedNode.layout ? selectedNode.layout.rowStart : 1,\n            NavigationDirection.vertical);\n        let moveNext;\n        // check if element down is from the same layout\n        let nextElementColumn = columnLayout.children.find(c => c.rowStart === currentRowEnd &&\n            c.colStart <= currentColStart &&\n            (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan));\n        if (isGroupRow || !nextElementColumn) {\n            // no next row in current row layout, go to next row first rowstart\n            nextElementColumn = columnLayout.children.find(c => c.rowStart === 1 &&\n                c.colStart <= currentColStart &&\n                (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan));\n            moveNext = true;\n        }\n        const rowIndex = moveNext ? selectedNode.row + 1 : selectedNode.row;\n        if (rowIndex > this.grid.dataView.length - 1) {\n            // end of rows reached.\n            return;\n        }\n        let nextRow;\n        const cb = () => {\n            nextRow = this.grid.getRowByIndex(rowIndex);\n            if (nextRow && nextRow.cells) {\n                this._focusCell(nextElementColumn.cells.find((c) => c.rowIndex === nextRow.index).nativeElement);\n            } else if (nextRow) {\n                nextRow.nativeElement.focus({ preventScroll: true });\n            }\n        };\n        if (this.shouldPerformVerticalScroll(rowIndex, nextElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n                this.performVerticalScrollToCell(rowIndex, nextElementColumn.visibleIndex, cb);\n        } else {\n            cb();\n        }\n    }\n\n    private focusNextCellFromLayout(cellElement: HTMLElement, selectedNode: ISelectionNode) {\n        const parentIndex = selectedNode.column;\n        let columnLayout = this.grid.columns.find( x => x.columnLayout && x.visibleIndex === parentIndex);\n        const currentColEnd = selectedNode.layout.colEnd || selectedNode.layout.colStart + 1;\n        const currentRowStart = this.applyNavigationCell(selectedNode.layout.colStart,\n            selectedNode.layout.rowStart,\n            NavigationDirection.horizontal);\n        const rowIndex = selectedNode.row;\n        // check if next element is from the same layout\n        let nextElementColumn = columnLayout.children.find(c => c.colStart === currentColEnd &&\n            c.rowStart <= currentRowStart &&\n            (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        if (!nextElementColumn) {\n            // no next column in current layout, search for next layout\n            columnLayout = this.grid.columns.find(c => c.columnLayout && !c.hidden && c.visibleIndex === columnLayout.visibleIndex + 1);\n            if (!columnLayout) {\n                // reached the end\n                return null;\n            }\n            // next element is from the next layout\n            nextElementColumn = columnLayout.children.find(c => c.colStart === 1 &&\n                c.rowStart <= currentRowStart &&\n                (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        }\n        const cb = () => {\n            const nextElement = nextElementColumn.cells.find((c) => c.rowIndex === rowIndex).nativeElement;\n           this._focusCell(nextElement);\n        };\n        if (!this.isColumnRightEdgeVisible(nextElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.performHorizontalScrollToCell(rowIndex, nextElementColumn.visibleIndex, false, cb);\n        } else {\n            cb();\n        }\n    }\n\n    private focusPrevCellFromLayout(cellElement: HTMLElement, selectedNode: ISelectionNode) {\n        const parentIndex = selectedNode.column;\n        let columnLayout = this.grid.columns.find( x => x.columnLayout && x.visibleIndex === parentIndex);\n        const currentColStart = selectedNode.layout.colStart;\n        const currentRowStart = this.applyNavigationCell(currentColStart,\n            selectedNode.layout.rowStart,\n            NavigationDirection.horizontal);\n        const rowIndex = selectedNode.row;\n\n        // check previous element is from the same layout\n        let prevElementColumn = columnLayout.children\n        .find(c => (c.colEnd === currentColStart || c.colStart + c.gridColumnSpan === currentColStart ) &&\n            c.rowStart <= currentRowStart &&\n            (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        if (!prevElementColumn) {\n            // no prev column in current layout, seacrh for prev layout\n            columnLayout = this.grid.columns.find(c => c.columnLayout && !c.hidden && c.visibleIndex === columnLayout.visibleIndex - 1);\n            if (!columnLayout) {\n                // reached the end\n                return null;\n            }\n            const layoutSize = columnLayout.getInitialChildColumnSizes(columnLayout.children).length;\n            // first element is from the next layout\n            prevElementColumn = columnLayout.children\n            .find(c => (c.colEnd === layoutSize + 1 || c.colStart + c.gridColumnSpan === layoutSize + 1) &&\n                c.rowStart <= currentRowStart &&\n                (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        }\n\n        const cb = () => {\n            const prevElement = prevElementColumn.cells.find((c) => c.rowIndex === rowIndex).nativeElement;\n            this._focusCell(prevElement);\n        };\n        if (!this.isColumnLeftEdgeVisible(prevElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.performHorizontalScrollToCell(rowIndex, prevElementColumn.visibleIndex, false, cb);\n        } else {\n            cb();\n        }\n    }\n\n    public onKeydownEnd(rowIndex: number, isSummary: boolean = false, cellRowStart?: number) {\n        const layouts = this.grid.columns.filter(c => c.columnLayout && !c.hidden).sort((a, b) => a.visibleIndex - b.visibleIndex);\n        const lastLayout = layouts[layouts.length - 1];\n        const lastLayoutChildren = lastLayout.children;\n        const layoutSize =  lastLayout.getInitialChildColumnSizes(lastLayoutChildren).length;\n        const currentRowStart = this.applyNavigationCell(\n            this.startNavigationCell ? this.startNavigationCell.colStart : 1,\n            cellRowStart || this.grid.multiRowLayoutRowSize,\n            NavigationDirection.horizontal);\n        const nextElementColumn = lastLayout.children.find(c =>\n            (c.colEnd === layoutSize + 1 || c.colStart + c.gridColumnSpan === layoutSize + 1) &&\n            c.rowStart <= currentRowStart &&\n            (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        const indexInLayout = lastLayoutChildren.toArray().indexOf(nextElementColumn);\n\n        const rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;\n        let rowElement = rowList.find((row) => row.index === rowIndex);\n        if (!rowElement) { return; }\n        rowElement = rowElement.nativeElement;\n\n        if (!this.isColumnRightEdgeVisible(nextElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            const cb = () => {\n                const allBlocks = rowElement.querySelectorAll(this.getColumnLayoutSelector());\n                const cell = allBlocks[allBlocks.length - 1].children[indexInLayout];\n                this._focusCell(cell);\n            };\n            this.performHorizontalScrollToCell(rowIndex, nextElementColumn.visibleIndex, false, cb);\n            return;\n        } else {\n            const allBlocks = rowElement.querySelectorAll(this.getColumnLayoutSelector());\n            const cell =  allBlocks[allBlocks.length - 1].children[indexInLayout];\n            this._focusCell(cell);\n        }\n    }\n\n    public onKeydownHome(rowIndex: number, isSummary: boolean = false, cellRowStart: number = 1) {\n        const firstLayout = this.grid.columns.filter(c => c.columnLayout && !c.hidden)[0];\n        const lastLayoutChildren = firstLayout.children.toArray();\n        const currentRowStart = this.applyNavigationCell(\n            this.startNavigationCell ? this.startNavigationCell.colStart : 1,\n            cellRowStart,\n            NavigationDirection.horizontal);\n        const nextElementColumn = firstLayout.children.find(c =>\n            c.colStart === 1 &&\n            c.rowStart <= currentRowStart &&\n            (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        const indexInLayout = lastLayoutChildren.indexOf(nextElementColumn);\n\n        const rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;\n        let rowElement = rowList.find((row) => row.index === rowIndex);\n        if (!rowElement) { return; }\n        rowElement = rowElement.nativeElement;\n\n        if (!this.isColumnLeftEdgeVisible(nextElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n           const cb = () => {\n                const allBlocks = rowElement.querySelectorAll(this.getColumnLayoutSelector());\n                const cell = allBlocks[0].children[indexInLayout];\n                this._focusCell(cell);\n            };\n            this.performHorizontalScrollToCell(rowIndex, nextElementColumn.visibleIndex, false, cb);\n            return;\n        } else {\n            const allBlocks = rowElement.querySelectorAll(this.getColumnLayoutSelector());\n            const cell =  allBlocks[0].children[indexInLayout];\n            this._focusCell(cell);\n        }\n    }\n\n    protected getColumnLayoutSelector(): string {\n        return '.igx-grid__mrl-block';\n    }\n\n    protected getChildColumnScrollPositions(visibleColIndex: number): { leftScroll: number, rightScroll: number } {\n        const forOfDir = this.grid.dataRowList.length > 0 ? this.grid.dataRowList.first.virtDirRow : this.grid.headerContainer;\n        const targetCol: IgxColumnComponent = this.getColunmByVisibleIndex(visibleColIndex);\n        const parent = targetCol.parent;\n        const parentVIndex = forOfDir.igxForOf.indexOf(parent);\n        let leftScroll = forOfDir.getColumnScrollLeft(parentVIndex), rightScroll = 0;\n        // caculate offset from parent based on target column colStart and colEnd and the resolved child column sizes.\n        const childSizes = parent.getFilledChildColumnSizes(parent.children);\n        const colStart = targetCol.colStart || 1;\n        const colEnd = targetCol.colEnd || colStart + 1;\n        for (let i = 1; i < colStart; i++) {\n            leftScroll += parseInt(childSizes[i - 1], 10);\n        }\n        rightScroll += leftScroll;\n        for (let j = colStart; j < colEnd; j++) {\n            rightScroll +=  parseInt(childSizes[j - 1], 10);\n        }\n        return {leftScroll, rightScroll};\n    }\n\n    protected getColunmByVisibleIndex(visibleColIndex: number): IgxColumnComponent {\n        visibleColIndex = visibleColIndex < 0 ? 0 : visibleColIndex;\n        return this.grid.columnList.find((col) => !col.columnLayout && col.visibleIndex === visibleColIndex);\n    }\n\n    public shouldPerformVerticalScroll(rowIndex: number, visibleColumnIndex: number): boolean {\n        if (this._isGroupRecordAt(rowIndex)) {\n            return super.shouldPerformVerticalScroll(rowIndex, visibleColumnIndex);\n       }\n        if (!super.shouldPerformVerticalScroll(rowIndex, visibleColumnIndex)) {return false; }\n       const targetRow = this.grid.summariesRowList.filter(s => s.index !== 0)\n           .concat(this.grid.rowList.toArray()).find(r => r.index === rowIndex);\n       const scrollTop =  Math.abs(this.grid.verticalScrollContainer.getScroll().scrollTop);\n       const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;\n       const scrollPos = this.getVerticalScrollPositions(rowIndex, visibleColumnIndex);\n       if (!targetRow || targetRow.nativeElement.offsetTop + scrollPos.topOffset < Math.abs(this.verticalDCTopOffset)\n           || containerHeight && containerHeight < scrollPos.rowBottom - scrollTop) {\n           return true;\n       } else {\n           return false;\n       }\n   }\n\n   get verticalDCTopOffset(): number {\n        return parseInt(this.grid.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n    }\n\n    private _isGroupRecordAt(rowIndex: number) {\n        const record = this.grid.dataView[rowIndex];\n        return record.records && record.records.length;\n    }\n\n    public performVerticalScrollToCell(rowIndex: number, visibleColumnIndex: number, cb?: () => void) {\n        if (this._isGroupRecordAt(rowIndex)) {\n            return super.performVerticalScrollToCell(rowIndex, visibleColumnIndex, cb);\n        }\n        const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;\n        const scrollTop = Math.abs(this.grid.verticalScrollContainer.getScroll().scrollTop);\n        const scrollPos = this.getVerticalScrollPositions(rowIndex, visibleColumnIndex);\n        const targetRow = this.grid.summariesRowList.filter(s => s.index !== 0)\n            .concat(this.grid.rowList.toArray()).find(r => r.index === rowIndex);\n        const isPrevious =  (scrollTop > scrollPos.rowTop) && (!targetRow ||\n                targetRow.nativeElement.offsetTop + scrollPos.topOffset < Math.abs(this.verticalDCTopOffset));\n        const scrollAmount = isPrevious ? scrollPos.rowTop : Math.abs(scrollTop + containerHeight - scrollPos.rowBottom);\n\n        this.grid.verticalScrollContainer.onChunkLoad\n        .pipe(first()).subscribe(() => {\n            cb();\n        });\n\n        if (isPrevious) {\n            this.grid.verticalScrollContainer.scrollPosition = scrollAmount;\n        } else {\n            this.grid.verticalScrollContainer.addScrollTop(scrollAmount);\n        }\n    }\n\n    public getVerticalScrollPositions(rowIndex: number, visibleColIndex: number): { rowTop: number, rowBottom: number, topOffset: number } {\n        const targetCol: IgxColumnComponent = this.getColunmByVisibleIndex(visibleColIndex);\n        const topOffset = (targetCol.rowStart - 1)  * this.grid.defaultRowHeight;\n        const rowTop = this.grid.verticalScrollContainer.sizesCache[rowIndex] + topOffset;\n        const rowBottom = rowTop + (this.grid.defaultRowHeight * targetCol.gridRowSpan);\n        return { rowTop, rowBottom, topOffset };\n    }\n\n    public performHorizontalScrollToCell(\n        rowIndex: number, visibleColumnIndex: number, isSummary: boolean = false, cb?: () => void) {\n        const scrollPos = this.getChildColumnScrollPositions(visibleColumnIndex);\n        const hScroll = this.horizontalScroll(rowIndex);\n        this.grid.parentVirtDir.onChunkLoad\n            .pipe(first())\n            .subscribe(() => {\n                if (cb) {\n                    cb();\n                } else {\n                    this._focusCell(this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary));\n                }\n        });\n        const isPrevItem =  hScroll.getScroll().scrollLeft > scrollPos.leftScroll;\n        const containerSize = parseInt(hScroll.igxForContainerSize, 10);\n        const nextScroll = isPrevItem ? scrollPos.leftScroll : scrollPos.rightScroll - containerSize;\n        hScroll.scrollPosition = nextScroll;\n    }\n\n    protected _focusCell(cellElem: HTMLElement) {\n        // in case of variable row heights in mrl grid make sure cell is really in view after it has been rendered.\n        const gridBoundingClientRect = this.grid.tbody.nativeElement.getBoundingClientRect();\n        const diffTop = cellElem.getBoundingClientRect().top - gridBoundingClientRect.top;\n        const diffBottom = cellElem.getBoundingClientRect().bottom - gridBoundingClientRect.bottom;\n\n        if (diffTop < 0) {\n            // cell is above grid top - not visible\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    cellElem.focus({ preventScroll: true });\n            });\n            this.grid.verticalScrollContainer.addScrollTop(diffTop);\n        } else if (diffBottom > 0) {\n            // cell is below grid bottom - not visible\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    cellElem.focus({ preventScroll: true });\n            });\n            this.grid.verticalScrollContainer.addScrollTop(diffBottom);\n        }  else {\n            // cell is visible\n            cellElem.focus({ preventScroll: true });\n        }\n    }\n\n    public goToFirstCell() {\n        this.startNavigationCell = null;\n        super.goToFirstCell();\n    }\n\n    public goToLastCell() {\n        this.startNavigationCell = null;\n        super.goToLastCell();\n    }\n}\n","import {\n    Component, ChangeDetectionStrategy, Input, Output, EventEmitter, ContentChild, ViewChildren,\n    QueryList, ViewChild, ElementRef, TemplateRef, DoCheck, AfterContentInit, HostBinding, forwardRef, OnInit\n} from '@angular/core';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\nimport { IgxGridNavigationService } from '../grid-navigation.service';\nimport { IgxGridAPIService } from './grid-api.service';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\nimport { cloneArray, IBaseEventArgs } from '../../core/utils';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { IgxGroupByRowTemplateDirective } from './grid.directives';\nimport { IgxGridGroupByRowComponent } from './groupby-row.component';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { IBaseChipEventArgs, IChipClickEventArgs, IChipKeyDownEventArgs } from '../../chips/chip.component';\nimport { IChipsAreaReorderEventArgs } from '../../chips/chips-area.component';\nimport { IgxColumnComponent } from '../column.component';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IGroupingExpression } from '../../data-operations/grouping-expression.interface';\nimport { IgxColumnResizingService } from '../grid-column-resizing.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { IgxForOfSyncService, IgxForOfScrollSyncService } from '../../directives/for-of/for_of.sync.service';\nimport { IgxDragIndicatorIconDirective } from '../row-drag.directive';\nimport { IgxGridMRLNavigationService } from '../grid-mrl-navigation.service';\nimport { IgxRowIslandAPIService } from '../hierarchical-grid/row-island-api.service';\nimport { FilterMode } from '../common/enums';\n\nlet NEXT_ID = 0;\n\nexport interface IGroupingDoneEventArgs extends IBaseEventArgs {\n    expressions: Array<ISortingExpression> | ISortingExpression;\n    groupedColumns: Array<IgxColumnComponent> | IgxColumnComponent;\n    ungroupedColumns: Array<IgxColumnComponent> | IgxColumnComponent;\n}\n\n/**\n * **Ignite UI for Angular Grid** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid.html)\n *\n * The Ignite UI Grid is used for presenting and manipulating tabular data in the simplest way possible.  Once data\n * has been bound, it can be manipulated through filtering, sorting & editing operations.\n *\n * Example:\n * ```html\n * <igx-grid [data]=\"employeeData\" autoGenerate=\"false\">\n *   <igx-column field=\"first\" header=\"First Name\"></igx-column>\n *   <igx-column field=\"last\" header=\"Last Name\"></igx-column>\n *   <igx-column field=\"role\" header=\"Role\"></igx-column>\n * </igx-grid>\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    providers: [\n        IgxGridNavigationService,\n        IgxGridSummaryService,\n        IgxGridSelectionService,\n        IgxGridCRUDService,\n        { provide: GridBaseAPIService, useClass: IgxGridAPIService },\n        { provide: IgxGridBaseComponent, useExisting: forwardRef(() => IgxGridComponent) },\n        IgxFilteringService,\n        IgxColumnResizingService,\n        IgxForOfSyncService,\n        IgxForOfScrollSyncService,\n        IgxRowIslandAPIService\n    ],\n    selector: 'igx-grid',\n    templateUrl: './grid.component.html'\n})\nexport class IgxGridComponent extends IgxGridBaseComponent implements IGridDataBindable, OnInit, DoCheck, AfterContentInit {\n    private _id = `igx-grid-${NEXT_ID++}`;\n    /**\n     * @hidden @internal\n     */\n    public groupingResult: any[];\n\n    /**\n     * @hidden @internal\n     */\n    public groupingMetadata: any[];\n\n    /**\n     * @hidden @internal\n     */\n    public groupingFlatResult: any[];\n    /**\n     * @hidden\n     */\n    protected _groupingExpressions: IGroupingExpression[] = [];\n    /**\n     * @hidden\n     */\n    protected _groupingExpandState: IGroupByExpandState[] = [];\n    /**\n     * @hidden\n     */\n    protected _groupRowTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    protected _groupAreaTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    protected groupingDiffer;\n    private _data;\n    private _hideGroupedColumns = false;\n    private _dropAreaMessage = null;\n\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public get id(): string {\n        return this._id;\n    }\n    public set id(value: string) {\n        this._id = value;\n    }\n\n    /**\n     * An @Input property that lets you fill the `IgxGridComponent` with an array of data.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @memberof IgxGridComponent\n    */\n    @Input()\n    public get data(): any[] {\n        return this._data;\n    }\n\n    public set data(value: any[]) {\n        this._data = value || [];\n        this.summaryService.clearSummaryCache();\n        if (this.shouldGenerate) {\n            this.setupColumns();\n        }\n        this.notifyChanges(true);\n    }\n\n    /**\n     * Returns an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get filteredData() {\n        return this._filteredData;\n    }\n\n    /**\n     * Sets an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * this.grid.filteredData = [{\n     *       ID: 1,\n     *       Name: \"A\"\n     * }];\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set filteredData(value) {\n        this._filteredData = value;\n    }\n\n    /**\n     * Returns the state of the grid virtualization, including the start index and how many records are rendered.\n     * ```typescript\n     * const gridVirtState = this.grid1.virtualizationState;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get virtualizationState() {\n        return this.verticalScrollContainer.state;\n    }\n\n    /**\n     * @hidden\n     */\n    set virtualizationState(state) {\n        this.verticalScrollContainer.state = state;\n    }\n\n    /**\n     * Sets the total number of records in the data source.\n     * This property is required for remote grid virtualization to function when it is bound to remote data.\n     * ```typescript\n     * this.grid1.totalItemCount = 55;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set totalItemCount(count) {\n        this.verticalScrollContainer.totalItemCount = count;\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Returns the total number of records in the data source.\n     * Works only with remote grid virtualization.\n     * ```typescript\n     * const itemCount = this.grid1.totalItemCount;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get totalItemCount() {\n        return this.verticalScrollContainer.totalItemCount;\n    }\n\n    private get _gridAPI(): IgxGridAPIService {\n        return this.gridAPI as IgxGridAPIService;\n    }\n    private _filteredData = null;\n\n    /**\n     * Returns the group by state of the `IgxGridComponent`.\n     * ```typescript\n     * let groupByState = this.grid.groupingExpressions;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    get groupingExpressions(): IGroupingExpression[] {\n        return this._groupingExpressions;\n    }\n\n    /**\n     * Sets the group by state of the `IgxGridComponent` and emits the `onGroupingDone`\n     * event with the appropriate arguments.\n     * ```typescript\n     * this.grid.groupingExpressions = [{\n     *     fieldName: \"ID\",\n     *     dir: SortingDirection.Asc,\n     *     ignoreCase: false\n     * }];\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [(groupingExpressions)]=\"model.groupingExpressions\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupingExpressions(value: IGroupingExpression[]) {\n        if (value && value.length > 10) {\n            throw Error('Maximum amount of grouped columns is 10.');\n        }\n        const oldExpressions: IGroupingExpression[] = this.groupingExpressions;\n        const newExpressions: IGroupingExpression[] = value;\n        this._groupingExpressions = cloneArray(value);\n        this.groupingExpressionsChange.emit(this._groupingExpressions);\n        this.chipsGoupingExpressions = cloneArray(value);\n        if (this._gridAPI.grid) {\n            /* grouping should work in conjunction with sorting\n            and without overriding separate sorting expressions */\n            this._applyGrouping();\n            this._gridAPI.arrange_sorting_expressions();\n            this.notifyChanges();\n        } else {\n            // setter called before grid is registered in grid API service\n            this.sortingExpressions.unshift.apply(this.sortingExpressions, this._groupingExpressions);\n        }\n        if (!this._init && JSON.stringify(oldExpressions) !== JSON.stringify(newExpressions) && this.columnList) {\n            const groupedCols: IgxColumnComponent[] = [];\n            const ungroupedCols: IgxColumnComponent[] = [];\n            const groupedColsArr = newExpressions.filter((obj) => {\n                return !oldExpressions.some((obj2) => {\n                    return obj.fieldName === obj2.fieldName;\n                });\n            });\n            groupedColsArr.forEach((elem) => {\n                groupedCols.push(this.getColumnByName(elem.fieldName));\n            }, this);\n            const ungroupedColsArr = oldExpressions.filter((obj) => {\n                return !newExpressions.some((obj2) => {\n                    return obj.fieldName === obj2.fieldName;\n                });\n            });\n            ungroupedColsArr.forEach((elem) => {\n                ungroupedCols.push(this.getColumnByName(elem.fieldName));\n            }, this);\n            this.notifyChanges();\n            const groupingDoneArgs: IGroupingDoneEventArgs = {\n                expressions: newExpressions,\n                groupedColumns: groupedCols,\n                ungroupedColumns: ungroupedCols\n            };\n            this.onGroupingDone.emit(groupingDoneArgs);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public groupingExpressionsChange = new EventEmitter<IGroupingExpression[]>();\n\n    /**\n     * Returns a list of expansion states for group rows.\n     * Includes only states that differ from the default one (controlled through groupsExpanded and states that the user has changed.\n     * Contains the expansion state (expanded: boolean) and the unique identifier for the group row (Array).\n     * ```typescript\n     * const groupExpState = this.grid.groupingExpansionState;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    get groupingExpansionState() {\n        return this._groupingExpandState;\n    }\n\n    /**\n     * Sets a list of expansion states for group rows.\n     * ```typescript\n     *      this.grid.groupingExpansionState = [{\n     *      expanded: false,\n     *      hierarchy: [{ fieldName: 'ID', value: 1 }]\n     *   }];\n     * // You can use DataUtil.getHierarchy(groupRow) to get the group `IgxGridRowComponent` hierarchy.\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [(groupingExpansionState)]=\"model.groupingExpansionState\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupingExpansionState(value) {\n        if (value !== this._groupingExpandState) {\n            this.groupingExpansionStateChange.emit(value);\n        }\n        this._groupingExpandState = value;\n        if (this.gridAPI.grid) {\n            this.cdr.detectChanges();\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public groupingExpansionStateChange = new EventEmitter<IGroupByExpandState[]>();\n\n    /**\n     * An @Input property that determines whether created groups are rendered expanded or collapsed.\n     * The default rendered state is expanded.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [groupsExpanded]=\"false\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    public groupsExpanded = true;\n\n    /**\n     * A hierarchical representation of the group by records.\n     * ```typescript\n     * let groupRecords = this.grid.groupsRecords;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public groupsRecords: IGroupByRecord[] = [];\n\n    /**\n     * An @Input property that sets whether the grouped columns should be hidden as well.\n     * The default value is \"false\"\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [hideGroupedColumns]=\"true\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    public get hideGroupedColumns() {\n        return this._hideGroupedColumns;\n    }\n\n    public set hideGroupedColumns(value: boolean) {\n        if (value) {\n            this.groupingDiffer = this.differs.find(this.groupingExpressions).create();\n        } else {\n            this.groupingDiffer = null;\n        }\n        if (this.columnList && this.groupingExpressions) {\n            this._setGroupColsVisibility(value);\n        }\n\n        this._hideGroupedColumns = value;\n    }\n\n    /**\n     * An @Input property that sets the message displayed inside the GroupBy drop area where columns can be dragged on.\n     * Note: The grid needs to have at least one groupable column in order the GroupBy area to be displayed.\n     * ```html\n     * <igx-grid dropAreaMessage=\"Drop here to group!\">\n     *      <igx-column [groupable]=\"true\" field=\"ID\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    set dropAreaMessage(value: string) {\n        this._dropAreaMessage = value;\n        this.notifyChanges();\n    }\n\n    /**\n     * An accessor that returns the message displayed inside the GroupBy drop area where columns can be dragged on.\n    */\n    get dropAreaMessage(): string {\n        return this._dropAreaMessage || this.resourceStrings.igx_grid_groupByArea_message;\n    }\n\n    /**\n     * An @Input property that sets the template that will be rendered as a GroupBy drop area.\n     * Note: The grid needs to have at least one groupable column in order the GroupBy area to be displayed.\n     * ```html\n     * <igx-grid [dropAreaTemplate]=\"dropAreaRef\">\n     *      <igx-column [groupable]=\"true\" field=\"ID\"></igx-column>\n     * </igx-grid>\n     * <ng-template #myDropArea>\n     *      <span> Custom drop area! </span>\n     * </ng-template>\n     * ```\n     * ```ts\n     * @ViewChild('myDropArea', { read: TemplateRef })\n     * public dropAreaRef: TemplateRef<any>;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    public dropAreaTemplate: TemplateRef<any>;\n\n    /**\n     * Emitted when a new `IgxColumnComponent` gets grouped/ungrouped, or multiple columns get\n     * grouped/ungrouped at once by using the Group By API.\n     * The `onGroupingDone` event would be raised only once if several columns get grouped at once by calling\n     * the `groupBy()` or `clearGrouping()` API methods and passing an array as an argument.\n     * The event arguments provide the `expressions`, `groupedColumns` and `ungroupedColumns` properties, which contain\n     * the `ISortingExpression` and the `IgxColumnComponent` related to the grouping/ungrouping operation.\n     * Please note that `groupedColumns` and `ungroupedColumns` show only the **newly** changed columns (affected by the **last**\n     * grouping/ungrouping operation), not all columns which are currently grouped/ungrouped.\n     * columns.\n     * ```typescript\n     * groupingDone(event: IGroupingDoneEventArgs){\n     *     const expressions = event.expressions;\n     *     //the newly grouped columns\n     *     const groupedColumns = event.groupedColumns;\n     *     //the newly ungrouped columns\n     *     const ungroupedColumns = event.ungroupedColumns;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onGroupingDone)=\"groupingDone($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onGroupingDone = new EventEmitter<IGroupingDoneEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxGroupByRowTemplateDirective, { read: IgxGroupByRowTemplateDirective, static: false })\n    protected groupTemplate: IgxGroupByRowTemplateDirective;\n\n    /**\n     * The custom template, if any, that should be used when rendering the row drag indicator icon\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.dragIndicatorIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-grid #grid>\n     *      ...\n     *      <ng-template igxDragIndicatorIcon>\n     *          <igx-icon fontSet=\"material\">info</igx-icon>\n     *      </ng-template>\n     *  </igx-grid>\n     * ```\n     */\n    @ContentChild(IgxDragIndicatorIconDirective, { read: TemplateRef, static: false })\n    public dragIndicatorIconTemplate: TemplateRef<any> = null;\n\n    @ViewChildren(IgxGridGroupByRowComponent, { read: IgxGridGroupByRowComponent })\n    private _groupsRowList: QueryList<IgxGridGroupByRowComponent>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultDropArea', { read: TemplateRef, static: true })\n    public defaultDropAreaTemplate: TemplateRef<any>;\n\n    /**\n     * A list of all group rows.\n     * ```typescript\n     * const groupList = this.grid.groupsRowList;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public get groupsRowList() {\n        const res = new QueryList<any>();\n        if (!this._groupsRowList) {\n            return res;\n        }\n        const rList = this._groupsRowList.filter((item) => {\n            return item.element.nativeElement.parentElement !== null;\n        });\n        res.reset(rList);\n        return res;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild('groupArea', { static: false })\n    public groupArea: ElementRef;\n\n    /**\n     * @hidden\n     */\n    get groupAreaHostClass(): string {\n        return this.getComponentDensityClass('igx-drop-area');\n    }\n\n    /**\n     * Returns the template reference of the `IgxGridComponent`'s group row.\n     * ```\n     * const groupRowTemplate = this.grid.groupRowTemplate;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get groupRowTemplate(): TemplateRef<any> {\n        return this._groupRowTemplate;\n    }\n\n    /**\n     * Sets the template reference of the `IgxGridComponent`'s group `IgxGridRowComponent`.\n     * ```typescript\n     * this.grid.groupRowTemplate = myRowTemplate.\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupRowTemplate(template: TemplateRef<any>) {\n        this._groupRowTemplate = template;\n        this.notifyChanges();\n    }\n\n\n    /**\n     * Returns the template reference of the `IgxGridComponent`'s group area.\n     * ```typescript\n     * const groupAreaTemplate = this.grid.groupAreaTemplate;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get groupAreaTemplate(): TemplateRef<any> {\n        return this._groupAreaTemplate;\n    }\n\n    /**\n     * Sets the template reference of the `IgxGridComponent`'s group area.\n     * ```typescript\n     * this.grid.groupAreaTemplate = myAreaTemplate.\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupAreaTemplate(template: TemplateRef<any>) {\n        this._groupAreaTemplate = template;\n        this.notifyChanges();\n    }\n\n    /**\n     * Groups by a new `IgxColumnComponent` based on the provided expression, or modifies an existing one.\n     * Also allows for multiple columns to be grouped at once if an array of `ISortingExpression` is passed.\n     * The onGroupingDone event would get raised only **once** if this method gets called multiple times with the same arguments.\n     * ```typescript\n     * this.grid.groupBy({ fieldName: name, dir: SortingDirection.Asc, ignoreCase: false });\n     * this.grid.groupBy([\n            { fieldName: name1, dir: SortingDirection.Asc, ignoreCase: false },\n            { fieldName: name2, dir: SortingDirection.Desc, ignoreCase: true },\n            { fieldName: name3, dir: SortingDirection.Desc, ignoreCase: false }\n        ]);\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public groupBy(expression: IGroupingExpression | Array<IGroupingExpression>): void {\n        if (this.checkIfNoColumnField(expression)) {\n            return;\n        }\n        this.endEdit(true);\n        if (expression instanceof Array) {\n            this._gridAPI.groupBy_multiple(expression);\n        } else {\n            this._gridAPI.groupBy(expression);\n        }\n        this.notifyChanges(true);\n    }\n\n    /**\n     * Clears all grouping in the grid, if no parameter is passed.\n     * If a parameter is provided, clears grouping for a particular column or an array of columns.\n     * ```typescript\n     * this.grid.clearGrouping(); //clears all grouping\n     * this.grid.clearGrouping(\"ID\"); //ungroups a single column\n     * this.grid.clearGrouping([\"ID\", \"Column1\", \"Column2\"]); //ungroups multiple columns\n     * ```\n     *\n     */\n    public clearGrouping(name?: string | Array<string>): void {\n        this._gridAPI.clear_groupby(name);\n        this.notifyChanges(true);\n    }\n\n    /**\n     * Returns if a group is expanded or not.\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * const expandedGroup = this.grid.isExpandedGroup(this.groupRow);\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public isExpandedGroup(group: IGroupByRecord): boolean {\n        const state: IGroupByExpandState = this._getStateForGroupRow(group);\n        return state ? state.expanded : this.groupsExpanded;\n    }\n\n    /**\n     * Toggles the expansion state of a group.\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * const toggleExpGroup = this.grid.toggleGroup(this.groupRow);\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public toggleGroup(groupRow: IGroupByRecord) {\n        this._toggleGroup(groupRow);\n        this.notifyChanges();\n    }\n\n    /**\n     * Expands the specified group and all of its parent groups.\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * this.grid.fullyExpandGroup(this.groupRow);\n     * ```\n     * @memberof IgxGridComponent\n     */\n    public fullyExpandGroup(groupRow: IGroupByRecord) {\n        this._fullyExpandGroup(groupRow);\n        this.notifyChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    public isGroupByRecord(record: any): boolean {\n        // return record.records instance of GroupedRecords fails under Webpack\n        return record.records && record.records.length;\n    }\n\n    /**\n     * Toggles the expansion state of all group rows recursively.\n     * ```typescript\n     * this.grid.toggleAllGroupRows;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public toggleAllGroupRows() {\n        this.groupingExpansionState = [];\n        this.groupsExpanded = !this.groupsExpanded;\n        this.notifyChanges();\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has groupable columns.\n     * ```typescript\n     * const groupableGrid = this.grid.hasGroupableColumns;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get hasGroupableColumns(): boolean {\n        return this.columnList.some((col) => col.groupable && !col.columnGroup);\n    }\n\n    private _setGroupColsVisibility(value) {\n        if (this.columnList && !this.hasColumnLayouts) {\n            this.groupingExpressions.forEach((expr) => {\n                const col = this.getColumnByName(expr.fieldName);\n                col.hidden = value;\n            });\n        }\n    }\n\n    /**\n     * Returns if the grid's group by drop area is visible.\n     * ```typescript\n     * const dropVisible = this.grid.dropAreaVisible;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public get dropAreaVisible(): boolean {\n        return (this.draggedColumn && this.draggedColumn.groupable) ||\n            !this.chipsGoupingExpressions.length;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _getStateForGroupRow(groupRow: IGroupByRecord): IGroupByExpandState {\n        return this._gridAPI.groupBy_get_expanded_for_group(groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _toggleGroup(groupRow: IGroupByRecord) {\n        this._gridAPI.groupBy_toggle_group(groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _fullyExpandGroup(groupRow: IGroupByRecord) {\n        this._gridAPI.groupBy_fully_expand_group(groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _applyGrouping() {\n        this._gridAPI.sort_multiple(this._groupingExpressions);\n    }\n\n    /**\n     * @hidden\n     */\n    public isColumnGrouped(fieldName: string): boolean {\n        return this.groupingExpressions.find(exp => exp.fieldName === fieldName) ? true : false;\n    }\n\n    /**\n    * @hidden\n    */\n    public getContext(rowData, rowIndex): any {\n        return {\n            $implicit: rowData,\n            index: rowIndex,\n            templateID: this.isGroupByRecord(rowData) ? 'groupRow' : this.isSummaryRow(rowData) ? 'summaryRow' : 'dataRow'\n        };\n    }\n\n    /**\n    * @hidden\n    */\n    public get template(): TemplateRef<any> {\n        if (this.filteredData && this.filteredData.length === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyFilteredGridTemplate;\n        }\n\n        if (this.isLoading && (!this.data || this.dataLength === 0)) {\n            return this.loadingGridTemplate ? this.loadingGridTemplate : this.loadingGridDefaultTemplate;\n        }\n\n        if (this.dataLength === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyGridDefaultTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipRemoved(event: IBaseChipEventArgs) {\n        this.clearGrouping(event.owner.id);\n    }\n\n    /**\n     * @hidden\n     */\n    public chipsOrderChanged(event: IChipsAreaReorderEventArgs) {\n        const newGrouping = [];\n        for (let i = 0; i < event.chipsArray.length; i++) {\n            const expr = this.groupingExpressions.filter((item) => {\n                return item.fieldName === event.chipsArray[i].id;\n            })[0];\n\n            if (!this.getColumnByName(expr.fieldName).groupable) {\n                // disallow changing order if there are columns with groupable: false\n                return;\n            }\n            newGrouping.push(expr);\n        }\n        this.groupingExpansionState = [];\n        this.chipsGoupingExpressions = newGrouping;\n\n        if (event.originalEvent instanceof KeyboardEvent) {\n            // When reordered using keyboard navigation, we don't have `onMoveEnd` event.\n            this.groupingExpressions = this.chipsGoupingExpressions;\n        }\n        this.notifyChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    public chipsMovingEnded() {\n        this.groupingExpressions = this.chipsGoupingExpressions;\n        this.notifyChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipClicked(event: IChipClickEventArgs) {\n        const sortingExpr = this.sortingExpressions;\n        const columnExpr = sortingExpr.find((expr) => expr.fieldName === event.owner.id);\n        columnExpr.dir = 3 - columnExpr.dir;\n        this.sort(columnExpr);\n        this.notifyChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipKeyDown(event: IChipKeyDownEventArgs) {\n        if (event.originalEvent.key === ' ' || event.originalEvent.key === 'Spacebar' || event.originalEvent.key === 'Enter') {\n            const sortingExpr = this.sortingExpressions;\n            const columnExpr = sortingExpr.find((expr) => expr.fieldName === event.owner.id);\n            columnExpr.dir = 3 - columnExpr.dir;\n            this.sort(columnExpr);\n            this.notifyChanges();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected get defaultTargetBodyHeight(): number {\n        const allItems = this.totalItemCount || this.dataLength;\n        return this.renderedRowHeight * Math.min(this._defaultTargetRecordNumber,\n            this.paging ? Math.min(allItems, this.perPage) : allItems);\n    }\n\n    /**\n     * @hidden\n     */\n    protected getGroupAreaHeight(): number {\n        return this.groupArea ? this.groupArea.nativeElement.offsetHeight : 0;\n    }\n\n    /**\n     * @hidden\n     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.\n     * TODO: Remove for Angular 8. Calling parent class getter using super is not supported for now.\n     */\n    public getFeatureColumnsWidth() {\n        let width = super.getFeatureColumnsWidth();\n\n        if (this.groupingExpressions.length && this.headerGroupContainer) {\n            width += this.headerGroupContainer.nativeElement.offsetWidth;\n        }\n\n        return width;\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollTo(row: any | number, column: any | number): void {\n        if (this.groupingExpressions && this.groupingExpressions.length\n            && typeof(row) !== 'number') {\n            const rowIndex = this.groupingResult.indexOf(row);\n            const groupByRecord = this.groupingMetadata[rowIndex];\n            if (groupByRecord) {\n                this._fullyExpandGroup(groupByRecord);\n            }\n        }\n\n        super.scrollTo(row, column, this.groupingFlatResult);\n    }\n\n    /**\n    * @hidden\n    */\n    public get dropAreaTemplateResolved(): TemplateRef<any> {\n        if (this.dropAreaTemplate) {\n            return this.dropAreaTemplate;\n        } else {\n            return this.defaultDropAreaTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getGroupByChipTitle(expression: IGroupingExpression): string {\n        const column = this.getColumnByName(expression.fieldName);\n        return (column && column.header) || expression.fieldName;\n    }\n    /**\n     * @hidden\n     */\n    public get iconTemplate() {\n        if (this.groupsExpanded) {\n            return this.headerExpandIndicatorTemplate || this.defaultExpandedTemplate;\n        } else {\n            return this.headerCollapseIndicatorTemplate || this.defaultCollapsedTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getColumnGroupable(fieldName: string): boolean {\n        const column = this.getColumnByName(fieldName);\n        return column && column.groupable;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        super.ngAfterContentInit();\n        if (this.allowFiltering && this.hasColumnLayouts) {\n            this.filterMode = FilterMode.excelStyleFilter;\n        }\n        if (this.groupTemplate) {\n            this._groupRowTemplate = this.groupTemplate.template;\n        }\n\n        if (this.hideGroupedColumns && this.columnList && this.groupingExpressions) {\n            this._setGroupColsVisibility(this.hideGroupedColumns);\n        }\n        this._setupNavigationService();\n    }\n\n    public ngOnInit() {\n        super.ngOnInit();\n        this.onGroupingDone.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n            this.endEdit(true);\n            this.summaryService.updateSummaryCache(args);\n        });\n    }\n\n    public ngDoCheck(): void {\n        if (this.groupingDiffer && this.columnList && !this.hasColumnLayouts) {\n            const changes = this.groupingDiffer.diff(this.groupingExpressions);\n            if (changes && this.columnList) {\n                changes.forEachAddedItem((rec) => {\n                    const col = this.getColumnByName(rec.item.fieldName);\n                    col.hidden = true;\n                });\n                changes.forEachRemovedItem((rec) => {\n                    const col = this.getColumnByName(rec.item.fieldName);\n                    col.hidden = false;\n                });\n            }\n        }\n        super.ngDoCheck();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getSelectedData(formatters = false, headers = false): any[] {\n        if (this.groupingExpressions.length) {\n            const source = [];\n\n            const process = (record) => {\n                if (record.expression || record.summaries) {\n                    source.push(null);\n                    return;\n                }\n                source.push(record);\n\n            };\n\n            this.dataView.forEach(process);\n            return this.extractDataFromSelection(source, formatters, headers);\n        } else {\n            return super.getSelectedData(formatters, headers);\n        }\n    }\n\n    private _setupNavigationService() {\n        if (this.hasColumnLayouts) {\n            this.navigation = new IgxGridMRLNavigationService();\n            this.navigation.grid = this;\n        }\n    }\n\n    private checkIfNoColumnField(expression: IGroupingExpression | Array<IGroupingExpression> | any): boolean {\n        if (expression instanceof Array) {\n            for (const singleExpression of expression) {\n                if (!singleExpression.fieldName) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        return !expression.fieldName;\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray } from '../../core/utils';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { IGroupByResult } from '../../data-operations/grouping-result.interface';\nimport { IFilteringExpressionsTree, FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\nimport { IgxGridAPIService } from './grid-api.service';\nimport { IgxGridComponent } from './grid.component';\nimport { IGroupingExpression } from '../../data-operations/grouping-expression.interface';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\nimport { IFilteringStrategy } from '../../data-operations/filtering-strategy';\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridSort',\n    pure: true\n})\nexport class IgxGridSortingPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(collection: any[], expressions: ISortingExpression[], id: string, pipeTrigger: number): any[] {\n        const grid = this.gridAPI.grid;\n        let result: any[];\n\n        if (!expressions.length) {\n            result = collection;\n        } else {\n            result = DataUtil.sort(cloneArray(collection), expressions);\n        }\n        grid.filteredSortedData = result;\n\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridGroupBy',\n    pure: true\n})\nexport class IgxGridGroupingPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(collection: any[], expression: IGroupingExpression | IGroupingExpression[],\n        expansion: IGroupByExpandState | IGroupByExpandState[], defaultExpanded: boolean,\n        id: string, groupsRecords: any[], pipeTrigger: number): IGroupByResult {\n\n        const state = { expressions: [], expansion: [], defaultExpanded };\n        const grid: IgxGridComponent = this.gridAPI.grid;\n        state.expressions = grid.groupingExpressions;\n        let result: IGroupByResult;\n        const fullResult: IGroupByResult = { data: [], metadata: [] };\n\n        if (!state.expressions.length) {\n            // empty the array without changing reference\n            groupsRecords.splice(0, groupsRecords.length);\n            result = {\n                data: collection,\n                metadata: collection\n            };\n        } else {\n            state.expansion = grid.groupingExpansionState;\n            state.defaultExpanded = grid.groupsExpanded;\n            result = DataUtil.group(cloneArray(collection), state, grid, groupsRecords, fullResult);\n        }\n        grid.groupingFlatResult = result.data;\n        grid.groupingResult = fullResult.data;\n        grid.groupingMetadata = fullResult.metadata;\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridPaging',\n    pure: true\n})\nexport class IgxGridPagingPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) { }\n\n    public transform(collection: IGroupByResult, page = 0, perPage = 15, id: string, pipeTrigger: number): IGroupByResult {\n\n        if (!this.gridAPI.grid.paging) {\n            return collection;\n        }\n\n        const state = {\n            index: page,\n            recordsPerPage: perPage\n        };\n        DataUtil.correctPagingState(state, collection.data.length);\n\n        const result = {\n            data: DataUtil.page(cloneArray(collection.data), state),\n            metadata: DataUtil.page(cloneArray(collection.metadata), state)\n        };\n        if (this.gridAPI.grid.page !== state.index) {\n            this.gridAPI.grid.page = state.index;\n        }\n        this.gridAPI.grid.pagingState = state;\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridFiltering',\n    pure: true\n})\nexport class IgxGridFilteringPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) { }\n\n    public transform(collection: any[], expressionsTree: IFilteringExpressionsTree,\n        filterStrategy: IFilteringStrategy,\n        advancedExpressionsTree: IFilteringExpressionsTree, id: string, pipeTrigger: number) {\n        const grid = this.gridAPI.grid;\n        const state = {\n            expressionsTree: expressionsTree,\n            strategy: filterStrategy,\n            advancedExpressionsTree: advancedExpressionsTree\n        };\n\n        if (FilteringExpressionsTree.empty(state.expressionsTree) && FilteringExpressionsTree.empty(state.advancedExpressionsTree)) {\n            return collection;\n        }\n\n        const result = DataUtil.filter(cloneArray(collection), state);\n        grid.filteredData = result;\n        return result;\n    }\n}\n","import { Component, forwardRef, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, HostBinding } from '@angular/core';\nimport { IgxGridComponent } from './grid.component';\nimport { IgxRowComponent } from '../row.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-row',\n    templateUrl: './grid-row.component.html',\n    providers: [{ provide: IgxRowComponent, useExisting: forwardRef(() => IgxGridRowComponent) }]\n})\nexport class IgxGridRowComponent extends IgxRowComponent<IgxGridComponent> {\n\n    // R.K. TODO: Remove\n    constructor(\n        public gridAPI: GridBaseAPIService<IgxGridComponent>,\n        public crudService: IgxGridCRUDService,\n        public selectionService: IgxGridSelectionService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) {\n            // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n            super(gridAPI, crudService, selectionService, element, cdr);\n        }\n\n    @HostBinding('class.igx-grid__tr--mrl')\n    get hasColumnLayouts(): boolean {\n        return this.grid.hasColumnLayouts;\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { IgxGridAPIService } from './grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\nimport { IgxGridComponent } from './grid.component';\nimport { ISummaryRecord } from '../summaries/grid-summary';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { IGroupByResult } from '../../data-operations/grouping-result.interface';\nimport { GridSummaryCalculationMode, GridSummaryPosition } from '../common/enums';\n\n/** @hidden */\ninterface ISkipRecord {\n    skip?: boolean;\n}\n\n/** @hidden */\n@Pipe({\n    name: 'gridSummary',\n    pure: true\n})\nexport class IgxGridSummaryPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(collection: IGroupByResult,\n        hasSummary: boolean,\n        summaryCalculationMode: GridSummaryCalculationMode,\n        summaryPosition: GridSummaryPosition,\n        id: string, pipeTrigger: number, summaryPipeTrigger: number): any[] {\n\n        if (!collection.data || !hasSummary || summaryCalculationMode === GridSummaryCalculationMode.rootLevelOnly) {\n            return collection.data;\n        }\n\n        return this.addSummaryRows(id, collection, summaryPosition);\n    }\n\n    private addSummaryRows(gridId: string, collection: IGroupByResult, summaryPosition: GridSummaryPosition): any[] {\n        const recordsWithSummary = [];\n        const lastChildMap = new Map<any, IGroupByRecord[]>();\n        const grid: IgxGridComponent = this.gridAPI.grid;\n        const maxSummaryHeight = grid.summaryService.calcMaxSummaryHeight();\n\n        if (collection.metadata.length && !grid.isGroupByRecord(collection.data[0]) &&\n            grid.isGroupByRecord(collection.metadata[0]) && summaryPosition === GridSummaryPosition.bottom) {\n            const groups: Array<IGroupByRecord & ISkipRecord> = [];\n            groups.push(collection.metadata[0]);\n            while (groups[groups.length - 1].groupParent) {\n                groups.push(groups[groups.length - 1].groupParent);\n            }\n            groups.reverse();\n            groups.forEach(g => g.skip = true);\n            collection.data.splice(0, 0, ...groups);\n        }\n        for (let i = 0; i < collection.data.length; i++) {\n            const record = collection.data[i];\n            let skipAdd = false;\n            let recordId;\n            let groupByRecord: IGroupByRecord = null;\n            if (grid.isGroupByRecord(record)) {\n                skipAdd = !!record.skip;\n                record.skip = null;\n                groupByRecord = record as IGroupByRecord;\n                recordId = this.gridAPI.get_groupBy_record_id(groupByRecord);\n            } else {\n                recordId = this.gridAPI.get_row_id(record);\n            }\n            if (!skipAdd) {\n                recordsWithSummary.push(record);\n            }\n\n            if (summaryPosition === GridSummaryPosition.bottom && lastChildMap.has(recordId)) {\n                const groupRecords = lastChildMap.get(recordId);\n\n                for (let j = 0; j < groupRecords.length; j++) {\n                    const groupRecord = groupRecords[j];\n                    const groupRecordId = this.gridAPI.get_groupBy_record_id(groupRecord);\n                    const records = this.removeDeletedRecord(grid, groupRecord.records.slice());\n                    const summaries = grid.summaryService.calculateSummaries(groupRecordId, records);\n                    const summaryRecord: ISummaryRecord = {\n                        summaries: summaries,\n                        max: maxSummaryHeight\n                    };\n                    recordsWithSummary.push(summaryRecord);\n                }\n            }\n\n            if (groupByRecord === null || !grid.isExpandedGroup(groupByRecord)) {\n                continue;\n            }\n\n            if (summaryPosition === GridSummaryPosition.top) {\n                const records = this.removeDeletedRecord(grid, groupByRecord.records.slice());\n                const summaries = grid.summaryService.calculateSummaries(recordId, records);\n                const summaryRecord: ISummaryRecord = {\n                    summaries: summaries,\n                    max: maxSummaryHeight\n                };\n                recordsWithSummary.push(summaryRecord);\n            } else if (summaryPosition === GridSummaryPosition.bottom) {\n                let lastChild = groupByRecord;\n\n                while (lastChild.groups && lastChild.groups.length > 0 && grid.isExpandedGroup(lastChild)) {\n                    lastChild = lastChild.groups[lastChild.groups.length - 1];\n                }\n\n                let lastChildId;\n                if (grid.isExpandedGroup(lastChild)) {\n                    lastChildId = this.gridAPI.get_row_id(lastChild.records[lastChild.records.length - 1]);\n                } else {\n                    lastChildId = this.gridAPI.get_groupBy_record_id(lastChild);\n                }\n\n                let groupRecords = lastChildMap.get(lastChildId);\n                if (!groupRecords) {\n                    groupRecords = [];\n                    lastChildMap.set(lastChildId, groupRecords);\n                }\n                groupRecords.unshift(groupByRecord);\n            }\n        }\n\n        return recordsWithSummary;\n    }\n\n    private removeDeletedRecord(grid, data) {\n        if (!grid.transactions.enabled) {\n            return data;\n        }\n        const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === 'delete').map(t => t.id);\n        deletedRows.forEach(rowID => {\n            const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n            const index = tempData.indexOf(rowID);\n            if (index !== -1) {\n                data.splice(index, 1);\n            }\n        });\n        return data;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport {\n    IgxGroupAreaDropDirective,\n    IgxGroupByRowTemplateDirective,\n    IgxRowExpandedIndicatorDirective,\n    IgxRowCollapsedIndicatorDirective,\n    IgxHeaderExpandIndicatorDirective,\n    IgxHeaderCollapseIndicatorDirective\n} from './grid.directives';\nimport { IgxGridComponent } from './grid.component';\nimport {\n    IgxGridPagingPipe,\n    IgxGridGroupingPipe,\n    IgxGridSortingPipe,\n    IgxGridFilteringPipe\n} from './grid.pipes';\nimport { IgxGridGroupByRowComponent } from './groupby-row.component';\nimport { IgxGridRowComponent } from './grid-row.component';\nimport { IgxChipsModule } from '../../chips/chips.module';\nimport { IgxGridCommonModule } from '../grid-common.module';\nimport { DeprecateMethod } from '../../core/deprecateDecorators';\nimport { IgxGridSummaryPipe } from './grid.summary.pipe';\nimport { IgxSelectModule } from '../../select/index';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxGridComponent,\n    IgxGridRowComponent,\n    IgxGridGroupByRowComponent,\n    IgxGroupByRowTemplateDirective,\n    IgxRowExpandedIndicatorDirective,\n    IgxRowCollapsedIndicatorDirective,\n    IgxHeaderExpandIndicatorDirective,\n    IgxHeaderCollapseIndicatorDirective,\n    IgxGroupAreaDropDirective,\n    IgxGridGroupingPipe,\n    IgxGridPagingPipe,\n    IgxGridSortingPipe,\n    IgxGridFilteringPipe,\n    IgxGridSummaryPipe\n  ],\n  exports: [\n    IgxGridComponent,\n    IgxGridGroupByRowComponent,\n    IgxGridRowComponent,\n    IgxGroupByRowTemplateDirective,\n    IgxRowExpandedIndicatorDirective,\n    IgxRowCollapsedIndicatorDirective,\n    IgxHeaderExpandIndicatorDirective,\n    IgxHeaderCollapseIndicatorDirective,\n    IgxGroupAreaDropDirective,\n    IgxGridCommonModule,\n    IgxGridGroupingPipe,\n    IgxGridPagingPipe,\n    IgxGridSortingPipe,\n    IgxGridFilteringPipe,\n    IgxGridSummaryPipe\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    IgxChipsModule,\n    IgxGridCommonModule,\n    IgxSelectModule\n  ]\n})\nexport class IgxGridModule {\n  @DeprecateMethod('IgxGridModule.forRoot method is deprecated. Use IgxGridModule instead.')\n  public static forRoot() {\n    return {\n        ngModule: IgxGridModule\n    };\n  }\n}\n","import { GridBaseAPIService } from '../api.service';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { DataType } from '../../data-operations/data-util';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IRowToggleEventArgs } from './tree-grid.interfaces';\nimport { IgxColumnComponent } from '../column.component';\nimport { HierarchicalTransaction, TransactionType, State } from '../../services';\nimport { mergeObjects } from '../../core/utils';\n\nexport class IgxTreeGridAPIService extends GridBaseAPIService<IgxTreeGridComponent> {\n    public get_all_data(transactions?: boolean): any[] {\n        const grid = this.grid;\n        const data = transactions ? grid.dataWithAddedInTransactionRows : grid.flatData;\n        return data ? data : [];\n    }\n\n    public get_summary_data() {\n        const grid = this.grid;\n        const data = grid.processedRootRecords.filter(row => row.isFilteredOutParent === undefined || row.isFilteredOutParent === false)\n            .map(rec => rec.data);\n        if (grid.transactions.enabled) {\n            const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === TransactionType.DELETE).map(t => t.id);\n            deletedRows.forEach(rowID => {\n                const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n                const index = tempData.indexOf(rowID);\n                if (index !== -1) {\n                    data.splice(index, 1);\n                }\n            });\n        }\n        return data;\n    }\n\n    public expand_row(rowID: any) {\n        const grid = this.grid;\n        const expandedStates = grid.expansionStates;\n        expandedStates.set(rowID, true);\n        grid.expansionStates = expandedStates;\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public collapse_row(rowID: any) {\n        const grid = this.grid;\n        const expandedStates = grid.expansionStates;\n        expandedStates.set(rowID, false);\n        grid.expansionStates = expandedStates;\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public toggle_row_expansion(rowID: any) {\n        const grid = this.grid;\n        const expandedStates = grid.expansionStates;\n        const treeRecord = grid.records.get(rowID);\n\n        if (treeRecord) {\n            const isExpanded = this.get_row_expansion_state(treeRecord);\n            expandedStates.set(rowID, !isExpanded);\n            grid.expansionStates = expandedStates;\n        }\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    // TODO: Maybe move the focus logic in the tree cell ?\n    public trigger_row_expansion_toggle(row: ITreeGridRecord, expanded: boolean, event?: Event, visibleColumnIndex?) {\n        const grid = this.grid;\n\n        if (row.expanded === expanded ||\n            ((!row.children || !row.children.length) && (!grid.loadChildrenOnDemand ||\n            (grid.hasChildrenKey && !row.data[grid.hasChildrenKey])))) {\n            return;\n        }\n\n        const args: IRowToggleEventArgs = {\n            rowID: row.rowID,\n            expanded: expanded,\n            event: event,\n            cancel: false\n        };\n        grid.onRowToggle.emit(args);\n\n        if (args.cancel) {\n            return;\n        }\n        visibleColumnIndex = visibleColumnIndex ? visibleColumnIndex : 0;\n        const expandedStates = grid.expansionStates;\n        expandedStates.set(row.rowID, expanded);\n        grid.expansionStates = expandedStates;\n\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n\n        // TODO: Leave it to grid observer\n        requestAnimationFrame(() => {\n            const el = this.grid.selectionService.activeElement;\n            if (el) {\n                const cell = this.get_cell_by_visible_index(el.row, el.column);\n                if (cell) {\n                    cell.nativeElement.focus();\n                }\n            }\n        });\n    }\n\n    public expand_path_to_record(record: ITreeGridRecord) {\n        const grid = this.grid;\n        const expandedStates = grid.expansionStates;\n\n        while (record.parent) {\n            record = record.parent;\n            const expanded = this.get_row_expansion_state(record);\n\n            if (!expanded) {\n                expandedStates.set(record.rowID, true);\n            }\n        }\n        grid.expansionStates = expandedStates;\n\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public get_row_expansion_state(record: ITreeGridRecord): boolean {\n        const grid = this.grid;\n        const states = grid.expansionStates;\n        const expanded = states.get(record.rowID);\n\n        if (expanded !== undefined) {\n            return expanded;\n        } else {\n            return record.children && record.children.length && record.level < grid.expansionDepth;\n        }\n    }\n\n    protected update_row_in_array(value: any, rowID: any, index: number) {\n        const grid = this.grid;\n        if (grid.primaryKey && grid.foreignKey) {\n            super.update_row_in_array(value, rowID, index);\n        } else {\n            const record = grid.records.get(rowID);\n            const childData = record.parent ? record.parent.data[grid.childDataKey] : grid.data;\n            index = grid.primaryKey ? childData.map(c => c[grid.primaryKey]).indexOf(rowID) :\n                childData.indexOf(rowID);\n            childData[index] = value;\n        }\n    }\n\n    public should_apply_number_style(column: IgxColumnComponent): boolean {\n        return column.dataType === DataType.Number && column.visibleIndex !== 0;\n    }\n\n    public deleteRowById(rowID: any) {\n        const treeGrid = this.grid;\n        const flatDataWithCascadeOnDeleteAndTransactions =\n        treeGrid.primaryKey &&\n        treeGrid.foreignKey &&\n        treeGrid.cascadeOnDelete &&\n        treeGrid.transactions.enabled;\n\n        if (flatDataWithCascadeOnDeleteAndTransactions) {\n            treeGrid.transactions.startPending();\n        }\n\n        super.deleteRowById(rowID);\n\n        if (flatDataWithCascadeOnDeleteAndTransactions) {\n            treeGrid.transactions.endPending(true);\n        }\n    }\n\n    public deleteRowFromData(rowID: any, index: number) {\n        const treeGrid = this.grid;\n        const record = treeGrid.records.get(rowID);\n\n        if (treeGrid.primaryKey && treeGrid.foreignKey) {\n            index = treeGrid.primaryKey ?\n                treeGrid.data.map(c => c[treeGrid.primaryKey]).indexOf(rowID) :\n                treeGrid.data.indexOf(rowID);\n            super.deleteRowFromData(rowID, index);\n\n            if (treeGrid.cascadeOnDelete) {\n                if (record && record.children && record.children.length > 0) {\n                    for (let i = 0; i < record.children.length; i++) {\n                        const child = record.children[i];\n                        super.deleteRowById(child.rowID);\n                    }\n                }\n            }\n        } else {\n            const collection = record.parent ? record.parent.data[treeGrid.childDataKey] : treeGrid.data;\n            index = treeGrid.primaryKey ?\n                collection.map(c => c[treeGrid.primaryKey]).indexOf(rowID) :\n                collection.indexOf(rowID);\n\n            const selectedChildren = [];\n            this.get_selected_children(record, selectedChildren);\n            if (selectedChildren.length > 0) {\n                treeGrid.deselectRows(selectedChildren);\n            }\n\n            if (treeGrid.transactions.enabled) {\n                const path = treeGrid.generateRowPath(rowID);\n                treeGrid.transactions.add({\n                    id: rowID,\n                    type: TransactionType.DELETE,\n                    newValue: null,\n                    path: path\n                },\n                    collection[index]\n                );\n            } else {\n                collection.splice(index, 1);\n            }\n        }\n    }\n\n    /**\n     * Updates related row of provided grid's data source with provided new row value\n     * @param grid Grid to update data for\n     * @param rowID ID of the row to update\n     * @param rowValueInDataSource Initial value of the row as it is in data source\n     * @param rowCurrentValue Current value of the row as it is with applied previous transactions\n     * @param rowNewValue New value of the row\n     */\n    protected updateData(\n        grid: IgxTreeGridComponent,\n        rowID: any,\n        rowValueInDataSource: any,\n        rowCurrentValue: any,\n        rowNewValue: { [x: string]: any }) {\n        if (grid.transactions.enabled) {\n            const path = grid.generateRowPath(rowID);\n            const transaction: HierarchicalTransaction = {\n                id: rowID,\n                type: TransactionType.UPDATE,\n                newValue: rowNewValue,\n                path: path\n            };\n            grid.transactions.add(transaction, rowCurrentValue);\n        } else {\n            mergeObjects(rowValueInDataSource, rowNewValue);\n        }\n    }\n\n    public get_selected_children(record: ITreeGridRecord, selectedRowIDs: any[]) {\n        const grid = this.grid;\n        if (!record.children || record.children.length === 0) {\n            return;\n        }\n        for (const child of record.children) {\n            if (grid.selectionService.isRowSelected(child.rowID)) {\n                selectedRowIDs.push(child.rowID);\n            }\n            this.get_selected_children(child, selectedRowIDs);\n        }\n    }\n\n    public row_deleted_transaction(rowID: any): boolean {\n        return this.row_deleted_parent(rowID) || super.row_deleted_transaction(rowID);\n    }\n\n    private row_deleted_parent(rowID: any): boolean {\n        const grid = this.grid;\n        if (!grid) {\n            return false;\n        }\n        if ((grid.cascadeOnDelete && grid.foreignKey) || grid.childDataKey) {\n            let node = grid.records.get(rowID);\n            while (node) {\n                const state: State = grid.transactions.getState(node.rowID);\n                if (state && state.type === TransactionType.DELETE) {\n                    return true;\n                }\n                node = node.parent;\n            }\n        }\n        return false;\n    }\n}\n","import { IgxGridNavigationService } from '../grid-navigation.service';\n\nexport class IgxTreeGridNavigationService extends IgxGridNavigationService {\n\n    protected getCellSelector(visibleIndex?: number, isSummary = false): string {\n        if (isSummary) {\n            return 'igx-grid-summary-cell';\n        }\n        if (visibleIndex === 0) {\n            return 'igx-tree-grid-cell';\n        }\n        return 'igx-grid-cell';\n    }\n\n    protected getRowSelector() {\n        return 'igx-tree-grid-row';\n    }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowLoadingIndicator]'\n})\nexport class IgxRowLoadingIndicatorTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    HostBinding,\n    Input,\n    Output,\n    EventEmitter,\n    forwardRef,\n    OnInit,\n    TemplateRef,\n    QueryList,\n    ContentChild,\n    AfterContentInit,\n    ViewChild,\n    DoCheck\n} from '@angular/core';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IRowToggleEventArgs } from './tree-grid.interfaces';\nimport { HierarchicalTransaction, HierarchicalState, TransactionType } from '../../services/transaction/transaction';\nimport { IgxHierarchicalTransactionService } from '../../services/index';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IgxTreeGridNavigationService } from './tree-grid-navigation.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { mergeObjects } from '../../core/utils';\nimport { IgxColumnComponent } from '../column.component';\nimport { first, takeUntil } from 'rxjs/operators';\nimport { IgxRowLoadingIndicatorTemplateDirective } from './tree-grid.directives';\nimport { IgxForOfSyncService, IgxForOfScrollSyncService } from '../../directives/for-of/for_of.sync.service';\nimport { IgxDragIndicatorIconDirective } from '../row-drag.directive';\nimport { IgxGridNavigationService } from '../grid-navigation.service';\nimport { IgxRowIslandAPIService } from '../hierarchical-grid/row-island-api.service';\n\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Tree Grid** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid.html)\n *\n * The Ignite UI Tree Grid displays and manipulates hierarchical data with consistent schema formatted as a table and\n * provides features such as sorting, filtering, editing, column pinning, paging, column moving and hiding.\n *\n * Example:\n * ```html\n * <igx-tree-grid [data]=\"employeeData\" primaryKey=\"employeeID\" foreignKey=\"PID\" autoGenerate=\"false\">\n *   <igx-column field=\"first\" header=\"First Name\"></igx-column>\n *   <igx-column field=\"last\" header=\"Last Name\"></igx-column>\n *   <igx-column field=\"role\" header=\"Role\"></igx-column>\n * </igx-tree-grid>\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-tree-grid',\n    templateUrl: 'tree-grid.component.html',\n    providers: [\n        IgxGridSelectionService,\n        IgxGridCRUDService,\n        IgxGridSummaryService,\n        { provide: IgxGridNavigationService, useClass: IgxTreeGridNavigationService },\n        { provide: GridBaseAPIService, useClass: IgxTreeGridAPIService },\n        { provide: IgxGridBaseComponent, useExisting: forwardRef(() => IgxTreeGridComponent) },\n        IgxFilteringService,\n        IgxForOfSyncService,\n        IgxForOfScrollSyncService,\n        IgxRowIslandAPIService\n    ]\n})\nexport class IgxTreeGridComponent extends IgxGridBaseComponent implements IGridDataBindable, OnInit, DoCheck, AfterContentInit {\n    private _id = `igx-tree-grid-${NEXT_ID++}`;\n    private _data;\n    private _rowLoadingIndicatorTemplate: TemplateRef<any>;\n    protected _transactions: IgxHierarchicalTransactionService<HierarchicalTransaction, HierarchicalState>;\n\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-tree-grid [id]=\"'igx-tree-grid-1'\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public get id(): string {\n        return this._id;\n    }\n    public set id(value: string) {\n        this._id = value;\n    }\n\n    /**\n     * An @Input property that lets you fill the `IgxTreeGridComponent` with an array of data.\n     * ```html\n     * <igx-tree-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get data(): any[] {\n        return this._data;\n    }\n\n    public set data(value: any[]) {\n        this._data = value || [];\n        this.summaryService.clearSummaryCache();\n        if (this.shouldGenerate) {\n            this.setupColumns();\n        }\n        this.notifyChanges(true);\n    }\n\n    /**\n     * Returns an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    get filteredData() {\n        return this._filteredData;\n    }\n\n    /**\n     * Sets an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * this.grid.filteredData = [{\n     *       ID: 1,\n     *       Name: \"A\"\n     * }];\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    set filteredData(value) {\n        this._filteredData = value;\n\n    }\n\n    /**\n     * Get transactions service for the grid.\n     * @experimental @hidden\n     */\n    get transactions() {\n        return this._transactions;\n    }\n\n    /**\n    * @hidden\n    */\n    public flatData: any[];\n\n    /**\n    * @hidden\n    */\n    public processedExpandedFlatData: any[];\n\n    /**\n     * Returns an array of the root level `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the root record with index=2\n     * const states = this.grid.rootRecords[2];\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public rootRecords: ITreeGridRecord[];\n\n    /**\n     * Returns a map of all `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the record with primaryKey=2\n     * const states = this.grid.records.get(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public records: Map<any, ITreeGridRecord> = new Map<any, ITreeGridRecord>();\n\n    /**\n     * Returns an array of processed (filtered and sorted) root `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the processed root record with index=2\n     * const states = this.grid.processedRootRecords[2];\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public processedRootRecords: ITreeGridRecord[];\n\n    /**\n     * Returns a map of all processed (filtered and sorted) `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the processed record with primaryKey=2\n     * const states = this.grid.processedRecords.get(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public processedRecords: Map<any, ITreeGridRecord> = new Map<any, ITreeGridRecord>();\n\n    /**\n     * An @Input property that sets the child data key of the `IgxTreeGridComponent`.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [childDataKey]=\"'employees'\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public childDataKey;\n\n    /**\n     * An @Input property that sets the foreign key of the `IgxTreeGridComponent`.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\" [autoGenerate]=\"true\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public foreignKey;\n\n    /**\n     * An @Input property that sets the key indicating whether a row has children.\n     * This property is only used for load on demand scenarios.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\"\n     *                [loadChildrenOnDemand]=\"loadChildren\"\n     *                [hasChildrenKey]=\"'hasEmployees'\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public hasChildrenKey;\n\n    /**\n     * An @Input property indicating whether child records should be deleted when their parent gets deleted.\n     * By default it is set to true and deletes all children along with the parent.\n     * ```html\n     * <igx-tree-grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\" cascadeOnDelete=\"false\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public cascadeOnDelete = true;\n\n    private _expansionDepth = Infinity;\n\n    /**\n     * An @Input property that sets the count of levels to be expanded in the `IgxTreeGridComponent`. By default it is\n     * set to `Infinity` which means all levels would be expanded.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [childDataKey]=\"'employees'\" expansionDepth=\"1\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get expansionDepth(): number {\n        return this._expansionDepth;\n    }\n\n    public set expansionDepth(value: number) {\n        this._expansionDepth = value;\n        this.notifyChanges();\n    }\n\n    private _expansionStates: Map<any, boolean> = new Map<any, boolean>();\n\n    /**\n     * Returns a list of key-value pairs [row ID, expansion state]. Includes only states that differ from the default one.\n     * ```typescript\n     * const expansionStates = this.grid.expansionStates;\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get expansionStates() {\n        return this._expansionStates;\n    }\n\n    /**\n     * Sets a list of key-value pairs [row ID, expansion state].\n     * ```typescript\n     * const states = new Map<any, boolean>();\n     * states.set(1, true);\n     * this.grid.expansionStates = states;\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [childDataKey]=\"'employees'\" [(expansionStates)]=\"model.expansionStates\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public set expansionStates(value) {\n        this._expansionStates = this.cloneMap(value);\n        this.expansionStatesChange.emit(this._expansionStates);\n        if (this.gridAPI.grid) {\n            this.cdr.detectChanges();\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public expansionStatesChange = new EventEmitter<Map<any, boolean>>();\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxRowLoadingIndicatorTemplateDirective, { read: IgxRowLoadingIndicatorTemplateDirective, static: false })\n    protected rowLoadingTemplate: IgxRowLoadingIndicatorTemplateDirective;\n\n    /**\n     * The custom template, if any, that should be used when rendering the row drag indicator icon\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.dragIndicatorIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-grid #grid>\n     *      ...\n     *      <ng-template igxDragIndicatorIcon>\n     *          <igx-icon fontSet=\"material\">info</igx-icon>\n     *      </ng-template>\n     *  </igx-grid>\n     * ```\n     */\n    @ContentChild(IgxDragIndicatorIconDirective, { read: TemplateRef, static: false })\n    public dragIndicatorIconTemplate: TemplateRef<any> = null;\n\n    /**\n     * An @Input property that provides a template for the row loading indicator when load on demand is enabled.\n     * ```html\n     * <ng-template #rowLoadingTemplate>\n     *     <igx-icon fontSet=\"material\">loop</igx-icon>\n     * </ng-template>\n     *\n     * <igx-tree-grid #grid [data]=\"employeeData\" [primaryKey]=\"'ID'\" [foreignKey]=\"'parentID'\"\n     *                [loadChildrenOnDemand]=\"loadChildren\"\n     *                [rowLoadingIndicatorTemplate]=\"rowLoadingTemplate\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get rowLoadingIndicatorTemplate(): TemplateRef<any> {\n        return this._rowLoadingIndicatorTemplate;\n    }\n\n    public set rowLoadingIndicatorTemplate(value: TemplateRef<any>) {\n        this._rowLoadingIndicatorTemplate = value;\n        this.notifyChanges();\n    }\n\n    /**\n     * An @Input property that provides a callback for loading child rows on demand.\n     * ```html\n     * <igx-tree-grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\" [loadChildrenOnDemand]=\"loadChildren\">\n     * </igx-tree-grid>\n     * ```\n     * ```typescript\n     * public loadChildren = (parentID: any, done: (children: any[]) => void) => {\n     *     this.dataService.getData(parentID, children => done(children));\n     * }\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public loadChildrenOnDemand: (parentID: any, done: (children: any[]) => void) => void;\n\n    /**\n     * Emitted when the expanded state of a row gets changed.\n     * ```typescript\n     * rowToggle(event: IRowToggleEventArgs){\n     *  // the id of the row\n     *  const rowID = event.rowID;\n     *  // the new expansion state\n     *  const newExpandedState = event.expanded;\n     *  // the original event that triggered onRowToggle\n     *  const originalEvent = event.event;\n     *  // whether the event should be cancelled\n     *  event.cancel = true;\n     * }\n     * ```\n     * ```html\n     * <igx-tree-grid [data]=\"employeeData\" (onRowToggle)=\"rowToggle($event)\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Output()\n    public onRowToggle = new EventEmitter<IRowToggleEventArgs>();\n\n    /**\n     * @hidden\n     */\n    public loadingRows = new Set<any>();\n\n    // Kind of stupid\n    private get _gridAPI(): IgxTreeGridAPIService {\n        return this.gridAPI as IgxTreeGridAPIService;\n    }\n    private _filteredData = null;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('dragIndicatorIconBase', { read: TemplateRef, static: true })\n    public dragIndicatorIconBase: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        super.ngOnInit();\n\n        this.onRowToggle.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n            this.loadChildrenOnRowExpansion(args);\n        });\n    }\n\n    ngDoCheck() {\n        super.ngDoCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        if (this.rowLoadingTemplate) {\n            this._rowLoadingIndicatorTemplate = this.rowLoadingTemplate.template;\n        }\n        super.ngAfterContentInit();\n    }\n\n    private loadChildrenOnRowExpansion(args: IRowToggleEventArgs) {\n        if (this.loadChildrenOnDemand) {\n            const parentID = args.rowID;\n\n            if (args.expanded && !this._expansionStates.has(parentID)) {\n                this.loadingRows.add(parentID);\n\n                this.loadChildrenOnDemand(parentID, children => {\n                    this.loadingRows.delete(parentID);\n                    this.addChildRows(children, parentID);\n                    this.notifyChanges();\n\n                    requestAnimationFrame(() => {\n                        const cellID = this.selectionService.activeElement;\n                        if (cellID) {\n                            const cell = this._gridAPI.get_cell_by_index(cellID.row, cellID.column);\n                            if (cell) {\n                                cell.nativeElement.focus();\n                            }\n                        }\n                    });\n                });\n            }\n        }\n    }\n\n    private addChildRows(children: any[], parentID: any) {\n        if (this.primaryKey && this.foreignKey) {\n            for (const child of children) {\n                child[this.foreignKey] = parentID;\n            }\n            this.data.push(...children);\n        } else if (this.childDataKey) {\n            let parent = this.records.get(parentID);\n            let parentData = parent.data;\n\n            if (this.transactions.enabled && this.transactions.getAggregatedChanges(true).length) {\n                const path = [];\n                while (parent) {\n                    path.push(parent.rowID);\n                    parent = parent.parent;\n                }\n\n                let collection = this.data;\n                let record: any;\n                for (let i = path.length - 1; i >= 0; i--) {\n                    const pid = path[i];\n                    record = collection.find(r => r[this.primaryKey] === pid);\n\n                    if (!record) {\n                        break;\n                    }\n                    collection = record[this.childDataKey];\n                }\n                if (record) {\n                    parentData = record;\n                }\n            }\n\n            parentData[this.childDataKey] = children;\n        }\n        this.selectionService.clearHeaderCBState();\n        this._pipeTrigger++;\n    }\n\n    private cloneMap(mapIn: Map<any, boolean>): Map<any, boolean> {\n        const mapCloned: Map<any, boolean> = new Map<any, boolean>();\n\n        mapIn.forEach((value: boolean, key: any, mapObj: Map<any, boolean>) => {\n\n            mapCloned.set(key, value);\n        });\n\n        return mapCloned;\n    }\n\n    /**\n     * Expands the `IgxTreeGridRowComponent` with the specified rowID.\n     * @param rowID The identifier of the row to be expanded.\n     * ```typescript\n     * this.grid.expandRow(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public expandRow(rowID: any) {\n        this._gridAPI.expand_row(rowID);\n    }\n\n    /**\n     * Collapses the `IgxTreeGridRowComponent` with the specified rowID.\n     * @param rowID The identifier of the row to be collapsed.\n     * ```typescript\n     * this.grid.collapseRow(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public collapseRow(rowID: any) {\n        this._gridAPI.collapse_row(rowID);\n    }\n\n    /**\n     * Toggles the expansion state of the `IgxTreeGridRowComponent` with the specified rowID.\n     * @param rowID The identifier of the row to be toggled.\n     * ```typescript\n     * this.grid.toggleRow(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public toggleRow(rowID: any) {\n        this._gridAPI.toggle_row_expansion(rowID);\n    }\n\n    /**\n     * Expands all rows.\n     * ```typescript\n     * this.grid.expandAll();\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public expandAll() {\n        this._expansionDepth = Infinity;\n        this.expansionStates = new Map<any, boolean>();\n    }\n\n    /**\n     * Collapses all rows.\n     * ```typescript\n     * this.grid.collapseAll();\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public collapseAll() {\n        this._expansionDepth = 0;\n        this.expansionStates = new Map<any, boolean>();\n    }\n\n    /**\n     * Creates a new `IgxTreeGridRowComponent` with the given data. If a parentRowID is not specified, the newly created\n     * row would be added at the root level. Otherwise, it would be added as a child of the row whose primaryKey matches\n     * the specified parentRowID. If the parentRowID does not exist, an error would be thrown.\n     * ```typescript\n     * const record = {\n     *     ID: this.grid.data[this.grid1.data.length - 1].ID + 1,\n     *     Name: this.newRecord\n     * };\n     * this.grid.addRow(record, 1); // Adds a new child row to the row with ID=1.\n     * ```\n     * @param data\n     * @param parentRowID\n     * @memberof IgxTreeGridComponent\n     */\n    public addRow(data: any, parentRowID?: any) {\n        if (parentRowID !== undefined && parentRowID !== null) {\n            super.endEdit(true);\n\n            const state = this.transactions.getState(parentRowID);\n            // we should not allow adding of rows as child of deleted row\n            if (state && state.type === TransactionType.DELETE) {\n                throw Error(`Cannot add child row to deleted parent row`);\n            }\n\n            const parentRecord = this.records.get(parentRowID);\n\n            if (!parentRecord) {\n                throw Error('Invalid parent row ID!');\n            }\n            this.summaryService.clearSummaryCache({rowID: parentRecord.rowID});\n            if (this.primaryKey && this.foreignKey) {\n                data[this.foreignKey] = parentRowID;\n                super.addRow(data);\n            } else {\n                const parentData = parentRecord.data;\n                const childKey = this.childDataKey;\n                if (this.transactions.enabled) {\n                    const rowId = this.primaryKey ? data[this.primaryKey] : data;\n                    const path: any[] = [];\n                    path.push(...this.generateRowPath(parentRowID));\n                    path.push(parentRowID);\n                    this.transactions.add({\n                        id: rowId,\n                        path: path,\n                        newValue: data,\n                        type: TransactionType.ADD\n                    } as HierarchicalTransaction,\n                        null);\n                } else {\n                    if (!parentData[childKey]) {\n                        parentData[childKey] = [];\n                    }\n                    parentData[childKey].push(data);\n                }\n                this.onRowAdded.emit({ data });\n                this._pipeTrigger++;\n                this.notifyChanges();\n            }\n        } else {\n            if (this.primaryKey && this.foreignKey) {\n                const rowID = data[this.foreignKey];\n                this.summaryService.clearSummaryCache({rowID: rowID});\n            }\n            super.addRow(data);\n        }\n    }\n\n    /** @hidden */\n    public deleteRowById(rowId: any) {\n        //  if this is flat self-referencing data, and CascadeOnDelete is set to true\n        //  and if we have transactions we should start pending transaction. This allows\n        //  us in case of delete action to delete all child rows as single undo action\n        this._gridAPI.deleteRowById(rowId);\n\n    }\n\n    /** @hidden */\n    public generateRowPath(rowId: any): any[] {\n        const path: any[] = [];\n        let record = this.records.get(rowId);\n\n        while (record.parent) {\n            path.push(record.parent.rowID);\n            record = record.parent;\n        }\n\n        return path.reverse();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    protected getDataBasedBodyHeight(): number {\n        return !this.flatData || (this.flatData.length < this._defaultTargetRecordNumber) ?\n            0 : this.defaultTargetBodyHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollTo(row: any | number, column: any | number): void {\n        let delayScrolling = false;\n        let record: ITreeGridRecord;\n\n        if (typeof(row) !== 'number') {\n            const rowData = row;\n            const rowID = this._gridAPI.get_row_id(rowData);\n            record = this.processedRecords.get(rowID);\n            this._gridAPI.expand_path_to_record(record);\n\n            if (this.paging) {\n                const rowIndex = this.processedExpandedFlatData.indexOf(rowData);\n                const page = Math.floor(rowIndex / this.perPage);\n\n                if (this.page !== page) {\n                    delayScrolling = true;\n                    this.page = page;\n                }\n            }\n        }\n\n        if (delayScrolling) {\n            this.verticalScrollContainer.onDataChanged.pipe(first()).subscribe(() => {\n                this.scrollDirective(this.verticalScrollContainer,\n                    typeof(row) === 'number' ? row : this.dataView.indexOf(record));\n            });\n        } else {\n            this.scrollDirective(this.verticalScrollContainer,\n                typeof(row) === 'number' ? row : this.dataView.indexOf(record));\n        }\n\n        this.scrollToHorizontally(column);\n    }\n\n    /**\n    * @hidden\n    */\n    public getContext(rowData: any, rowIndex: Number): any {\n        return {\n            $implicit: rowData,\n            index: rowIndex,\n            templateID: this.isSummaryRow(rowData) ? 'summaryRow' : 'dataRow'\n        };\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getSelectedData(formatters = false, headers = false): any[] {\n        const source = [];\n\n        const process = (record) => {\n            if (record.summaries) {\n                source.push(null);\n                return;\n            }\n            source.push(record.data);\n        };\n\n        this.dataView.forEach(process);\n        return this.extractDataFromSelection(source, formatters, headers);\n    }\n\n    /**\n    * @hidden\n    */\n    public get template(): TemplateRef<any> {\n        if (this.filteredData && this.filteredData.length === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyFilteredGridTemplate;\n        }\n\n        if (this.isLoading && (!this.data || this.dataLength === 0)) {\n            return this.loadingGridTemplate ? this.loadingGridTemplate : this.loadingGridDefaultTemplate;\n        }\n\n        if (this.dataLength === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyGridDefaultTemplate;\n        }\n    }\n\n    protected writeToData(rowIndex: number, value: any) {\n        mergeObjects(this.flatData[rowIndex], value);\n    }\n\n    /**\n     * @hidden\n    */\n   protected initColumns(collection: QueryList<IgxColumnComponent>, cb: Function = null) {\n        if (this.hasColumnLayouts) {\n            // invalid configuration - tree grid should not allow column layouts\n            // remove column layouts\n            const nonColumnLayoutColumns = this.columnList.filter((col) => !col.columnLayout && !col.columnLayoutChild);\n            this.columnList.reset(nonColumnLayoutColumns);\n        }\n        super.initColumns(collection, cb);\n    }\n}\n","import { Component, forwardRef, Input, ViewChildren, QueryList, HostBinding, DoCheck, ChangeDetectionStrategy } from '@angular/core';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { IgxRowComponent } from '../row.component';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-tree-grid-row',\n    templateUrl: 'tree-grid-row.component.html',\n    providers: [{ provide: IgxRowComponent, useExisting: forwardRef(() => IgxTreeGridRowComponent) }]\n})\nexport class IgxTreeGridRowComponent extends IgxRowComponent<IgxTreeGridComponent> implements DoCheck {\n    private _treeRow: ITreeGridRecord;\n\n    /**\n     * The rendered cells in the row component.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1);\n     * const cells = row.cells;\n     * ```\n     */\n    @ViewChildren('treeCell')\n    public cells: QueryList<any>;\n\n    /**\n     * The `ITreeGridRecord` passed to the row component.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * const treeRow = row.treeRow;\n     * ```\n     */\n    @Input()\n    public get treeRow(): ITreeGridRecord {\n        return this._treeRow;\n    }\n\n    public set treeRow(value: ITreeGridRecord) {\n        if (this._treeRow !== value) {\n            this._treeRow = value;\n            this.rowData = this._treeRow.data;\n        }\n    }\n\n    /**\n     * Returns a value indicating whether the row component is expanded.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * const expanded = row.expanded;\n     * ```\n     */\n    @HostBinding('attr.aria-expanded')\n    get expanded(): boolean {\n        return this._treeRow.expanded;\n    }\n\n    /**\n     * Sets a value indicating whether the row component is expanded.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * row.expanded = true;\n     * ```\n     */\n    set expanded(value: boolean) {\n        (this.gridAPI as IgxTreeGridAPIService).trigger_row_expansion_toggle(this._treeRow, value);\n    }\n\n    /**\n     * @hidden\n     */\n    public isLoading: boolean;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    get viewIndex(): number {\n        return this.index + this.grid.page * this.grid.perPage;\n    }\n\n    /**\n     * @hidden\n     */\n    public get showIndicator() {\n        return this.grid.loadChildrenOnDemand ?\n            this.grid.expansionStates.has(this.rowID) ?\n                this.treeRow.children && this.treeRow.children.length :\n                this.grid.hasChildrenKey ?\n                    this.rowData[this.grid.hasChildrenKey] :\n                    true :\n            this.treeRow.children && this.treeRow.children.length;\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveClasses(): string {\n        const classes = super.resolveClasses();\n        const filteredClass = this.treeRow.isFilteredOutParent ? 'igx-grid__tr--filtered' : '';\n        return `${classes} ${filteredClass}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck() {\n        this.isLoading = this.grid.loadChildrenOnDemand ? this.grid.loadingRows.has(this.rowID) : false;\n        super.ngDoCheck();\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray, cloneHierarchicalArray } from '../../core/utils';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'treeGridHierarchizing',\n    pure: true\n})\nexport class IgxTreeGridHierarchizingPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(collection: any[], primaryKey: string, foreignKey: string, childDataKey: string,\n        id: string, pipeTrigger: number): ITreeGridRecord[] {\n        const grid = this.gridAPI.grid;\n        let hierarchicalRecords: ITreeGridRecord[] = [];\n        const treeGridRecordsMap = new Map<any, ITreeGridRecord>();\n        const flatData: any[] = [];\n\n        if (primaryKey && foreignKey) {\n            hierarchicalRecords = this.hierarchizeFlatData(id, collection, primaryKey, foreignKey, treeGridRecordsMap, flatData);\n        } else if (childDataKey) {\n            hierarchicalRecords = this.hierarchizeRecursive(id, collection, primaryKey, childDataKey, undefined,\n                flatData, 0, treeGridRecordsMap);\n        }\n\n        grid.flatData = flatData;\n        grid.records = treeGridRecordsMap;\n        grid.rootRecords = hierarchicalRecords;\n        return hierarchicalRecords;\n    }\n\n    private getRowID(primaryKey: any, rowData: any) {\n        return primaryKey ? rowData[primaryKey] : rowData;\n    }\n\n    private hierarchizeFlatData(id: string, collection: any[], primaryKey: string, foreignKey: string,\n        map: Map<any, ITreeGridRecord>, flatData: any[]):\n        ITreeGridRecord[] {\n        const result: ITreeGridRecord[] = [];\n        const missingParentRecords: ITreeGridRecord[] = [];\n        collection.forEach(row => {\n            const record: ITreeGridRecord = {\n                rowID: this.getRowID(primaryKey, row),\n                data: row,\n                children: []\n            };\n            const parent = map.get(row[foreignKey]);\n            if (parent) {\n                record.parent = parent;\n                parent.children.push(record);\n            } else {\n                missingParentRecords.push(record);\n            }\n\n            map.set(row[primaryKey], record);\n        });\n\n        missingParentRecords.forEach(record => {\n            const parent = map.get(record.data[foreignKey]);\n            if (parent) {\n                record.parent = parent;\n                parent.children.push(record);\n            } else {\n                result.push(record);\n            }\n        });\n\n        this.setIndentationLevels(id, result, 0, flatData);\n\n        return result;\n    }\n\n    private setIndentationLevels(id: string, collection: ITreeGridRecord[], indentationLevel: number, flatData: any[]) {\n        for (let i = 0; i < collection.length; i++) {\n            const record = collection[i];\n            record.level = indentationLevel;\n            record.expanded = this.gridAPI.get_row_expansion_state(record);\n            flatData.push(record.data);\n\n            if (record.children && record.children.length > 0) {\n                this.setIndentationLevels(id, record.children, indentationLevel + 1, flatData);\n            }\n        }\n    }\n\n    private hierarchizeRecursive(id: string, collection: any[], primaryKey: string, childDataKey: string,\n        parent: ITreeGridRecord, flatData: any[], indentationLevel: number, map: Map<any, ITreeGridRecord>): ITreeGridRecord[] {\n        const result: ITreeGridRecord[] = [];\n\n        for (let i = 0; i < collection.length; i++) {\n            const item = collection[i];\n            const record: ITreeGridRecord = {\n                rowID: this.getRowID(primaryKey, item),\n                data: item,\n                parent: parent,\n                level: indentationLevel\n            };\n            record.expanded = this.gridAPI.get_row_expansion_state(record);\n            flatData.push(item);\n            map.set(record.rowID, record);\n            record.children = item[childDataKey] ?\n                this.hierarchizeRecursive(id, item[childDataKey], primaryKey, childDataKey, record, flatData, indentationLevel + 1, map) :\n                undefined;\n            result.push(record);\n        }\n\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'treeGridFlattening',\n    pure: true\n})\nexport class IgxTreeGridFlatteningPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(collection: ITreeGridRecord[], id: string,\n        expandedLevels: number, expandedStates: Map<any, boolean>, pipeTrigger: number): any[] {\n\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n        const data: ITreeGridRecord[] = [];\n\n        grid.processedRootRecords = collection;\n        grid.processedRecords = new Map<any, ITreeGridRecord>();\n\n        this.getFlatDataRecursive(collection, data, expandedLevels, expandedStates, id, true);\n\n        grid.processedExpandedFlatData = data.map(r => r.data);\n\n        return data;\n    }\n\n    private getFlatDataRecursive(collection: ITreeGridRecord[], data: ITreeGridRecord[],\n        expandedLevels: number, expandedStates: Map<any, boolean>, gridID: string,\n        parentExpanded: boolean) {\n        if (!collection || !collection.length) {\n            return;\n        }\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n\n        for (let i = 0; i < collection.length; i++) {\n            const hierarchicalRecord = collection[i];\n\n            if (parentExpanded) {\n                data.push(hierarchicalRecord);\n            }\n\n            hierarchicalRecord.expanded = this.gridAPI.get_row_expansion_state(hierarchicalRecord);\n\n            this.updateNonProcessedRecordExpansion(grid, hierarchicalRecord);\n\n            grid.processedRecords.set(hierarchicalRecord.rowID, hierarchicalRecord);\n\n            this.getFlatDataRecursive(hierarchicalRecord.children, data, expandedLevels,\n                expandedStates, gridID, parentExpanded && hierarchicalRecord.expanded);\n        }\n    }\n\n    private updateNonProcessedRecordExpansion(grid: IgxTreeGridComponent, record: ITreeGridRecord) {\n        const rec = grid.records.get(record.rowID);\n        rec.expanded = record.expanded;\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridSorting',\n    pure: true\n})\nexport class IgxTreeGridSortingPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(\n        hierarchicalData: ITreeGridRecord[],\n        expressions: ISortingExpression[],\n        id: string,\n        pipeTrigger: number): ITreeGridRecord[] {\n        const grid = this.gridAPI.grid;\n\n        let result: ITreeGridRecord[];\n        if (!expressions.length) {\n            result = hierarchicalData;\n        } else {\n            result = DataUtil.treeGridSort(hierarchicalData, expressions);\n        }\n        const filteredSortedData = [];\n        this.flattenTreeGridRecords(result, filteredSortedData);\n        grid.filteredSortedData = filteredSortedData;\n\n        return result;\n    }\n\n    private flattenTreeGridRecords(records: ITreeGridRecord[], flatData: any[]) {\n        if (records && records.length) {\n            for (const record of records) {\n                flatData.push(record.data);\n                this.flattenTreeGridRecords(record.children, flatData);\n            }\n        }\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridPaging',\n    pure: true\n})\nexport class IgxTreeGridPagingPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(collection: ITreeGridRecord[], page = 0, perPage = 15, id: string, pipeTrigger: number): ITreeGridRecord[] {\n        const grid = this.gridAPI.grid;\n        if (!grid.paging) {\n            return collection;\n        }\n\n        const len = collection.length;\n        const totalPages = Math.ceil(len / perPage);\n\n        const state = {\n            index: (totalPages > 0 && page >= totalPages) ? totalPages - 1 : page,\n            recordsPerPage: perPage\n        };\n\n        const result: ITreeGridRecord[] = DataUtil.page(cloneArray(collection), state);\n        grid.pagingState = state;\n        (grid as any)._page = state.index;\n\n        return result;\n    }\n}\n/** @hidden */\n@Pipe({\n    name: 'treeGridTransaction',\n    pure: true\n})\nexport class IgxTreeGridTransactionPipe implements PipeTransform {\n\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    transform(collection: any[], id: string, pipeTrigger: number): any[] {\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n\n        if (grid.transactions.enabled) {\n            const aggregatedChanges = grid.transactions.getAggregatedChanges(true);\n            if (aggregatedChanges.length > 0) {\n                const primaryKey = grid.primaryKey;\n                if (!primaryKey) {\n                    return collection;\n                }\n\n                const foreignKey = grid.foreignKey;\n                const childDataKey = grid.childDataKey;\n\n                if (foreignKey) {\n                    const flatDataClone = cloneArray(collection);\n                    return DataUtil.mergeTransactions(\n                        flatDataClone,\n                        aggregatedChanges,\n                        grid.primaryKey);\n                } else if (childDataKey) {\n                    const hierarchicalDataClone = cloneHierarchicalArray(collection, childDataKey);\n                    return DataUtil.mergeHierarchicalTransactions(\n                        hierarchicalDataClone,\n                        aggregatedChanges,\n                        childDataKey,\n                        grid.primaryKey);\n                }\n            }\n        }\n        return collection;\n    }\n}\n","import { Component, ChangeDetectorRef, ElementRef, ViewChild, Inject,\n     ChangeDetectionStrategy, NgZone, OnInit, Input, TemplateRef } from '@angular/core';\nimport { IgxGridCellComponent } from '../cell.component';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { getNodeSizeViaRange, PlatformUtil } from '../../core/utils';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { HammerGesturesManager } from '../../core/touch';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-tree-grid-cell',\n    templateUrl: 'tree-cell.component.html',\n    providers: [HammerGesturesManager]\n})\nexport class IgxTreeGridCellComponent extends IgxGridCellComponent implements OnInit {\n    private treeGridAPI: IgxTreeGridAPIService;\n\n    constructor(\n                selectionService: IgxGridSelectionService,\n                crudService: IgxGridCRUDService,\n                gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n                cdr: ChangeDetectorRef,\n                element: ElementRef,\n                protected zone: NgZone,\n                touchManager: HammerGesturesManager,\n                @Inject(DOCUMENT) public document,\n                protected platformUtil: PlatformUtil) {\n        super(selectionService, crudService, gridAPI, cdr, element, zone, touchManager, platformUtil);\n        this.treeGridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     */\n    @Input()\n    expanded = false;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    level = 0;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    showIndicator = false;\n\n    @ViewChild('indicator', { read: ElementRef, static: false })\n    public indicator: ElementRef;\n\n    @ViewChild('indentationDiv', { read: ElementRef, static: false })\n    public indentationDiv: ElementRef;\n\n    @ViewChild('defaultContentElement', { read: ElementRef, static: false })\n    public defaultContentElement: ElementRef;\n\n    /**\n    * @hidden\n    */\n   @ViewChild('defaultExpandedTemplate', { read: TemplateRef, static: true })\n   protected defaultExpandedTemplate: TemplateRef<any>;\n\n    /**\n    * @hidden\n    */\n   @ViewChild('defaultCollapsedTemplate', { read: TemplateRef, static: true })\n   protected defaultCollapsedTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public isLoading: boolean;\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        super.ngOnInit();\n    }\n\n    /**\n     * @hidden\n     */\n    public toggle(event: Event) {\n        event.stopPropagation();\n        this.treeGridAPI.trigger_row_expansion_toggle(this.row.treeRow, !this.row.expanded, event, this.visibleColumnIndex);\n    }\n\n    /**\n     * @hidden\n     */\n    public onIndicatorFocus() {\n        this.gridAPI.submit_value();\n        this.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    public onLoadingDblClick(event: Event) {\n        event.stopPropagation();\n    }\n\n    /**\n     * @hidden\n     */\n    public calculateSizeToFit(range: any): number {\n        const indicatorWidth = this.indicator.nativeElement.getBoundingClientRect().width;\n        const indicatorStyle = this.document.defaultView.getComputedStyle(this.indicator.nativeElement);\n        const indicatorMargin = parseFloat(indicatorStyle.marginRight);\n        let leftPadding = 0;\n        if (this.indentationDiv) {\n            const indentationStyle = this.document.defaultView.getComputedStyle(this.indentationDiv.nativeElement);\n            leftPadding = parseFloat(indentationStyle.paddingLeft);\n        }\n        const largestWidth = Math.max(...Array.from(this.nativeElement.children)\n            .map((child) => getNodeSizeViaRange(range, child)));\n        return largestWidth + indicatorWidth + indicatorMargin + leftPadding;\n    }\n\n    /**\n     * @hidden\n    */\n    public get iconTemplate() {\n        if (this.expanded) {\n            return this.grid.rowExpandedIndicatorTemplate || this.defaultExpandedTemplate;\n        } else {\n            return this.grid.rowCollapsedIndicatorTemplate || this.defaultCollapsedTemplate;\n        }\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { ISummaryRecord } from '../summaries/grid-summary';\nimport { GridSummaryCalculationMode, GridSummaryPosition } from '../common/enums';\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridSummary',\n    pure: true\n})\nexport class IgxTreeGridSummaryPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n     }\n\n    public transform(flatData: ITreeGridRecord[],\n        hasSummary: boolean,\n        summaryCalculationMode: GridSummaryCalculationMode,\n        summaryPosition: GridSummaryPosition,\n        id: string, pipeTrigger: number, summaryPipeTrigger: number): any[] {\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n\n        if (!flatData || !hasSummary || summaryCalculationMode === GridSummaryCalculationMode.rootLevelOnly) {\n            return flatData;\n        }\n\n        return this.addSummaryRows(grid, flatData, summaryPosition);\n    }\n\n    private addSummaryRows(grid: IgxTreeGridComponent, collection: ITreeGridRecord[], summaryPosition: GridSummaryPosition): any[] {\n        const recordsWithSummary = [];\n        const maxSummaryHeight = grid.summaryService.calcMaxSummaryHeight();\n\n        for (let i = 0; i < collection.length; i++) {\n            const record = collection[i];\n            recordsWithSummary.push(record);\n\n            const isExpanded = record.children && record.children.length > 0 && record.expanded;\n\n            if (summaryPosition === GridSummaryPosition.bottom && !isExpanded) {\n                let childRecord = record;\n                let parent = record.parent;\n\n                while (parent) {\n                    const children = parent.children;\n\n                    if (children[children.length - 1] === childRecord ) {\n                        let childData = children.filter(r => !r.isFilteredOutParent).map(r => r.data);\n                        childData = this.removeDeletedRecord(grid, parent.rowID, childData);\n                        const summaries = grid.summaryService.calculateSummaries(parent.rowID, childData);\n                        const summaryRecord: ISummaryRecord = {\n                            summaries: summaries,\n                            max: maxSummaryHeight,\n                            cellIndentation: parent.level + 1\n                        };\n                        recordsWithSummary.push(summaryRecord);\n\n                        childRecord = parent;\n                        parent = childRecord.parent;\n                    } else {\n                        break;\n                    }\n                }\n            } else if (summaryPosition === GridSummaryPosition.top && isExpanded) {\n                let childData = record.children.filter(r => !r.isFilteredOutParent).map(r => r.data);\n                childData = this.removeDeletedRecord(grid, record.rowID, childData);\n                const summaries = grid.summaryService.calculateSummaries(record.rowID, childData);\n                const summaryRecord: ISummaryRecord = {\n                    summaries: summaries,\n                    max: maxSummaryHeight,\n                    cellIndentation: record.level + 1\n                };\n                recordsWithSummary.push(summaryRecord);\n            }\n        }\n        return recordsWithSummary;\n    }\n\n    private removeDeletedRecord(grid, rowId, data) {\n        if (!grid.transactions.enabled || !grid.cascadeOnDelete) {\n            return data;\n        }\n        const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === 'delete').map(t => t.id);\n        let row = grid.records.get(rowId);\n        if (!row && deletedRows.lenght === 0) { return []; }\n        row = row.children ? row : row.parent;\n        while (row) {\n            rowId = row.rowID;\n            if (deletedRows.indexOf(rowId) !== -1) {\n                return [];\n            }\n            row = row.parent;\n        }\n        deletedRows.forEach(rowID => {\n            const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n            const index = tempData.indexOf(rowID);\n            if (index !== -1) {\n                data.splice(index, 1);\n            }\n        });\n        return data;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { IgxTreeGridRowComponent } from './tree-grid-row.component';\nimport { IgxChipsModule } from '../../chips/chips.module';\nimport { IgxGridCommonModule } from '../grid-common.module';\nimport { IgxTreeGridHierarchizingPipe } from './tree-grid.pipes';\nimport { IgxTreeGridFlatteningPipe, IgxTreeGridSortingPipe, IgxTreeGridPagingPipe, IgxTreeGridTransactionPipe } from './tree-grid.pipes';\nimport { IgxTreeGridCellComponent } from './tree-cell.component';\nimport { IgxTreeGridFilteringPipe } from './tree-grid.filtering.pipe';\nimport { IgxTreeGridSummaryPipe } from './tree-grid.summary.pipe';\nimport { IgxRowLoadingIndicatorTemplateDirective } from './tree-grid.directives';\nimport { IgxSelectModule } from '../../select/index';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxTreeGridComponent,\n    IgxTreeGridRowComponent,\n    IgxTreeGridCellComponent,\n    IgxTreeGridHierarchizingPipe,\n    IgxTreeGridFlatteningPipe,\n    IgxTreeGridSortingPipe,\n    IgxTreeGridFilteringPipe,\n    IgxTreeGridPagingPipe,\n    IgxTreeGridTransactionPipe,\n    IgxTreeGridSummaryPipe,\n    IgxRowLoadingIndicatorTemplateDirective\n  ],\n  exports: [\n    IgxTreeGridComponent,\n    IgxTreeGridRowComponent,\n    IgxTreeGridCellComponent,\n    IgxRowLoadingIndicatorTemplateDirective,\n    IgxGridCommonModule\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    IgxChipsModule,\n    IgxGridCommonModule,\n    IgxSelectModule\n  ]\n})\nexport class IgxTreeGridModule {\n}\n","import { IgxGridNavigationService } from '../grid-navigation.service';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { first } from 'rxjs/operators';\nimport { IgxColumnComponent } from '../../grids/column.component';\nimport { ISelectionNode } from '../../core/grid-selection';\nimport { isIE } from '../../core/utils';\nimport { FilterMode } from '../common/enums';\n\nexport class IgxHierarchicalGridNavigationService extends IgxGridNavigationService {\n    public grid: IgxHierarchicalGridComponent;\n\n    protected getCellSelector(visibleIndex?: number, isSummary = false) {\n        return isSummary ? 'igx-grid-summary-cell' : 'igx-hierarchical-grid-cell';\n    }\n\n    protected getRowSelector() {\n        return 'igx-hierarchical-grid-row';\n    }\n\n    protected getRowByIndex(index) {\n        const selector = this.getRowSelector();\n        const rows = Array.from(this.grid.nativeElement.querySelectorAll(\n            `${selector}[data-rowindex=\"${index}\"]`));\n        let row;\n        rows.forEach((r) => {\n            const parentGrid = this.getClosestElemByTag(r, 'igx-hierarchical-grid');\n            if (parentGrid && parentGrid.getAttribute('id') === this.grid.id) {\n                row = r;\n            }\n        });\n        return row;\n    }\n\n    private getChildContainer(grid?) {\n        const currGrid = grid || this.grid;\n        return currGrid.nativeElement.parentNode.parentNode.parentNode;\n    }\n\n    private getChildGridRowContainer(grid?) {\n        const currGrid = grid || this.grid;\n        return currGrid.nativeElement.parentNode.parentNode;\n    }\n\n    private getChildGrid(childGridID, grid) {\n        const cgrid = grid.hgridAPI.getChildGrids(true).filter((g) => g.id === childGridID)[0];\n        return cgrid;\n    }\n\n    private _isScrolledToBottom(grid) {\n        const scrollTop = grid.verticalScrollContainer.scrollPosition;\n        const scrollHeight = grid.verticalScrollContainer.getScroll().scrollHeight;\n        return scrollHeight === 0 || Math.round(scrollTop + grid.verticalScrollContainer.igxForContainerSize) === scrollHeight;\n    }\n    private getIsChildAtIndex(index) {\n        return this.grid.isChildGridRecord(this.grid.dataView[index]);\n    }\n\n    public getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary = false) {\n        const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n        if (isSummary) {\n            const summaryRow = this.grid.summariesRowList.toArray()[0].nativeElement;\n            return summaryRow.querySelector(\n                `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n        }\n        const row = this.getRowByIndex(rowIndex);\n        return row.querySelector(\n            `${cellSelector}[data-rowindex=\"${rowIndex}\"][data-visibleIndex=\"${visibleColumnIndex}\"]`);\n    }\n\n    public navigateUp(rowElement, selectedNode: ISelectionNode) {\n        if (selectedNode.isSummaryRow) { return; }\n        const prevElem = rowElement.previousElementSibling;\n        const visibleColumnIndex = selectedNode.column;\n        const currentRowIndex = selectedNode.row;\n        if (prevElem) {\n            const nodeName = prevElem.children[0].nodeName.toLowerCase();\n            const isElemChildGrid = nodeName.toLowerCase() === 'igx-child-grid-row';\n            if (isElemChildGrid) {\n                this.focusPrevChild(prevElem, visibleColumnIndex, this.grid);\n            } else {\n                if (this.grid.parent !== null) {\n                    // currently navigating in child grid\n                    this._navigateUpInChild(rowElement, currentRowIndex, visibleColumnIndex);\n                } else {\n                    super.navigateUp(rowElement, selectedNode);\n                }\n            }\n        } else if (currentRowIndex !== 0) {\n            // handle scenario when prev item is child grid but is not yet in view\n            const isPrevChildGrid = this.getIsChildAtIndex(currentRowIndex - 1);\n            if (!isPrevChildGrid) {\n                super.navigateUp(rowElement, selectedNode);\n            } else {\n                this.scrollGrid(this.grid, -rowElement.offsetHeight,\n                    () => {\n                        rowElement = this.getRowByIndex(currentRowIndex);\n                        this.navigateUp(rowElement, selectedNode);\n                    });\n            }\n        } else if (this.grid.parent !== null &&\n            currentRowIndex === 0) {\n            // move to prev row in sibling layout or parent\n            this.focusPrev(visibleColumnIndex);\n        }\n    }\n    public navigateDown(rowElement, selectedNode: ISelectionNode) {\n        if (selectedNode.isSummaryRow) { return; }\n        const nextElem = rowElement.nextElementSibling;\n        const visibleColumnIndex = selectedNode.column;\n        const currentRowIndex = selectedNode.row;\n        if (nextElem) {\n            // next elem is in DOM\n            const nodeName = nextElem.children[0].nodeName.toLowerCase();\n            const isNextElemChildGrid = nodeName.toLowerCase() === 'igx-child-grid-row';\n            if (isNextElemChildGrid) {\n                this.focusNextChild(nextElem, visibleColumnIndex, this.grid);\n            } else {\n                if (this.grid.parent !== null) {\n                    // currently navigating in child grid\n                    this._navigateDownInChild(rowElement, currentRowIndex, visibleColumnIndex);\n                } else {\n                    super.navigateDown(rowElement, selectedNode);\n                }\n            }\n        } else if (currentRowIndex !== this.grid.dataView.length - 1) {\n            // scroll next in view\n            super.navigateDown(rowElement, selectedNode);\n        } else if (this.grid.parent !== null &&\n            currentRowIndex === this.grid.dataView.length - 1) {\n            // move to next row in sibling layout or in parent\n            this.focusNext(visibleColumnIndex);\n        }\n    }\n\n    public navigateTop(visibleColumnIndex) {\n        if (this.grid.parent !== null) {\n            // navigating in child\n            const childContainer = this.grid.nativeElement.parentNode.parentNode;\n            const diff =\n            childContainer.getBoundingClientRect().top - this.grid.rootGrid.tbody.nativeElement.getBoundingClientRect().top;\n            const topIsVisible = diff >= 0;\n            const scrollable = this.getNextScrollable(this.grid);\n            if (!topIsVisible) {\n                this.scrollGrid(scrollable.grid, diff,\n                    () => super.navigateTop(visibleColumnIndex));\n            } else {\n                super.navigateTop(visibleColumnIndex);\n            }\n        } else {\n            super.navigateTop(visibleColumnIndex);\n        }\n    }\n\n    public navigateBottom(visibleColumnIndex) {\n        // handle scenario where last index is child grid\n        // in that case focus cell in last data row\n        const lastIndex = this.grid.dataView.length - 1;\n        if (this.getIsChildAtIndex(lastIndex)) {\n            const targetIndex = lastIndex - 1;\n            const scrTopPosition = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex, true);\n            const verticalScrollTop = this.grid.verticalScrollContainer.scrollPosition;\n            const cellSelector = this.getCellSelector(visibleColumnIndex);\n            if (verticalScrollTop === scrTopPosition) {\n                const cells = this.getRowByIndex(targetIndex).querySelectorAll(\n                    `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                cells[cells.length - 1].focus();\n            } else {\n                this.scrollGrid(this.grid, scrTopPosition - verticalScrollTop,\n                    () => {\n                        const cells = this.getRowByIndex(targetIndex).querySelectorAll(\n                            `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                        if (cells.length > 0) { cells[cells.length - 1].focus(); }\n                    });\n            }\n        } else  if (this.grid.parent !== null) {\n            const childContainer = this.grid.nativeElement.parentNode.parentNode;\n            const diff =\n            childContainer.getBoundingClientRect().bottom - this.grid.rootGrid.tbody.nativeElement.getBoundingClientRect().bottom;\n            const endIsVisible = diff < 0;\n            const scrollable = this.getNextScrollableDown(this.grid);\n            if (!endIsVisible) {\n                this.scrollGrid(scrollable.grid, diff,\n                    () => super.navigateBottom(visibleColumnIndex));\n            } else {\n                super.navigateBottom(visibleColumnIndex);\n            }\n        } else {\n            super.navigateBottom(visibleColumnIndex);\n        }\n    }\n    public goToLastCell() {\n        // handle scenario where last index is child grid\n        // in that case focus last cell in last data row\n        const lastIndex = this.grid.dataView.length - 1;\n        if (this.getIsChildAtIndex(lastIndex)) {\n            const targetIndex = lastIndex - 1;\n            const scrTopPosition = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex, true);\n            const verticalScrollTop = this.grid.verticalScrollContainer.scrollPosition;\n            if (verticalScrollTop === scrTopPosition) {\n                this.onKeydownEnd(targetIndex);\n            } else {\n                this.scrollGrid(this.grid, scrTopPosition - verticalScrollTop,\n                    () => {\n                        this.onKeydownEnd(targetIndex);\n                    });\n            }\n        } else {\n            super.goToLastCell();\n        }\n    }\n\n    public onKeydownEnd(rowIndex, isSummary = false) {\n        if (this.grid.parent && !isSummary) {\n            // handle scenario where last child row might not be in view\n            // parent should scroll to child grid end\n            const childContainer = this.grid.nativeElement.parentNode.parentNode;\n            const diffBottom =\n                childContainer.getBoundingClientRect().bottom - this.grid.rootGrid.nativeElement.getBoundingClientRect().bottom;\n            const row = this.grid.getRowByIndex(rowIndex).element.nativeElement;\n            const rowBottom = row.getBoundingClientRect().bottom;\n            const rowIsVisible = rowBottom <= this.grid.rootGrid.tbody.nativeElement.getBoundingClientRect().bottom;\n            const gridTop = this._getMaxTop(this.grid);\n            const diffTop = row.getBoundingClientRect().bottom -\n                row.offsetHeight - gridTop;\n            const endIsVisible = diffBottom <= 0;\n            const topVisible = diffTop >= 0;\n            if (!endIsVisible && !rowIsVisible) {\n                this.scrollGrid(this.grid.parent, diffBottom, () => super.onKeydownEnd(rowIndex));\n            } else if (!topVisible) {\n                const scrGrid = this.grid.verticalScrollContainer.scrollPosition !== 0 ? this.grid :\n                    this.getNextScrollable(this.grid).grid;\n                const topGrid = scrGrid.tbody.nativeElement.getBoundingClientRect().top >\n                    this.grid.rootGrid.tbody.nativeElement.getBoundingClientRect().top ? scrGrid : this.grid.rootGrid;\n                this.scrollGrid(topGrid, diffTop, () => super.onKeydownEnd(rowIndex));\n            } else {\n                super.onKeydownEnd(rowIndex, isSummary);\n            }\n        } else {\n            super.onKeydownEnd(rowIndex, isSummary);\n        }\n\n    }\n\n    public goToFirstCell() {\n        const verticalScroll = this.grid.verticalScrollContainer.getScroll();\n        const horizontalScroll = this.grid.dataRowList.first.virtDirRow.getScroll();\n        if (verticalScroll.scrollTop === 0 && this.grid.parent) {\n            // scroll parent so that current child is in view\n            if (!horizontalScroll.clientWidth || parseInt(horizontalScroll.scrollLeft, 10) <= 1 || this.grid.pinnedColumns.length) {\n                this.navigateTop(0);\n            } else {\n                this.horizontalScroll(this.grid.dataRowList.first.index).scrollTo(0);\n                this.grid.parentVirtDir.onChunkLoad\n                    .pipe(first())\n                    .subscribe(() => {\n                        this.navigateTop(0);\n                    });\n            }\n        } else {\n            super.goToFirstCell();\n        }\n    }\n\n    public performTab(currentRowEl, selectedNode: ISelectionNode) {\n        if (this.grid.rowInEditMode) {\n            super.performTab(currentRowEl, selectedNode);\n            return;\n        }\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummaryRow = selectedNode.isSummaryRow;\n        const summaryRows = this.grid.summariesRowList.toArray();\n        const hasSummaries = summaryRows.length > 0;\n        const isLastDataRow = rowIndex === this.grid.dataView.length - 1;\n        const nextIsDataRow = this.grid.dataRowList.find(row => row.index === rowIndex + 1);\n        const isLastColumn = this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex;\n        const isLastSummaryRow = hasSummaries && isSummaryRow;\n        const nextIndex = rowIndex + 1;\n        const virt = this.grid.verticalScrollContainer;\n        const isNextChild = nextIndex <= virt.igxForOf.length - 1 &&\n            this.grid.isChildGridRecord(virt.igxForOf[nextIndex]);\n        if (!nextIsDataRow && !(isLastDataRow && hasSummaries) && isLastColumn && !isSummaryRow) {\n            // navigating in child, next is not summary\n            const childContainer = this.getChildGridRowContainer();\n            const nextIsSiblingChild = this.grid.parent ? !!childContainer.nextElementSibling : false;\n            if (nextIsSiblingChild) {\n                this.focusNextChildDOMElem(childContainer, this.grid.parent);\n            } else if (isNextChild) {\n                const isInView = virt.state.startIndex + virt.state.chunkSize > nextIndex;\n                if (!isInView) {\n                    this.scrollGrid(this.grid, 'next', () => {\n                        this.focusNextChildDOMElem(currentRowEl, this.grid);\n                    });\n                } else {\n                    this.focusNextChildDOMElem(currentRowEl, this.grid);\n                }\n            } else if (this.grid.parent && this.grid.parent.summariesRowList.length > 0) {\n               this._navigateToNextParentRow(currentRowEl);\n            } else {\n                this.navigateDown(currentRowEl, { row: rowIndex, column: 0 });\n            }\n        } else if (isLastSummaryRow && isLastColumn && this.grid.parent) {\n            this._navigateToNextParentRow(currentRowEl);\n        } else  if (isLastDataRow && hasSummaries && isLastColumn && this.grid.parent) {\n            // navigating in child rows, next is child grid's summary row\n           this.focusNextRow(summaryRows[0].nativeElement, 0, this.grid.parent, true);\n        } else {\n            super.performTab(currentRowEl, selectedNode);\n        }\n    }\n\n    private _navigateToNextParentRow(currentRowEl: any): void {\n         // next is parent summary or next parent row\n         const parent = this.grid.parent;\n         const parentHasSummary = parent.summariesRowList.length > 0;\n         const parentRowIndex = parseInt(\n            this.getClosestElemByTag(currentRowEl, 'igx-child-grid-row').parentNode.getAttribute('data-rowindex'), 10);\n         const isLastRowInParent = parent.dataView.length - 1 === parentRowIndex;\n         // check if next is sibling\n         const childRowContainer = this.getChildGridRowContainer(this.grid);\n         const nextIsSiblingChild = !!childRowContainer.nextElementSibling;\n         if (isLastRowInParent && parentHasSummary && !nextIsSiblingChild) {\n             // next is parent summary\n             const parentSummary = parent.summariesRowList.first.nativeElement;\n             parent.navigation.focusNextRow(parentSummary, 0, parent, true);\n         } else {\n             // next is sibling or parent\n             this.focusNext(0);\n         }\n    }\n\n    private focusNextChildDOMElem(currentRowEl, grid) {\n        const gridElem = currentRowEl.nextElementSibling.querySelector('igx-hierarchical-grid');\n        const childGridID = gridElem.getAttribute('id');\n        const childGrid = this.getChildGrid(childGridID, grid);\n        if (childGrid.allowFiltering && childGrid.filterMode === FilterMode.quickFilter) {\n            childGrid.navigation.moveFocusToFilterCell(true);\n            return;\n        }\n        this.focusNextChild(currentRowEl.nextElementSibling, 0, grid);\n    }\n\n    public navigatePrevFilterCell(column: IgxColumnComponent, eventArgs) {\n        if (column.visibleIndex === 0 && this.grid.parent) {\n            eventArgs.preventDefault();\n            let targetGrid = this.grid.parent;\n            const prevSiblingChild = this.getChildGridRowContainer().previousElementSibling;\n            if (prevSiblingChild) {\n                const gridElem = prevSiblingChild.querySelectorAll('igx-hierarchical-grid')[0];\n                targetGrid = this.getChildGrid(gridElem.getAttribute('id'), this.grid.parent);\n            }\n            this.focusPrev(targetGrid.unpinnedColumns[targetGrid.unpinnedColumns.length - 1].visibleIndex);\n        } else {\n            super.navigatePrevFilterCell(column, eventArgs);\n        }\n    }\n\n    public navigateNextFilterCell(column: IgxColumnComponent, eventArgs) {\n        const cols = this.grid.filteringService.unpinnedFilterableColumns;\n        const nextFilterableIndex = cols.indexOf(column) + 1;\n        if (nextFilterableIndex >= this.grid.filteringService.unpinnedFilterableColumns.length) {\n            // next is not filter cell\n            const dataRows = this.grid.rowList.toArray();\n            const hasRows = dataRows.length !== 0;\n            const summaryRows = this.grid.summariesRowList.toArray();\n            const hasSummaries = summaryRows.length > 0 && summaryRows[0].summaryCells.length > 0;\n            if (hasRows) {\n                this.focusNextRow(dataRows[0].nativeElement, 0, this.grid, false);\n            } else if (hasSummaries) {\n                this.focusNextRow(summaryRows[0].nativeElement, 0, this.grid, true);\n            } else {\n                this.focusNext(0);\n            }\n            eventArgs.preventDefault();\n        } else {\n            super.navigateNextFilterCell(column, eventArgs);\n        }\n    }\n\n    public performShiftTabKey(currentRowEl, selectedNode: ISelectionNode) {\n        if (this.grid.rowInEditMode) {\n            super.performShiftTabKey(currentRowEl, selectedNode);\n            return;\n        }\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummary = selectedNode.isSummaryRow;\n        if (visibleColumnIndex === 0 && rowIndex === 0 && this.grid.parent && !isSummary) {\n            if (this.grid.allowFiltering && this.grid.filterMode === FilterMode.quickFilter) {\n                this.moveFocusToFilterCell();\n            } else {\n                const prevSiblingChild = this.getChildGridRowContainer().previousElementSibling;\n                if (prevSiblingChild) {\n                    const gridElem = prevSiblingChild.querySelectorAll('igx-hierarchical-grid')[0];\n                    this.performShiftTabIntoChild(gridElem, currentRowEl, rowIndex);\n                } else {\n                    const selNode = {\n                        row: rowIndex,\n                        column: this.grid.parent.unpinnedColumns[this.grid.parent.unpinnedColumns.length - 1].visibleIndex\n                    };\n                    this.navigateUp(currentRowEl, selNode);\n                }\n            }\n        } else if (visibleColumnIndex === 0 && currentRowEl.previousElementSibling &&\n            currentRowEl.previousElementSibling.children[0].tagName.toLowerCase() === 'igx-child-grid-row') {\n            const gridElem = this.getLastGridElem(currentRowEl.previousElementSibling);\n            this.performShiftTabIntoChild(gridElem, currentRowEl, rowIndex);\n        } else if (visibleColumnIndex === 0 && isSummary) {\n            const lastRowIndex = this.grid.dataView.length - 1;\n            if (lastRowIndex === -1) {\n                // no child data\n                if (this.grid.allowFiltering && this.grid.filterMode === FilterMode.quickFilter) {\n                    this.moveFocusToFilterCell();\n                } else {\n                    const selNode = {\n                        row: rowIndex,\n                        column: this.grid.parent.unpinnedColumns[this.grid.parent.unpinnedColumns.length - 1].visibleIndex\n                    };\n                    this.navigateUp(currentRowEl, selNode);\n                }\n            } else if (!this.getIsChildAtIndex(lastRowIndex)) {\n                super.goToLastCell();\n            } else {\n                const scrTopPosition = this.grid.verticalScrollContainer.getScrollForIndex(lastRowIndex, true);\n                const verticalScrollTop = this.grid.verticalScrollContainer.scrollPosition;\n                if (verticalScrollTop === scrTopPosition || isNaN(scrTopPosition)) {\n                    const closestChild = this.getLastGridElem(this.grid.getRowByIndex(lastRowIndex).nativeElement.parentElement);\n                    this.performShiftTabIntoChild(closestChild, currentRowEl, rowIndex);\n                } else {\n                    this.scrollGrid(this.grid, scrTopPosition - verticalScrollTop,\n                        () => {\n                            const closestChild = this.getLastGridElem(this.grid.getRowByIndex(lastRowIndex).nativeElement.parentElement);\n                            this.performShiftTabIntoChild(closestChild, currentRowEl, rowIndex);\n                        });\n                }\n            }\n        } else {\n            super.performShiftTabKey(currentRowEl, selectedNode);\n        }\n    }\n\n    public getFocusableGrid() {\n        return (isIE() && this.grid.rootGrid) ? this.grid.rootGrid : this.grid;\n    }\n\n    private getLastGridElem(trContainer) {\n        const children = trContainer.children;\n        const closestChild = children[children.length - 1].children[0].children[0];\n        return closestChild;\n    }\n\n    private performShiftTabIntoChild(gridElem, currentRowEl, rowIndex) {\n        const childGridID = gridElem.getAttribute('id');\n            const childGrid = this.getChildGrid(childGridID, this.grid) || this.getChildGrid(childGridID, this.grid.parent);\n            const lastIndex = childGrid.unpinnedColumns[childGrid.unpinnedColumns.length - 1].visibleIndex;\n            const summaryRows = childGrid.summariesRowList.toArray();\n            if (summaryRows.length > 0 && summaryRows[0].summaryCells.length > 0) {\n                // move focus to last summary row cell\n                const summaryRow = summaryRows[0].nativeElement;\n                this.focusPrevRow(summaryRow, lastIndex, childGrid, true, true);\n            } else if (childGrid.rowList.toArray().length === 0 &&\n             childGrid.allowFiltering && childGrid.filterMode === FilterMode.quickFilter) {\n                 // move to filter cell\n                childGrid.navigation.moveFocusToFilterCell();\n            } else if (childGrid.rowList.length === 0) {\n                // move to prev child or parent row\n                const prevChild = this.getSibling(childGrid);\n                if (prevChild) {\n                    this.performShiftTabIntoChild(prevChild, currentRowEl, rowIndex);\n                } else {\n                    const selNode = {\n                        row:  rowIndex,\n                        column: this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex\n                    };\n                    this.navigateUp(currentRowEl, selNode);\n                }\n            } else {\n                // move to prev cell\n                childGrid.navigation.goToLastCell();\n            }\n    }\n\n    private getSibling(childGrid) {\n        const prevChildRow = childGrid.childRow.nativeElement.previousElementSibling;\n        if (prevChildRow) {\n            return prevChildRow.children[0].children[0];\n        }\n        return null;\n    }\n\n    private focusNextChild(elem, visibleColumnIndex, grid) {\n        const gridElem = elem.querySelector('igx-hierarchical-grid');\n        const childGridID = gridElem.getAttribute('id');\n        const childGrid = this.getChildGrid(childGridID, grid);\n\n        if (childGrid.rowList.toArray().length === 0) {\n            this.focusNext(visibleColumnIndex, childGrid);\n            return;\n        }\n\n        // Update column index since the next child can have in general less columns than visibleColumnIndex value.\n        const lastCellIndex = childGrid.unpinnedColumns[childGrid.unpinnedColumns.length - 1].visibleIndex;\n        visibleColumnIndex = Math.min(lastCellIndex, visibleColumnIndex);\n\n        if (childGrid.verticalScrollContainer.state.startIndex !== 0) {\n            // scroll to top\n            this.scrollGrid(childGrid, 'top', () => this.focusNextRow(elem, visibleColumnIndex, childGrid));\n        } else {\n            this.focusNextRow(elem, visibleColumnIndex, childGrid);\n        }\n    }\n    private focusPrevChild(elem, visibleColumnIndex, grid) {\n        const grids = [];\n        const gridElems = Array.from(elem.querySelectorAll('igx-hierarchical-grid'));\n        const childLevel = grid.childLayoutList.first.level;\n        gridElems.forEach((hg) => {\n            const parentRow = this.getClosestElemByTag(hg, 'igx-child-grid-row');\n            if (parentRow && parseInt(parentRow.getAttribute('data-level'), 10) === childLevel) {\n                grids.push(hg);\n            }\n        });\n        const gridElem = grids[grids.length - 1];\n        const childGridID = gridElem.getAttribute('id');\n        const childGrid = this.getChildGrid(childGridID, grid);\n\n        if (childGrid.rowList.toArray().length === 0) {\n            this.focusPrev(visibleColumnIndex, childGrid);\n            return;\n        }\n\n        // Update column index since the previous child can have in general less columns than visibleColumnIndex value.\n        const lastCellIndex = childGrid.unpinnedColumns[childGrid.unpinnedColumns.length - 1].visibleIndex;\n        visibleColumnIndex = Math.min(lastCellIndex, visibleColumnIndex);\n\n        const isScrolledToBottom = this._isScrolledToBottom(childGrid);\n        const lastIndex = childGrid.dataView.length - 1;\n        if (!isScrolledToBottom) {\n            // scroll to end\n            this.scrollGrid(childGrid, 'bottom', () => this.focusPrevChild(elem, visibleColumnIndex, grid));\n        } else {\n            const lastRowInChild = childGrid.getRowByIndex(lastIndex);\n            const isChildGrid = lastRowInChild.nativeElement.nodeName.toLowerCase() === 'igx-child-grid-row';\n            if (isChildGrid) {\n                this.focusPrevChild(lastRowInChild.nativeElement.parentNode, visibleColumnIndex, childGrid);\n            } else {\n                this.focusPrevRow(lastRowInChild.nativeElement, visibleColumnIndex, childGrid, true);\n            }\n        }\n    }\n    private focusPrev(visibleColumnIndex, grid?) {\n        const currGrid = grid || this.grid;\n        let parentContainer = this.getChildContainer(currGrid);\n        let childRowContainer = this.getChildGridRowContainer(currGrid);\n        const prevIsSiblingChild = !!childRowContainer.previousElementSibling;\n        let prev = childRowContainer.previousElementSibling || parentContainer.previousElementSibling;\n        if (prev) {\n            if (prevIsSiblingChild) {\n                this.focusPrevChild(prev, visibleColumnIndex, currGrid.parent);\n            } else {\n                this.focusPrevRow(prev, visibleColumnIndex, currGrid.parent);\n            }\n        } else {\n            this.scrollGrid(currGrid.parent, 'prev',\n                () => {\n                    parentContainer = this.getChildContainer(grid);\n                    childRowContainer = this.getChildGridRowContainer(grid);\n                    prev = childRowContainer.previousElementSibling || parentContainer.previousElementSibling;\n                    if (prevIsSiblingChild) {\n                        this.focusPrevChild(prev, visibleColumnIndex, currGrid.parent);\n                    } else {\n                        this.focusPrevRow(prev, visibleColumnIndex, currGrid.parent);\n                    }\n                });\n        }\n    }\n\n    private getNextParentInfo(grid) {\n        // find next parent that is not at bottom\n        let currGrid = grid.parent;\n        let nextElem = this.getChildContainer(grid).nextElementSibling;\n        while (!nextElem && currGrid.parent !== null) {\n            nextElem = this.getChildContainer(currGrid).nextElementSibling;\n            currGrid = currGrid.parent;\n        }\n\n        return { grid: currGrid, nextElement: nextElem };\n    }\n    private getNextScrollable(grid) {\n        let currGrid = grid.parent;\n        if (!currGrid) {\n            return { grid: grid, prev: null };\n        }\n        let nonScrollable = currGrid.verticalScrollContainer.scrollPosition === 0;\n        let prev = grid;\n        while (nonScrollable && currGrid.parent !== null) {\n            prev = currGrid;\n            currGrid = currGrid.parent;\n            nonScrollable = currGrid.verticalScrollContainer.scrollPosition === 0;\n        }\n        return { grid: currGrid, prev: prev };\n    }\n\n    private focusNext(visibleColumnIndex, grid?) {\n        const currGrid = grid || this.grid;\n        const parentInfo = this.getNextParentInfo(currGrid);\n        const nextParentGrid = parentInfo.grid;\n        let nextParentElem = parentInfo.nextElement;\n        let childRowContainer = this.getChildGridRowContainer(currGrid);\n        const nextIsSiblingChild = !!childRowContainer.nextElementSibling;\n        let next = childRowContainer.nextElementSibling || nextParentElem;\n        const verticalScroll = nextParentGrid.verticalScrollContainer.getScroll();\n        const parentState = nextParentGrid.verticalScrollContainer.state;\n        const atLastChunk = parentState.startIndex + parentState.chunkSize ===\n         nextParentGrid.dataView.length;\n        if (next) {\n            if (nextIsSiblingChild) {\n                this.focusNextChild(next, visibleColumnIndex, nextParentGrid);\n            } else {\n                this.focusNextRow(next, visibleColumnIndex, grid || nextParentGrid);\n            }\n        } else if (verticalScroll.scrollTop !==\n            verticalScroll.scrollHeight - nextParentGrid.verticalScrollContainer.igxForContainerSize && !atLastChunk) {\n            this.scrollGrid(nextParentGrid, 'next',\n                () => {\n                    nextParentElem = parentInfo.nextElement;\n                    childRowContainer = this.getChildGridRowContainer();\n                    next = childRowContainer.nextElementSibling || nextParentElem;\n                    if (next && nextIsSiblingChild) {\n                        this.focusNextChild(next, visibleColumnIndex, nextParentGrid);\n                    } else if (next) {\n                        this.focusNextRow(next, visibleColumnIndex, grid || nextParentGrid);\n                    }\n                });\n        }\n    }\n    private getNextScrollableDown(grid) {\n        let currGrid = grid.parent;\n        if (!currGrid) {\n            return { grid: grid, prev: null };\n        }\n        let scrollTop = currGrid.verticalScrollContainer.scrollPosition;\n        let scrollHeight = currGrid.verticalScrollContainer.getScroll().scrollHeight;\n        let nonScrollable = scrollHeight === 0 ||\n            Math.round(scrollTop + currGrid.verticalScrollContainer.igxForContainerSize) === scrollHeight;\n        let prev = grid;\n        while (nonScrollable && currGrid.parent !== null) {\n            prev = currGrid;\n            currGrid = currGrid.parent;\n            scrollTop = currGrid.verticalScrollContainer.scrollPosition;\n            scrollHeight = currGrid.verticalScrollContainer.getScroll().scrollHeight;\n            nonScrollable = scrollHeight === 0 ||\n                Math.round(scrollTop + currGrid.verticalScrollContainer.igxForContainerSize) === scrollHeight;\n        }\n        return { grid: currGrid, prev: prev };\n    }\n\n    private _getMinBottom(grid) {\n        let currGrid = grid;\n        let bottom = currGrid.tbody.nativeElement.getBoundingClientRect().bottom;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n            bottom = Math.min(bottom, currGrid.tbody.nativeElement.getBoundingClientRect().bottom);\n        }\n        return bottom;\n    }\n\n    private _getMaxTop(grid) {\n        let currGrid = grid;\n        let top = currGrid.tbody.nativeElement.getBoundingClientRect().top;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n            top = Math.max(top, currGrid.tbody.nativeElement.getBoundingClientRect().top);\n        }\n        return top;\n    }\n\n    private focusNextRow(elem, visibleColumnIndex, grid, isSummary?) {\n        const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n        if (grid.navigation.isColumnFullyVisible(visibleColumnIndex)) {\n            const cell =\n                elem.querySelector(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            const closestScrollableGrid = this.getNextScrollableDown(grid).grid;\n            // const diff = cell.getBoundingClientRect().bottom - grid.rootGrid.tbody.nativeElement.getBoundingClientRect().bottom;\n            const gridBottom = this._getMinBottom(grid);\n            const diff = cell.getBoundingClientRect().bottom - gridBottom;\n            const inView = diff <= 0;\n            const scrollTop = closestScrollableGrid.verticalScrollContainer.scrollPosition;\n            const scrollHeight = closestScrollableGrid.verticalScrollContainer.getScroll().scrollHeight;\n            const canScroll = !(scrollHeight === 0 ||\n                Math.round(scrollTop + closestScrollableGrid.verticalScrollContainer.igxForContainerSize) === scrollHeight);\n            if (!inView && canScroll) {\n                this.scrollGrid(closestScrollableGrid, diff, () => cell.focus({ preventScroll: true }));\n            } else {\n                cell.focus({ preventScroll: true });\n            }\n        } else {\n            const cellElem = elem.querySelector(`${cellSelector}`);\n            const rowIndex = parseInt(cellElem.getAttribute('data-rowindex'), 10);\n            grid.navigation.performHorizontalScrollToCell(rowIndex, visibleColumnIndex);\n        }\n    }\n\n    private focusPrevRow(elem, visibleColumnIndex, grid, inChild?, isSummary?) {\n        if (grid.navigation.isColumnFullyVisible(visibleColumnIndex)) {\n            const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n            const cells = elem.querySelectorAll(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            let cell = cells[cells.length - 1];\n            const rIndex = parseInt(elem.getAttribute('data-rowindex'), 10);\n            const scrGrid = grid.verticalScrollContainer.scrollPosition !== 0 ? grid :\n                this.getNextScrollable(grid).grid;\n            const topGrid = scrGrid.tbody.nativeElement.getBoundingClientRect().top >\n                grid.rootGrid.tbody.nativeElement.getBoundingClientRect().top ? scrGrid : grid.rootGrid;\n            const gridTop = this._getMaxTop(grid);\n            const scrTop = scrGrid.verticalScrollContainer.scrollPosition;\n            const diff = cell.getBoundingClientRect().bottom -\n                cell.offsetHeight - gridTop;\n            if (scrTop !== 0 && diff < 0 && !inChild) {\n                this.scrollGrid(scrGrid, diff, () => {\n                    const el = !isSummary ? grid.navigation.getRowByIndex(rIndex) : elem;\n                    cell = el.querySelectorAll(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`)[0];\n                    cell.focus({ preventScroll: true });\n                });\n            } else if (diff < 0 && inChild) {\n                this.scrollGrid(topGrid, diff, () => {\n                    cell.focus({ preventScroll: true });\n                });\n            } else {\n                cell.focus({ preventScroll: true });\n            }\n        } else {\n            this.horizontalScrollGridToIndex(grid, visibleColumnIndex, () => {\n                this.focusPrevRow(elem, visibleColumnIndex, grid, inChild, isSummary);\n            });\n        }\n    }\n\n    private horizontalScrollGridToIndex(grid, visibleColumnIndex, callBackFunc) {\n        const unpinnedIndex = this.getColumnUnpinnedIndex(visibleColumnIndex);\n        grid.parentVirtDir.onChunkLoad\n            .pipe(first())\n            .subscribe(callBackFunc);\n        if (grid.dataRowList.length > 0) {\n            grid.dataRowList.first.virtDirRow.scrollTo(unpinnedIndex);\n        } else {\n            grid.headerContainer.scrollTo(unpinnedIndex);\n        }\n\n    }\n    private scrollGrid(grid, target, callBackFunc) {\n        this.getFocusableGrid().nativeElement.focus({preventScroll: true});\n        requestAnimationFrame(() => {\n            if (typeof target === 'number') {\n                grid.verticalScrollContainer.addScrollTop(target);\n            } else {\n                switch (target) {\n                    case 'top': grid.verticalScrollContainer.scrollTo(0); break;\n                    case 'bottom': grid.verticalScrollContainer.scrollTo(grid.dataView.length - 1); break;\n                    case 'next': grid.verticalScrollContainer.scrollNext(); break;\n                    case 'prev': grid.verticalScrollContainer.scrollPrev(); break;\n                }\n            }\n            grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(callBackFunc);\n        });\n    }\n\n    private _navigateUpInChild(rowElement, currentRowIndex, visibleColumnIndex) {\n        const prevElem = rowElement.previousElementSibling;\n        const scrollable = this.getNextScrollable(this.grid);\n        const grid = scrollable.grid;\n        const scrTop = grid.verticalScrollContainer.scrollPosition;\n        const containerTop = scrollable.prev.nativeElement.parentNode.parentNode.parentNode.parentNode;\n        const top = parseInt(containerTop.style.top, 10);\n        if (scrTop !== 0 && top < 0) {\n            this.scrollGrid(grid, -prevElem.offsetHeight,\n                () => super.navigateUp(rowElement, { row: currentRowIndex, column: visibleColumnIndex }));\n        } else {\n            super.navigateUp(rowElement, { row: currentRowIndex, column: visibleColumnIndex });\n        }\n    }\n\n    private _navigateDownInChild(rowElement, currentRowIndex, visibleColumnIndex) {\n        const nextElem = rowElement.nextElementSibling;\n        const childContainer = this.grid.nativeElement.parentNode.parentNode;\n        const diff =\n            childContainer.getBoundingClientRect().bottom - this.grid.rootGrid.nativeElement.getBoundingClientRect().bottom;\n        const endIsVisible = diff < 0;\n        const scrollable = this.getNextScrollableDown(this.grid);\n        const grid = scrollable.grid;\n        if (!endIsVisible) {\n            this.scrollGrid(grid, nextElem.offsetHeight,\n                () => super.navigateDown(rowElement, { row: currentRowIndex, column: visibleColumnIndex }));\n        } else {\n            super.navigateDown(rowElement, { row: currentRowIndex, column: visibleColumnIndex });\n        }\n    }\n\n    private getClosestElemByTag(sourceElem, targetTag) {\n        let result = sourceElem;\n        while (result !== null && result.nodeType === 1) {\n            if (result.tagName.toLowerCase() === targetTag.toLowerCase()) {\n                return result;\n            }\n            result = result.parentNode;\n        }\n        return null;\n    }\n\n    protected getNextRowByIndex(nextIndex) {\n        return this.grid.dataRowList.find(element => element.index === nextIndex).element.nativeElement;\n   }\n}\n","import {\n    ElementRef,\n    NgZone,\n    ChangeDetectorRef,\n    IterableDiffers,\n    ViewContainerRef,\n    Inject,\n    ComponentFactoryResolver,\n    Optional,\n    Input,\n    ViewChild,\n    TemplateRef\n} from '@angular/core';\nimport { IgxGridBaseComponent, IgxGridTransaction, IGridDataBindable } from '../grid-base.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridAPIService } from './hierarchical-grid-api.service';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IDisplayDensityOptions, DisplayDensityToken } from '../../core/displayDensity';\nimport { IgxColumnComponent, IgxColumnGroupComponent } from '../column.component';\nimport { IgxSummaryOperand } from '../summaries/grid-summary';\nimport { IgxHierarchicalTransactionService, IgxOverlayService } from '../../services/index';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { IgxChildGridRowComponent } from './child-grid-row.component';\nimport { IgxColumnResizingService } from '../grid-column-resizing.service';\n\nexport const IgxHierarchicalTransactionServiceFactory = {\n    provide: IgxGridTransaction,\n    useFactory: hierarchicalTransactionServiceFactory\n};\n\nexport function hierarchicalTransactionServiceFactory() {\n    return () => new IgxHierarchicalTransactionService();\n}\n\nexport interface IPathSegment {\n    rowID: any;\n    rowIslandKey: string;\n}\n\nexport abstract class IgxHierarchicalGridBaseComponent extends IgxGridBaseComponent {\n    public abstract rootGrid;\n\n    @Input()\n    public expandChildren: boolean;\n\n    @Input()\n    public hasChildrenKey: string;\n\n    @Input()\n    public showExpandAll = false;\n\n    /**\n     * @hidden\n     */\n    get maxLevelHeaderDepth() {\n        if (this._maxLevelHeaderDepth === null) {\n            this._maxLevelHeaderDepth = this.columnList.reduce((acc, col) => Math.max(acc, col.level), 0);\n        }\n        return this._maxLevelHeaderDepth;\n    }\n\n     /**\n     * @hidden\n     */\n    protected get outlet() {\n        return this.rootGrid ? this.rootGrid.outletDirective : this.outletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    public hgridAPI: IgxHierarchicalGridAPIService;\n\n    /**\n     * @hidden\n     */\n    public parentIsland: IgxRowIslandComponent;\n\n    /**\n     * @hidden\n    */\n    public childRow: IgxChildGridRowComponent;\n\n    protected _expandChildren = false;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('dragIndicatorIconBase', { read: TemplateRef, static: true })\n    public dragIndicatorIconBase: TemplateRef<any>;\n\n\n    /**\n     * The custom template, if any, that should be used when rendering the row drag indicator icon\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.dragIndicatorIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-grid #grid>\n     *      ...\n     *      <ng-template igxDragIndicatorIcon>\n     *          <igx-icon fontSet=\"material\">info</igx-icon>\n     *      </ng-template>\n     *  </igx-grid>\n     * ```\n     */\n    public dragIndicatorIconTemplate: TemplateRef<any> = null;\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        public colResizingService: IgxColumnResizingService,\n        gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        @Inject(IgxGridTransaction) protected transactionFactory: any,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxHierarchicalGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(\n            selectionService,\n            crudService,\n            colResizingService,\n            gridAPI,\n            typeof transactionFactory === 'function' ? transactionFactory() : transactionFactory,\n            elementRef,\n            zone,\n            document,\n            cdr,\n            resolver,\n            differs,\n            viewRef,\n            navigation,\n            filteringService,\n            overlayService,\n            summaryService,\n            _displayDensityOptions);\n        this.hgridAPI = <IgxHierarchicalGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     */\n    public createColumnsList(cols: Array<any>) {\n        const columns = [];\n        const topLevelCols = this.onlyTopLevel(cols);\n        topLevelCols.forEach((col) => {\n            const ref = this._createColumn(col);\n            ref.changeDetectorRef.detectChanges();\n            columns.push(ref.instance);\n        });\n        const result = flatten(columns);\n        this.columnList.reset(result);\n        this.columnList.notifyOnChanges();\n        this.initPinning();\n    }\n\n    protected _createColumn(col) {\n        let ref;\n        if (col instanceof IgxColumnGroupComponent) {\n            ref = this._createColGroupComponent(col);\n        } else {\n            ref = this._createColComponent(col);\n        }\n        return ref;\n    }\n\n    protected _createColGroupComponent(col: IgxColumnGroupComponent) {\n        const factoryGroup = this.resolver.resolveComponentFactory(IgxColumnGroupComponent);\n        const ref = this.viewRef.createComponent(factoryGroup, null, this.viewRef.injector);\n        ref.changeDetectorRef.detectChanges();\n        factoryGroup.inputs.forEach((input) => {\n            const propName = input.propName;\n            (<any>ref.instance)[propName] = (<any>col)[propName];\n        });\n        if (col.children.length > 0) {\n            const newChildren = [];\n            col.children.forEach(child => {\n                const newCol = this._createColumn(child).instance;\n                newCol.parent = ref.instance;\n                newChildren.push(newCol);\n            });\n            (<IgxColumnGroupComponent>ref.instance).children.reset(newChildren);\n            (<IgxColumnGroupComponent>ref.instance).children.notifyOnChanges();\n        }\n        // (<IgxColumnGroupComponent>ref.instance).grid = this;\n        return ref;\n    }\n\n    protected _createColComponent(col) {\n        const factoryColumn = this.resolver.resolveComponentFactory(IgxColumnComponent);\n        const ref = this.viewRef.createComponent(factoryColumn, null, this.viewRef.injector);\n        factoryColumn.inputs.forEach((input) => {\n            const propName = input.propName;\n            if (!((<any>col)[propName] instanceof IgxSummaryOperand)) {\n                (<any>ref.instance)[propName] = (<any>col)[propName];\n            } else {\n                (<any>ref.instance)[propName] = col[propName].constructor;\n            }\n        });\n        // (<IgxColumnComponent>ref.instance).grid = this;\n        return ref;\n    }\n\n    protected getGridsForIsland(rowIslandID: string) {\n        return this.hgridAPI.getChildGridsForRowIsland(rowIslandID);\n    }\n\n    protected getChildGrid(path: Array<IPathSegment>) {\n        if (!path) {\n            return;\n        }\n        return this.hgridAPI.getChildGrid(path);\n    }\n}\n\nfunction flatten(arr: any[]) {\n    let result = [];\n\n    arr.forEach(el => {\n        result.push(el);\n        if (el.children) {\n            result = result.concat(flatten(el.children.toArray()));\n        }\n    });\n    return result;\n}\n","import { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { Subject } from 'rxjs';\nimport { IPathSegment } from './hierarchical-grid-base.component';\nimport { IgxGridBaseComponent, GridBaseAPIService, IGridDataBindable } from '../grid';\nexport class IgxHierarchicalGridAPIService extends GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable> {\n    protected childRowIslands: Map<string, IgxRowIslandComponent> = new Map<string, IgxRowIslandComponent>();\n    protected childGrids:  Map<string, Map<any, IgxHierarchicalGridComponent>> =\n        new Map<string, Map<any, IgxHierarchicalGridComponent>>();\n\n    registerChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childRowIslands.set(rowIsland.key, rowIsland);\n        this.destroyMap.set(rowIsland.key, new Subject<boolean>());\n    }\n\n    unsetChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childGrids.delete(rowIsland.key);\n        this.childRowIslands.delete(rowIsland.key);\n        this.destroyMap.delete(rowIsland.key);\n    }\n\n    getChildRowIsland(key: string) {\n        return this.childRowIslands.get(key);\n    }\n\n    getChildGrid(path: Array<IPathSegment>) {\n        const currPath = path;\n        let grid;\n        const pathElem = currPath.shift();\n        const childrenForLayout = this.childGrids.get(pathElem.rowIslandKey);\n        if (childrenForLayout) {\n            const childGrid = childrenForLayout.get(pathElem.rowID);\n            if (currPath.length === 0) {\n                grid = childGrid;\n            } else {\n                grid = childGrid.hgridAPI.getChildGrid(currPath);\n            }\n        }\n        return grid;\n    }\n\n    getChildGrids(inDepth?: boolean) {\n        const allChildren = [];\n        this.childGrids.forEach((layoutMap) => {\n            layoutMap.forEach((grid) => {\n                allChildren.push(grid);\n                if (inDepth) {\n                    const children = grid.hgridAPI.getChildGrids(inDepth);\n                    children.forEach((item) => {\n                        allChildren.push(item);\n                    });\n                }\n            });\n        });\n\n        return allChildren;\n    }\n\n    getParentRowId(childGrid: IgxHierarchicalGridComponent) {\n        let rowID;\n        this.childGrids.forEach((layoutMap) => {\n            layoutMap.forEach((grid, key) => {\n                if (grid === childGrid) {\n                    rowID = key;\n                    return;\n                }\n            });\n        });\n        return rowID;\n    }\n\n    registerChildGrid(parentRowID: string|object, rowIslandKey: string, grid: IgxHierarchicalGridComponent) {\n        let childrenForLayout = this.childGrids.get(rowIslandKey);\n        if (!childrenForLayout) {\n            this.childGrids.set(rowIslandKey, new Map<any, IgxHierarchicalGridComponent>());\n            childrenForLayout = this.childGrids.get(rowIslandKey);\n        }\n        childrenForLayout.set(parentRowID, grid);\n    }\n\n    getChildGridsForRowIsland(rowIslandKey): IgxHierarchicalGridComponent[] {\n        const childrenForLayout = this.childGrids.get(rowIslandKey);\n        const children = [];\n        if (childrenForLayout) {\n            childrenForLayout.forEach((child) => {\n                children.push(child);\n            });\n        }\n        return children;\n    }\n\n    getChildGridByID(rowIslandKey, rowID) {\n        const childrenForLayout = this.childGrids.get(rowIslandKey);\n        return childrenForLayout.get(rowID);\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    Input,\n    QueryList,\n    OnInit,\n    Inject,\n    ElementRef,\n    ChangeDetectorRef,\n    ComponentFactoryResolver,\n    IterableDiffers,\n    ViewContainerRef,\n    NgZone,\n    AfterViewInit,\n    OnChanges,\n    Output,\n    EventEmitter,\n    Optional,\n    OnDestroy,\n    DoCheck\n} from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxGridTransaction, IGridDataBindable, IgxGridBaseComponent } from '../grid-base.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridAPIService } from './hierarchical-grid-api.service';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IDisplayDensityOptions, DisplayDensityToken } from '../../core/displayDensity';\nimport { TransactionService, Transaction, State } from '../../services';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxHierarchicalGridBaseComponent } from './hierarchical-grid-base.component';\nimport { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\n\nimport { IgxOverlayService } from '../../services/index';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxColumnComponent } from '../column.component';\nimport { IgxRowIslandAPIService } from './row-island-api.service';\nimport { IBaseEventArgs } from '../../core/utils';\nimport { IgxColumnResizingService } from '../grid-column-resizing.service';\nexport interface IGridCreatedEventArgs extends IBaseEventArgs {\n    owner: IgxRowIslandComponent;\n    parentID: any;\n    grid: IgxHierarchicalGridComponent;\n}\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-row-island',\n    template: ``,\n    providers: [IgxRowIslandAPIService]\n})\nexport class IgxRowIslandComponent extends IgxHierarchicalGridBaseComponent\n            implements AfterContentInit, AfterViewInit, OnChanges, OnInit, OnDestroy, DoCheck {\n    /**\n     * Sets the key of the row island by which child data would be taken from the row data if such is provided.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\">\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    @Input()\n    public key: string;\n\n    /**\n     * Sets if all immediate children of the grids for this `IgxRowIslandComponent` should be expanded/collapsed.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\" [expandChildren]=\"true\" #rowIsland>\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    @Input()\n    set expandChildren(value: boolean) {\n        this._expandChildren = value;\n        this.rowIslandAPI.getChildGrids().forEach((grid) => {\n            if (document.body.contains(grid.nativeElement)) {\n                // Detect changes right away if the grid is visible\n                grid.expandChildren = value;\n                grid.markForCheck();\n            } else {\n                // Else defer the detection on changes when the grid gets into view for performance.\n                grid.updateOnRender = true;\n            }\n        });\n    }\n\n    /**\n     * Gets if all immediate children of the grids for this `IgxRowIslandComponent` have been set to be expanded/collapsed.\n     * ```typescript\n     * const expanded = this.rowIsland.expandChildren;\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    get expandChildren(): boolean {\n        return this._expandChildren;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowIslandComponent, { read: IgxRowIslandComponent, descendants: false })\n    public children = new QueryList<IgxRowIslandComponent>();\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxColumnComponent, { read: IgxColumnComponent, descendants: false })\n    public childColumns = new QueryList<IgxColumnComponent>();\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public onLayoutChange = new EventEmitter<any>();\n\n    /**\n     * Event emmited when a grid is being created based on this row island.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\" (onGridCreated)=\"gridCreated($event)\" #rowIsland>\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    @Output()\n    public onGridCreated = new EventEmitter<IGridCreatedEventArgs>();\n\n    /**\n     * @hidden\n     */\n    get id() {\n        const pId = this.parentId ? this.parentId.substring(this.parentId.indexOf(this.layout_id) + this.layout_id.length) + '-' : '';\n        return this.layout_id + pId +  this.key;\n    }\n\n    /**\n     * @hidden\n     */\n    get parentId() {\n       return this.parentIsland ? this.parentIsland.id : null;\n    }\n\n    /**\n     * @hidden\n     */\n    get level() {\n        let ptr = this.parentIsland;\n        let lvl = 0;\n        while (ptr) {\n            lvl++;\n            ptr = ptr.parentIsland;\n        }\n        return lvl + 1;\n    }\n\n    /**\n     * Get transactions service for the children grid components.\n     * @experimental @hidden\n     */\n    get transactions(): TransactionService<Transaction, State> {\n        const grids = this.rowIslandAPI.getChildGrids();\n        return grids.length ? grids[0].transactions : this._transactions;\n    }\n\n    /**\n     * @hidden\n     */\n    public initialChanges = [];\n\n    /**\n     * @hidden\n     */\n    public rootGrid = null;\n    readonly data: any[];\n    readonly filteredData: any[];\n    private layout_id = `igx-row-island-`;\n    private isInit = false;\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        public colResizingService: IgxColumnResizingService,\n        gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        @Inject(IgxGridTransaction) protected transactionFactory: any,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxHierarchicalGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions,\n        public rowIslandAPI: IgxRowIslandAPIService) {\n        super(\n            selectionService,\n            crudService,\n            colResizingService,\n            gridAPI,\n            typeof transactionFactory === 'function' ? transactionFactory() : transactionFactory,\n            elementRef,\n            zone,\n            document,\n            cdr,\n            resolver,\n            differs,\n            viewRef,\n            navigation,\n            filteringService,\n            overlayService,\n            summaryService,\n            _displayDensityOptions\n        );\n        this.hgridAPI = <IgxHierarchicalGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this.rootGrid = this.hgridAPI.grid;\n        this.rowIslandAPI.rowIsland = this;\n    }\n\n    /**\n     * @hidden\n     */\n    ngDoCheck() {\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterContentInit() {\n        this.updateChildren();\n        this.children.notifyOnChanges();\n        this.children.changes.pipe(takeUntil(this.destroy$))\n        .subscribe((change) => {\n            this.updateChildren();\n            // update existing grids since their child ri have been changed.\n            this.getGridsForIsland(this.key).forEach(grid => {\n                (grid as any).onRowIslandChange(this.children);\n            });\n        });\n        const nestedColumns = this.children.map((layout) => layout.columnList.toArray());\n        const colsArray = [].concat.apply([], nestedColumns);\n        const topCols = this.columnList.filter((item) => {\n            return colsArray.indexOf(item) === -1;\n        });\n        this.childColumns.reset(topCols);\n        this.columnList.changes.pipe(takeUntil(this.destroy$)).subscribe(() => { this.updateColumnList(); });\n    }\n\n    protected updateChildren() {\n        this.children.reset(this.children.toArray().slice(1));\n        this.children.forEach(child => {\n            child.parentIsland = this;\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        this.rowIslandAPI.register(this);\n        if (this.parentIsland) {\n            this.parentIsland.rowIslandAPI.registerChildRowIsland(this);\n        } else {\n            this.rootGrid.hgridAPI.registerChildRowIsland(this);\n        }\n        this._init = false;\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes) {\n        this.onLayoutChange.emit(changes);\n        if (!this.isInit) {\n            this.initialChanges.push(changes);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        // Override the base destroy because we don't have rendered anything to use removeEventListener on\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this._destroyed = true;\n        this.rowIslandAPI.unset(this.id);\n        if (this.parentIsland) {\n            this.getGridsForIsland(this.key).forEach(grid => {\n                this.cleanGridState(grid);\n                grid.hgridAPI.unsetChildRowIsland(this);\n            });\n            this.parentIsland.rowIslandAPI.unsetChildRowIsland(this);\n        } else {\n            this.rootGrid.hgridAPI.unsetChildRowIsland(this);\n            this.cleanGridState(this.rootGrid);\n        }\n    }\n\n    private cleanGridState(grid) {\n        grid.childGridTemplates.forEach((tmpl) => {\n            tmpl.owner.cleanView(tmpl.context.templateID);\n        });\n        grid.childGridTemplates.clear();\n        grid.onRowIslandChange();\n    }\n\n    /**\n     * @hidden\n     */\n    reflow() {}\n\n    /**\n     * @hidden\n     */\n    calculateGridHeight() {}\n\n    protected updateColumnList() {\n        const nestedColumns = this.children.map((layout) => layout.columnList.toArray());\n        const colsArray = [].concat.apply([], nestedColumns);\n        const topCols = this.columnList.filter((item) => {\n            if (colsArray.indexOf(item) === -1) {\n                /* Reset the default width of the columns that come into this row island,\n                because the root catches them first during the detectChanges() and sets their defaultWidth. */\n                item.defaultWidth = undefined;\n                return true;\n            }\n            return false;\n        });\n        this.childColumns.reset(topCols);\n\n        if (this.parentIsland) {\n            this.parentIsland.columnList.notifyOnChanges();\n        } else {\n            this.rootGrid.columnList.notifyOnChanges();\n        }\n\n        this.rowIslandAPI.getChildGrids().forEach((grid: IgxHierarchicalGridComponent) => {\n            grid.createColumnsList(this.childColumns.toArray());\n            if (!document.body.contains(grid.nativeElement)) {\n                grid.updateOnRender = true;\n            }\n        });\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnInit,\n    ViewChild,\n    AfterViewInit,\n    SimpleChanges,\n    ComponentFactoryResolver\n} from '@angular/core';\nimport { GridBaseAPIService } from '.././api.service';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxGridComponent } from '../grid/grid.component';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-child-grid-row',\n    templateUrl: './child-grid-row.component.html'\n})\nexport class IgxChildGridRowComponent implements AfterViewInit, OnInit {\nprivate resolver;\n\n    /**\n * Returns whether the row is expanded.\n * ```typescript\n * const RowExpanded = this.grid1.rowList.first.expanded;\n * ```\n */\n    public expanded = false;\n\n    @Input()\n    layout: IgxRowIslandComponent;\n\n    /**\n     * @hidden\n     */\n    public get parentHasScroll() {\n        return !this.parentGrid.verticalScrollContainer.dc.instance.notVirtual;\n    }\n\n\n    /**\n    * @hidden\n    */\n    @Input()\n    public parentGridID: string;\n\n    /**\n     *  The data passed to the row component.\n     *\n     * ```typescript\n     * // get the row data for the first selected row\n     * let selectedRowData = this.grid.selectedRows[0].rowData;\n     * ```\n     */\n    @Input()\n    public rowData: any = [];\n\n    /**\n     * The index of the row.\n     *\n     * ```typescript\n     * // get the index of the second selected row\n     * let selectedRowIndex = this.grid.selectedRows[1].index;\n     * ```\n     */\n    @Input()\n    public index: number;\n\n    @ViewChild('hgrid', { static: true })\n    private hGrid: any/* TODO: IgxHierarchicalGridComponent*/;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'row';\n\n    /**\n     * Get a reference to the grid that contains the selected row.\n     *\n     * ```typescript\n     * handleRowSelection(event) {\n     *  // the grid on which the onRowSelectionChange event was triggered\n     *  const grid = event.row.grid;\n     * }\n     * ```\n     *\n     * ```html\n     *  <igx-grid\n     *    [data]=\"data\"\n     *    (onRowSelectionChange)=\"handleRowSelection($event)\">\n     *  </igx-grid>\n     * ```\n     */\n    // TODO: Refactor\n    get parentGrid(): any/* TODO: IgxHierarchicalGridComponent*/ {\n        return this.gridAPI.grid;\n    }\n\n    @HostBinding('attr.data-level')\n    get level() {\n        return this.layout.level;\n    }\n\n    /**\n     * The native DOM element representing the row. Could be null in certain environments.\n     *\n     * ```typescript\n     * // get the nativeElement of the second selected row\n     * let selectedRowNativeElement = this.grid.selectedRows[1].nativeElement;\n     * ```\n     */\n    get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    constructor(public gridAPI: GridBaseAPIService<any/* TODO: IgxHierarchicalGridComponent*/>,\n        public element: ElementRef,\n        resolver: ComponentFactoryResolver,\n        public cdr: ChangeDetectorRef) {\n            this.resolver = resolver;\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this.layout.onLayoutChange.subscribe((ch) => {\n            this._handleLayoutChanges(ch);\n        });\n        const changes = this.layout.initialChanges;\n        changes.forEach(change => {\n            this._handleLayoutChanges(change);\n        });\n        this.hGrid.parent = this.parentGrid;\n        this.hGrid.parentIsland = this.layout;\n        this.hGrid.childRow =  this;\n        // handler logic that re-emits hgrid events on the row island\n        this.setupEventEmitters();\n        this.layout.onGridCreated.emit({\n            owner: this.layout,\n            parentID: this.rowData.rowID,\n            grid: this.hGrid\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        this.hGrid.childLayoutList = this.layout.children;\n        if (this.layout.childColumns.length > 0 && !this.hGrid.autoGenerate) {\n            this.hGrid.createColumnsList(this.layout.childColumns.toArray());\n        }\n        const layouts = this.hGrid.childLayoutList.toArray();\n        layouts.forEach((l) => this.hGrid.hgridAPI.registerChildRowIsland(l));\n        this.parentGrid.hgridAPI.registerChildGrid(this.rowData.rowID, this.layout.key, this.hGrid);\n        this.layout.rowIslandAPI.registerChildGrid(this.rowData.rowID, this.hGrid);\n\n        this.hGrid.cdr.detectChanges();\n    }\n\n    private setupEventEmitters() {\n        const destructor = takeUntil(this.hGrid.destroy$);\n\n        const factory = this.resolver.resolveComponentFactory(IgxGridComponent);\n        // exclude outputs related to two-way binding functionality\n        const inputNames = factory.inputs.map(input => input.propName);\n        const outputs = factory.outputs.filter(o => {\n            const matchingInputPropName = o.propName.slice(0, o.propName.indexOf('Change'));\n            return inputNames.indexOf(matchingInputPropName) === -1;\n        });\n        outputs.forEach(output => {\n            if (this.hGrid[output.propName]) {\n                this.hGrid[output.propName].pipe(destructor).subscribe((args) => {\n                    args.owner = this.hGrid;\n                    this.layout[output.propName].emit(args);\n                });\n            }\n        });\n    }\n\n\n    private _handleLayoutChanges(changes: SimpleChanges) {\n        for (const change in changes) {\n            if (changes.hasOwnProperty(change)) {\n                this.hGrid[change] = changes[change].currentValue;\n            }\n        }\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    HostBinding,\n    Input,\n    forwardRef,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n    QueryList,\n    ContentChildren,\n    ElementRef,\n    NgZone,\n    ChangeDetectorRef,\n    IterableDiffers,\n    ViewContainerRef,\n    Inject,\n    ComponentFactoryResolver,\n    AfterViewInit,\n    AfterContentInit,\n    Optional,\n    OnInit,\n    OnDestroy,\n    DoCheck,\n    EventEmitter,\n    Output\n} from '@angular/core';\nimport { IgxGridBaseComponent, IgxGridTransaction } from '../grid-base.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridAPIService } from './hierarchical-grid-api.service';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxChildGridRowComponent } from './child-grid-row.component';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensity } from '../../core/displayDensity';\nimport { IGridDataBindable, IgxColumnComponent, } from '../grid/index';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxHierarchicalGridBaseComponent } from './hierarchical-grid-base.component';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxTemplateOutletDirective } from '../../directives/template-outlet/template_outlet.directive';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { IgxOverlayService } from '../../services/index';\nimport { IgxColumnResizingService } from '../grid-column-resizing.service';\nimport { IgxForOfSyncService, IgxForOfScrollSyncService } from '../../directives/for-of/for_of.sync.service';\n\nlet NEXT_ID = 0;\n\nexport interface HierarchicalStateRecord {\n    rowID: any;\n}\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-hierarchical-grid',\n    templateUrl: 'hierarchical-grid.component.html',\n    providers: [\n        IgxGridSelectionService,\n        IgxGridCRUDService,\n        { provide: GridBaseAPIService, useClass: IgxHierarchicalGridAPIService },\n        { provide: IgxGridBaseComponent, useExisting: forwardRef(() => IgxHierarchicalGridComponent) },\n        IgxGridSummaryService,\n        IgxFilteringService,\n        IgxHierarchicalGridNavigationService,\n        IgxForOfSyncService,\n        IgxForOfScrollSyncService\n    ]\n})\nexport class IgxHierarchicalGridComponent extends IgxHierarchicalGridBaseComponent\n    implements IGridDataBindable, AfterViewInit, AfterContentInit, OnInit, OnDestroy, DoCheck {\n\n    /**\n     * Sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-hierarchical-grid [id]=\"'igx-hgrid-1'\" [data]=\"Data\" [autoGenerate]=\"true\"></igx-hierarchical-grid>\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public get id(): string {\n        return this.h_id;\n    }\n\n    /**\n     * An @Input property that lets you fill the `IgxHierarchicalGridComponent` with an array of data.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-hierarchical-grid>\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    @Input()\n    public set data(value: any[]) {\n        this._data = value || [];\n        this.summaryService.clearSummaryCache();\n        if (this.shouldGenerate) {\n            this.setupColumns();\n            this.reflow();\n        }\n        this.cdr.markForCheck();\n        if (this.parent && (this.height === null || this.height.indexOf('%') !== -1)) {\n            // If the height will change based on how much data there is, recalculate sizes in igxForOf.\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     * Returns an array of data set to the `IgxHierarchicalGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public get data(): any[] {\n        return this._data;\n    }\n\n    /**\n    * Sets the state of the `IgxHierarchicalGridComponent` containing which rows are expanded.\n    * ```typescript\n    * this.gridState = [{ rowID: 1 }, { rowID: 4}];\n    * ```\n    * ```html\n    * <igx-hierarchical-grid [primaryKey]=\"'ID'\" [data]=\"Data\" [autoGenerate]=\"false\" [hierarchicalState]=\"hgridState\">\n    *      <igx-column field=\"ID\"  [dataType]='number'></igx-column>\n    *      <igx-column field=\"Product\"  [dataType]='string'></igx-column>\n    *      <igx-column field=\"Description\"  [dataType]='string'></igx-column>\n    * </igx-hierarchical-grid>\n    * ```\n    *\n    * Two-way data binding.\n    * ```html\n    * <igx-hierarchical-grid [primaryKey]=\"'ID'\" [data]=\"Data\" [autoGenerate]=\"false\" [(hierarchicalState)]=\"hgridState\">\n    *      <igx-column field=\"ID\"  [dataType]='number'></igx-column>\n    *      <igx-column field=\"Product\"  [dataType]='string'></igx-column>\n    *      <igx-column field=\"Description\"  [dataType]='string'></igx-column>\n    * </igx-hierarchical-grid>\n    * ```\n    * @memberof IgxHierarchicalGridComponent\n    */\n    @Input()\n    public get hierarchicalState() {\n        return this._hierarchicalState;\n    }\n    public set hierarchicalState(val) {\n        if (this._hierarchicalState !== val) {\n            this.hierarchicalStateChange.emit(val);\n        }\n        if (this.hasChildrenKey) {\n            val = val.filter(item => {\n                const rec = this.primaryKey ? this.data.find(x => x[this.primaryKey] === item.rowID) : item.rowID;\n                return rec[this.hasChildrenKey];\n            });\n        }\n        this._hierarchicalState = val;\n        if (this.parent) {\n            this.notifyChanges(true);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public hierarchicalStateChange = new EventEmitter<any>();\n\n    /**\n     * Sets an array of objects containing the filtered data in the `IgxHierarchicalGridComponent`.\n     * ```typescript\n     * this.grid.filteredData = [{\n     *       ID: 1,\n     *       Name: \"A\"\n     * }];\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public set filteredData(value) {\n        this._filteredData = value;\n\n\n    }\n\n    /**\n     * Returns an array of objects containing the filtered data in the `IgxHierarchicalGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public get filteredData() {\n        return this._filteredData;\n    }\n\n    /**\n     * Sets if all immediate children of the `IgxHierarchicalGridComponent` should be expanded/collapsed.\n     * Defult value is false.\n     * ```html\n     * <igx-hierarchical-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [autoGenerate]=\"true\" [expandChildren]=\"true\"></igx-hierarchical-grid>\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    @Input()\n    set expandChildren(value: boolean) {\n        this._expandChildren = value;\n        if (value && this.data) {\n            this.hierarchicalState = this.data.map((rec) => {\n                return { rowID: this.primaryKey ? rec[this.primaryKey] : rec };\n            });\n        } else if (this.data) {\n            this.hierarchicalState = [];\n        }\n    }\n\n    /**\n     * Gets if all immediate children of the `IgxHierarchicalGridComponent` previously have been set to be expanded/collapsed.\n     * If previously set and some rows have been manually expanded/collapsed it will still return the last set value.\n     * ```typescript\n     * const expanded = this.grid.expandChildren;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    get expandChildren(): boolean {\n        return this._expandChildren;\n    }\n\n    /**\n     * Gets the unique identifier of the parent row. It may be a `string` or `number` if `primaryKey` of the\n     * parent grid is set or an object reference of the parent record otherwise.\n     * ```typescript\n     * const foreignKey = this.grid.foreignKey;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public get foreignKey() {\n        if (!this.parent) {\n            return null;\n        }\n        return this.parent.hgridAPI.getParentRowId(this);\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowIslandComponent, { read: IgxRowIslandComponent, descendants: false })\n    public childLayoutList: QueryList<IgxRowIslandComponent>;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowIslandComponent, { read: IgxRowIslandComponent, descendants: true })\n    public allLayoutList: QueryList<IgxRowIslandComponent>;\n\n    @ViewChild('hierarchical_record_template', { read: TemplateRef, static: true })\n    protected hierarchicalRecordTemplate: TemplateRef<any>;\n\n    @ViewChild('child_record_template', { read: TemplateRef, static: true })\n    protected childTemplate: TemplateRef<any>;\n\n    @ViewChild('headerHierarchyExpander', { read: ElementRef, static: true })\n    protected headerHierarchyExpander: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxTemplateOutletDirective, { read: IgxTemplateOutletDirective })\n    public templateOutlets: QueryList<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxChildGridRowComponent, { read: IgxChildGridRowComponent })\n    public hierarchicalRows: QueryList<IgxChildGridRowComponent>;\n\n    /**\n     * @hidden\n     */\n    get hasExpandableChildren() {\n        return !!this.childLayoutKeys.length;\n    }\n\n    /**\n     * @hidden\n     */\n    public childLayoutKeys = [];\n\n    /**\n     * @hidden\n     */\n    public highlightedRowID = null;\n\n    /**\n     * @hidden\n     */\n    public updateOnRender = false;\n\n    /**\n     * @hidden\n     */\n    public parent = null;\n\n    private _hierarchicalState = [];\n    private _data;\n    private _filteredData = null;\n    private h_id = `igx-hierarchical-grid-${NEXT_ID++}`;\n    private childGridTemplates: Map<any, any> = new Map();\n    private scrollTop = 0;\n    private scrollLeft = 0;\n\n    protected _transactions: any;\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        public colResizingService: IgxColumnResizingService,\n        gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        @Inject(IgxGridTransaction) protected transactionFactory: any,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxHierarchicalGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(\n            selectionService,\n            crudService,\n            colResizingService,\n            gridAPI,\n            typeof transactionFactory === 'function' ? transactionFactory() : transactionFactory,\n            elementRef,\n            zone,\n            document,\n            cdr,\n            resolver,\n            differs,\n            viewRef,\n            navigation,\n            filteringService,\n            overlayService,\n            summaryService,\n            _displayDensityOptions);\n        this.hgridAPI = <IgxHierarchicalGridAPIService>gridAPI;\n    }\n\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this._transactions = this.parentIsland ? this.parentIsland.transactions : this._transactions;\n        super.ngOnInit();\n    }\n\n    public ngDoCheck() {\n        if (this._cdrRequestRepaint && !this._init) {\n            this.updateSizes();\n        }\n        super.ngDoCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        super.ngAfterViewInit();\n        this.verticalScrollContainer.getScroll().addEventListener('scroll', this.hg_verticalScrollHandler.bind(this));\n        this.headerContainer.getScroll().addEventListener('scroll', this.hg_horizontalScrollHandler.bind(this));\n\n        if (this.expandChildren && this.data && this.hierarchicalState.length !== this.data.length) {\n            this.hierarchicalState = this.data.map((rec) => {\n                return { rowID: this.primaryKey ? rec[this.primaryKey] : rec };\n            });\n            this.cdr.detectChanges();\n        }\n\n        this.verticalScrollContainer.onBeforeViewDestroyed.pipe(takeUntil(this.destroy$)).subscribe((view) => {\n            const rowData = view.context.$implicit;\n            if (this.isChildGridRecord(rowData)) {\n                const cachedData = this.childGridTemplates.get(rowData.rowID);\n                if (cachedData) {\n                    const tmlpOutlet = cachedData.owner;\n                    tmlpOutlet._viewContainerRef.detach(0);\n                }\n            }\n        });\n\n        if (this.parent) {\n            this._displayDensity = this.rootGrid._displayDensity;\n            this.rootGrid.onDensityChanged.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                this._displayDensity = this.rootGrid._displayDensity;\n                this.notifyChanges(true);\n                this.cdr.markForCheck();\n            });\n            this.childLayoutKeys = this.parentIsland.children.map((item) => item.key);\n        }\n\n        this.toolbarCustomContentTemplates = this.parentIsland ?\n            this.parentIsland.toolbarCustomContentTemplates :\n            this.toolbarCustomContentTemplates;\n\n        this.headSelectorsTemplates = this.parentIsland ?\n            this.parentIsland.headSelectorsTemplates :\n            this.headSelectorsTemplates;\n\n        this.rowSelectorsTemplates = this.parentIsland ?\n            this.parentIsland.rowSelectorsTemplates :\n            this.rowSelectorsTemplates;\n        this.rowExpandedIndicatorTemplate  = this.rootGrid.rowExpandedIndicatorTemplate;\n        this.rowCollapsedIndicatorTemplate   = this.rootGrid.rowCollapsedIndicatorTemplate;\n        this.headerCollapseIndicatorTemplate = this.rootGrid.headerCollapseIndicatorTemplate;\n        this.headerExpandIndicatorTemplate = this.rootGrid.headerExpandIndicatorTemplate;\n        this.hasChildrenKey = this.parentIsland ?\n         this.parentIsland.hasChildrenKey || this.rootGrid.hasChildrenKey :\n         this.rootGrid.hasChildrenKey;\n         this.showExpandAll = this.parentIsland ?\n         this.parentIsland.showExpandAll : this.rootGrid.showExpandAll;\n    }\n\n    private updateSizes() {\n        if (document.body.contains(this.nativeElement) && this.isPercentWidth) {\n            this.reflow();\n\n            this.hgridAPI.getChildGrids(false).forEach((grid) => {\n                grid.updateSizes();\n            });\n        }\n    }\n\n    protected _shouldAutoSize(renderedHeight) {\n        if (this.isPercentHeight && this.parent) {\n            return true;\n        }\n        return super._shouldAutoSize(renderedHeight);\n    }\n\n    public get outletDirective() {\n        return this.rootGrid._outletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    public get parentRowOutletDirective() {\n        return this === this.rootGrid ? null : this.rootGrid.rowEditingOutletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterContentInit() {\n        this.updateColumnList(false);\n        this.childLayoutKeys = this.parent ?\n        this.parentIsland.children.map((item) => item.key) :\n        this.childLayoutKeys = this.childLayoutList.map((item) => item.key);\n        this.childLayoutList.notifyOnChanges();\n        this.childLayoutList.changes.pipe(takeUntil(this.destroy$))\n        .subscribe(() => this.onRowIslandChange());\n        super.ngAfterContentInit();\n    }\n\n    /**\n    * @hidden\n    */\n    public onRowIslandChange() {\n        if (this.parent) {\n            this.childLayoutKeys = this.parentIsland.children.filter(item => !(item as any)._destroyed).map((item) => item.key);\n        } else {\n            this.childLayoutKeys = this.childLayoutList.filter(item => !(item as any)._destroyed).map((item) => item.key);\n        }\n        if (!(this.cdr as any).destroyed) {\n            this.cdr.detectChanges();\n        }\n    }\n\n    protected onColumnsChanged(change: QueryList<IgxColumnComponent>) {\n        this.updateColumnList();\n        const cols = change.filter(c => c.gridAPI.grid === this);\n        if (cols.length > 0) {\n            this.columnList.reset(cols);\n            super.onColumnsChanged(this.columnList);\n        }\n    }\n\n    private updateColumnList(recalcColSizes = true) {\n        const childLayouts = this.parent ? this.childLayoutList : this.allLayoutList;\n        const nestedColumns = childLayouts.map((layout) => {\n            return layout.columnList.toArray();\n        });\n        const colsArray = [].concat.apply([], nestedColumns);\n        const colLength = this.columnList.length;\n        if (colsArray.length > 0) {\n            const topCols = this.columnList.filter((item) => {\n                return colsArray.indexOf(item) === -1;\n            });\n            this.columnList.reset(topCols);\n            if (recalcColSizes && this.columnList.length !== colLength) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        if (!this.parent) {\n            this.hgridAPI.getChildGrids(true).forEach((grid) => {\n                if (!grid.childRow.cdr.destroyed) {\n                    grid.childRow.cdr.destroy();\n                }\n            });\n        }\n        if (this.parent && this.selectionService.activeElement) {\n            // in case selection is in destroyed child grid, selection should be cleared.\n            this._clearSeletionHighlights();\n        }\n        super.ngOnDestroy();\n    }\n\n    private _clearSeletionHighlights() {\n        [this.rootGrid, ...this.rootGrid.getChildGrids(true)].forEach(grid => {\n            grid.selectionService.clear();\n            grid.selectionService.activeElement = null;\n            grid.nativeElement.classList.remove('igx-grid__tr--highlighted');\n            grid.highlightedRowID = null;\n            grid.cdr.markForCheck();\n        });\n    }\n\n    /**\n    * @hidden\n    */\n    public get template(): TemplateRef<any> {\n        if (this.filteredData && this.filteredData.length === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyFilteredGridTemplate;\n        }\n\n        if (this.isLoading && (!this.data || this.dataLength === 0)) {\n            return this.loadingGridTemplate ? this.loadingGridTemplate : this.loadingGridDefaultTemplate;\n        }\n\n        if (this.dataLength === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyGridDefaultTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.\n     * TODO: Remove for Angular 8. Calling parent class getter using super is not supported for now.\n     */\n    public getFeatureColumnsWidth() {\n        let width = super.getFeatureColumnsWidth();\n\n        if (this.hasExpandableChildren) {\n            width += this.headerHierarchyExpander.nativeElement.offsetWidth || this.getDefaultExpanderWidth();\n        }\n\n        return width;\n    }\n\n     private getDefaultExpanderWidth(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 57;\n            case DisplayDensity.compact:\n                return 49;\n            default:\n                return 72;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public isRowHighlighted(rowData) {\n        return this.highlightedRowID === rowData.rowID;\n    }\n\n    /**\n     * @hidden\n     */\n    public isHierarchicalRecord(record: any): boolean {\n        return this.childLayoutList.length !== 0 && record[this.childLayoutList.first.key];\n    }\n\n    /**\n     * @hidden\n     */\n    public isChildGridRecord(record: any): boolean {\n        // Can be null when there is defined layout but no child data was found\n        return record.childGridsData !== undefined;\n    }\n\n    /**\n     * @hidden\n     */\n    public trackChanges(index, rec) {\n        if (rec.childGridsData !== undefined) {\n            // if is child rec\n            return rec.rowID;\n        }\n        return rec;\n    }\n\n    /**\n     * @hidden\n     */\n    public getContext(rowData): any {\n        if (this.isChildGridRecord(rowData)) {\n            const cachedData = this.childGridTemplates.get(rowData.rowID);\n            if (cachedData) {\n                const view = cachedData.view;\n                const tmlpOutlet = cachedData.owner;\n                return {\n                    $implicit: rowData,\n                    moveView: view,\n                    owner: tmlpOutlet,\n                    index: this.dataView.indexOf(rowData)\n                };\n            } else {\n                const rowID = this.primaryKey ? rowData.rowID : this.data.indexOf(rowData.rowID);\n                // child rows contain unique grids, hence should have unique templates\n                return {\n                    $implicit: rowData,\n                    templateID: 'childRow-' + rowID,\n                    index: this.dataView.indexOf(rowData)\n                };\n            }\n        } else {\n            return {\n                $implicit: rowData,\n                templateID: 'dataRow',\n                index: this.dataView.indexOf(rowData)\n            };\n        }\n    }\n\n    /**\n     * @hidden\n    */\n    public get rootGrid() {\n        let currGrid = this;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n        }\n        return currGrid;\n    }\n\n    /**\n     * @hidden\n    */\n    public get iconTemplate() {\n        const expanded = this.hierarchicalState.length > 0 && this.hasExpandableChildren;\n        if (!expanded && this.showExpandAll) {\n            return this.headerCollapseIndicatorTemplate || this.defaultCollapsedTemplate;\n        } else {\n            return this.headerExpandIndicatorTemplate || this.defaultExpandedTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public getDragGhostCustomTemplate(): TemplateRef<any> {\n        if (this.parentIsland) {\n            return this.parentIsland.getDragGhostCustomTemplate();\n        }\n        return super.getDragGhostCustomTemplate();\n    }\n\n    /**\n     * @hidden\n    */\n    protected initColumns(collection: QueryList<IgxColumnComponent>, cb: Function = null) {\n        if (this.hasColumnLayouts) {\n            // invalid configuration - hierarchical grid should not allow column layouts\n            // remove column layouts\n            const nonColumnLayoutColumns = this.columnList.filter((col) => !col.columnLayout && !col.columnLayoutChild);\n            this.columnList.reset(nonColumnLayoutColumns);\n        }\n        super.initColumns(collection, cb);\n    }\n\n    /**\n     * @hidden\n     * Gets the visible content height that includes header + tbody + footer.\n     * For hierarchical child grid it may be scrolled and not fully visible.\n     */\n    public getVisibleContentHeight() {\n        let height = super.getVisibleContentHeight();\n        if (this.parent) {\n            const rootHeight = this.rootGrid.getVisibleContentHeight();\n            const topDiff = this.nativeElement.getBoundingClientRect().top - this.rootGrid.nativeElement.getBoundingClientRect().top;\n            height = rootHeight - topDiff > height ? height : rootHeight - topDiff;\n        }\n        return height;\n    }\n\n    /**\n     * @hidden\n    */\n   toggleAll() {\n    const expanded = this.hierarchicalState.length > 0 && this.hasExpandableChildren;\n    if (!expanded && this.showExpandAll) {\n        this.expandAll();\n    } else {\n        this.collapseAll();\n    }\n   }\n\n    /**\n     * Collapses all rows of the current hierarchical grid.\n     * ```typescript\n     * this.grid.collapseAll();\n     * ```\n\t * @memberof IgxHierarchicalGridComponent\n     */\n    public collapseAll() {\n        this.hierarchicalState = [];\n    }\n\n    /**\n     * Expands all rows of the current hierarchical grid.\n     * ```typescript\n     * this.grid.expandAll();\n     * ```\n\t * @memberof IgxHierarchicalGridComponent\n     */\n    public expandAll() {\n        if (this.data) {\n            this.hierarchicalState = this.data.map((rec) => {\n                return { rowID: this.primaryKey ? rec[this.primaryKey] : rec };\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public isExpanded(record: any): boolean {\n        let inState;\n        if (record.childGridsData !== undefined) {\n            inState = !!this.hierarchicalState.find(v => v.rowID === record.rowID);\n        } else {\n            inState = !!this.hierarchicalState.find(v => {\n                return this.primaryKey ? v.rowID === record[this.primaryKey] : v.rowID === record;\n            });\n        }\n        return inState && this.childLayoutList.length !== 0;\n    }\n\n    /**\n     * @hidden\n     */\n    public viewCreatedHandler(args) {\n        if (this.isChildGridRecord(args.context.$implicit)) {\n            const key = args.context.$implicit.rowID;\n            this.childGridTemplates.set(key, args);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public viewMovedHandler(args) {\n        if (this.isChildGridRecord(args.context.$implicit)) {\n            // view was moved, update owner in cache\n            const key = args.context.$implicit.rowID;\n            const cachedData = this.childGridTemplates.get(key);\n            cachedData.owner = args.owner;\n\n            this.childLayoutList.forEach((layout) => {\n                const relatedGrid = this.hgridAPI.getChildGridByID(layout.key, args.context.$implicit.rowID);\n                if (relatedGrid && relatedGrid.updateOnRender) {\n                    // Detect changes if `expandChildren` has changed when the grid wasn't visible. This is for performance reasons.\n                    relatedGrid.notifyChanges(true);\n                    relatedGrid.updateOnRender = false;\n                }\n            });\n\n            const childGrids = this.getChildGrids(true);\n            childGrids.forEach((grid) => {\n                if (grid.isPercentWidth) {\n                    grid.notifyChanges(true);\n                }\n                grid.updateScrollPosition();\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public updateScrollPosition() {\n        const vScr = this.verticalScrollContainer.getScroll();\n        const hScr = this.headerContainer.getScroll();\n        if (vScr) {\n            vScr.scrollTop = this.scrollTop;\n        }\n        if (hScr) {\n            hScr.scrollLeft = this.scrollLeft;\n        }\n    }\n\n    protected getChildGrids(inDeph?: boolean) {\n        return this.hgridAPI.getChildGrids(inDeph);\n    }\n\n    protected generateDataFields(data: any[]): string[] {\n        return super.generateDataFields(data).filter((field) => {\n            const layoutsList = this.parentIsland ? this.parentIsland.children : this.childLayoutList;\n            const keys = layoutsList.map((item) => item.key);\n            return keys.indexOf(field) === -1;\n        });\n    }\n\n\n    private hg_verticalScrollHandler(event) {\n        this.scrollTop = event.target.scrollTop;\n    }\n\n    public onContainerScroll() {\n        this.hideOverlays();\n    }\n\n    private hg_horizontalScrollHandler(event) {\n        this.scrollLeft = event.target.scrollLeft;\n    }\n}\n","import { IgxGridCellComponent } from '../cell.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { ChangeDetectorRef, ElementRef, ChangeDetectionStrategy, Component,\n     OnInit, HostListener, NgZone } from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\n// import { IgxHierarchicalSelectionAPIService } from './selection';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { HammerGesturesManager } from '../../core/touch';\nimport { PlatformUtil } from '../../core/utils';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-hierarchical-grid-cell',\n    templateUrl: './../cell.component.html',\n    providers: [HammerGesturesManager]\n})\nexport class IgxHierarchicalGridCellComponent extends IgxGridCellComponent implements OnInit {\n\n    // protected hSelection;\n    protected _rootGrid;\n\n    constructor(\n        protected selectionService: IgxGridSelectionService,\n        protected crudService: IgxGridCRUDService,\n        public gridAPI: GridBaseAPIService<IgxHierarchicalGridComponent>,\n        // public selection: IgxHierarchicalSelectionAPIService,\n        public cdr: ChangeDetectorRef,\n        private helement: ElementRef,\n        protected zone: NgZone,\n        touchManager: HammerGesturesManager,\n        protected platformUtil: PlatformUtil\n        ) {\n            super(selectionService, crudService, gridAPI, cdr, helement, zone, touchManager, platformUtil);\n            // this.hSelection = <IgxHierarchicalSelectionAPIService>selection;\n         }\n\n    ngOnInit() {\n        super.ngOnInit();\n        this._rootGrid = this._getRootGrid();\n    }\n\n    private _getRootGrid() {\n        let currGrid = this.grid;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n        }\n        return currGrid;\n    }\n\n    // TODO: Extend the new selection service to avoid complete traversal\n    _clearAllHighlights() {\n        [this._rootGrid, ...this._rootGrid.getChildGrids(true)].forEach(grid => {\n            grid.selectionService.clear();\n            grid.selectionService.activeElement = null;\n            grid.nativeElement.classList.remove('igx-grid__tr--highlighted');\n            grid.highlightedRowID = null;\n            grid.cdr.markForCheck();\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('focus', ['$event'])\n    onFocus(event) {\n        this._clearAllHighlights();\n        const currentElement = this.grid.nativeElement;\n        let parentGrid = this.grid;\n        let childGrid;\n        // add highligh to the current grid\n        if (this._rootGrid.id !== currentElement.id) {\n            currentElement.classList.add('igx-grid__tr--highlighted');\n        }\n\n        // add highligh to the current grid\n        while (this._rootGrid.id !== parentGrid.id) {\n            childGrid = parentGrid;\n            parentGrid = parentGrid.parent;\n\n            const parentRowID = parentGrid.hgridAPI.getParentRowId(childGrid);\n            parentGrid.highlightedRowID = parentRowID;\n        }\n        super.onFocus(event);\n    }\n\n    // TODO: Refactor\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('keydown', ['$event'])\n    dispatchEvent(event: KeyboardEvent) {\n        const key = event.key.toLowerCase();\n        if (event.altKey && !this.row.added) {\n            const grid = this.gridAPI.grid;\n            const state = this.gridAPI.grid.hierarchicalState;\n            const collapse = this.row.expanded && (key === 'left' || key === 'arrowleft' || key === 'up' || key === 'arrowup');\n            const expand = !this.row.expanded && (key === 'right' || key === 'arrowright' || key === 'down' || key === 'arrowdown');\n            if (collapse) {\n                grid.hierarchicalState = state.filter(v => {\n                    return v.rowID !== this.row.rowID;\n                });\n            } else if (expand) {\n                state.push({ rowID: this.row.rowID });\n                grid.hierarchicalState = [...state];\n            }\n            if (expand || collapse) {\n                const rowID = this.cellID.rowID;\n                grid.cdr.detectChanges();\n                this.persistFocusedCell(rowID);\n            }\n            return;\n        }\n        super.dispatchEvent(event);\n    }\n\n    protected persistFocusedCell(rowID) {\n        requestAnimationFrame(() => {\n            // TODO: Test it out\n            const cell = this.gridAPI.get_cell_by_key(rowID, this.column.field);\n            if (cell) {\n                cell.nativeElement.focus();\n            }\n        });\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    HostBinding,\n    forwardRef,\n    ElementRef,\n    ViewChildren,\n    QueryList,\n    ViewChild,\n    TemplateRef\n} from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxRowComponent } from '../row.component';\nimport { IgxHierarchicalGridCellComponent } from './hierarchical-cell.component';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-hierarchical-grid-row',\n    templateUrl: './hierarchical-row.component.html',\n    providers: [{ provide: IgxRowComponent, useExisting: forwardRef(() => IgxHierarchicalRowComponent) }]\n})\nexport class IgxHierarchicalRowComponent extends IgxRowComponent<IgxHierarchicalGridComponent> {\n    /**\n     * The rendered cells in the row component.\n     *\n     * ```typescript\n     * // get the cells of the third selected row\n     * let selectedRowCells = this.grid.selectedRows[2].cells;\n     * ```\n     */\n    @ViewChildren(forwardRef(() => IgxHierarchicalGridCellComponent), { read: IgxHierarchicalGridCellComponent })\n    public cells: QueryList<IgxHierarchicalGridCellComponent>;\n\n    @ViewChild('expander', { read: ElementRef, static: false })\n    public expander: ElementRef;\n\n    get viewIndex(): number {\n        return this.index + this.grid.page * this.grid.perPage;\n    }\n\n    /**\n    * @hidden\n    */\n   @ViewChild('defaultExpandedTemplate', { read: TemplateRef, static: true })\n   protected defaultExpandedTemplate: TemplateRef<any>;\n\n    /**\n    * @hidden\n    */\n   @ViewChild('defaultEmptyTemplate', { read: TemplateRef, static: true })\n   protected defaultEmptyTemplate: TemplateRef<any>;\n\n    /**\n    * @hidden\n    */\n   @ViewChild('defaultCollapsedTemplate', { read: TemplateRef, static: true })\n   protected defaultCollapsedTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n        /**\n     * Returns whether the row is expanded.\n     * ```typescript\n     * const RowExpanded = this.grid1.rowList.first.expanded;\n     * ```\n     */\n    @HostBinding('class.igx-grid__tr--expanded')\n    public get expanded() {\n        return this.grid.isExpanded(this.rowData);\n    }\n\n    public get hasChildren() {\n        return  !!this.grid.childLayoutKeys.length;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-grid__tr--highlighted')\n    public get highlighted() {\n        return this.grid && this.grid.highlightedRowID === this.rowID;\n    }\n\n    /**\n    * @hidden\n    */\n   public expanderClick(event) {\n        event.stopPropagation();\n        this.toggle();\n    }\n\n    /**\n     * Toggles the hierarchical row.\n     * ```typescript\n     * this.grid1.rowList.first.toggle()\n     * ```\n     */\n    public toggle() {\n        if (this.added) {\n            return;\n        }\n        const grid = this.gridAPI.grid;\n        this.endEdit(grid.rootGrid);\n        const state = this.gridAPI.grid.hierarchicalState;\n        if (!this.expanded) {\n            state.push({ rowID: this.rowID });\n            grid.hierarchicalState = [...state];\n        } else {\n            grid.hierarchicalState = state.filter(v => {\n                return v.rowID !== this.rowID;\n            });\n        }\n        grid.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public select = () => {\n        this.grid.selectRows([this.rowID]);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public deselect = () => {\n        this.grid.deselectRows([this.rowID]);\n    }\n\n    /**\n    * @hidden\n    */\n    public get iconTemplate() {\n        let expandable = true;\n        if (this.grid.hasChildrenKey) {\n            expandable = this.rowData[this.grid.hasChildrenKey];\n        }\n        if (!expandable) {\n            return this.defaultEmptyTemplate;\n        }\n        if (this.expanded) {\n            return this.grid.rowExpandedIndicatorTemplate || this.defaultExpandedTemplate;\n        } else {\n            return this.grid.rowCollapsedIndicatorTemplate || this.defaultCollapsedTemplate;\n        }\n    }\n\n    private endEdit(grid: IgxHierarchicalGridComponent) {\n        if (grid.crudService.inEditMode) {\n            grid.endEdit();\n        }\n        grid.hgridAPI.getChildGrids(true).forEach(g => {\n            if (g.crudService.inEditMode) {\n            g.endEdit();\n        }});\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray } from '../../core/utils';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { DataUtil } from '../../data-operations/data-util';\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridHierarchical',\n    pure: true\n})\nexport class IgxGridHierarchicalPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxHierarchicalGridComponent>) { }\n\n    public transform(\n        collection: any,\n        state = [],\n        id: string,\n        primaryKey: any,\n        childKeys: string[],\n        pipeTrigger: number\n        ): any[] {\n        if (childKeys.length === 0) {\n            return collection;\n        }\n        const grid: IgxHierarchicalGridComponent = this.gridAPI.grid;\n        const result = this.addHierarchy(grid, cloneArray(collection), state, primaryKey, childKeys);\n\n        return result;\n    }\n\n    public addHierarchy<T>(grid, data: T[], state, primaryKey, childKeys: string[]): T[] {\n        const result = [];\n\n        data.forEach((v) => {\n            result.push(v);\n            const childGridsData = {};\n            childKeys.forEach((childKey) => {\n                const childData = v[childKey] ? v[childKey] : null;\n                childGridsData[childKey] = childData;\n            });\n            if (grid.isExpanded(v)) {\n                result.push({ rowID: primaryKey ? v[primaryKey] : v, childGridsData: childGridsData});\n            }\n        });\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridHierarchicalPaging',\n    pure: true\n})\nexport class IgxGridHierarchicalPagingPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxHierarchicalGridComponent>) { }\n\n    public transform(collection: any[], page = 0, perPage = 15, id: string, pipeTrigger: number): any[] {\n\n        if (!this.gridAPI.grid.paging) {\n            return collection;\n        }\n\n        const state = {\n            index: page,\n            recordsPerPage: perPage\n        };\n\n        const result: any[] = DataUtil.page(cloneArray(collection), state);\n        this.gridAPI.grid.pagingState = state;\n        return result;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxChipsModule } from '../../chips/chips.module';\nimport { IgxGridModule } from '../grid/grid.module';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxHierarchicalRowComponent } from './hierarchical-row.component';\nimport { IgxGridHierarchicalPipe, IgxGridHierarchicalPagingPipe } from './hierarchical-grid.pipes';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxChildGridRowComponent } from './child-grid-row.component';\nimport { IgxHierarchicalGridCellComponent } from './hierarchical-cell.component';\nimport { IgxRowIslandAPIService } from './row-island-api.service';\nimport { IgxSelectModule } from '../../select/index';\nimport { IgxGridComponent } from '../grid/grid.component';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxHierarchicalGridComponent,\n    IgxHierarchicalRowComponent,\n    IgxRowIslandComponent,\n    IgxChildGridRowComponent,\n    IgxHierarchicalGridCellComponent,\n    IgxGridHierarchicalPipe,\n    IgxGridHierarchicalPagingPipe\n  ],\n  exports: [\n    IgxGridModule,\n    IgxHierarchicalGridComponent,\n    IgxHierarchicalRowComponent,\n    IgxHierarchicalGridCellComponent,\n    IgxRowIslandComponent,\n    IgxChildGridRowComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    IgxChipsModule,\n    IgxGridModule,\n    IgxSelectModule\n  ],\n  providers: [\n    IgxRowIslandAPIService\n  ],\n  entryComponents: [\n    IgxGridComponent\n  ]\n})\nexport class IgxHierarchicalGridModule {\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Directive,\n    ContentChild\n} from '@angular/core';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxIconModule } from '../icon/index';\n\n/**\n * IgxActionIcon is a container for the action nav icon of the IgxNavbar.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-action-icon'\n})\nexport class IgxActionIconDirective { }\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Navbar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/navbar.html)\n *\n * The Ignite UI Navbar is most commonly used to provide an app header with a hamburger menu and navigation\n * state such as a \"Go Back\" button. It also supports other actions represented by icons.\n *\n * Example:\n * ```html\n * <igx-navbar title=\"Sample App\" actionButtonIcon=\"menu\">\n *   <igx-icon>search</igx-icon>\n *   <igx-icon>favorite</igx-icon>\n *   <igx-icon>more_vert</igx-icon>\n * </igx-navbar>\n * ```\n */\n\n@Component({\n    selector: 'igx-navbar',\n    templateUrl: 'navbar.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `\n    ]\n})\n\nexport class IgxNavbarComponent {\n    private static NEXT_ID = 1;\n    private isVisible = true;\n\n    /**\n     *An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     *```html\n     *<igx-navbar [id]=\"'igx-navbar-12'\" title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-navbar-${NEXT_ID++}`;\n    /**\n     *Returns whether the `IgxNavbarComponent` action button is visible, true/false.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public navBar: IgxNavbarComponent;\n     *ngAfterViewInit(){\n     *    let actionButtonVisibile = this.navBar.isActionButtonVisible;\n     *}\n     *```\n     */\n    @Input()\n    public get isActionButtonVisible(): boolean {\n        if (this.actionIconTemplate || !this.actionButtonIcon) {\n            return false;\n        }\n        return this.isVisible;\n    }\n\n    /**\n     *Sets whether the action button of the `IgxNavbarComponent` is visible.\n     *```html\n     *<igx-navbar [title]=\"currentView\" [isActionButtonVisible]=\"'false'\"></igx-navbar>\n     *```\n     */\n    public set isActionButtonVisible(value: boolean) {\n        this.isVisible = value;\n    }\n    /**\n     *An @Input property that sets the icon of the `IgxNavbarComponent`.\n     *```html\n     *<igx-navbar [title]=\"currentView\" actionButtonIcon=\"arrow_back\"></igx-navbar>\n     *```\n     */\n    @Input() public actionButtonIcon: string;\n\n    /**\n     *An @Input property that sets the title of the `IgxNavbarComponent`.\n     *```html\n     *<igx-navbar title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @Input() public title: string;\n\n    /**\n     *The event that will be thrown when the action is executed,\n     *provides reference to the `IgxNavbar` component as argument\n     *```typescript\n     *public actionExc(event){\n     *    alert(\"Action Execute!\");\n     *}\n     * //..\n     *```\n     *```html\n     *<igx-navbar (onAction)=\"actionExc($event)\" title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @Output() public onAction = new EventEmitter<IgxNavbarComponent>();\n\n    /**\n     *An @Input property that sets the titleId of the `IgxNavbarComponent`. If not set it will be automatically generated.\n     *```html\n     *<igx-navbar [titleId]=\"'igx-navbar-7'\" title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @Input()\n    public titleId = `igx-navbar-${IgxNavbarComponent.NEXT_ID++}`;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxActionIconDirective, { read: IgxActionIconDirective, static: false })\n    protected actionIconTemplate: IgxActionIconDirective;\n\n    /**\n     *@hidden\n     */\n    public _triggerAction() {\n        this.onAction.emit(this);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxNavbarComponent, IgxActionIconDirective],\n    exports: [IgxNavbarComponent, IgxActionIconDirective],\n    imports: [IgxButtonModule, IgxIconModule, CommonModule]\n})\nexport class IgxNavbarModule {\n}\n","import { Directive, HostBinding, Input, TemplateRef } from '@angular/core';\n\n@Directive({\n    selector: '[igxDrawerItem]',\n    exportAs: 'igxDrawerItem'\n})\nexport class IgxNavDrawerItemDirective {\n\n    /**\n     * @hidden\n     */\n    @Input('active') public active = false;\n\n    /**\n     * @hidden\n     */\n    @Input('isHeader') public isHeader = false;\n\n    /**\n     * @hidden\n     */\n    public readonly activeClass = 'igx-nav-drawer__item--active';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-nav-drawer__item')\n    get defaultCSS(): boolean {\n        return !this.active && !this.isHeader;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-nav-drawer__item--active')\n    get currentCSS(): boolean {\n        return this.active && !this.isHeader;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-nav-drawer__item--header')\n    get headerCSS(): boolean {\n        return this.isHeader;\n    }\n}\n\n@Directive({\n    selector: '[igxDrawer]'\n})\nexport class IgxNavDrawerTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n     }\n}\n\n@Directive({\n    selector: '[igxDrawerMini]'\n})\nexport class IgxNavDrawerMiniTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n     }\n}\n","import {\n    AfterContentInit,\n    Component,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    Renderer,\n    SimpleChange,\n    ViewChild\n} from '@angular/core';\nimport { fromEvent, interval, Subscription } from 'rxjs';\nimport { debounce } from 'rxjs/operators';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\nimport { HammerGesturesManager } from '../core/touch';\nimport { IgxNavDrawerMiniTemplateDirective, IgxNavDrawerTemplateDirective } from './navigation-drawer.directives';\nimport { PlatformUtil } from '../core/utils';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Navigation Drawer** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/navdrawer.html)\n *\n * The Ignite UI Navigation Drawer is a collapsible side navigation container commonly used in combination with the Navbar.\n *\n * Example:\n * ```html\n * <igx-nav-drawer id=\"navigation\" [isOpen]=\"true\">\n *   <ng-template igxDrawer>\n *     <nav>\n *       <span igxDrawerItem [isHeader]=\"true\">Email</span>\n *       <span igxDrawerItem igxRipple>Inbox</span>\n *       <span igxDrawerItem igxRipple>Deleted</span>\n *       <span igxDrawerItem igxRipple>Sent</span>\n *     </nav>\n *   </ng-template>\n * </igx-nav-drawer>\n * ```\n */\n@Component({\n    providers: [HammerGesturesManager],\n    selector: 'igx-nav-drawer',\n    templateUrl: 'navigation-drawer.component.html',\n    styles: [`\n        :host {\n            display: block;\n            height: 100%;\n        }\n    `]\n})\nexport class IgxNavigationDrawerComponent implements\n    IToggleView,\n    OnInit,\n    AfterContentInit,\n    OnDestroy,\n    OnChanges {\n    private _isOpen = false;\n    @HostBinding('class') public cssClass = 'igx-nav-drawer';\n\n    /**\n     * ID of the component\n     *\n     * ```typescript\n     * // get\n     * let myNavDrawerId = this.navdrawer.id;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     *  <igx-nav-drawer id='navdrawer'></igx-nav-drawer>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-nav-drawer-${NEXT_ID++}`;\n\n    /**\n     * Position of the Navigation Drawer. Can be \"left\"(default) or \"right\".\n     *\n     * ```typescript\n     * // get\n     * let myNavDrawerPosition = this.navdrawer.position;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [position]=\"'left'\"></igx-nav-drawer>\n     * ```\n     */\n    @Input() public position = 'left';\n\n    /**\n     * Enables the use of touch gestures to manipulate the drawer:\n     * - swipe/pan from edge to open, swipe-toggle and pan-drag.\n     *\n     * ```typescript\n     * // get\n     * let gesturesEnabled = this.navdrawer.enableGestures;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [enableGestures]='true'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public enableGestures = true;\n\n    /**\n     * State of the drawer.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerIsOpen = this.navdrawer.isOpen;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [isOpen]='false'></igx-nav-drawer>\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [(isOpen)]='model.isOpen'></igx-nav-drawer>\n     * ```\n     */\n    @Input()\n    public get isOpen() {\n        return this._isOpen;\n    }\n    public set isOpen(value) {\n        this._isOpen = value;\n        this.isOpenChange.emit(this._isOpen);\n    }\n\n    /**\n     *@hidden\n     */\n    @Output() public isOpenChange = new EventEmitter<boolean>();\n\n    /**\n     * When pinned the drawer is relatively positioned instead of sitting above content.\n     * May require additional layout styling.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerIsPinned = this.navdrawer.pin;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [pin]='false'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public pin = false;\n\n    /**\n     * Minimum device width required for automatic pin to be toggled.\n     * Default is 1024, can be set to a falsy value to disable this behavior.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerPinTreshold = this.navdrawer.pinThreshold;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [pinTreshold]='1024'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public pinThreshold = 1024;\n\n    /**\n     * Returns nativeElement of the component.\n     *\n     * @hidden\n     */\n    get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Width of the drawer in its open state. Defaults to \"280px\".\n     *\n     * ```typescript\n     * // get\n     * let navDrawerWidth = this.navdrawer.width;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [width]=\"'228px'\"></igx-nav-drawer>\n     * ```\n     */\n    @Input() public width = '280px';\n\n    /**\n     * Width of the drawer in its mini state. Defaults to 68px.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerMiniWidth = this.navdrawer.miniWidth;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [miniWidth]=\"'34px'\"></igx-nav-drawer>\n     * ```\n     */\n    @Input() public miniWidth = '68px';\n\n    /**\n     * Pinned state change output for two-way binding.\n     *\n     * ```html\n     * <igx-nav-drawer [(pin)]='isPinned'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public pinChange = new EventEmitter<boolean>(true);\n    /**\n     * Event fired as the Navigation Drawer is about to open.\n     *\n     * ```html\n     *  <igx-nav-drawer (opening)='onOpening()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public opening = new EventEmitter();\n    /**\n     * Event fired when the Navigation Drawer has opened.\n     *\n     * ```html\n     * <igx-nav-drawer (opened)='onOpened()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public opened = new EventEmitter();\n    /**\n     * Event fired as the Navigation Drawer is about to close.\n     *\n     * ```html\n     * <igx-nav-drawer (closing)='onClosing()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public closing = new EventEmitter();\n    /**\n     * Event fired when the Navigation Drawer has closed.\n     *\n     * ```html\n     * <igx-nav-drawer (closed)='onClosed()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public closed = new EventEmitter();\n\n    /**\n     * @hidden\n     */\n    get template() {\n        if (this.miniTemplate && !this.isOpen) {\n            return this.miniTemplate.template;\n        } else if (this.contentTemplate) {\n            return this.contentTemplate.template;\n        }\n    }\n\n    private _miniTemplate: IgxNavDrawerMiniTemplateDirective;\n    /**\n     * @hidden\n     */\n    public get miniTemplate(): IgxNavDrawerMiniTemplateDirective {\n        return this._miniTemplate;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxNavDrawerMiniTemplateDirective, { read: IgxNavDrawerMiniTemplateDirective, static: false })\n    public set miniTemplate(v: IgxNavDrawerMiniTemplateDirective) {\n        if (!this.isOpen) {\n            this.setDrawerWidth(v ? this.miniWidth : '');\n        }\n        this._miniTemplate = v;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxNavDrawerTemplateDirective, { read: IgxNavDrawerTemplateDirective, static: false })\n    protected contentTemplate: IgxNavDrawerTemplateDirective;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flexBasis')\n    get flexWidth() {\n        if (!this.pin) {\n            return '0px';\n        }\n        if (this.isOpen) {\n            return this.width;\n        }\n        if (this.miniTemplate && this.miniWidth) {\n            return this.miniWidth;\n        }\n\n        return '0px';\n    }\n\n    /** @hidden */\n    @HostBinding('style.order')\n    get isPinnedRight() {\n        return this.pin && this.position === 'right' ? '1' : '0';\n    }\n\n    private _gesturesAttached = false;\n    private _widthCache: { width: number, miniWidth: number, windowWidth: number } = { width: null, miniWidth: null, windowWidth: null };\n    private _resizeObserver: Subscription;\n    private css: { [name: string]: string; } = {\n        drawer: 'igx-nav-drawer__aside',\n        mini: 'igx-nav-drawer__aside--mini',\n        overlay: 'igx-nav-drawer__overlay',\n        styleDummy: 'igx-nav-drawer__style-dummy'\n    };\n\n    @ViewChild('aside', { static: true }) private _drawer: ElementRef;\n    @ViewChild('overlay', { static: true }) private _overlay: ElementRef;\n    @ViewChild('dummy', { static: true }) private _styleDummy: ElementRef;\n\n    /**\n      * @hidden\n      */\n    get drawer() {\n        return this._drawer.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    get overlay() {\n        return this._overlay.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    get styleDummy() {\n        return this._styleDummy.nativeElement;\n    }\n\n    /** Pan animation properties */\n    private _panning = false;\n    private _panStartWidth: number;\n    private _panLimit: number;\n\n    /**\n     * Property to decide whether to change width or translate the drawer from pan gesture.\n     *\n     * @hidden\n     */\n    public get hasAnimateWidth(): boolean {\n        return this.pin || !!this.miniTemplate;\n    }\n\n    private _maxEdgeZone = 50;\n    /**\n     * Used for touch gestures (swipe and pan).\n     * Defaults to 50 (in px) and is extended to at least 110% of the mini template width if available.\n     *\n     * @hidden\n     */\n    public get maxEdgeZone() {\n        return this._maxEdgeZone;\n    }\n\n    /**\n     * Gets the Drawer width for specific state.\n     * Will attempt to evaluate requested state and cache.\n     *\n     *\n     * @hidden\n     */\n    public get expectedWidth() {\n        return this.getExpectedWidth(false);\n    }\n\n    /**\n     * Get the Drawer mini width for specific state.\n     * Will attempt to evaluate requested state and cache.\n     *\n     * @hidden\n     */\n    public get expectedMiniWidth() {\n        return this.getExpectedWidth(true);\n    }\n\n    /**\n     * @hidden\n     */\n    public get touchManager() {\n        return this._touchManager;\n    }\n\n    /**\n     * Exposes optional navigation service\n     *\n     * @hidden\n     */\n    public get state() {\n        return this._state;\n    }\n\n    constructor(\n        @Inject(ElementRef) private elementRef: ElementRef,\n        @Optional() private _state: IgxNavigationService,\n        // private animate: AnimationBuilder, TODO\n        protected renderer: Renderer,\n        private _touchManager: HammerGesturesManager,\n        private platformUtil: PlatformUtil) {\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        // DOM and @Input()-s initialized\n        if (this._state) {\n            this._state.add(this.id, this);\n        }\n        if (this.isOpen) {\n            this.setDrawerWidth(this.width);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        // wait for template and ng-content to be ready\n        this.updateEdgeZone();\n        this.checkPinThreshold();\n\n        this.ensureEvents();\n\n        // TODO: apply platform-safe Ruler from http://plnkr.co/edit/81nWDyreYMzkunihfRgX?p=preview\n        // (https://github.com/angular/angular/issues/6515), blocked by https://github.com/angular/angular/issues/6904\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._touchManager.destroy();\n        if (this._state) {\n            this._state.remove(this.id);\n        }\n        if (this._resizeObserver) {\n            this._resizeObserver.unsubscribe();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnChanges(changes: { [propName: string]: SimpleChange }) {\n        // simple settings can come from attribute set (rather than binding), make sure boolean props are converted\n        if (changes.enableGestures && changes.enableGestures.currentValue !== undefined) {\n            this.enableGestures = !!(this.enableGestures && this.enableGestures.toString() === 'true');\n            this.ensureEvents();\n        }\n        if (changes.pin && changes.pin.currentValue !== undefined) {\n            this.pin = !!(this.pin && this.pin.toString() === 'true');\n            if (this.pin) {\n                this._touchManager.destroy();\n                this._gesturesAttached = false;\n            } else {\n                this.ensureEvents();\n            }\n        }\n\n        if (changes.pinThreshold) {\n            if (this.pinThreshold) {\n                this.ensureEvents();\n                this.checkPinThreshold();\n            }\n        }\n\n        if (changes.width && this.isOpen) {\n            this.setDrawerWidth(changes.width.currentValue);\n        }\n\n        if (changes.miniWidth) {\n            if (!this.isOpen) {\n                this.setDrawerWidth(changes.miniWidth.currentValue);\n            }\n            this.updateEdgeZone();\n        }\n    }\n\n    /**\n     * Toggle the open state of the Navigation Drawer.\n     *\n     * ```typescript\n     * this.navdrawer.toggle();\n     * ```\n     */\n    public toggle() {\n        if (this.isOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /**\n     * Open the Navigation Drawer. Has no effect if already opened.\n     *\n     * ```typescript\n     * this.navdrawer.open();\n     * ```\n     */\n    public open() {\n        if (this._panning) {\n            this.resetPan();\n        }\n        if (this.isOpen) {\n            return;\n        }\n        this.opening.emit();\n        this.isOpen = true;\n\n        // TODO: Switch to animate API when available\n        // var animationCss = this.animate.css();\n        //     animationCss\n        //         .setStyles({'width':'50px'}, {'width':'400px'})\n        //         .start(this.elementRef.nativeElement)\n        //         .onComplete(() => animationCss.setToStyles({'width':'auto'}).start(this.elementRef.nativeElement));\n\n        this.elementRef.nativeElement.addEventListener('transitionend', this.toggleOpenedEvent, false);\n        this.setDrawerWidth(this.width);\n    }\n\n    /**\n     * Close the Navigation Drawer. Has no effect if already closed.\n     *\n     * ```typescript\n     * this.navdrawer.close();\n     * ```\n     */\n    public close() {\n        if (this._panning) {\n            this.resetPan();\n        }\n        if (!this.isOpen) {\n            return;\n        }\n        this.closing.emit();\n\n        this.isOpen = false;\n        this.setDrawerWidth(this.miniTemplate ? this.miniWidth : '');\n        this.elementRef.nativeElement.addEventListener('transitionend', this.toggleClosedEvent, false);\n    }\n\n    /**\n     * @hidden\n     */\n    protected set_maxEdgeZone(value: number) {\n        this._maxEdgeZone = value;\n    }\n\n    /**\n     * Get the Drawer width for specific state. Will attempt to evaluate requested state and cache.\n     *\n     * @hidden\n     * @param [mini] - Request mini width instead\n     */\n    protected getExpectedWidth(mini?: boolean): number {\n        if (mini) {\n            if (!this.miniTemplate) {\n                return 0;\n            }\n            if (this.miniWidth) {\n                return parseFloat(this.miniWidth);\n            } else {\n                // if (!this.isOpen) { // This WON'T work due to transition timings...\n                //     return this.elementRef.nativeElement.children[1].offsetWidth;\n                // } else {\n                if (this._widthCache.miniWidth === null) {\n                    // force class for width calc. TODO?\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, true);\n                    this.renderer.setElementClass(this.styleDummy, this.css.mini, true);\n                    this._widthCache.miniWidth = this.styleDummy.offsetWidth;\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, false);\n                    this.renderer.setElementClass(this.styleDummy, this.css.mini, false);\n                }\n                return this._widthCache.miniWidth;\n            }\n        } else {\n            if (this.width) {\n                return parseFloat(this.width);\n            } else {\n                if (this._widthCache.width === null) {\n                    // force class for width calc. TODO?\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, true);\n                    this._widthCache.width = this.styleDummy.offsetWidth;\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, false);\n                }\n                return this._widthCache.width;\n            }\n        }\n    }\n\n    private getWindowWidth() {\n        return (window.innerWidth > 0) ? window.innerWidth : screen.width;\n    }\n\n    /**\n     * Sets the drawer width.\n     */\n    private setDrawerWidth(width: string) {\n        if (this.platformUtil.isBrowser) {\n            requestAnimationFrame(() => {\n                if (this.drawer) {\n                    this.renderer.setElementStyle(this.drawer, 'width', width);\n                }\n            });\n        } else {\n            this.renderer.setElementStyle(this.drawer, 'width', width);\n        }\n    }\n\n    /**\n     * Get current Drawer width.\n     */\n    private getDrawerWidth(): number {\n        return this.drawer.offsetWidth;\n    }\n\n    private ensureEvents() {\n        // set listeners for swipe/pan only if needed, but just once\n        if (this.enableGestures && !this.pin && !this._gesturesAttached) {\n            // Built-in manager handler(L20887) causes endless loop and max stack exception.\n            // https://github.com/angular/angular/issues/6993\n            // Use ours for now (until beta.10):\n            // this.renderer.listen(document, \"swipe\", this.swipe);\n            this._touchManager.addGlobalEventListener('document', 'swipe', this.swipe);\n            this._gesturesAttached = true;\n\n            // this.renderer.listen(document, \"panstart\", this.panstart);\n            // this.renderer.listen(document, \"pan\", this.pan);\n            this._touchManager.addGlobalEventListener('document', 'panstart', this.panstart);\n            this._touchManager.addGlobalEventListener('document', 'panmove', this.pan);\n            this._touchManager.addGlobalEventListener('document', 'panend', this.panEnd);\n        }\n        if (!this._resizeObserver && this.platformUtil.isBrowser) {\n            this._resizeObserver = fromEvent(window, 'resize').pipe(debounce(() => interval(150)))\n                .subscribe((value) => {\n                    this.checkPinThreshold(value);\n                });\n        }\n    }\n\n    private updateEdgeZone() {\n        let maxValue;\n\n        if (this.miniTemplate) {\n            maxValue = Math.max(this._maxEdgeZone, this.getExpectedWidth(true) * 1.1);\n            this.set_maxEdgeZone(maxValue);\n        }\n    }\n\n    private checkPinThreshold = (evt?: Event) => {\n        if (!this.platformUtil.isBrowser) {\n            return;\n        }\n        let windowWidth;\n        if (this.pinThreshold) {\n            windowWidth = this.getWindowWidth();\n            if (evt && this._widthCache.windowWidth === windowWidth) {\n                return;\n            }\n            this._widthCache.windowWidth = windowWidth;\n            if (!this.pin && windowWidth >= this.pinThreshold) {\n                this.pin = true;\n                this.pinChange.emit(true);\n            } else if (this.pin && windowWidth < this.pinThreshold) {\n                this.pin = false;\n                this.pinChange.emit(false);\n            }\n        }\n    }\n\n    private swipe = (evt: HammerInput) => {\n        // TODO: Could also force input type: http://stackoverflow.com/a/27108052\n        if (!this.enableGestures || evt.pointerType !== 'touch') {\n            return;\n        }\n\n        // HammerJS swipe is horizontal-only by default, don't check deltaY\n        let deltaX;\n        let startPosition;\n        if (this.position === 'right') {\n            // when on the right use inverse of deltaX\n            deltaX = -evt.deltaX;\n            startPosition = this.getWindowWidth() - (evt.center.x + evt.distance);\n        } else {\n            deltaX = evt.deltaX;\n            startPosition = evt.center.x - evt.distance;\n        }\n        // only accept closing swipe (ignoring minEdgeZone) when the drawer is expanded:\n        if ((this.isOpen && deltaX < 0) ||\n            // positive deltaX from the edge:\n            (deltaX > 0 && startPosition < this.maxEdgeZone)) {\n            this.toggle();\n        }\n    }\n\n    private panstart = (evt: HammerInput) => { // TODO: test code\n        if (!this.enableGestures || this.pin || evt.pointerType !== 'touch') {\n            return;\n        }\n        const startPosition = this.position === 'right' ? this.getWindowWidth() - (evt.center.x + evt.distance)\n            : evt.center.x - evt.distance;\n\n        // cache width during animation, flag to allow further handling\n        if (this.isOpen || (startPosition < this.maxEdgeZone)) {\n            this._panning = true;\n            this._panStartWidth = this.getExpectedWidth(!this.isOpen);\n            this._panLimit = this.getExpectedWidth(this.isOpen);\n\n            this.renderer.setElementClass(this.overlay, 'panning', true);\n            this.renderer.setElementClass(this.drawer, 'panning', true);\n        }\n    }\n\n    private pan = (evt: HammerInput) => {\n        // TODO: input.deltaX = prevDelta.x + (center.x - offset.x);\n        // get actual delta (not total session one) from event?\n        // pan WILL also fire after a full swipe, only resize on flag\n        if (!this._panning) {\n            return;\n        }\n        const right: boolean = this.position === 'right';\n        // when on the right use inverse of deltaX\n        const deltaX = right ? -evt.deltaX : evt.deltaX;\n        let visibleWidth;\n        let newX;\n        let percent;\n\n        visibleWidth = this._panStartWidth + deltaX;\n\n        if (this.isOpen && deltaX < 0) {\n            // when visibleWidth hits limit - stop animating\n            if (visibleWidth <= this._panLimit) {\n                return;\n            }\n\n            if (this.hasAnimateWidth) {\n                percent = (visibleWidth - this._panLimit) / (this._panStartWidth - this._panLimit);\n                newX = visibleWidth;\n            } else {\n                percent = visibleWidth / this._panStartWidth;\n                newX = evt.deltaX;\n            }\n            this.setXSize(newX, percent.toPrecision(2));\n\n        } else if (!this.isOpen && deltaX > 0) {\n            // when visibleWidth hits limit - stop animating\n            if (visibleWidth >= this._panLimit) {\n                return;\n            }\n\n            if (this.hasAnimateWidth) {\n                percent = (visibleWidth - this._panStartWidth) / (this._panLimit - this._panStartWidth);\n                newX = visibleWidth;\n            } else {\n                percent = visibleWidth / this._panLimit;\n                newX = (this._panLimit - visibleWidth) * (right ? 1 : -1);\n            }\n            this.setXSize(newX, percent.toPrecision(2));\n        }\n    }\n\n    private panEnd = (evt: HammerInput) => {\n        if (this._panning) {\n            const deltaX = this.position === 'right' ? -evt.deltaX : evt.deltaX;\n            const visibleWidth: number = this._panStartWidth + deltaX;\n            this.resetPan();\n\n            // check if pan brought the drawer to 50%\n            if (this.isOpen && visibleWidth <= this._panStartWidth / 2) {\n                this.close();\n            } else if (!this.isOpen && visibleWidth >= this._panLimit / 2) {\n                this.open();\n            }\n            this._panStartWidth = null;\n        }\n    }\n\n    private resetPan() {\n        this._panning = false;\n        /* styles fail to apply when set on parent due to extra attributes, prob ng bug */\n        this.renderer.setElementClass(this.overlay, 'panning', false);\n        this.renderer.setElementClass(this.drawer, 'panning', false);\n        this.setXSize(0, '');\n    }\n\n    /**\n     * Sets the absolute position or width in case the drawer doesn't change position.\n     * @param x the number pixels to translate on the X axis or the width to set. 0 width will clear the style instead.\n     * @param opacity optional value to apply to the overlay\n     */\n    private setXSize(x: number, opacity?: string) {\n        // Angular polyfills patches window.requestAnimationFrame, but switch to DomAdapter API (TODO)\n        window.requestAnimationFrame(() => {\n            if (this.hasAnimateWidth) {\n                this.renderer.setElementStyle(this.drawer, 'width', x ? Math.abs(x) + 'px' : '');\n            } else {\n                const transform = x ? 'translate3d(' + x + 'px,0,0)' : '';\n                this.renderer.setElementStyle(this.drawer, 'transform', transform);\n                this.renderer.setElementStyle(this.drawer, '-webkit-transform', transform);\n            }\n            if (opacity !== undefined) {\n                this.renderer.setElementStyle(this.overlay, 'opacity', opacity);\n            }\n        });\n    }\n\n    private toggleOpenedEvent = (evt?) => {\n        this.elementRef.nativeElement.removeEventListener('transitionend', this.toggleOpenedEvent, false);\n        this.opened.emit();\n    }\n\n    private toggleClosedEvent = (evt?) => {\n        this.elementRef.nativeElement.removeEventListener('transitionend', this.toggleClosedEvent, false);\n        this.closed.emit();\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxNavigationDrawerComponent } from './navigation-drawer.component';\nimport {\n    IgxNavDrawerItemDirective,\n    IgxNavDrawerMiniTemplateDirective,\n    IgxNavDrawerTemplateDirective\n} from './navigation-drawer.directives';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxNavigationDrawerComponent,\n        IgxNavDrawerItemDirective,\n        IgxNavDrawerMiniTemplateDirective,\n        IgxNavDrawerTemplateDirective\n    ],\n    exports: [\n        IgxNavigationDrawerComponent,\n        IgxNavDrawerItemDirective,\n        IgxNavDrawerMiniTemplateDirective,\n        IgxNavDrawerTemplateDirective\n    ],\n    imports: [CommonModule]\n})\nexport class IgxNavigationDrawerModule {}\n","import { Directive } from '@angular/core';\nimport { IBaseEventArgs } from '../core/utils';\n\n/**\n * Template directive that allows you to set a custom template representing the lower label value of the {@link IgxSliderComponent}\n *\n *```html\n * <igx-slider>\n *  <ng-template igxSliderThumbFrom let-value let-labels>{{value}}</ng-template>\n * </igx-slider>\n * ```\n *\n * @context {@link IgxSliderComponent.context}\n */\n@Directive({\n    selector: '[igxSliderThumbFrom]'\n})\nexport class IgxThumbFromTemplateDirective {}\n\n/**\n * Template directive that allows you to set a custom template representing the upper label value of the {@link IgxSliderComponent}\n *\n * ```html\n * <igx-slider>\n *  <ng-template igxSliderThumbTo let-value let-labels>{{value}}</ng-template>\n * </igx-slider>\n * ```\n *\n * @context {@link IgxSliderComponent.context}\n */\n@Directive({\n    selector: '[igxSliderThumbTo]'\n})\nexport class IgxThumbToTemplateDirective {}\n\nexport enum SliderType {\n    /**\n     * Slider with single thumb.\n     */\n    SLIDER,\n    /**\n     *  Range slider with multiple thumbs, that can mark the range.\n     */\n    RANGE\n}\n\nexport enum SliderHandle {\n    FROM,\n    TO\n}\n\nexport interface IRangeSliderValue {\n    lower: number;\n    upper: number;\n}\n\nexport interface ISliderValueChangeEventArgs extends IBaseEventArgs {\n    oldValue: number | IRangeSliderValue;\n    value: number | IRangeSliderValue;\n}\n","import {\n    Component,\n    Input,\n    HostListener,\n    ElementRef,\n    HostBinding,\n    Output,\n    EventEmitter,\n    OnInit,\n    OnDestroy,\n    TemplateRef\n} from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { SliderHandle } from '../slider.common';\nimport { Subject } from 'rxjs';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-thumb',\n    templateUrl: 'thumb-slider.component.html',\n})\nexport class IgxSliderThumbComponent implements OnInit, OnDestroy {\n\n    private _isActive = false;\n    private _isPressed = false;\n    private _destroy$ = new Subject<boolean>();\n\n    private get thumbPositionX() {\n        const thumbBounderies = this.nativeElement.getBoundingClientRect();\n        const thumbCenter = (thumbBounderies.right - thumbBounderies.left) / 2;\n        return thumbBounderies.left + thumbCenter;\n    }\n\n    public isActive = false;\n\n    @Input()\n    public value: number;\n\n    @Input()\n    public continuous: boolean;\n\n    @Input()\n    public thumbLabelVisibilityDuration;\n\n    @Input()\n    public disabled: boolean;\n\n    @Input()\n    public onPan: Subject<number>;\n\n    @Input()\n    public stepDistance: number;\n\n    @Input()\n    public step: number;\n\n    @Input()\n    public templateRef: TemplateRef<any>;\n\n    @Input()\n    public context: any;\n\n    @Input()\n    public type: SliderHandle;\n\n    @Output()\n    public onThumbValueChange = new EventEmitter<number>();\n\n    @Output()\n    public onChange = new EventEmitter<any>();\n\n    @Output()\n    public onHoverChange = new EventEmitter<boolean>();\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('attr.z-index')\n    public zIndex = 0;\n\n    @HostBinding('class.igx-slider__thumb-from')\n    public get thumbFromClass() {\n        return this.type === SliderHandle.FROM;\n    }\n\n    @HostBinding('class.igx-slider__thumb-to')\n    public get thumbToClass() {\n        return this.type === SliderHandle.TO;\n    }\n\n    @HostBinding('class.igx-slider__thumb-from--active')\n    public get thumbFromActiveClass() {\n        return this.type === SliderHandle.FROM && this._isActive;\n    }\n\n    @HostBinding('class.igx-slider__thumb-to--active')\n    public get thumbToActiveClass() {\n        return this.type === SliderHandle.TO && this._isActive;\n    }\n\n    @HostBinding('class.igx-slider__thumb--pressed')\n    public get thumbPressedClass() {\n        return this.isActive && this._isPressed;\n    }\n\n    public get nativeElement() {\n        return this._elementRef.nativeElement;\n    }\n\n    public get destroy(): Subject<boolean> {\n        return this._destroy$;\n    }\n\n    constructor(private _elementRef: ElementRef) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this.onPan\n            .pipe(takeUntil(this._destroy$))\n            .subscribe(mouseX =>\n                this.updateThumbValue(mouseX)\n            );\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._destroy$.next(true);\n        this._destroy$.complete();\n    }\n\n    @HostListener('pointerenter')\n    public onPinterEnter() {\n        this.onHoverChange.emit(true);\n    }\n\n    @HostListener('pointerleave')\n    public onPointerLeave() {\n        this.onHoverChange.emit(false);\n    }\n\n    @HostListener('keydown', ['$event'])\n    public onKeyDown(event: KeyboardEvent) {\n        if (this.disabled) {\n            return;\n        }\n\n        let increment = 0;\n        if (event.key.endsWith('Left')) {\n            increment = this.step * - 1;\n        } else if (event.key.endsWith('Right')) {\n            increment = this.step;\n        } else {\n            return;\n        }\n\n        this.onChange.emit();\n        this.onThumbValueChange.emit(increment);\n    }\n\n    @HostListener('blur')\n    public onBlur() {\n        this.isActive = false;\n        this.zIndex = 0;\n    }\n\n    @HostListener('focus')\n    public onFocusListener() {\n        this.isActive = true;\n        this.zIndex = 1;\n    }\n\n    /**\n     * Show thumb label and ripple.\n     */\n    public showThumbIndicators() {\n        this.toggleThumbIndicators(true);\n    }\n\n    /**\n     * Hide thumb label and ripple.\n     */\n    public hideThumbIndicators() {\n        this.toggleThumbIndicators(false);\n    }\n\n    private updateThumbValue(mouseX: number) {\n        const updateValue = this.calculateTrackUpdate(mouseX);\n        if (this.isActive && updateValue !== 0) {\n            this.onThumbValueChange.emit(updateValue);\n        }\n    }\n\n    private calculateTrackUpdate(mouseX: number): number {\n        const scaleX = mouseX - this.thumbPositionX;\n        const stepDistanceCenter = this.stepDistance / 2;\n\n        // If the thumb scale range (slider update) is less thÃ n a half step,\n        // the position stays the same.\n        const scaleXPositive = Math.abs(scaleX);\n        if (scaleXPositive < stepDistanceCenter) {\n            return 0;\n        }\n\n        return this.stepToProceed(scaleX, this.stepDistance);\n    }\n\n    private stepToProceed(scaleX, stepDist) {\n        return Math.round(scaleX / stepDist) * this.step;\n    }\n\n    private toggleThumbIndicators(visible: boolean) {\n        this._isPressed = visible;\n\n        if (!this.continuous) {\n            this._isActive = visible;\n        }\n    }\n}\n","import { Component, NgModule, Input, TemplateRef, HostBinding, ElementRef } from '@angular/core';\nimport { SliderHandle } from '../slider.common';\n\n@Component({\n    selector: 'igx-thumb-label',\n    templateUrl: 'thumb-label.component.html'\n})\nexport class IgxThumbLabelComponent {\n    private _active: boolean;\n\n    @Input()\n    public value: number;\n\n    @Input()\n    public templateRef: TemplateRef<any>;\n\n    @Input()\n    public context: any;\n\n    @Input()\n    public type: SliderHandle;\n\n    @Input()\n    public continuous: boolean;\n\n    @HostBinding('class.igx-slider__label-from')\n    public get thumbFromClass() {\n        return this.type === SliderHandle.FROM;\n    }\n\n    @HostBinding('class.igx-slider__label-to')\n    public get thumbToClass() {\n        return this.type === SliderHandle.TO;\n    }\n\n    @HostBinding('class.igx-slider__label-from--active')\n    public get thumbFromActiveClass() {\n        return this.type === SliderHandle.FROM && this.active;\n    }\n\n    @HostBinding('class.igx-slider__label-to--active')\n    public get thumbToActiveClass() {\n        return this.type === SliderHandle.TO && this.active;\n    }\n\n    constructor(private _elementRef: ElementRef) { }\n\n    public get nativeElement() {\n        return this._elementRef.nativeElement;\n    }\n\n    public get active() {\n        return this._active;\n    }\n\n    public set active(val: boolean) {\n        if (this.continuous) {\n            return;\n        }\n\n        this._active = val;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit, Component, ElementRef, EventEmitter,\n    HostBinding, Input, NgModule, OnInit, Output, Renderer2,\n    ViewChild,\n    TemplateRef,\n    ContentChild,\n    OnDestroy,\n    HostListener,\n    ViewChildren,\n    QueryList,\n    ChangeDetectorRef,\n    AfterContentChecked\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { EditorProvider } from '../core/edit-provider';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\nimport { IgxSliderThumbComponent } from './thumb/thumb-slider.component';\nimport { Subject, merge, Observable, timer } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { SliderHandle,\n    IgxThumbFromTemplateDirective,\n    IgxThumbToTemplateDirective,\n    IRangeSliderValue,\n    SliderType,\n    ISliderValueChangeEventArgs\n} from './slider.common';\nimport { IgxThumbLabelComponent } from './label/thumb-label.component';\n\n\nconst noop = () => {\n};\n\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Slider** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/slider.html)\n *\n * The Ignite UI Slider allows selection in a given range by moving the thumb along the track. The track\n * can be defined as continuous or stepped, and you can choose between single and range slider types.\n *\n * Example:\n * ```html\n * <igx-slider id=\"slider\"\n *            [minValue]=\"0\" [maxValue]=\"100\"\n *            [continuous]=true [(ngModel)]=\"volume\">\n * </igx-slider>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxSliderComponent, multi: true }],\n    selector: 'igx-slider',\n    templateUrl: 'slider.component.html'\n})\nexport class IgxSliderComponent implements\n    ControlValueAccessor,\n    EditorProvider,\n    OnInit,\n    AfterViewInit,\n    AfterContentChecked,\n    OnDestroy {\n\n    // Limit handle travel zone\n    private _pMin = 0;\n    private _pMax = 1;\n\n    // From/upperValue in percent values\n    private _hasViewInit = false;\n    private _minValue = 0;\n    private _maxValue = 100;\n    private _lowerBound?: number;\n    private _upperBound?: number;\n    private _lowerValue?: number;\n    private _upperValue?: number;\n    private _continuous = false;\n    private _disabled = false;\n    private _step = 1;\n\n    private _labels = new Array<number|string|boolean|null|undefined>();\n    private _type = SliderType.SLIDER;\n\n    private _destroyer$ = new Subject<boolean>();\n    private _indicatorsDestroyer$ = new Subject<boolean>();\n    private _indicatorsTimer: Observable<any>;\n\n\n    private _onChangeCallback: (_: any) => void = noop;\n    private _onTouchedCallback: () => void = noop;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('track', { static: true })\n    private track: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('ticks', { static: true })\n    private ticks: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxSliderThumbComponent)\n    private thumbs: QueryList<IgxSliderThumbComponent> = new QueryList<IgxSliderThumbComponent>();\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxThumbLabelComponent)\n    private labelRefs: QueryList<IgxThumbLabelComponent> = new QueryList<IgxThumbLabelComponent>();\n\n    private get thumbFrom(): IgxSliderThumbComponent {\n        return this.thumbs.find(thumb => thumb.type === SliderHandle.FROM);\n    }\n\n    private get thumbTo(): IgxSliderThumbComponent {\n        return this.thumbs.find(thumb => thumb.type === SliderHandle.TO);\n    }\n\n    private get labelFrom(): IgxThumbLabelComponent {\n        return this.labelRefs.find(label => label.type === SliderHandle.FROM);\n    }\n\n    private get labelTo(): IgxThumbLabelComponent {\n        return this.labelRefs.find(label => label.type === SliderHandle.TO);\n    }\n\n    /**\n     * @hidden\n     */\n    public stepDistance = this._step;\n\n    /**\n     * @hidden\n     */\n    public onPan: Subject<number> = new Subject<number>();\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxThumbFromTemplateDirective, { read: TemplateRef, static: false })\n    public thumbFromTemplateRef: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxThumbToTemplateDirective, { read: TemplateRef, static: false })\n    public thumbToTemplateRef: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @HostBinding(`attr.role`)\n    public role = 'slider';\n\n    /**\n     * @hidden\n     */\n    @HostBinding(`attr.aria-valuemin`)\n    public get valuemin() {\n        return this.minValue;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding(`attr.aria-valuemax`)\n    public get valuemax() {\n        return this.maxValue;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding(`attr.aria-readonly`)\n    public get readonly() {\n        return this.disabled;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-slider')\n    public slierClass = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-slider--disabled')\n    public get disabledClass() {\n        return this.disabled;\n    }\n\n    /**\n     * An @Input property that sets the value of the `id` attribute.\n     * If not provided it will be automatically generated.\n     * ```html\n     * <igx-slider [id]=\"'igx-slider-32'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-slider-${NEXT_ID++}`;\n\n    /**\n     * An @Input property that gets the type of the `IgxSliderComponent`. The slider can be SliderType.SLIDER(default) or SliderType.RANGE.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let type = this.slider.type;\n     * }\n     */\n    @Input()\n    public get type() {\n        return this._type;\n    }\n\n    /**\n     * An @Input property that sets the type of the `IgxSliderComponent`. The slider can be SliderType.SLIDER(default) or SliderType.RANGE.\n     * ```typescript\n     * sliderType: SliderType = SliderType.RANGE;\n     * ```\n     * ```html\n     * <igx-slider #slider2 [type]=\"sliderType\" [(ngModel)]=\"rangeValue\" [minValue]=\"0\" [maxValue]=\"100\">\n     * ```\n     */\n    public set type(type: SliderType) {\n        this._type = type;\n\n        if (type === SliderType.SLIDER) {\n            this.lowerValue = 0;\n        }\n\n        if (this.labelsViewEnabled && this.upperValue > this.maxValue) {\n            this.upperValue = this.labels.length - 1;\n        }\n\n        if (this._hasViewInit) {\n            this.updateTrack();\n        }\n    }\n\n    /**\n     *An @Input property that sets the duration visibility of thumbs labels. The default value is 750 milliseconds.\n     *```html\n     *<igx-slider #slider [thumbLabelVisibilityDuration]=\"3000\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     *```\n     */\n    @Input()\n    public thumbLabelVisibilityDuration = 750;\n\n\n    /**\n     * Enables `labelView`, by accepting a collection of primitive values with more than one element.\n     * Each element will be equally spread over the slider and it will serve as a thumb label.\n     * Once the property is set, it will precendence over {@link maxValue}, {@link minValue}, {@link step}.\n     * This means that the manipulation for those properties won't be allowed.\n     */\n    @Input()\n    public get labels() {\n        return this._labels;\n    }\n\n    public set labels(labels: Array<number|string|boolean|null|undefined>) {\n        this._labels = labels;\n\n        this._pMax = 1;\n\n        if (this._hasViewInit) {\n            this.stepDistance = this.calculateStepDistance();\n            this.positionHandlesAndUpdateTrack();\n            this.setTickInterval(labels);\n        }\n    }\n\n    /**\n     * Returns the template context corresponding\n     * to {@link IgxThumbFromTemplateDirective} and {@link IgxThumbToTemplateDirective} templates.\n     *\n     * return {\n     *  $implicit: {@link value},\n     *  labels: {@link labels}\n     * }\n     * ```\n     */\n    public get context(): any {\n        return {\n            $implicit: this.value,\n            labels: this.labels\n        };\n    }\n\n    /**\n     * An @Input property that sets the incremental/decremental step of the value when dragging the thumb.\n     * The default step is 1, and step should not be less or equal than 0.\n     * ```html\n     * <igx-slider #slider [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     * ```\n     */\n    @Input()\n    public set step(step: number) {\n        this._step = step;\n\n        if (this._hasViewInit) {\n            this.stepDistance = this.calculateStepDistance();\n            this.normalizeByStep(this.value);\n            this.setTickInterval(this.labels);\n        }\n    }\n\n    /**\n     * Returns the incremental/decremental dragging step of the {@link IgxSliderComponent}.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let step = this.slider.step;\n     * }\n     * ```\n     */\n    public get step() {\n        return this.labelsViewEnabled ? 1 : this._step;\n    }\n\n    /**\n     * Returns if the {@link IgxSliderComponent} is disabled.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let isDisabled = this.slider.disabled;\n     * }\n     * ```\n     */\n    @Input()\n    public get disabled(): boolean {\n        return this._disabled;\n    }\n\n    /**\n     *An @Input property that disables or enables UI interaction.\n     *```html\n     *<igx-slider #slider [disabled]=\"'true'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     *```\n     */\n    public set disabled(disable: boolean) {\n        this._disabled = disable;\n\n        if (this._hasViewInit) {\n            this.changeThumbFocusableState(disable);\n        }\n    }\n\n    /**\n     * Returns if the {@link IgxSliderComponent} is set as continuous.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let continuous = this.slider.continuous;\n     * }\n     * ```\n     */\n    @Input()\n    public get continuous(): boolean {\n        return this._continuous;\n    }\n\n    /**\n     * An @Input property that marks the {@link IgxSliderComponent} as continuous.\n     * By default is considered that the {@link IgxSliderComponent} is discrete.\n     * Discrete {@link IgxSliderComponent} does not have ticks and does not show bubble labels for values.\n     * ```html\n     * <igx-slider #slider [continuous]=\"'true'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    public set continuous(continuous: boolean) {\n        this._continuous = continuous;\n        this.setTickInterval(null);\n    }\n\n    /**\n     * Returns if the {@link IgxSliderComponent} is set as continuous.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let continuous = this.slider.continuous;\n     * }\n     * ```\n     */\n    @Input()\n    @DeprecateProperty(`IgxSliderComponent \\`isContinuous\\` property is deprecated.\\nUse \\`continuous\\` instead.`)\n    public get isContinuous(): boolean {\n        return this.continuous;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public set isContinuous(continuous: boolean) {\n        this.continuous = continuous;\n    }\n\n    /**\n     * Returns the maximum value for the {@link IgxSliderComponent}.\n     * ```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderMax = this.slider.maxValue;\n     *}\n     * ```\n     */\n    public get maxValue(): number {\n        return this.labelsViewEnabled ?\n            this.labels.length - 1 :\n            this._maxValue;\n    }\n\n    /**\n     * Sets the maximal value for the `IgxSliderComponent`.\n     * The default maximum value is 100.\n     * ```html\n     * <igx-slider [type]=\"sliderType\" [minValue]=\"56\" [maxValue]=\"256\">\n     * ```\n     */\n    @Input()\n    public set maxValue(value: number) {\n        if (value <= this._minValue) {\n            this._maxValue = this._minValue + 1;\n        } else {\n            this._maxValue = value;\n        }\n\n        if (value < this.lowerBound) {\n            this.updateLowerBoundAndMinTravelZone();\n            this.upperBound = value;\n        }\n\n        // refresh max travel zone limits.\n        this._pMax = 1;\n        // recalculate step distance.\n        this.stepDistance = this.calculateStepDistance();\n        this.positionHandlesAndUpdateTrack();\n        this.setTickInterval(null);\n    }\n\n    /**\n     *Returns the minimal value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderMin = this.slider.minValue;\n     *}\n     *```\n     */\n    public get minValue(): number {\n        if (this.labelsViewEnabled) {\n            return 0;\n        }\n\n        return this._minValue;\n    }\n\n    /**\n     * Sets the minimal value for the `IgxSliderComponent`.\n     * The default minimal value is 0.\n     * ```html\n     * <igx-slider [type]=\"sliderType\" [minValue]=\"56\" [maxValue]=\"100\">\n     * ```\n     */\n    @Input()\n    public set minValue(value: number) {\n        if (value >= this.maxValue) {\n            this._minValue = this.maxValue - 1;\n        } else {\n            this._minValue = value;\n        }\n\n        if (value > this.upperBound) {\n            this.updateUpperBoundAndMaxTravelZone();\n            this.lowerBound = value;\n        }\n\n        // Refresh min travel zone limit.\n        this._pMin = 0;\n        // Recalculate step distance.\n        this.stepDistance = this.calculateStepDistance();\n        this.positionHandlesAndUpdateTrack();\n        this.setTickInterval(null);\n    }\n\n    /**\n     * Returns the lower boundary of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderLowBound = this.slider.lowerBound;\n     *}\n     *```\n     */\n    public get lowerBound(): number {\n        if (!Number.isNaN(this._lowerBound) && this._lowerBound !== undefined) {\n            return this.valueInRange(this._lowerBound, this.minValue, this.maxValue);\n        }\n\n        return this.minValue;\n    }\n\n    /**\n     * Sets the lower boundary of the `IgxSliderComponent`.\n     * If not set is the same as min value.\n     * ```html\n     * <igx-slider [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    @Input()\n    public set lowerBound(value: number) {\n        if (value >= this.upperBound || (this.labelsViewEnabled && value < 0)) {\n            return;\n        }\n\n        this._lowerBound = this.valueInRange(value, this.minValue, this.maxValue);\n\n        // Refresh time travel zone.\n        this._pMin = this.valueToFraction(this._lowerBound) || 0;\n        this.positionHandlesAndUpdateTrack();\n    }\n\n    /**\n     * Returns the upper boundary of the `IgxSliderComponent`.\n     * ```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderUpBound = this.slider.upperBound;\n     *}\n     * ```\n     */\n    public get upperBound(): number {\n        if (!Number.isNaN(this._upperBound) && this._upperBound !== undefined) {\n            return this.valueInRange(this._upperBound, this.minValue, this.maxValue);\n        }\n\n        return this.maxValue;\n    }\n\n    /**\n     * Sets the upper boundary of the `IgxSliderComponent`.\n     * If not set is the same as max value.\n     * ```html\n     * <igx-slider [step]=\"5\" [upperBound]=\"20\">\n     * ```\n     */\n    @Input()\n    public set upperBound(value: number) {\n        if (value <= this.lowerBound || (this.labelsViewEnabled && value > this.labels.length - 1)) {\n            return;\n        }\n\n        this._upperBound = this.valueInRange(value, this.minValue, this.maxValue);\n        // Refresh time travel zone.\n        this._pMax = this.valueToFraction(this._upperBound) || 1;\n        this.positionHandlesAndUpdateTrack();\n    }\n\n    /**\n     * Returns the slider value. If the slider is of type {@link SliderType.SLIDER} the returned value is number.\n     * If the slider type is {@link SliderType.RANGE} the returned value represents an object of {@link lowerValue} and {@link upperValue}.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public sliderValue(event){\n     *    let sliderVal = this.slider.value;\n     *}\n     *```\n     */\n    public get value(): number | IRangeSliderValue {\n        if (this.isRange) {\n            return {\n                lower: this.valueInRange(this.lowerValue, this.lowerBound, this.upperBound),\n                upper: this.valueInRange(this.upperValue, this.lowerBound, this.upperBound)\n            };\n        } else {\n            return this.valueInRange(this.upperValue, this.lowerBound, this.upperBound);\n        }\n    }\n\n    /**\n     * Sets the slider value.\n     * If the slider is of type {@link SliderType.SLIDER} the argument is number. By default the {@link value} gets the {@link lowerBound}.\n     * If the slider type is {@link SliderType.RANGE} the argument\n     * represents an object of {@link lowerValue} and {@link upperValue} properties.\n     * By default the object is associated with the {@link lowerBound} and {@link upperBound} property values.\n     * ```typescript\n     *rangeValue = {\n     *   lower: 30,\n     *   upper: 60\n     *};\n     * ```\n     * ```html\n     * <igx-slider [type]=\"sliderType\" [(ngModel)]=\"rangeValue\" [minValue]=\"56\" [maxValue]=\"256\">\n     * ```\n     */\n    @Input()\n    public set value(value: number | IRangeSliderValue) {\n        if (!this.isRange) {\n            this.upperValue = value as number;\n        } else {\n            value = this.validateInitialValue(value as IRangeSliderValue);\n            this.upperValue = (value as IRangeSliderValue).upper;\n            this.lowerValue = (value as IRangeSliderValue).lower;\n        }\n\n        this._onChangeCallback(this.value);\n\n        if (this._hasViewInit) {\n            this.positionHandlesAndUpdateTrack();\n        }\n    }\n\n    /**\n     * This event is emitted when user has stopped interacting the thumb and value is changed.\n     * ```typescript\n     * public change(event){\n     *    alert(\"The value has been changed!\");\n     *}\n     * ```\n     * ```html\n     * <igx-slider (onValueChange)=\"change($event)\" #slider [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     * ```\n     */\n    @Output()\n    public onValueChange = new EventEmitter<ISliderValueChangeEventArgs>();\n\n\n    constructor(private renderer: Renderer2, private _el: ElementRef, private _cdr: ChangeDetectorRef) { }\n\n    /**\n     * @hidden\n     */\n    @HostListener('pointerdown', ['$event'])\n    public onPointerDown($event: PointerEvent) {\n        this.findClosestThumb($event);\n\n        if (!this.thumbTo.isActive && this.thumbFrom === undefined) {\n            return;\n        }\n\n        const activeThumb = this.thumbTo.isActive ? this.thumbTo : this.thumbFrom;\n        activeThumb.nativeElement.setPointerCapture($event.pointerId);\n        this.showSliderIndicators();\n\n        $event.preventDefault();\n    }\n\n\n    /**\n     * @hidden\n     */\n    @HostListener('pointerup', ['$event'])\n    public onPointerUp($event) {\n        if (!this.thumbTo.isActive && this.thumbFrom === undefined) {\n            return;\n        }\n\n        const activeThumb = this.thumbTo.isActive ? this.thumbTo : this.thumbTo;\n        activeThumb.nativeElement.releasePointerCapture($event.pointerId);\n\n        this.hideSliderIndicators();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('focus')\n    public onFocus() {\n        this.toggleSliderIndicators();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('pan', ['$event'])\n    public onPanListener($event) {\n        this.update($event.srcEvent.clientX);\n    }\n\n    @HostListener('panstart')\n    public onPanStart() {\n        this.showSliderIndicators();\n    }\n\n    @HostListener('panend')\n    public onPanEnd() {\n        this.hideSliderIndicators();\n    }\n\n    /**\n     *Returns whether the `IgxSliderComponent` type is RANGE.\n     *```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderRange = this.slider.isRange;\n     *}\n     * ```\n     */\n    public get isRange(): boolean {\n        return this.type === SliderType.RANGE;\n    }\n\n    /**\n     * Returns the lower value of the `IgxSliderComponent`.\n     * ```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * public lowValue(event){\n     *    let sliderLowValue = this.slider.lowerValue;\n     *}\n     *```\n     */\n    public get lowerValue(): number {\n        if (!Number.isNaN(this._lowerValue) && this._lowerValue !== undefined && this._lowerValue >= this.lowerBound) {\n            return this._lowerValue;\n        }\n\n        return this.lowerBound;\n    }\n\n    /**\n     *Sets the lower value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public lowValue(event){\n     *    this.slider.lowerValue = 120;\n     *}\n     *```\n     */\n    public set lowerValue(value: number) {\n        value = this.valueInRange(value, this.lowerBound, this.upperBound);\n        this._lowerValue = value;\n\n    }\n\n    /**\n     *Returns the upper value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public upperValue(event){\n     *    let upperValue = this.slider.upperValue;\n     *}\n     *```\n     */\n    public get upperValue() {\n        if (!Number.isNaN(this._upperValue) && this._upperValue !== undefined && this._upperValue <= this.upperBound) {\n            return this._upperValue;\n        }\n\n        return this.upperBound;\n    }\n\n    /**\n     *Sets the upper value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public upperValue(event){\n     *    this.slider.upperValue = 120;\n     *}\n     *```\n     */\n    public set upperValue(value: number) {\n        value = this.valueInRange(value, this.lowerBound, this.upperBound);\n        this._upperValue = value;\n    }\n\n    /**\n     * Returns the value corresponding the lower label.\n     *```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * let label = this.slider.lowerLabel;\n     *```\n     */\n    public get lowerLabel() {\n        return this.labelsViewEnabled ?\n            this.labels[this.lowerValue] :\n            this.lowerValue;\n    }\n\n    /**\n     * Returns the value corresponding the upper label.\n     *```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * let label = this.slider.upperLabel;\n     *```\n     */\n    public get upperLabel() {\n        return this.labelsViewEnabled ?\n            this.labels[this.upperValue] :\n            this.upperValue;\n    }\n\n    /**\n     * Returns if label view is enabled.\n     * If the {@link labels} is set, the view is automatically activated.\n     *```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * let labelView = this.slider.labelsViewEnabled;\n     *```\n     */\n    public get labelsViewEnabled(): boolean {\n        return !!(this.labels && this.labels.length > 1);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this.sliderSetup();\n\n        // Set track travel zone\n        this._pMin = this.valueToFraction(this.lowerBound) || 0;\n        this._pMax = this.valueToFraction(this.upperBound) || 1;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        this._hasViewInit = true;\n        this.positionHandlesAndUpdateTrack();\n        this.setTickInterval(this.labels);\n        this.changeThumbFocusableState(this.disabled);\n\n        this.subscribeTo(this.thumbFrom, this.thumbChanged.bind(this));\n        this.subscribeTo(this.thumbTo, this.thumbChanged.bind(this));\n\n        this.thumbs.changes.pipe(takeUntil(this._destroyer$)).subscribe(change => {\n            const thumbFrom = change.find((thumb: IgxSliderThumbComponent) => thumb.type === SliderHandle.FROM);\n            const labelFrom = this.labelRefs.find((label: IgxThumbLabelComponent) => label.type === SliderHandle.FROM);\n            this.positionHandle(thumbFrom, labelFrom, this.lowerValue);\n            this.subscribeTo(thumbFrom, this.thumbChanged.bind(this));\n            this.changeThumbFocusableState(this.disabled);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentChecked() {\n        // Calculates the distance between every step in pixels.\n        this.stepDistance = this.calculateStepDistance();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._destroyer$.next(true);\n        this._destroyer$.complete();\n\n        this._indicatorsDestroyer$.next(true);\n        this._indicatorsDestroyer$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: IRangeSliderValue | number): void {\n        if (!value) {\n            return;\n        }\n\n        this.normalizeByStep(value);\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: any): void {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: any): void {\n        this._onTouchedCallback = fn;\n    }\n\n    /** @hidden */\n    public getEditElement() {\n        return this.isRange ? this.thumbFrom.nativeElement : this.thumbTo.nativeElement;\n    }\n\n    /**\n     *\n     * @hidden\n     */\n    public update(mouseX) {\n        if (this.disabled) {\n            return;\n        }\n\n        // Update To/From Values\n        this.onPan.next(mouseX);\n\n        // Finally do positionHandlesAndUpdateTrack the DOM\n        // based on data values\n        this.positionHandlesAndUpdateTrack();\n        this._onTouchedCallback();\n    }\n\n    /**\n     * @hidden\n     */\n    public thumbChanged(value: number, thumbType: number) {\n        const oldValue = this.value;\n\n        let newVal: IRangeSliderValue;\n        if (this.isRange) {\n            if (thumbType === SliderHandle.FROM) {\n                newVal = {\n                    lower: (this.value as IRangeSliderValue).lower + value,\n                    upper: (this.value as IRangeSliderValue).upper\n                };\n            } else {\n                newVal = {\n                    lower: (this.value as IRangeSliderValue).lower,\n                    upper: (this.value as IRangeSliderValue).upper + value\n                };\n            }\n\n            // Swap the thumbs if a collision appears.\n            if (newVal.lower >= newVal.upper) {\n                this.value = this.swapThumb(newVal);\n            } else {\n                this.value = newVal;\n            }\n\n        } else {\n            this.value = this.value as number + value;\n        }\n\n        if (this.hasValueChanged(oldValue)) {\n            this.emitValueChanged(oldValue);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onThumbChange() {\n        this.toggleSliderIndicators();\n    }\n\n    public onHoverChange(state: boolean) {\n        return state ? this.showSliderIndicators() : this.hideSliderIndicators();\n    }\n\n    private swapThumb(value: IRangeSliderValue) {\n        if (this.thumbFrom.isActive) {\n            value.upper = this.upperValue;\n            value.lower = this.upperValue;\n        } else {\n            value.upper = this.lowerValue;\n            value.lower = this.lowerValue;\n        }\n\n        this.toggleThumb();\n\n        return value;\n    }\n\n    private findClosestThumb(event: PointerEvent) {\n        if (this.isRange) {\n            this.closestHandle(event);\n        } else {\n            this.thumbTo.nativeElement.focus();\n        }\n\n        this.update(event.clientX);\n    }\n\n    private updateLowerBoundAndMinTravelZone() {\n        this.lowerBound = this.minValue;\n        this._pMin = 0;\n    }\n\n    private updateUpperBoundAndMaxTravelZone() {\n        this.upperBound = this.maxValue;\n        this._pMax = 1;\n    }\n\n    private sliderSetup() {\n        /**\n         * if {@link SliderType.SLIDER} than the initial value shold be the lowest one.\n         */\n        if (!this.isRange && this.value === this.upperBound) {\n            this.value = this.lowerBound;\n        }\n    }\n\n    private calculateStepDistance() {\n        return this._el.nativeElement.getBoundingClientRect().width / (this.maxValue - this.minValue) * this.step;\n    }\n\n    private toggleThumb() {\n        return this.thumbFrom.isActive ?\n            this.thumbTo.nativeElement.focus() :\n            this.thumbFrom.nativeElement.focus();\n    }\n\n    private valueInRange(value, min = 0, max = 100) {\n        return Math.max(Math.min(value, max), min);\n    }\n\n    private generateTickMarks(color: string, interval: number) {\n        return interval !== null ? `repeating-linear-gradient(\n            ${'to left'},\n            ${color},\n            ${color} 1.5px,\n            transparent 1.5px,\n            transparent ${interval}%\n        ), repeating-linear-gradient(\n            ${'to right'},\n            ${color},\n            ${color} 1.5px,\n            transparent 1.5px,\n            transparent ${interval}%\n        )` : interval;\n    }\n\n    private positionHandle(thumbHandle: ElementRef, labelHandle: ElementRef, position: number) {\n        const positionLeft = `${this.valueToFraction(position) * 100}%`;\n\n        if (thumbHandle) {\n            thumbHandle.nativeElement.style.left = positionLeft;\n        }\n\n        if (labelHandle) {\n            labelHandle.nativeElement.style.left = positionLeft;\n        }\n    }\n\n    private positionHandlesAndUpdateTrack() {\n        if (!this.isRange) {\n            this.positionHandle(this.thumbTo, this.labelTo, this.value as number);\n        } else {\n            this.positionHandle(this.thumbTo, this.labelTo, (this.value as IRangeSliderValue).upper);\n            this.positionHandle(this.thumbFrom, this.labelFrom, (this.value as IRangeSliderValue).lower);\n        }\n\n        this.updateTrack();\n    }\n\n    private closestHandle(event: PointerEvent) {\n        const fromOffset = this.thumbFrom.nativeElement.offsetLeft + this.thumbFrom.nativeElement.offsetWidth / 2;\n        const toOffset = this.thumbTo.nativeElement.offsetLeft + this.thumbTo.nativeElement.offsetWidth / 2;\n        const xPointer = event.clientX - this._el.nativeElement.getBoundingClientRect().left;\n        const match = this.closestTo(xPointer, [fromOffset, toOffset]);\n\n        if (fromOffset === toOffset && toOffset < xPointer) {\n            this.thumbTo.nativeElement.focus();\n        } else if (fromOffset === toOffset && toOffset > xPointer ) {\n            this.thumbFrom.nativeElement.focus();\n        } else if (match === fromOffset) {\n            this.thumbFrom.nativeElement.focus();\n        } else {\n            this.thumbTo.nativeElement.focus();\n        }\n    }\n\n    private setTickInterval(labels) {\n        let interval;\n        const trackProgress = 100;\n        if (this.labelsViewEnabled) {\n            // Calc ticks depending on the labels length;\n            interval = ((trackProgress / (this.labels.length - 1) * 10)) / 10;\n        } else {\n            const trackRange = this.maxValue - this.minValue;\n            interval = this.step > 1 ?\n                (trackProgress / ((trackRange / this.step)) * 10) / 10\n                : null;\n        }\n\n        const renderCallbackExecution = !this.continuous ? this.generateTickMarks('white', interval) : null;\n        this.renderer.setStyle(this.ticks.nativeElement, 'background', renderCallbackExecution);\n    }\n\n    private showSliderIndicators() {\n        if (this.disabled) {\n            return;\n        }\n\n        if (this._indicatorsTimer) {\n            this._indicatorsDestroyer$.next(true);\n            this._indicatorsTimer = null;\n        }\n\n        this.thumbTo.showThumbIndicators();\n        this.labelTo.active = true;\n        if (this.thumbFrom) {\n            this.thumbFrom.showThumbIndicators();\n        }\n\n        if (this.labelFrom) {\n            this.labelFrom.active = true;\n        }\n\n    }\n\n    private hideSliderIndicators() {\n        if (this.disabled) {\n            return;\n        }\n\n        this._indicatorsTimer = timer(this.thumbLabelVisibilityDuration);\n        this._indicatorsTimer.pipe(takeUntil(this._indicatorsDestroyer$)).subscribe(() => {\n            this.thumbTo.hideThumbIndicators();\n            this.labelTo.active = false;\n            if (this.thumbFrom) {\n                this.thumbFrom.hideThumbIndicators();\n            }\n\n            if (this.labelFrom) {\n                this.labelFrom.active = false;\n            }\n        });\n    }\n\n    private toggleSliderIndicators() {\n        this.showSliderIndicators();\n        this.hideSliderIndicators();\n    }\n\n    private changeThumbFocusableState(state: boolean) {\n        const value = state ? -1 : 1;\n\n        if (this.isRange) {\n            this.thumbFrom.tabindex = value;\n        }\n\n        this.thumbTo.tabindex = value;\n\n        this._cdr.detectChanges();\n    }\n\n    private closestTo(goal: number, positions: number[]): number {\n        return positions.reduce((previous, current) => {\n            return (Math.abs(goal - current) < Math.abs(goal - previous) ? current : previous);\n        });\n    }\n\n    private valueToFraction(value: number, pMin = this._pMin, pMax = this._pMax) {\n        return this.valueInRange((value - this.minValue) / (this.maxValue - this.minValue), pMin, pMax);\n    }\n\n    /**\n     * @hidden\n     * NormalizÐµ the value when two-way data bind is used and {@link this.step} is set.\n     * @param value\n     */\n    private normalizeByStep(value: IRangeSliderValue | number) {\n        if (this.isRange) {\n            this.value =  {\n                lower: (value as IRangeSliderValue).lower - ((value as IRangeSliderValue).lower % this.step),\n                upper: (value as IRangeSliderValue).upper - ((value as IRangeSliderValue).upper % this.step)\n            };\n        } else {\n            this.value = (value as number) - ((value as number) % this.step);\n        }\n    }\n\n    private updateTrack() {\n        const fromPosition = this.valueToFraction(this.lowerValue);\n        const toPosition = this.valueToFraction(this.upperValue);\n        const positionGap = toPosition - fromPosition;\n\n        let trackLeftIndention = fromPosition;\n        if (this.isRange) {\n            if (positionGap) {\n                trackLeftIndention = Math.round((1 / positionGap * fromPosition) * 100);\n            }\n\n            this.renderer.setStyle(this.track.nativeElement, 'transform', `scaleX(${positionGap}) translateX(${trackLeftIndention}%)`);\n        } else {\n            this.renderer.setStyle(this.track.nativeElement, 'transform', `scaleX(${toPosition})`);\n        }\n    }\n\n    private validateInitialValue(value: IRangeSliderValue) {\n        if (value.lower < this.lowerBound && value.upper < this.lowerBound) {\n            value.upper = this.lowerBound;\n            value.lower = this.lowerBound;\n        }\n\n        if (value.lower > this.upperBound && value.upper > this.upperBound) {\n            value.upper = this.upperBound;\n            value.lower = this.upperBound;\n        }\n\n        if (value.upper < value.lower) {\n            value.upper = this.upperValue;\n            value.lower = this.lowerValue;\n        }\n\n        return value;\n    }\n\n    private subscribeTo(thumb: IgxSliderThumbComponent, callback: (a: number, b: number) => void) {\n        if (!thumb) {\n            return;\n        }\n\n        thumb.onThumbValueChange\n            .pipe(takeUntil(this.unsubscriber(thumb)))\n            .subscribe(value => callback(value, thumb.type));\n    }\n\n    private unsubscriber(thumb: IgxSliderThumbComponent) {\n        return merge(this._destroyer$, thumb.destroy);\n    }\n\n    private hasValueChanged(oldValue) {\n        const isSliderWithDifferentValue: boolean = !this.isRange && oldValue !== this.value;\n        const isRangeWithOneDifferentValue: boolean = this.isRange &&\n            ((oldValue as IRangeSliderValue).lower !== (this.value as IRangeSliderValue).lower ||\n                (oldValue as IRangeSliderValue).upper !== (this.value as IRangeSliderValue).upper);\n\n        return isSliderWithDifferentValue || isRangeWithOneDifferentValue;\n    }\n\n    private emitValueChanged(oldValue: number | IRangeSliderValue) {\n        this.onValueChange.emit({ oldValue, value: this.value });\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxSliderComponent,\n        IgxThumbFromTemplateDirective,\n        IgxThumbToTemplateDirective,\n        IgxSliderThumbComponent,\n        IgxThumbLabelComponent],\n    exports: [\n        IgxSliderComponent,\n        IgxThumbFromTemplateDirective,\n        IgxThumbToTemplateDirective,\n        IgxSliderThumbComponent,\n        IgxThumbLabelComponent],\n    imports: [CommonModule]\n})\nexport class IgxSliderModule {\n}\n","import {\n    AnimationEvent,\n    transition,\n    trigger,\n    useAnimation\n} from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport {\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    NgZone,\n    Output\n} from '@angular/core';\nimport { fadeIn, fadeOut, slideInBottom, slideOutBottom } from '../animations/main';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Snackbar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/snackbar.html)\n *\n * The Ignite UI Snack Bar provides feedback about an operation with a single-line message, which can\n * include a link to an action such as Undo.\n *\n * Example:\n * ```html\n * <button (click)=\"snackbar.show()\">Send message</button>\n * <div>\n *   <igx-snackbar #snackbar message=\"Message sent\">\n *   </igx-snackbar>\n * </div>\n * ```\n */\n@Component({\n    animations: [\n        trigger('slideInOut', [\n            transition('void => *', [\n                useAnimation(slideInBottom, {\n                    params: {\n                        duration: '.35s',\n                        easing: 'cubic-bezier(0.0, 0.0, 0.2, 1)',\n                        fromPosition: 'translateY(100%)',\n                        toPosition: 'translateY(0)'\n                    }\n                })\n            ]),\n            transition('* => void', [\n                useAnimation(slideOutBottom, {\n                    params: {\n                        duration: '.2s',\n                        easing: 'cubic-bezier(0.4, 0.0, 1, 1)',\n                        fromPosition: 'translateY(0)',\n                        toOpacity: 1,\n                        toPosition: 'translateY(100%)'\n                    }\n                })\n            ])\n        ]),\n        trigger('fadeInOut', [\n            transition('void => *', [\n                useAnimation(fadeIn, {\n                    params: {\n                        duration: '.35s',\n                        easing: 'ease-out'\n                    }\n                })\n            ]),\n            transition('* => void', [\n                useAnimation(fadeOut, {\n                    params: {\n                        duration: '.2s',\n                        easing: 'ease-out'\n                    }\n                })\n            ])\n        ])\n    ],\n    selector: 'igx-snackbar',\n    templateUrl: 'snackbar.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxSnackbarComponent {\n\n    /**\n     * Sets/gets the `id` of the snackbar.\n     * If not set, the `id` of the first snackbar component  will be `\"igx-snackbar-0\"`;\n     * ```html\n     * <igx-snackbar id = \"Snackbar1\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let snackbarId = this.snackbar.id;\n     * ```\n     * @memberof IgxSnackbarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-snackbar-${NEXT_ID++}`;\n    /**\n     * Sets/gets the `message` attribute.\n     * ```html\n     * <igx-snackbar [message] = \"'Snackbar Component'\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let message =  this.snackbar.message;\n     * ```\n     */\n    @Input() public message: string;\n\n    /**\n     * Enables/Disables the visibility of the snackbar.\n     * If not set, the `isVisible` attribute will have value `false`.\n     * ```html\n     * <igx-snackbar [isVisible] = \"true\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let isVisible =  this.snackbar.isVisible;\n     * ```\n     */\n    @Input() public isVisible = false;\n\n    /**\n     * Sets/gets if the snackbar will be automatically hidden after the `displayTime` is over.\n     * Default value is `true`.\n     * ```html\n     * <igx-snackbar [autoHide] = \"false\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let autoHide =  this.snackbar.autoHide;\n     * ```\n     */\n    @Input() public autoHide = true;\n\n    /**\n     * Sets/gets the duration of time(in milliseconds) in which the snackbar will be visible after it is being shown.\n     * Default value is 4000.\n     * ```html\n     * <igx-snackbar [displayTime] = \"2000\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let displayTime = this.snackbar.displayTime;\n     * ```\n     */\n    @Input() public displayTime = 4000;\n\n    /**\n     * Sets/gets the `actionText` attribute.\n     * ```html\n     * <igx-snackbar [actionText] = \"'Action Text'\"></igx-snackbar>\n     * ```\n     */\n    @Input() public actionText?: string;\n\n    /**\n     * An event that will be emitted when the action is executed.\n     * Provides reference to the `IgxSnackbarComponent` as an argument.\n     * ```html\n     * <igx-snackbar (onAction) = \"onAction($event)\"></igx-snackbar>\n     * ```\n     */\n    @Output() public onAction = new EventEmitter<IgxSnackbarComponent>();\n\n    /**\n     * An event that will be emitted when the snackbar animation starts.\n     * Provides reference to the `AnimationEvent` interface as an argument.\n     * ```html\n     * <igx-snackbar (animationStarted) = \"animationStarted($event)\"></igx-snackbar>\n     * ```\n     */\n    @Output() public animationStarted = new EventEmitter<AnimationEvent>();\n\n    /**\n     * An event that will be emitted when the snackbar animation ends.\n     * Provides reference to the `AnimationEvent` interface as an argument.\n     * ```html\n     * <igx-snackbar (animationDone) = \"animationDone($event)\"></igx-snackbar>\n     * ```\n     */\n    @Output() public animationDone = new EventEmitter<AnimationEvent>();\n    /**\n     *@hidden\n     */\n    private timeoutId;\n\n    constructor(private zone: NgZone) { }\n\n    /**\n     * Shows the snackbar and hides it after the `displayTime` is over if `autoHide` is set to `true`.\n     * ```typescript\n     * this.snackbar.show();\n     * ```\n     */\n    public show(): void {\n        clearTimeout(this.timeoutId);\n        setTimeout(this.timeoutId);\n        this.isVisible = true;\n\n        if (this.autoHide) {\n            this.timeoutId = setTimeout(() => {\n                this.hide();\n            }, this.displayTime);\n        }\n    }\n\n    /**\n     * Hides the snackbar.\n     * ```typescript\n     * this.snackbar.hide();\n     * ```\n     */\n    public hide(): void {\n        this.isVisible = false;\n        clearTimeout(this.timeoutId);\n    }\n    /**\n     *@hidden\n     */\n    public triggerAction(): void {\n        this.onAction.emit(this);\n    }\n    /**\n     *@hidden\n     * @memberof IgxSnackbarComponent\n     */\n    public snackbarAnimationStarted(evt: AnimationEvent): void {\n        if (evt.fromState === 'void') {\n            this.animationStarted.emit(evt);\n        }\n    }\n    /**\n     *@hidden\n     * @memberof IgxSnackbarComponent\n     */\n    public snackbarAnimationDone(evt: AnimationEvent): void {\n        if (evt.fromState === 'show') {\n            this.animationDone.emit(evt);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSnackbarComponent],\n    exports: [IgxSnackbarComponent],\n    imports: [CommonModule]\n})\nexport class IgxSnackbarModule { }\n","import {\n    Component,\n    Directive,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Provider,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { CheckboxRequiredValidator, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { isIE, IBaseEventArgs } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport enum SwitchLabelPosition {\n    BEFORE = 'before',\n    AFTER = 'after'\n}\n\nexport interface IChangeSwitchEventArgs extends IBaseEventArgs {\n    checked: boolean;\n    switch: IgxSwitchComponent;\n}\n\nconst noop = () => { };\nlet nextId = 0;\n/**\n * **Ignite UI for Angular Switch** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/switch.html)\n *\n * The Ignite UI Switch lets the user toggle between on/off or true/false states.\n *\n * Example:\n * ```html\n * <igx-switch [checked]=\"true\">\n *   Simple switch\n * </igx-switch>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxSwitchComponent, multi: true }],\n    selector: 'igx-switch',\n    templateUrl: 'switch.component.html'\n})\nexport class IgxSwitchComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     *@hidden\n     */\n    protected _value: any;\n    /**\n     * Returns reference to the native checkbox element.\n     * ```typescript\n     * let checkboxElement =  this.switch.nativeCheckbox;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('checkbox', { static: true }) public nativeCheckbox: ElementRef;\n    /**\n     * Returns reference to the native label element.\n     * ```typescript\n     * let labelElement =  this.switch.nativeLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('label', { static: true }) public nativeLabel;\n    /**\n     * Returns reference to the label placeholder element.\n     * ```typescript\n     * let labelPlaceholder =  this.switch.placeholderLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('placeholderLabel', { static: true }) public placeholderLabel;\n\n    /**\n     * Sets/gets the `id` of the switch component.\n     * If not set, the `id` of the first switch component will be `\"igx-switch-0\"`.\n     * ```html\n     * <igx-switch id=\"my-first-switch\"></igx-switch>\n     * ```\n     * ```typescript\n     * let switchId =  this.switch.id;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-switch-${nextId++}`;\n    /**\n     * Sets/gets the id of the `label` element in the switch component.\n     * If not set, the label of the first switch component will have value `\"igx-switch-0-label\"`.\n     * ```html\n     * <igx-switch labelId=\"Label1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let labelId =  this.switch.labelId;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public labelId = `${this.id}-label`;\n    /**\n     * Sets/gets the `value` attribute of the switch component.\n     * ```html\n     * <igx-switch [value] = \"switchValue\"></igx-switch>\n     * ```\n     * ```typescript\n     * let value =  this.switch.value;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public value: any;\n    /**\n     * Sets/gets the `name` attribute of the switch component.\n     * ```html\n     * <igx-switch name = \"Switch1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let name =  this.switch.name;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public name: string;\n    /**\n     * Sets/gets the value of the `tabindex` attribute.\n     * ```html\n     * <igx-switch [tabindex]=\"1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let tabIndex =  this.switch.tabindex;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public tabindex: number = null;\n    /**\n     * Sets/gets the position of the `label` in the switch component.\n     * If not set, `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-switch labelPosition=\"before\"></igx-switch>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.switch.labelPosition;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public labelPosition: SwitchLabelPosition | string = 'after';\n    /**\n     * Enables/Disables the ripple effect\n     * If not set, `disableRipple` will have value `false`.\n     * ```html\n     * <igx-switch [disableRipple]=\"true\"></igx-switch>\n     * ```\n     * ```typescript\n     * let isRippleDisabled = this.switch.disableRipple;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public disableRipple = false;\n    /**\n     * Sets/gets whether switch is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-switch [required]=\"true\"></igx-switch>\n     * ```\n     * ```typescript\n     * let isRequired = this.switch.required;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public required = false;\n    /**\n     * Sets/gets the `aria-labelledBy` attribute.\n     * If not set, the  value of `aria-labelledBy` will be equal to the value of `labelId` attribute.\n     * ```html\n     * <igx-switch aria-labelledby = \"Label1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let ariaLabelledBy = this.switch.ariaLabelledBy;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input('aria-labelledby')\n    public ariaLabelledBy = this.labelId;\n    /**\n     * Sets/gets the value of the `aria-label` attribute.\n     * ```html\n     * <igx-switch aria-label=\"Label1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let ariaLabel =  this.switch.ariaLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input('aria-label')\n    public ariaLabel: string | null = null;\n    /**\n     * An event that is emitted after the switch state is changed.\n     * Provides references to the `IgxSwitchComponent` and the `checked` property as event arguments.\n     * @memberof IgxSwitchComponent\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeSwitchEventArgs> = new EventEmitter<IChangeSwitchEventArgs>();\n    /**\n     *@hidden\n     * @memberof IgxSwitchComponent\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     *@hidden\n     * @memberof IgxSwitchComponent\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     * Returns the class of the switch component.\n     * ```typescript\n     * let switchClass = this.switch.cssClass;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch')\n    public cssClass = 'igx-switch';\n    /**\n     * Sets/gets whether the switch is on or off.\n     * Default value is 'false'.\n     * ```html\n     *  <igx-switch [checked] = \"true\"></igx-switch>\n     * ```\n     * ```typescript\n     * let isChecked =  this.switch.checked;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch--checked')\n    @Input() public checked = false;\n    /**\n     * Sets/gets the `disabled` attribute.\n     * Default value is `false`.\n     * ```html\n     * <igx-switch [disabled] = \"true\"><igx-switch>\n     * ```\n     * ```typescript\n     * let isDisabled =  this.switch.disabled;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch--disabled')\n    @Input() public disabled = false;\n    /**\n     * Sets/gets whether the switch component is on focus.\n     * Default value is `false`.\n     * ```typescript\n     * this.switch.focused = true;\n     * ```\n     * ```typescript\n     * let isFocused =  this.switch.focused;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch--focused')\n    public focused = false;\n    /**\n     *@hidden\n     */\n    public inputId = `${this.id}-input`;\n    /**\n     * Toggles the checked state of the switch.\n     * ```typescript\n     * this.switch.toggle();\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    public toggle() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.checked = !this.checked;\n        this.focused = false;\n        this.change.emit({ checked: this.checked, switch: this });\n        this._onChangeCallback(this.checked);\n    }\n    /**\n     *@hidden\n     */\n    public _onSwitchChange(event) {\n        event.stopPropagation();\n    }\n    /**\n     *@hidden\n     */\n    public _onSwitchClick(event) {\n        event.stopPropagation();\n        this.toggle();\n\n        if (isIE()) {\n            this.nativeCheckbox.nativeElement.blur();\n        }\n    }\n    /**\n     *@hidden\n     */\n    public _onLabelClick(event) {\n        this.toggle();\n    }\n    /**\n     *@hidden\n     */\n    public onFocus(event) {\n        this.focused = true;\n    }\n    /**\n     *@hidden\n     */\n    public onBlur(event) {\n        this.focused = false;\n        this._onTouchedCallback();\n    }\n    /**\n     *@hidden\n     */\n    public writeValue(value) {\n        this._value = value;\n        this.checked = !!this._value;\n    }\n    /** @hidden */\n    getEditElement() {\n        return this.nativeCheckbox.nativeElement;\n    }\n\n    /**\n     *@hidden\n     */\n    public get labelClass(): string {\n        switch (this.labelPosition) {\n            case SwitchLabelPosition.BEFORE:\n                return `${this.cssClass}__label--before`;\n            case SwitchLabelPosition.AFTER:\n            default:\n                return `${this.cssClass}__label`;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n}\n\nexport const IGX_SWITCH_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => IgxSwitchRequiredDirective),\n    multi: true\n};\n\n/* tslint:disable directive-selector */\n@Directive({\n    selector: `igx-switch[required][formControlName],\n    igx-switch[required][formControl],\n    igx-switch[required][ngModel]`,\n    providers: [IGX_SWITCH_REQUIRED_VALIDATOR]\n})\nexport class IgxSwitchRequiredDirective extends CheckboxRequiredValidator { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSwitchComponent, IgxSwitchRequiredDirective],\n    exports: [IgxSwitchComponent, IgxSwitchRequiredDirective],\n    imports: [IgxRippleModule]\n})\nexport class IgxSwitchModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterContentInit,\n    AfterViewChecked,\n    AfterViewInit,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewChildren\n} from '@angular/core';\nimport { IgxBadgeModule } from '../badge/badge.component';\nimport { IgxIconModule } from '../icon/index';\nimport { IBaseEventArgs } from '../core/utils';\n\nexport interface ISelectTabEventArgs extends IBaseEventArgs {\n    tab: IgxTabComponent;\n    panel: IgxTabPanelComponent;\n}\n\nlet NEXT_ID = 0;\n\n@Directive({\n    selector: '[igxTab]'\n})\nexport class IgxTabTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n    }\n}\n/**\n * **Ignite UI for Angular Tab Bar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tabbar.html)\n *\n * The Ignite UI Tab Bar enables the user to navigate among a number of content panels displayed in a single view.\n *\n * Example:\n * ```html\n * <igx-bottom-nav>\n *   <igx-tab-panel label=\"Tab 1\">Tab 1 Content</igx-tab-panel>\n *   <igx-tab-panel label=\"Tab 2\">Tab 2 Content</igx-tab-panel>\n *   <igx-tab-panel label=\"Tab 3\">Tab 3 Content</igx-tab-panel>\n * </igx-bottom-nav>\n * ```\n */\n@Component({\n    selector: 'igx-bottom-nav',\n    templateUrl: 'tab-bar-content.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxBottomNavComponent implements AfterViewInit {\n\n    /**\n     * Gets the `IgxTabComponent` elements in the tab bar component created based on the provided panels.\n     * ```typescript\n     * let tabs: QueryList<IgxTabComponent> =  this.tabBar.viewTabs;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @ViewChildren(forwardRef(() => IgxTabComponent))\n    public viewTabs: QueryList<IgxTabComponent>;\n\n    /**\n     * Gets the `IgxTabComponent` elements in the tab bar component defined as content child.\n     * ```typescript\n     * let tabs: QueryList<IgxTabComponent> =  this.tabBar.contentTabs;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @ContentChildren(forwardRef(() => IgxTabComponent))\n    public contentTabs: QueryList<IgxTabComponent>;\n\n    /**\n     * Gets the `IgxTabComponent` elements for this bottom navigation component.\n     * First try to get them as content children if not available get them as view children.\n     * ```typescript\n     * let tabs: QueryList<IgxTabComponent> =  this.tabBar.tabs;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    public get tabs(): QueryList<IgxTabComponent> {\n        return this.hasContentTabs ? this.contentTabs : this.viewTabs;\n    }\n\n    /**\n     * Gets the `IgxTabPanelComponent` elements in the tab bar component.\n     * ```typescript\n     * let tabPanels: QueryList<IgxTabPanelComponent> = this.tabBar.panels;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @ContentChildren(forwardRef(() => IgxTabPanelComponent))\n    public panels: QueryList<IgxTabPanelComponent>;\n\n    /**\n     * Sets/gets the `id` of the tab bar.\n     * If not set, the `id` of the first tab bar component will be `\"igx-bottom-nav-0\"`.\n     * ```html\n     * <igx-bottom-nav id = \"my-first-tab-bar\"></igx-bottom-nav>\n     * ```\n     * ```typescript\n     * let tabBarId =  this.tabBar.id;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-bottom-nav-${NEXT_ID++}`;\n\n    /**\n     * Emits an event when a new tab is selected.\n     * Provides references to the `IgxTabComponent` and `IgxTabPanelComponent` as event arguments.\n     * ```html\n     * <igx-bottom-nav (onTableSelected) = \"onTabSelected($event)\"><igx-bottom-nav>\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @Output() public onTabSelected = new EventEmitter<ISelectTabEventArgs>();\n\n    /**\n     * Emits an event when a tab is deselected.\n     * Provides references to the `IgxTabComponent` and `IgxTabPanelComponent` as event arguments.\n     * ```html\n     * <igx-bottom-nav (onTabDeselected) = \"onTabDeselected($event)\"><igx-bottom-nav>\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @Output() public onTabDeselected = new EventEmitter<ISelectTabEventArgs>();\n\n    /**\n     * Gets the `index` of selected tab/panel in the respective collection.\n     * ```typescript\n     * let index =  this.tabBar.selectedIndex;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    public selectedIndex = -1;\n\n    /**\n     * Gets the `itemStyle` of the tab bar.\n     * ```typescript\n     * let itemStyle =  this.tabBar.itemStyle;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    public get itemStyle(): string {\n        return this._itemStyle;\n    }\n\n    /**\n     *@hidden\n     */\n    public get hasContentTabs(): boolean {\n        return (this.contentTabs && this.contentTabs.length > 0);\n    }\n\n    /**\n     *@hidden\n     */\n    private _itemStyle = 'igx-bottom-nav';\n\n    /**\n     * Gets the selected tab in the tab bar.\n     * ```typescript\n     * let tab =  this.tabBar.selectedTab;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    get selectedTab(): IgxTabComponent {\n        if (this.tabs && this.selectedIndex !== undefined) {\n            return this.tabs.toArray()[this.selectedIndex];\n        }\n    }\n\n    constructor(private _element: ElementRef) {\n    }\n\n    /**\n     *@hidden\n     */\n    public ngAfterViewInit() {\n        // initial selection\n        setTimeout(() => {\n            if (this.selectedIndex === -1) {\n                const selectablePanels = this.panels.filter((p) => !p.disabled);\n                const panel = selectablePanels[0];\n                if (panel) {\n                    panel.select();\n                }\n            }\n        }, 0);\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('onTabSelected', ['$event'])\n    public _selectedPanelHandler(args) {\n        if (this.hasContentTabs) {\n            this.selectedIndex = args.tab.index;\n            this.contentTabs.forEach((t) => {\n                if (t !== args.tab) {\n                    this._deselectTab(t);\n                }\n            });\n        } else {\n            if (args.panel) {\n                this.selectedIndex = args.panel.index;\n                this.panels.forEach((p) => {\n                    if (p.index !== this.selectedIndex) {\n                        this._deselectPanel(p);\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _deselectPanel(panel: IgxTabPanelComponent) {\n        // Cannot deselect the selected tab - this will mean that there will be not selected tab left\n        if (panel.disabled || this.selectedTab.index === panel.index) {\n            return;\n        }\n\n        panel.isSelected = false;\n        this.onTabDeselected.emit({ tab: this.tabs[panel.index], panel });\n    }\n\n    private _deselectTab(aTab: IgxTabComponent) {\n        aTab.isSelected = false;\n        this.onTabDeselected.emit({ tab: aTab, panel: null });\n    }\n}\n\n// ================================= IgxTabPanelComponent ======================================\n\n@Component({\n    selector: 'igx-tab-panel',\n    templateUrl: 'tab-panel.component.html'\n})\nexport class IgxTabPanelComponent implements AfterContentInit, AfterViewChecked {\n\n    /**\n     *@hidden\n     */\n    private _itemStyle = 'igx-tab-panel';\n\n    /**\n     *@hidden\n     */\n    private _isSelected = false;\n\n    /**\n     * Sets/gets the `label` of the tab panel.\n     * ```html\n     * <igx-tab-panel [label] = \"'Tab panel label'\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let tabPanelLabel = this.tabPanel.label;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @Input() public label: string;\n\n    /**\n     * Sets/gets  the `icon` of the tab panel.\n     * ```html\n     * <igx-tab-panel [icon] = \"panel_icon\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let tabPanelIcon =  this.tabPanel.icon;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @Input() public icon: string;\n\n    /**\n     * Sets/gets whether the tab panel is disabled.\n     * ```html\n     * <igx-tab-panel [disabled] = \"true\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let isDisabled = this.tabPanel.disabled;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @Input() public disabled: boolean;\n\n    /**\n     * Gets the role of the tab panel.\n     * ```typescript\n     * let tabPanelRole = this.tabPanel.role;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @HostBinding('attr.role') public role = 'tabpanel';\n\n    /**\n     * Gets whether a tab panel will have `igx-bottom-nav__panel` class.\n     * ```typescript\n     * let styleClass = this.tabPanel.styleClass;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @HostBinding('class.igx-bottom-nav__panel')\n    get styleClass(): boolean {\n        return (!this.isSelected);\n    }\n\n    /**\n     * Sets/gets whether a tab panel is selected.\n     * ```typescript\n     * this.tabPanel.isSelected = true;\n     * ```\n     * ```typescript\n     * let isSelected =  this.tabPanel.isSelected;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @HostBinding('class.igx-bottom-nav__panel--selected')\n    public get isSelected(): boolean {\n        return this._isSelected;\n    }\n    public set isSelected(newValue: boolean) {\n        if (this._isSelected !== newValue) {\n            if (newValue) {\n                this.select();\n            } else {\n                this._isSelected = newValue;\n            }\n        }\n    }\n\n    /**\n     * Gets the `itemStyle` of the tab panel.\n     * ```typescript\n     * let itemStyle = this.tabPanel.itemStyle;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    public get itemStyle(): string {\n        return this._itemStyle;\n    }\n\n    /**\n     * Gets the tab associated with the panel.\n     * ```typescript\n     * let tab = this.tabPanel.relatedTab;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    get relatedTab(): IgxTabComponent {\n        if (this._tabBar.tabs) {\n            return this._tabBar.tabs.toArray()[this.index];\n        }\n    }\n\n    /**\n     * Gets the changes and updates accordingly applied to the tab/panel.\n     *\n     * @memberof IgxTabComponent\n     */\n    get changesCount(): number {\n        return this.relatedTab ? this.relatedTab.changesCount : 0;\n    }\n\n    /**\n     * Gets the index of a panel in the panels collection.\n     * ```typescript\n     * let panelIndex =  this.tabPanel.index\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    get index() {\n        if (this._tabBar.panels) {\n            return this._tabBar.panels.toArray().indexOf(this);\n        }\n    }\n\n    /**\n     * Gets the tab template.\n     * ```typescript\n     * let tabTemplate = this.tabPanel.customTabTemplate\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    get customTabTemplate(): TemplateRef<any> {\n        return this._tabTemplate;\n    }\n\n    /**\n     * Sets the tab template.\n     * ```typescript\n     * this.tabPanel.customTabTemplate(tabTemplate);\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    set customTabTemplate(template: TemplateRef<any>) {\n        this._tabTemplate = template;\n    }\n\n    /**\n     *@hidden\n     */\n    private _tabTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxTabTemplateDirective, { read: IgxTabTemplateDirective, static: false })\n    protected tabTemplate: IgxTabTemplateDirective;\n\n    constructor(private _tabBar: IgxBottomNavComponent, private _element: ElementRef) {\n    }\n\n    /**\n     *@hidden\n     */\n    public ngAfterContentInit(): void {\n        if (this.tabTemplate) {\n            this._tabTemplate = this.tabTemplate.template;\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngAfterViewChecked() {\n        this._element.nativeElement.setAttribute('aria-labelledby', `igx-tab-${this.index}`);\n        this._element.nativeElement.setAttribute('id', `igx-bottom-nav__panel-${this.index}`);\n    }\n\n    /**\n     * Selects the current tab and the tab panel.\n     * ```typescript\n     * this.tabPanel.select();\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    public select() {\n        if (this.disabled || this._tabBar.selectedIndex === this.index) {\n            return;\n        }\n\n        this._isSelected = true;\n        this._tabBar.onTabSelected.emit({ tab: this._tabBar.tabs.toArray()[this.index], panel: this });\n    }\n}\n\n// ======================================= IgxTabComponent ==========================================\n\n@Component({\n    selector: 'igx-tab',\n    templateUrl: 'tab.component.html'\n})\nexport class IgxTabComponent {\n    /**\n     * Gets the `role` attribute.\n     * ```typescript\n     * let tabRole = this.tab.role;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @HostBinding('attr.role')\n    public role = 'tab';\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.id')\n    public id = 'igx-tab-' + this.index;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel = this.label;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-disabled')\n    public ariaDisabled = this.disabled;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-selected')\n    public ariaSelected = this.isSelected;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-controls')\n    public ariaControls = 'igx-tab-panel-' + this.index;\n\n    /**\n     * Gets the panel associated with the tab.\n     * ```typescript\n     * let tabPanel =  this.tab.relatedPanel;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input()\n    public relatedPanel: IgxTabPanelComponent;\n\n    /**\n     *@hidden\n     */\n    private _label: string;\n\n    /**\n     * Sets/gets the `label` of the tab panel.\n     * ```html\n     * <igx-tab [label] = \"'Tab label'\"><igx-tab>\n     * ```\n     * ```typescript\n     * let tabLabel = this.tab.label;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input()\n    public get label(): string {\n        return this.relatedPanel ? this.relatedPanel.label : this._label;\n    }\n    public set label(newValue: string) {\n        if (this.relatedPanel) {\n            this.relatedPanel.label = newValue;\n        }\n        this._label = newValue;\n    }\n\n    /**\n     *@hidden\n     */\n    private _icon: string;\n\n    /**\n     * Sets/gets  the `icon` of the tab panel.\n     * ```html\n     * <igx-tab [icon] = \"tab_icon\"><igx-tab>\n     * ```\n     * ```typescript\n     * let tabIcon =  this.tab.icon;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input()\n    public get icon(): string {\n        return this.relatedPanel ? this.relatedPanel.icon : this._icon;\n    }\n    public set icon(newValue: string) {\n        if (this.relatedPanel) {\n            this.relatedPanel.icon = newValue;\n        }\n        this._icon = newValue;\n    }\n\n    /**\n     *@hidden\n     */\n    private _changesCount = 0; // changes and updates accordingly applied to the tab.\n\n    /**\n     * Gets the changes and updates accordingly applied to the tab.\n     *\n     * @memberof IgxTabComponent\n     */\n    get changesCount(): number {\n        return this._changesCount;\n    }\n\n    private _disabled = false;\n\n    /**\n     * Gets whether the tab is disabled.\n     * ```typescript\n     * let isDisabled = this.tab.disabled;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input()\n    get disabled(): boolean {\n        return this.relatedPanel ? this.relatedPanel.disabled : this._disabled;\n    }\n    set disabled(newValue: boolean) {\n        if (this.relatedPanel) {\n            this.relatedPanel.disabled = newValue;\n        } else {\n            this._disabled = newValue;\n        }\n    }\n\n    public _selected = false;\n\n    /**\n     * Gets whether the tab is selected.\n     * ```typescript\n     * let isSelected  = this.tab.isSelected;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input()\n    set isSelected(newValue: boolean) {\n        if (this.relatedPanel) {\n            this.relatedPanel.isSelected = newValue;\n        } else if (this._selected !== newValue) {\n            this._selected = newValue;\n            if (this._selected) {\n                this._tabBar.onTabSelected.emit({ tab: this, panel: null });\n            }\n        }\n    }\n    get isSelected(): boolean {\n        return this.relatedPanel ? this.relatedPanel.isSelected : this._selected;\n    }\n\n    @HostBinding('class.igx-bottom-nav__menu-item--selected')\n    public get cssClassSelected(): boolean {\n        return this.isSelected;\n    }\n\n    @HostBinding('class.igx-bottom-nav__menu-item--disabled')\n    public get cssClassDisabled(): boolean {\n        return this.disabled;\n    }\n\n    @HostBinding('class.igx-bottom-nav__menu-item')\n    public get cssClass(): boolean {\n        return (!this.disabled && !this.isSelected);\n    }\n\n    /**\n     * Gets the `index` of the tab.\n     * ```typescript\n     * let tabIndex = this.tab.index;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    public get index(): number {\n        if (this._tabBar.tabs) {\n            return this._tabBar.tabs.toArray().indexOf(this);\n        }\n    }\n\n    /**@hidden*/\n    @ViewChild('defaultTabTemplate', { read: TemplateRef, static: true })\n    protected defaultTabTemplate: TemplateRef<any>;\n\n    /**@hidden*/\n    @ContentChild(IgxTabTemplateDirective, { read: IgxTabTemplateDirective, static: false })\n    protected customTabTemplateDir: IgxTabTemplateDirective;\n\n    /**\n     * Returns the `template` for this IgxTabComponent.\n     * ```typescript\n     * let tabItemTemplate = this.tabItem.template;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    public get template(): TemplateRef<any> {\n        if (this.relatedPanel && this.relatedPanel.customTabTemplate) {\n            return this.relatedPanel.customTabTemplate;\n        }\n        if (this.customTabTemplateDir) {\n            return this.customTabTemplateDir.template;\n        }\n        return this.defaultTabTemplate;\n    }\n\n    /**\n     * Returns the `context` object for the template of this `IgxTabComponent`.\n     * ```typescript\n     * let tabItemContext = this.tabItem.context;\n     * ```\n     */\n    public get context(): any {\n        return this.relatedPanel ? this.relatedPanel : this;\n    }\n\n    constructor(private _tabBar: IgxBottomNavComponent, private _element: ElementRef) {\n    }\n\n    /**\n     * Selects the current tab and the associated panel.\n     * ```typescript\n     * this.tab.select();\n     * ```\n     * @memberof IgxTabComponent\n     */\n    public select() {\n        if (this.relatedPanel) {\n            this.relatedPanel.select();\n        } else {\n            this._selected = true;\n            this._tabBar.onTabSelected.emit({ tab: this, panel: null });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click')\n    public onClick() {\n        this.select();\n    }\n\n    public elementRef(): ElementRef {\n        return this._element;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxBottomNavComponent, IgxTabPanelComponent, IgxTabComponent, IgxTabTemplateDirective],\n    exports: [IgxBottomNavComponent, IgxTabPanelComponent, IgxTabComponent, IgxTabTemplateDirective],\n    imports: [CommonModule, IgxBadgeModule, IgxIconModule]\n})\nexport class IgxBottomNavModule {\n}\n","import { ElementRef, QueryList, EventEmitter } from '@angular/core';\n\n/** @hidden */\nexport abstract class IgxTabsBase {\n    selectedIndicator: ElementRef<any>;\n    tabs: QueryList<IgxTabItemBase>;\n    groups: QueryList<IgxTabsGroupBase>;\n    offset: number;\n    selectedIndex: number;\n    viewPort: ElementRef;\n    contentsContainer: ElementRef;\n    tabsContainer: ElementRef;\n    itemsContainer: ElementRef;\n    headerContainer: ElementRef;\n    onTabItemSelected: EventEmitter<{}>; // TODO: Define event arg interface!\n    hasContentTabs: boolean;\n    scrollElement(element: any, scrollRight: boolean) {}\n    performSelectionChange(newTab: IgxTabItemBase) {}\n    transformContentAnimation(tab: IgxTabItemBase, duration: number) {}\n    transformIndicatorAnimation(element: HTMLElement, duration?: number) {}\n}\n\n/** @hidden */\nexport abstract class IgxTabItemBase {\n    nativeTabItem: ElementRef;\n    get index(): number { return 0; }\n    select(): void {}\n    setSelectedInternal(newValue: boolean) {}\n}\n\n/** @hidden */\nexport abstract class IgxTabsGroupBase {\n    select(): void {}\n    setSelectedInternal(newValue: boolean) {}\n}\n","import {\n    Directive,\n    HostBinding,\n    TemplateRef\n} from '@angular/core';\nimport { IgxTabsBase } from './tabs.common';\n\nenum ButtonStyle {\n    VISIBLE = 'visible',\n    HIDDEN = 'hidden',\n    NOT_DISPLAYED = 'not_displayed'\n}\n\n@Directive({\n    selector: '[igxRightButtonStyle]'\n})\n\nexport class IgxRightButtonStyleDirective {\n    constructor(public tabs: IgxTabsBase) {\n    }\n\n    @HostBinding('class.igx-tabs__header-button')\n    get visibleCSS(): boolean {\n        return (this.getRightButtonStyle() === ButtonStyle.VISIBLE) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--hidden')\n    get hiddenCSS(): boolean {\n        return (this.getRightButtonStyle() === ButtonStyle.HIDDEN) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--none')\n    get notDisplayedCSS(): boolean {\n        return (this.getRightButtonStyle() === ButtonStyle.NOT_DISPLAYED) ? true : false;\n    }\n\n    private getRightButtonStyle(): string {\n        const viewPortWidth = this.tabs.viewPort.nativeElement.offsetWidth;\n\n        // We use this hacky way to get the width of the itemsContainer,\n        // because there is inconsistency in IE we cannot use offsetWidth or scrollOffset.\n        const itemsContainerChildrenCount = this.tabs.itemsContainer.nativeElement.children.length;\n        let itemsContainerWidth = 0;\n        if (itemsContainerChildrenCount > 1) {\n            const lastTab = this.tabs.itemsContainer.nativeElement.children[itemsContainerChildrenCount - 2];\n            itemsContainerWidth = lastTab.offsetLeft + lastTab.offsetWidth;\n        }\n        const headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;\n        const offset = this.tabs.offset;\n        const total = offset + viewPortWidth;\n\n        // Fix for IE 11, a difference is accumulated from the widths calculations.\n        if (itemsContainerWidth - headerContainerWidth <= 1 && offset === 0) {\n            return ButtonStyle.NOT_DISPLAYED;\n        }\n\n        if (itemsContainerWidth > total) {\n            return ButtonStyle.VISIBLE;\n        } else {\n            return ButtonStyle.HIDDEN;\n        }\n    }\n}\n\n@Directive({\n    selector: '[igxLeftButtonStyle]'\n})\n\nexport class IgxLeftButtonStyleDirective {\n    constructor(public tabs: IgxTabsBase) {\n    }\n\n    @HostBinding('class.igx-tabs__header-button')\n    get visibleCSS(): boolean {\n        return (this.getLeftButtonStyle() === ButtonStyle.VISIBLE) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--hidden')\n    get hiddenCSS(): boolean {\n        return (this.getLeftButtonStyle() === ButtonStyle.HIDDEN) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--none')\n    get notDisplayedCSS(): boolean {\n        return (this.getLeftButtonStyle() === ButtonStyle.NOT_DISPLAYED) ? true : false;\n    }\n\n    private getLeftButtonStyle(): string {\n        // We use this hacky way to get the width of the itemsContainer,\n        // because there is inconsistency in IE we cannot use offsetWidth or scrollOffset.\n        const itemsContainerChildrenCount = this.tabs.itemsContainer.nativeElement.children.length;\n        let itemsContainerWidth = 0;\n        if (itemsContainerChildrenCount > 1) {\n            const lastTab = this.tabs.itemsContainer.nativeElement.children[itemsContainerChildrenCount - 2];\n            itemsContainerWidth = lastTab.offsetLeft + lastTab.offsetWidth;\n        }\n        const headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;\n        const offset = this.tabs.offset;\n        if (offset === 0) {\n            // Fix for IE 11, a difference is accumulated from the widths calculations.\n            if (itemsContainerWidth - headerContainerWidth <= 1) {\n                return ButtonStyle.NOT_DISPLAYED;\n            }\n            return ButtonStyle.HIDDEN;\n        } else {\n            return ButtonStyle.VISIBLE;\n        }\n    }\n}\n\n@Directive({\n    selector: '[igxTab]'\n})\nexport class IgxTabItemTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n    }\n}\n","import {\n    AfterContentInit,\n    AfterViewChecked,\n    Component,\n    ContentChild,\n    ElementRef,\n    HostBinding,\n    Input,\n    TemplateRef,\n    HostListener\n} from '@angular/core';\n\nimport { IgxTabItemComponent } from './tab-item.component';\nimport { IgxTabItemTemplateDirective } from './tabs.directives';\nimport { IgxTabsBase, IgxTabsGroupBase } from './tabs.common';\n\n@Component({\n    selector: 'igx-tabs-group',\n    templateUrl: 'tabs-group.component.html'\n})\n\nexport class IgxTabsGroupComponent extends IgxTabsGroupBase implements AfterContentInit, AfterViewChecked {\n\n    /**\n    * An @Input property that allows you to enable/disable the `IgxTabGroupComponent`.\n    *```html\n    *<igx-tabs-group label=\"Tab 2  Lorem ipsum dolor sit\" icon=\"home\" [disabled]=\"true\">\n    *```\n    */\n    @Input()\n    public disabled = false;\n\n    /**\n    * An @Input property that sets the value of the `icon`.\n    * The value should be valid icon name from {@link https://material.io/tools/icons/?style=baseline}.\n    *```html\n    *<igx-tabs-group label=\"Tab 1\" icon=\"home\">\n    *```\n    */\n    @Input()\n    public icon: string;\n\n    /**\n    * An @Input property that sets the value of the `label`.\n    *```html\n    *<igx-tabs-group label=\"Tab 1\" icon=\"folder\">\n    *```\n    */\n    @Input()\n    public label: string;\n\n    /**\n     * Sets/gets whether a tab group is selected.\n     * ```typescript\n     * this.tabGroup.isSelected = true;\n     * ```\n     * ```typescript\n     * let isSelected = this.tabGroup.isSelected;\n     * ```\n     * @memberof IgxTabsGroupComponent\n     */\n    public get isSelected(): boolean {\n        return this._isSelected;\n    }\n    public set isSelected(newValue: boolean) {\n        if (!this.disabled && this.isSelected !== newValue) {\n            this._tabs.performSelectionChange(newValue ? this.relatedTab : null);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxTabItemTemplateDirective, { read: IgxTabItemTemplateDirective, static: false })\n    protected tabTemplate: IgxTabItemTemplateDirective;\n\n    private _tabTemplate: TemplateRef<any>;\n    private _isSelected = false;\n\n    constructor(private _tabs: IgxTabsBase, private _element: ElementRef) {\n        super();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'tabpanel';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-tabs__group')\n    public styleClass = true;\n\n    /**\n     * An accessor that returns the `IgxTabItemComponent` component.\n     * ```typescript\n     * @ViewChild(\"MyTabsGroup\")\n     * public tab: IgxTabsGroupComponent;\n     * ngAfterViewInIt(){\n     *    let tabComponent = this.tab.relatedTab;\n     * }\n     * ```\n     */\n    get relatedTab(): IgxTabItemComponent {\n        if (this._tabs.tabs) {\n            return this._tabs.tabs.toArray()[this.index] as IgxTabItemComponent;\n        }\n    }\n\n    /**\n     * An accessor that returns the value of the index of the `IgxTabsGroupComponent`.\n     * ```typescript\n     * @ViewChild(\"MyTabsGroup\")\n     * public tab: IgxTabsGroupComponent;\n     * ngAfterViewInIt(){\n     *    let tabIndex = this.tab.index;\n     * }\n     * ```\n     */\n    get index(): number {\n        if (this._tabs.groups) {\n            return this._tabs.groups.toArray().indexOf(this);\n        }\n        return -1;\n    }\n\n    /**\n     * @hidden\n     */\n    get customTabTemplate(): TemplateRef<any> {\n        return this._tabTemplate;\n    }\n\n    /**\n     *@hidden\n     */\n    set customTabTemplate(template: TemplateRef<any>) {\n        this._tabTemplate = template;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit(): void {\n        if (this.tabTemplate) {\n            this._tabTemplate = this.tabTemplate.template;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewChecked() {\n        this._element.nativeElement.setAttribute('aria-labelledby', `igx-tab-item-${this.index}`);\n        this._element.nativeElement.setAttribute('id', `igx-tabs__group-${this.index}`);\n    }\n\n    /**\n     * A method that sets the focus on a tab.\n     * @memberof {@link IgxTabsGroupComponent}\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public tab : IgxTabsGroupComponent;\n     *ngAfterViewInit(){\n     *    this.tab.select();\n     *}\n     *```\n     */\n    public select(): void {\n        if (!this.disabled && !this.isSelected) {\n            this._tabs.performSelectionChange(this.relatedTab);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public setSelectedInternal(newValue: boolean) {\n        this._isSelected = newValue;\n    }\n\n}\n","import {\n    Component,\n    ContentChild,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    TemplateRef,\n    ViewChild,\n    NgZone,\n    AfterViewInit,\n    OnDestroy\n} from '@angular/core';\n\nimport { IgxTabsGroupComponent } from './tabs-group.component';\nimport { IgxTabItemBase, IgxTabsBase } from './tabs.common';\nimport { IgxTabItemTemplateDirective } from './tabs.directives';\nimport ResizeObserver from 'resize-observer-polyfill';\n\n@Component({\n    selector: 'igx-tab-item',\n    templateUrl: 'tab-item.component.html'\n})\n\nexport class IgxTabItemComponent extends IgxTabItemBase implements AfterViewInit, OnDestroy {\n    /**\n    * Gets the group associated with the tab.\n    * ```html\n    * const relatedGroup = this.tabbar.tabs.toArray()[1].relatedGroup;\n    * ```\n    */\n    @Input()\n    public relatedGroup: IgxTabsGroupComponent;\n\n    /**@hidden*/\n    private _icon: string;\n\n    /**\n    * An @Input property that sets the value of the `icon`.\n    * The value should be valid icon name from {@link https://material.io/tools/icons/?style=baseline}.\n    *```html\n    *<igx-tab-item label=\"Tab 1\" icon=\"home\">\n    *```\n    */\n    @Input()\n    public get icon(): string {\n        return this.relatedGroup ? this.relatedGroup.icon : this._icon;\n    }\n    public set icon(newValue: string) {\n        if (this.relatedGroup) {\n            this.relatedGroup.icon = newValue;\n        }\n        this._icon = newValue;\n    }\n\n    /**@hidden*/\n    private _label: string;\n\n    /**\n    * An @Input property that sets the value of the `label`.\n    *```html\n    *<igx-tabs-item label=\"Tab 2\" icon=\"folder\">\n    *```\n    */\n    @Input()\n    public get label(): string {\n        return this.relatedGroup ? this.relatedGroup.label : this._label;\n    }\n    public set label(newValue: string) {\n        if (this.relatedGroup) {\n            this.relatedGroup.label = newValue;\n        }\n        this._label = newValue;\n    }\n\n    /**@hidden*/\n    @ViewChild('defaultTabTemplate', { read: TemplateRef, static: true })\n    protected defaultTabTemplate: TemplateRef<any>;\n\n    /**@hidden*/\n    @ContentChild(IgxTabItemTemplateDirective, { read: IgxTabItemTemplateDirective, static: false })\n    protected customTabTemplateDir: IgxTabItemTemplateDirective;\n\n    private _nativeTabItem: ElementRef;\n    private _changesCount = 0; // changes and updates accordingly applied to the tab.\n    private _isSelected = false;\n    private _disabled = false;\n    private _resizeObserver: ResizeObserver;\n\n    constructor(private _tabs: IgxTabsBase, private _element: ElementRef, private _ngZone: NgZone) {\n        super();\n        this._nativeTabItem = _element;\n    }\n\n    @HostBinding('class.igx-tabs__header-menu-item--selected')\n    public get provideCssClassSelected(): boolean {\n        return this.isSelected;\n    }\n\n    @HostBinding('class.igx-tabs__header-menu-item--disabled')\n    public get provideCssClassDisabled(): boolean {\n        return this.disabled;\n    }\n\n    @HostBinding('class.igx-tabs__header-menu-item')\n    public get provideCssClass(): boolean {\n        return (!this.disabled && !this.isSelected);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.role')\n    public role = 'tab';\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.id')\n    public id = 'igx-tab-item-' + this.index;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel = this.label;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-disabled')\n    public ariaDisabled = this.disabled;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-selected')\n    public ariaSelected = this.isSelected;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-controls')\n    public ariaControls = 'igx-tab-item-group-' + this.index;\n\n    ngAfterViewInit(): void {\n        this._ngZone.runOutsideAngular(() => {\n            this._resizeObserver = new ResizeObserver(() => {\n                this._tabs.transformIndicatorAnimation(this._nativeTabItem.nativeElement, 0);\n            });\n        });\n    }\n\n    ngOnDestroy(): void {\n        this._ngZone.runOutsideAngular(() => {\n            this._resizeObserver.disconnect();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        this.select();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        this.onKeyDown(false);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        this.onKeyDown(true);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        event.preventDefault();\n        this.onKeyDown(false, 0);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        event.preventDefault();\n        this.onKeyDown(false, this._tabs.tabs.toArray().length - 1);\n    }\n\n    /**\n     * @hidden\n     */\n    get changesCount(): number {\n        return this._changesCount;\n    }\n\n    /**\n     * @hidden\n     */\n    get nativeTabItem(): ElementRef {\n        return this._nativeTabItem;\n    }\n\n    /**\n    * \tGets whether the tab is disabled.\n    * ```\n    * const disabledItem = this.myTabComponent.tabs.first.disabled;\n    * ```\n    */\n    @Input()\n    get disabled(): boolean {\n        return this.relatedGroup ? this.relatedGroup.disabled : this._disabled;\n    }\n    set disabled(newValue: boolean) {\n        if (this.relatedGroup) {\n            this.relatedGroup.disabled = newValue;\n        } else {\n            this._disabled = newValue;\n        }\n    }\n\n    /**\n     * Gets whether the tab is selected.\n     * ```typescript\n     * const selectedItem = this.myTabComponent.tabs.first.isSelected;\n     * ```\n     */\n    @Input()\n    get isSelected(): boolean {\n        return this.relatedGroup ? this.relatedGroup.isSelected : this._isSelected;\n    }\n    set isSelected(newValue: boolean) {\n        if (!this.disabled && this.isSelected !== newValue) {\n            this._tabs.performSelectionChange(newValue ? this : null);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public select(): void {\n        if (!this.disabled && !this.isSelected) {\n            this._tabs.performSelectionChange(this);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get index(): number {\n        if (this._tabs.tabs) {\n            return this._tabs.tabs.toArray().indexOf(this);\n        }\n        return -1;\n    }\n\n    /**\n     * @hidden\n     */\n    public setSelectedInternal(newValue: boolean) {\n        this._isSelected = newValue;\n        this._ngZone.runOutsideAngular(() => {\n            if (this._resizeObserver) {\n                if (this._isSelected) {\n                    this._resizeObserver.observe(this._element.nativeElement);\n                } else {\n                    this._resizeObserver.disconnect();\n                }\n            }\n        });\n        this.tabindex = newValue ? 0 : -1;\n    }\n\n    private onKeyDown(isLeftArrow: boolean, index = null): void {\n        const tabsArray = this._tabs.tabs.toArray();\n        if (index === null) {\n            index = (isLeftArrow)\n                ? (this._tabs.selectedIndex === 0) ? tabsArray.length - 1 : this._tabs.selectedIndex - 1\n                : (this._tabs.selectedIndex === tabsArray.length - 1) ? 0 : this._tabs.selectedIndex + 1;\n        }\n        const tab = tabsArray[index];\n        tab.select();\n    }\n\n    /**\n     * @hidden\n     */\n    public get template(): TemplateRef<any> {\n        if (this.relatedGroup && this.relatedGroup.customTabTemplate) {\n            return this.relatedGroup.customTabTemplate;\n        }\n        if (this.customTabTemplateDir) {\n            return this.customTabTemplateDir.template;\n        }\n        return this.defaultTabTemplate;\n    }\n\n    /**\n     * @hidden\n     */\n    public get context(): any {\n        return this.relatedGroup ? this.relatedGroup : this;\n    }\n\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewChildren,\n    OnDestroy,\n    NgZone\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { IgxBadgeModule } from '../badge/badge.component';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxTabItemComponent } from './tab-item.component';\nimport { IgxTabsGroupComponent } from './tabs-group.component';\nimport { IgxLeftButtonStyleDirective, IgxRightButtonStyleDirective, IgxTabItemTemplateDirective } from './tabs.directives';\nimport { IgxTabsBase, IgxTabItemBase } from './tabs.common';\nimport ResizeObserver from 'resize-observer-polyfill';\n\nexport enum TabsType {\n    FIXED = 'fixed',\n    CONTENTFIT = 'contentfit'\n}\n\n@Component({\n    selector: 'igx-tabs',\n    templateUrl: 'tabs.component.html',\n    providers: [{ provide: IgxTabsBase, useExisting: IgxTabsComponent }]\n})\n\nexport class IgxTabsComponent implements IgxTabsBase, AfterViewInit, OnDestroy {\n    /**\n    * Provides an observable collection of all `IgxTabsGroupComponent`s.\n    * ```typescript\n    * const groupItems = this.myTabComponent.groups;\n    * ```\n    */\n    @ContentChildren(forwardRef(() => IgxTabsGroupComponent))\n    public groups: QueryList<IgxTabsGroupComponent>;\n\n    /**\n    * Provides an observable collection of all `IgxTabItemComponent`s defined in the page.\n    * ```typescript\n    * const tabItems = this.myTabComponent.contentTabs;\n    * ```\n    */\n    @ContentChildren(forwardRef(() => IgxTabItemComponent))\n    public contentTabs: QueryList<IgxTabItemComponent>;\n\n    /**\n    * An @Input property that sets the value of the `selectedIndex`.\n    * Default value is 0.\n    * ```html\n    * <igx-tabs selectedIndex=\"1\">\n    * ```\n    *\n    * Two-way data binding.\n    * ```html\n    * <igx-tabs [(selectedIndex)]=\"model.selectedIndex\">\n    * ```\n    */\n    @Input()\n    public get selectedIndex(): number {\n        return this._selectedIndex;\n    }\n\n    public set selectedIndex(index: number) {\n        const newIndex = typeof index !== 'number' ? parseInt(index, 10) : index;\n        if (this._selectedIndex !== newIndex) {\n            if (this.tabs && this.tabs.length > 0) {\n                const newTab = this.tabs.toArray()[newIndex];\n                if (newTab) {\n                   this.performSelectionChange(newTab);\n                }\n            } else {\n                this._selectedIndex = newIndex;\n            }\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public selectedIndexChange = new EventEmitter<number>();\n\n    /**\n     * Defines the tab header sizing mode. You can choose between `contentfit` or `fixed`.\n     * By default the header sizing mode is `contentfit`.\n     * ```html\n     * <igx-tabs tabsType=\"fixed\">\n     *     <igx-tabs-group label=\"HOME\">Home</igx-tabs-group>\n     * </igx-tabs>\n     * ```\n     */\n    @Input('tabsType')\n    public tabsType: string | TabsType = 'contentfit';\n\n    /**\n    * @hidden\n    */\n    @Input()\n    public class = '';\n\n    /**\n     * Emitted when a tab item is deselected.\n     * ```html\n     * <igx-tabs (onTabItemDeselected)=\"itemDeselected($event)\">\n     *      <igx-tabs-group label=\"Tab 1\">This is Tab 1 content.</igx-tabs-group>\n     *      <igx-tabs-group label=\"Tab 2\">This is Tab 2 content.</igx-tabs-group>\n     * </igx-tabs>\n     * ```\n     * ```typescript\n     * itemDeselected(e){\n     *      const tabGroup = e.group;\n     *      const tabItem = e.tab;\n     * }\n     * ```\n     */\n    @Output()\n    public onTabItemDeselected = new EventEmitter();\n\n    /**\n    * Emitted when a tab item is selected.\n    * ```html\n    * <igx-tabs (onTabItemSelected)=\"itemSelected($event)\">\n    *      <igx-tabs-group label=\"Tab 1\">This is Tab 1 content.</igx-tabs-group>\n    *      <igx-tabs-group label=\"Tab 2\">This is Tab 2 content.</igx-tabs-group>\n    * </igx-tabs>\n    * ```\n    * ```typescript\n    * itemSelected(e){\n    *      const tabGroup = e.group;\n    *      const tabItem = e.tab;\n    * }\n    * ```\n    */\n    @Output()\n    public onTabItemSelected = new EventEmitter();\n\n    /**\n     * @hidden\n     */\n    @ViewChild('contentsContainer', { static: true })\n    public contentsContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerContainer', { static: true })\n    public headerContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('itemsContainer', { static: true })\n    public itemsContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('selectedIndicator', { static: false })\n    public selectedIndicator: ElementRef;\n\n    /**\n    * @hidden\n    */\n    @ViewChild('tabsContainer', { static: true })\n    public tabsContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('viewPort', { static: true })\n    public viewPort: ElementRef;\n\n    /**\n     * Provides an observable collection of all `IgxTabItemComponent`s.\n     * ```typescript\n     * const tabItems = this.myTabComponent.viewTabs;\n     * ```\n     */\n    @ViewChildren(forwardRef(() => IgxTabItemComponent))\n    public viewTabs: QueryList<IgxTabItemComponent>;\n\n    /**\n     * Provides an observable collection of all `IgxTabItemComponent`s.\n     * First try to get them as content children if not available get them as view children.\n     * ```typescript\n     * const tabItems = this.myTabComponent.tabs;\n     * ```\n     */\n    public get tabs(): QueryList<IgxTabItemComponent> {\n        if (this.hasContentTabs) {\n            return this.contentTabs;\n        }\n        return this.viewTabs;\n    }\n\n    /**\n     *@hidden\n     */\n    public get hasContentTabs(): boolean {\n        return (this.contentTabs && this.contentTabs.length > 0);\n    }\n\n    /**\n     * @hidden\n     */\n    public calculatedWidth: number;\n\n    /**\n     * @hidden\n     */\n    public visibleItemsWidth: number;\n\n    /**\n     * @hidden\n     */\n    public offset = 0;\n\n    private _groupChanges$: Subscription;\n    private _selectedIndex = -1;\n    private _resizeObserver: ResizeObserver;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    public get cssClass() {\n        const defaultStyle = `igx-tabs`;\n        const fixedStyle = `igx-tabs--fixed`;\n        const iconStyle = `igx-tabs--icons`;\n        const iconLabelFoundInGroups = this.groups.find((group) => group.icon != null && group.label != null);\n        const iconLabelFoundInTabs = this.contentTabs.find((tab) => tab.icon != null && tab.label != null);\n        let css;\n        switch (TabsType[this.tabsType.toUpperCase()]) {\n            case TabsType.FIXED: {\n                css = fixedStyle;\n                break;\n            }\n            default: {\n                css = defaultStyle;\n                break;\n            }\n        }\n\n        // Layout fix for items with icons\n        if (iconLabelFoundInGroups !== undefined || iconLabelFoundInTabs !== undefined) {\n            css = `${css} ${iconStyle}`;\n        }\n\n        return `${css} ${this.class}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollLeft(event): void {\n        this.scroll(false);\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollRight(event): void {\n        this.scroll(true);\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollElement(element: any, scrollRight: boolean): void {\n        const viewPortWidth = this.viewPort.nativeElement.offsetWidth;\n\n        this.offset = (scrollRight) ? element.offsetWidth + element.offsetLeft - viewPortWidth : element.offsetLeft;\n        this.itemsContainer.nativeElement.style.transform = `translate(${-this.offset}px)`;\n    }\n\n    /**\n     * Gets the selected `IgxTabItemComponent`.\n     * ```\n     * const selectedItem = this.myTabComponent.selectedTabItem;\n     * ```\n     */\n    get selectedTabItem(): IgxTabItemComponent {\n        if (this.tabs && this.selectedIndex !== undefined) {\n            return this.tabs.toArray()[this.selectedIndex];\n        }\n    }\n\n    constructor(private _element: ElementRef, private _ngZone: NgZone) {\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        if (this._selectedIndex === -1) {\n            this.tabs.forEach((t) => {\n                if (t.isSelected) {\n                    this._selectedIndex = t.index;\n                }\n            });\n        }\n\n        if (!this.hasContentTabs && (this.selectedIndex < 0 || this.selectedIndex >= this.groups.length)) {\n            this._selectedIndex = 0;\n        }\n\n        requestAnimationFrame(() => {\n            const newTab = this.tabs.toArray()[this._selectedIndex];\n            if (newTab) {\n                this.performSelection(newTab);\n            } else {\n                this.hideIndicator();\n            }\n        });\n\n        this._groupChanges$ = this.groups.changes.subscribe(() => {\n            this.resetSelectionOnCollectionChanged();\n        });\n\n        this._ngZone.runOutsideAngular(() => {\n            this._resizeObserver = new ResizeObserver(() => {\n                if (!this.hasContentTabs && this._selectedIndex >= 0 && this._selectedIndex < this.tabs.length) {\n                    const newTab = this.tabs.toArray()[this._selectedIndex];\n                    this.transformContentAnimation(newTab, 0);\n                }\n            });\n\n            this._resizeObserver.observe(this.tabsContainer.nativeElement);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy(): void {\n        if (this._groupChanges$) {\n            this._groupChanges$.unsubscribe();\n        }\n\n        this._ngZone.runOutsideAngular(() => {\n            this._resizeObserver.disconnect();\n        });\n    }\n\n    private resetSelectionOnCollectionChanged(): void {\n        requestAnimationFrame(() => {\n            const currentTab = this.tabs.toArray()[this.selectedIndex];\n            if (currentTab) {\n                this.performSelectionChange(currentTab);\n            } else if (this.selectedIndex >= this.tabs.length) {\n                this.performSelectionChange(this.tabs.last);\n            } else {\n                this.hideIndicator();\n            }\n        });\n    }\n\n    private scroll(scrollRight: boolean): void {\n        const tabsArray = this.tabs.toArray();\n        for (const tab of tabsArray) {\n            const element = tab.nativeTabItem.nativeElement;\n            if (scrollRight) {\n                if (element.offsetWidth + element.offsetLeft > this.viewPort.nativeElement.offsetWidth + this.offset) {\n                    this.scrollElement(element, scrollRight);\n                    break;\n                }\n            } else {\n                if (element.offsetWidth + element.offsetLeft >= this.offset) {\n                    this.scrollElement(element, scrollRight);\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public performSelectionChange(newTab: IgxTabItemBase): void {\n        const oldTab = this.selectedTabItem;\n        if (oldTab) {\n            this.performDeselection(oldTab);\n        }\n        if (newTab) {\n            this.performSelection(newTab);\n        } else {\n            // if there is no new selected tab hide the selection indicator\n            this.hideIndicator();\n        }\n        this.selectedIndexChange.emit(this._selectedIndex);\n    }\n\n    private performDeselection(oldTab: IgxTabItemBase): void {\n        oldTab.setSelectedInternal(false);\n        const oldTabRelatedGroup = this.groups.toArray()[oldTab.index];\n        if (oldTabRelatedGroup) {\n            oldTabRelatedGroup.setSelectedInternal(false);\n        }\n        this._selectedIndex = -1;\n        this.onTabItemDeselected.emit({ tab: oldTab, group: oldTabRelatedGroup });\n    }\n\n    private performSelection(newTab: IgxTabItemBase): void {\n        newTab.setSelectedInternal(true);\n        this._selectedIndex = newTab.index;\n\n        let newTabRelatedGroup = null;\n        if (!this.hasContentTabs && this.groups) {\n            newTabRelatedGroup = this.groups.toArray()[newTab.index];\n            if (newTabRelatedGroup) {\n                newTabRelatedGroup.setSelectedInternal(true);\n            }\n        }\n\n        this.onTabItemSelected.emit({ tab: newTab, group: newTabRelatedGroup });\n\n        requestAnimationFrame(() => {\n            // bring the new selected tab into view if it is not\n            this.bringNewTabIntoView(newTab);\n            // animate the new selection indicator\n            this.transformIndicatorAnimation(newTab.nativeTabItem.nativeElement);\n            // animate the new tab's group content\n            if (!this.hasContentTabs) {\n                this.transformContentAnimation(newTab, 0.2);\n            }\n        });\n    }\n\n    private bringNewTabIntoView(newTab: IgxTabItemBase): void {\n        const tabNativeElement = newTab.nativeTabItem.nativeElement;\n\n        // Scroll left if there is need\n        if (tabNativeElement.offsetLeft < this.offset) {\n            this.scrollElement(tabNativeElement, false);\n        }\n\n        // Scroll right if there is need\n        const viewPortOffsetWidth = this.viewPort.nativeElement.offsetWidth;\n        const delta = (tabNativeElement.offsetLeft + tabNativeElement.offsetWidth) - (viewPortOffsetWidth + this.offset);\n\n        // Fix for IE 11, a difference is accumulated from the widths calculations\n        if (delta > 1) {\n            this.scrollElement(tabNativeElement, true);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    // animation for the new panel/group (not needed for tab only mode)\n    public transformContentAnimation(tab: IgxTabItemBase, duration: number): void {\n        const contentOffset = this.tabsContainer.nativeElement.offsetWidth * tab.index;\n        this.contentsContainer.nativeElement.style.transitionDuration = duration > 0 ? `${duration}s` : 'initial';\n        this.contentsContainer.nativeElement.style.transform = `translate(${-contentOffset}px)`;\n    }\n\n    /**\n     * @hidden\n     */\n    public transformIndicatorAnimation(element: HTMLElement, duration = 0.3): void {\n        if (this.selectedIndicator) {\n            this.selectedIndicator.nativeElement.style.visibility = 'visible';\n            this.selectedIndicator.nativeElement.style.transitionDuration = duration > 0 ? `${duration}s` : 'initial';\n            this.selectedIndicator.nativeElement.style.width = `${element.offsetWidth}px`;\n            this.selectedIndicator.nativeElement.style.transform = `translate(${element.offsetLeft}px)`;\n        }\n    }\n\n    public hideIndicator(): void {\n        if (this.selectedIndicator) {\n            this.selectedIndicator.nativeElement.style.visibility = 'hidden';\n        }\n    }\n\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTabsComponent,\n        IgxTabsGroupComponent,\n        IgxTabItemComponent,\n        IgxTabItemTemplateDirective,\n        IgxRightButtonStyleDirective,\n        IgxLeftButtonStyleDirective],\n    exports: [IgxTabsComponent,\n        IgxTabsGroupComponent,\n        IgxTabItemComponent,\n        IgxTabItemTemplateDirective,\n        IgxRightButtonStyleDirective,\n        IgxLeftButtonStyleDirective],\n    imports: [CommonModule, IgxBadgeModule, IgxIconModule, IgxRippleModule]\n})\n\nexport class IgxTabsModule {\n}\n","/**\n * This file contains all the directives used by the @link IgxTimePickerComponent.\n * You should generally not use them directly.\n * @preferred\n */\nimport {\n    Directive,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input,\n    TemplateRef\n} from '@angular/core';\nimport { IGX_TIME_PICKER_COMPONENT, IgxTimePickerBase } from './time-picker.common';\nimport { InteractionMode } from '../core/enums';\n\n/** @hidden */\n@Directive({\n    selector: '[igxItemList]'\n})\nexport class IgxItemListDirective {\n\n    @Input('igxItemList')\n    public type: string;\n\n    public isActive: boolean;\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private elementRef: ElementRef) { }\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('class.igx-time-picker__column')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__hourList')\n    get hourCSS(): boolean {\n        return this.type === 'hourList';\n    }\n\n    @HostBinding('class.igx-time-picker__minuteList')\n    get minuteCSS(): boolean {\n        return this.type === 'minuteList';\n    }\n\n    @HostBinding('class.igx-time-picker__ampmList')\n    get ampmCSS(): boolean {\n        return this.type === 'ampmList';\n    }\n\n    @HostListener('focus')\n    public onFocus() {\n        this.isActive = true;\n    }\n\n    @HostListener('blur')\n    public onBlur() {\n        this.isActive = false;\n    }\n\n    private nextItem(): void {\n        switch (this.type) {\n            case 'hourList': {\n                this.timePicker.nextHour();\n                break;\n            }\n            case 'minuteList': {\n                this.timePicker.nextMinute();\n                break;\n            }\n            case 'ampmList': {\n                this.timePicker.nextAmPm();\n                break;\n            }\n        }\n    }\n\n    private prevItem(): void {\n        switch (this.type) {\n            case 'hourList': {\n                this.timePicker.prevHour();\n                break;\n            }\n            case 'minuteList': {\n                this.timePicker.prevMinute();\n                break;\n            }\n            case 'ampmList': {\n                this.timePicker.prevAmPm();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.nextItem();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.prevItem();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const listName = (event.target as HTMLElement).className;\n\n        if (listName.indexOf('hourList') !== -1 && this.timePicker.minuteList) {\n            this.timePicker.minuteList.nativeElement.focus();\n        } else if ((listName.indexOf('hourList') !== -1 || listName.indexOf('minuteList') !== -1) && this.timePicker.ampmList) {\n            this.timePicker.ampmList.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const listName = (event.target as HTMLElement).className;\n\n        if (listName.indexOf('ampmList') !== -1 && this.timePicker.minuteList) {\n            this.timePicker.minuteList.nativeElement.focus();\n        } else if ((listName.indexOf('ampmList') !== -1 || listName.indexOf('minuteList') !== -1) && this.timePicker.hourList) {\n            this.timePicker.hourList.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.enter', ['$event'])\n    public onKeydownEnter(event: KeyboardEvent) {\n        event.preventDefault();\n\n        if (this.timePicker.mode === InteractionMode.DropDown) {\n            this.timePicker.close();\n            return;\n        }\n        this.timePicker.okButtonClick();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.escape', ['$event'])\n    public onKeydownEscape(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.timePicker.cancelButtonClick();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseover')\n    public onHover() {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('wheel', ['$event'])\n    public onScroll(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (event.deltaY > 0) {\n            this.nextItem();\n        } else if (event.deltaY < 0) {\n            this.prevItem();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('panmove', ['$event'])\n    public onPanMove(event) {\n        if (event.deltaY < 0) {\n            this.nextItem();\n        } else if (event.deltaY > 0) {\n            this.prevItem();\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxHourItem]'\n})\nexport class IgxHourItemDirective {\n\n    @Input('igxHourItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedHour;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedHour && this.itemList.isActive;\n    }\n\n    get isSelectedHour(): boolean {\n        return this.timePicker.selectedHour === this.value;\n    }\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private itemList: IgxItemListDirective) { }\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollHourIntoView(item);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxMinuteItem]'\n})\nexport class IgxMinuteItemDirective {\n\n    @Input('igxMinuteItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedMinute;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedMinute && this.itemList.isActive;\n    }\n\n    get isSelectedMinute(): boolean {\n        return this.timePicker.selectedMinute === this.value;\n    }\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private itemList: IgxItemListDirective) { }\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollMinuteIntoView(item);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxAmPmItem]'\n})\nexport class IgxAmPmItemDirective {\n\n    @Input('igxAmPmItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedAmPm;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedAmPm && this.itemList.isActive;\n    }\n\n    get isSelectedAmPm(): boolean {\n        return this.timePicker.selectedAmPm === this.value;\n    }\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private itemList: IgxItemListDirective) { }\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollAmPmIntoView(item);\n        }\n    }\n}\n\n/**\n * This directive should be used to mark which ng-template will be used from IgxTimePicker when re-templating its input group.\n */\n@Directive({\n    selector: '[igxTimePickerTemplate]'\n})\nexport class IgxTimePickerTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n/**\n * This directive can be used to add custom action buttons to the dropdownb/dialog.\n */\n@Directive({\n    selector: '[igxTimePickerActions]'\n})\nexport class IgxTimePickerActionsDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","import { ElementRef } from '@angular/core';\nimport { InteractionMode } from '../core/enums';\n\n/** @hidden */\nexport const IGX_TIME_PICKER_COMPONENT = 'IgxTimePickerComponentToken';\n\n/** @hidden */\nexport interface IgxTimePickerBase {\n    hourList: ElementRef;\n    minuteList: ElementRef;\n    ampmList: ElementRef;\n    selectedHour: string;\n    selectedMinute: string;\n    selectedAmPm: string;\n    format: string;\n    promptChar: string;\n    cleared: boolean;\n    mode: InteractionMode;\n    showHoursList: boolean;\n    showMinutesList: boolean;\n    showAmPmList: boolean;\n    nextHour();\n    prevHour();\n    nextMinute();\n    prevMinute();\n    nextAmPm();\n    prevAmPm();\n    okButtonClick(): boolean;\n    cancelButtonClick(): void;\n    scrollHourIntoView(item: string): void;\n    scrollMinuteIntoView(item: string): void;\n    scrollAmPmIntoView(item: string): void;\n    close(): void;\n    parseMask(preserveAmPm?: boolean): string;\n}\n\n","import { Pipe, PipeTransform, Inject} from '@angular/core';\nimport { IGX_TIME_PICKER_COMPONENT, IgxTimePickerBase } from './time-picker.common';\n\n\n/**\n * Formats `IgxTimePickerComponent` display value according to the `format` property,\n * when the input element loses focus.\n **/\n@Pipe({ name: 'displayFormat'})\nexport class TimeDisplayFormatPipe implements PipeTransform {\n\n     constructor(@Inject(IGX_TIME_PICKER_COMPONENT) private timePicker: IgxTimePickerBase) { }\n\n     transform(value: any): string {\n        let hour, minutes, amPM;\n\n        const maskAmPM = this.timePicker.parseMask();\n        const mask = this.timePicker.parseMask(false);\n        if (!value || value === mask || value === maskAmPM) {\n            return '';\n        }\n\n        const sections = value.split(/[\\s:]+/);\n\n        if (this.timePicker.showHoursList) {\n            hour = sections[0];\n        }\n\n        if (this.timePicker.showMinutesList) {\n            minutes = this.timePicker.showHoursList ? sections[1] : sections[0];\n        }\n\n        if (this.timePicker.showAmPmList) {\n            amPM = sections[sections.length - 1];\n        }\n\n        const format = this.timePicker.format;\n        const prompt = this.timePicker.promptChar;\n        const regExp = new RegExp(this.timePicker.promptChar, 'g');\n\n        if (format.indexOf('hh') !== -1 || format.indexOf('HH') !== -1 && hour.indexOf(prompt) !== -1) {\n           hour = hour === prompt + prompt ? '00' : hour.replace(regExp, '0');\n        }\n\n        if (format.indexOf('mm') !== -1 && minutes.indexOf(prompt) !== -1) {\n           minutes = minutes === prompt + prompt ? '00' : minutes.replace(regExp, '0');\n        }\n\n        if (format.indexOf('hh') === -1 && format.indexOf('HH') === -1 && hour !== undefined) {\n            hour = hour.indexOf(prompt) !== -1 ? hour.replace(regExp, '') : hour;\n            const hourVal = parseInt(hour, 10);\n            hour = !hourVal ? '0' : hourVal < 10 && hourVal !== 0 ? hour.replace('0', '') : hour;\n        }\n\n        if (format.indexOf('mm') === -1 && minutes !== undefined) {\n            minutes = minutes.indexOf(prompt) !== -1 ? minutes.replace(regExp, '') : minutes;\n            const minutesVal = parseInt(minutes, 10);\n            minutes = !minutesVal ? '0' : minutesVal < 10 && minutesVal !== 0 ? minutes.replace('0', '') : minutes;\n        }\n\n        if (format.indexOf('tt') !== -1 && (amPM !== 'AM' || amPM !== 'PM')) {\n           amPM = amPM.indexOf('p') !== -1 || amPM.indexOf('P') !== -1 ? 'PM' : 'AM';\n        }\n\n        let result = amPM ? `${hour}:${minutes} ${amPM}` : `${hour}:${minutes}`;\n\n        if (!hour) {\n            result = result.slice(result.indexOf(':') + 1, result.length);\n        }\n\n        if (!minutes) {\n            result = result.slice(0, result.indexOf(':'));\n            if (amPM) { result = result + ' ' + amPM; }\n        }\n\n        return result;\n    }\n}\n\n/**\n * Formats `IgxTimePickerComponent` display value according to the `format` property,\n * when the input element gets focus.\n **/\n@Pipe({ name: 'inputFormat' })\nexport class TimeInputFormatPipe implements PipeTransform {\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT) private timePicker: IgxTimePickerBase) { }\n\n    transform(value: any): string {\n        const prompt = this.timePicker.promptChar;\n        const regExp = new RegExp(prompt, 'g');\n\n        let mask, hour, minutes, amPM;\n\n        if (this.timePicker.cleared) {\n            this.timePicker.cleared = false;\n            mask = this.timePicker.parseMask(false);\n        } else {\n            mask = this.timePicker.parseMask();\n        }\n\n        if (!value || value === mask) {\n            return mask;\n        }\n\n        const sections = value.split(/[\\s:]+/);\n\n        if (this.timePicker.showHoursList) {\n            hour = sections[0];\n            hour = hour.replace(regExp, '');\n\n            const leadZeroHour = (parseInt(hour, 10) < 10 && !hour.startsWith('0')) || hour === '0';\n            hour = leadZeroHour ? '0' + hour : hour;\n        }\n\n        if (this.timePicker.showMinutesList) {\n            minutes = this.timePicker.showHoursList ? sections[1] : sections[0];\n            minutes = minutes.replace(regExp, '');\n\n            const leadZeroMinutes = (parseInt(minutes, 10) < 10 && !minutes.startsWith('0')) || minutes === '0';\n            minutes = leadZeroMinutes ? '0' + minutes : minutes;\n        }\n\n        if (this.timePicker.showAmPmList) {\n            amPM = sections[sections.length - 1];\n        }\n\n        let result = amPM ? `${hour}:${minutes} ${amPM}` : `${hour}:${minutes}`;\n\n        if (!hour) {\n            result = result.slice(result.indexOf(':') + 1, result.length);\n        }\n\n        if (!minutes) {\n            result = result.slice(0, result.indexOf(':'));\n            if (amPM) { result = result + ' ' + amPM; }\n        }\n\n        return result;\n    }\n}\n","import {\n    CommonModule\n} from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Output,\n    TemplateRef,\n    ViewChild,\n    ContentChild,\n    Injectable,\n    AfterViewInit\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { HAMMER_GESTURE_CONFIG, HammerGestureConfig } from '@angular/platform-browser';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxInputGroupModule, IgxInputGroupComponent } from '../input-group/input-group.component';\nimport { IgxInputDirective } from '../directives/input/input.directive';\nimport {\n    IgxAmPmItemDirective,\n    IgxHourItemDirective,\n    IgxItemListDirective,\n    IgxMinuteItemDirective,\n    IgxTimePickerTemplateDirective,\n    IgxTimePickerActionsDirective\n} from './time-picker.directives';\nimport { Subject, fromEvent, interval, animationFrameScheduler } from 'rxjs';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxTimePickerBase, IGX_TIME_PICKER_COMPONENT } from './time-picker.common';\nimport { AbsoluteScrollStrategy } from '../services/overlay/scroll';\nimport { AutoPositionStrategy } from '../services/overlay/position';\nimport { OverlaySettings } from '../services/overlay/utilities';\nimport { takeUntil, throttle } from 'rxjs/operators';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxMaskModule } from '../directives/mask/mask.directive';\nimport { IgxOverlayOutletDirective, IgxToggleModule, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { TimeDisplayFormatPipe, TimeInputFormatPipe } from './time-picker.pipes';\nimport { ITimePickerResourceStrings } from '../core/i18n/time-picker-resources';\nimport { CurrentResourceStrings } from '../core/i18n/resources';\nimport { KEYS, CancelableBrowserEventArgs, IBaseEventArgs } from '../core/utils';\nimport { InteractionMode } from '../core/enums';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\n\nlet NEXT_ID = 0;\n\nconst HOURS_POS = [0, 1, 2];\nconst MINUTES_POS = [3, 4, 5];\nconst AMPM_POS = [6, 7, 8];\n\nconst ITEMS_COUNT = 7;\n\n@Injectable()\nexport class TimePickerHammerConfig extends HammerGestureConfig {\n    public overrides = {\n        pan: { direction: Hammer.DIRECTION_VERTICAL, threshold: 1 }\n    };\n}\n\nexport interface IgxTimePickerValueChangedEventArgs extends IBaseEventArgs {\n    oldValue: Date;\n    newValue: Date;\n}\n\nexport interface IgxTimePickerValidationFailedEventArgs extends IBaseEventArgs {\n    timePicker: IgxTimePickerComponent;\n    currentValue: Date;\n    setThroughUI: boolean;\n}\n\n@Component({\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxTimePickerComponent,\n            multi: true\n        },\n        {\n            provide: HAMMER_GESTURE_CONFIG,\n            useClass: TimePickerHammerConfig\n        },\n        {\n            provide: IGX_TIME_PICKER_COMPONENT,\n            useExisting: IgxTimePickerComponent\n        }\n    ],\n    selector: 'igx-time-picker',\n    templateUrl: 'time-picker.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ]\n})\nexport class IgxTimePickerComponent implements\n    IgxTimePickerBase,\n    ControlValueAccessor,\n    EditorProvider,\n    OnInit,\n    OnDestroy,\n    AfterViewInit {\n\n    /**\n     * An @Input property that sets the value of the `id` attribute.\n     * ```html\n     * <igx-time-picker [id]=\"'igx-time-picker-5'\" format=\"h:mm tt\" ></igx-time-picker>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-time-picker-${NEXT_ID++}`;\n\n    /**\n     * An accessor that allows you to set a time using the `value` input.\n     * ```html\n     *public date: Date = new Date(Date.now());\n     *  //...\n     *<igx-time-picker [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    set value(value: Date) {\n        if (this._isValueValid(value)) {\n            const oldVal = this._value;\n\n            this._value = value;\n            this._onChangeCallback(value);\n\n            const dispVal = this._formatTime(this.value, this.format);\n            if (this.mode === InteractionMode.DropDown && this._displayValue !== dispVal) {\n                this.displayValue = dispVal;\n            }\n\n            const args: IgxTimePickerValueChangedEventArgs = {\n                oldValue: oldVal,\n                newValue: value\n            };\n            this.onValueChanged.emit(args);\n        } else {\n            const args: IgxTimePickerValidationFailedEventArgs = {\n                timePicker: this,\n                currentValue: value,\n                setThroughUI: false\n            };\n            this.onValidationFailed.emit(args);\n        }\n    }\n\n    /**\n     * An accessor that returns the value of `igx-time-picker` component.\n     * ```html\n     *@ViewChild(\"MyPick\")\n     *public pick: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let pickSelect = this.pick.value;\n     * }\n     * ```\n     */\n    get value(): Date {\n        return this._value;\n    }\n\n    /**\n     * An @Input property that allows you to disable the `igx-time-picker` component. By default `disabled` is set to false.\n     * ```html\n     * <igx-time-picker [disabled]=\"'true'\" [vertical]=\"true\" format=\"h:mm tt\" ></igx-time-picker>\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * An accessor that sets the resource strings.\n     * By default it uses EN resources.\n    */\n    @Input()\n    set resourceStrings(value: ITimePickerResourceStrings) {\n        this._resourceStrings = Object.assign({}, this._resourceStrings, value);\n    }\n\n    /**\n     * An accessor that returns the resource strings.\n    */\n    get resourceStrings(): ITimePickerResourceStrings {\n        return this._resourceStrings;\n    }\n\n    /**\n     * An @Input property that renders OK button with custom text. By default `okButtonLabel` is set to OK.\n     * ```html\n     * <igx-time-picker okButtonLabel='SET' [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    set okButtonLabel(value: string) {\n        this._okButtonLabel = value;\n    }\n\n    /**\n     * An accessor that returns the label of ok button.\n    */\n    get okButtonLabel(): string {\n        if (this._okButtonLabel === null) {\n            return this.resourceStrings.igx_time_picker_ok;\n        }\n        return this._okButtonLabel;\n    }\n\n    /**\n     * An @Input property that renders cancel button with custom text.\n     * By default `cancelButtonLabel` is set to Cancel.\n     * ```html\n     * <igx-time-picker cancelButtonLabel='Exit' [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    set cancelButtonLabel(value: string) {\n        this._cancelButtonLabel = value;\n    }\n\n    /**\n    * An accessor that returns the label of cancel button.\n    */\n    get cancelButtonLabel(): string {\n        if (this._cancelButtonLabel === null) {\n            return this.resourceStrings.igx_time_picker_cancel;\n        }\n        return this._cancelButtonLabel;\n    }\n\n    /**\n     * An @Input property that gets/sets the delta by which hour and minute items would be changed <br>\n     * when the user presses the Up/Down keys.\n     * By default `itemsDelta` is set to `{hours: 1, minutes:1}`\n     * ```html\n     *<igx-time-picker [itemsDelta]=\"{hours:3, minutes:5}\" id=\"time-picker\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public itemsDelta = { hours: 1, minutes: 1 };\n\n    /**\n     * An @Input property that allows you to set the `minValue` to limit the user input.\n     *```html\n     *public min: string = \"09:00\";\n     *  //..\n     *<igx-time-picker format=\"HH:mm\" [vertical]=\"true\" [minValue]=\"min\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public minValue: string;\n\n    /**\n     * An @Input property that allows you to set the `maxValue` to limit the user input.\n     *```html\n     *public max: string = \"18:00\";\n     *  //..\n     *<igx-time-picker format=\"HH:mm\" [vertical]=\"true\" [maxValue]=\"max\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public maxValue: string;\n\n    /**\n     * An @Input property that determines the spin behavior. By default `isSpinLoop` is set to true.\n     *The minutes and hour spinning will wrap around by default.\n     *```html\n     *<igx-time-picker [isSpinLoop]=\"false\" id=\"time-picker\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public isSpinLoop = true;\n\n    /**\n     * An @Input property that Gets/Sets the orientation of the `igxTimePicker`. By default `vertical` is set to false.\n     * ```html\n     *<igx-time-picker [vertical]=\"true\" id=\"time-picker\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    public vertical = false;\n\n    /**\n     * An @Input property that Gets/Sets format of time while `igxTimePicker` does not have focus. <br>\n     * By default `format` is set to hh:mm tt. <br>\n     * List of time-flags: <br>\n     * `h` : hours field in 12-hours format without leading zero <br>\n     * `hh` : hours field in 12-hours format with leading zero <br>\n     * `H` : hours field in 24-hours format without leading zero <br>\n     * `HH` : hours field in 24-hours format with leading zero <br>\n     * `m` : minutes field without leading zero <br>\n     * `mm` : minutes field with leading zero <br>\n     * `tt` : 2 character string which represents AM/PM field <br>\n     * ```html\n     *<igx-time-picker format=\"HH:m\" id=\"time-picker\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    get format() {\n        return this._format || 'hh:mm tt';\n    }\n\n    set format(formatValue: string) {\n        this._format = formatValue;\n        this.mask = this._format.indexOf('tt') !== -1 ? '00:00 LL' : '00:00';\n\n        if (!this.showHoursList || !this.showMinutesList) {\n            this.mask = this.mask.slice(this.mask.indexOf(':') + 1, this.mask.length);\n        }\n\n        if (this.displayValue) {\n            this.displayValue = this._formatTime(this.value, this._format);\n        }\n    }\n\n    /**\n     * Sets the character used to prompt the user for input.\n     * Default value is \"'-'\".\n     * ```html\n     * <igx-time-picker [promptChar] = \"'_'\">\n     * ```\n     * @memberof IgxTimePickerComponent\n     */\n    @Input()\n    public promptChar = '-';\n\n    /**\n     * An @Input property that allows you to switch the interaction mode between\n     * a dialog picker or dropdown with editable masked input.\n     * Deafult is dialog picker.\n     *```html\n     *public mode = InteractionMode.DROPDOWN;\n     *  //..\n     *<igx-time-picker [mode]=\"mode\"></igx-time-picker>\n     *```\n     * @memberof IgxTimePickerComponent\n     */\n    @Input()\n    public mode = InteractionMode.Dialog;\n\n    /**\n     * Determines the container the popup element should be attached to.\n     *\n     * ```html\n     * <div igxOverlayOutlet #outlet=\"overlay-outlet\"></div>\n     * //..\n     * <igx-time-picker [outlet]=\"outlet\"></igx-time-picker>\n     * //..\n     * ```\n     * Where `outlet` is an instance of `IgxOverlayOutletDirective` or an `ElementRef`.\n     */\n    @Input()\n    public outlet: IgxOverlayOutletDirective | ElementRef;\n\n    /**\n    * An @Input property that allows you to modify overlay positioning, interaction and scroll behavior.\n    * ```typescript\n    * const settings: OverlaySettings = {\n    *      closeOnOutsideClick: true,\n    *      modal: false\n    *  }\n    * ```\n    * ---\n    * ```html\n    * <igx-time-picker [overlaySettings]=\"settings\"></igx-time-picker>\n    * ```\n     * @memberof IgxTimePickerComponent\n     */\n    @Input()\n    public set overlaySettings(value: OverlaySettings) {\n        this._overlaySettings = value;\n    }\n\n    public get overlaySettings(): OverlaySettings {\n        return this._overlaySettings ? this._overlaySettings :\n            (this.mode === InteractionMode.Dialog ? this._dialogOverlaySettings : this._dropDownOverlaySettings);\n    }\n\n    /**\n     * Emitted when selection is made. The event contains the selected value. Returns {`oldValue`: `Date`, `newValue`: `Date`}.\n     *```typescript\n     * @ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onValueChanged(timepicker){\n     *    this.toast.show()\n     *}\n     * //...\n     * ```\n     * ```html\n     *<igx-time-picker (onValueChanged)=\"onValueChanged($event)\"></igx-time-picker>\n     *<igx-toast #toast message=\"The value has been changed!\"></igx-toast>\n     *```\n     */\n    @Output()\n    public onValueChanged = new EventEmitter<IgxTimePickerValueChangedEventArgs>();\n\n    /**\n     * Emitted when an invalid value is being set. Returns {`timePicker`: `any`, `currentValue`: `Date`, `setThroughUI`: `boolean`}\n     * ```typescript\n     *public min: string = \"09:00\";\n     *public max: string = \"18:00\";\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onValidationFailed(timepicker){\n     *    this.toast.show();\n     *}\n     * //...\n     * ```\n     * ```html\n     *<igx-time-picker [minValue]=\"min\" [maxValue]=\"max\" (onValidationFailed)=\"onValidationFailed($event)\"></igx-time-picker>\n     *<igx-toast #toast message=\"Value must be between 09:00 and 18:00!\"></igx-toast>\n     * ```\n     */\n    @Output()\n    public onValidationFailed = new EventEmitter<IgxTimePickerValidationFailedEventArgs>();\n\n    /**\n     * @deprecated Use 'onOpened' instead.\n     * Emitted when a timePicker is being opened.\n     * ```html\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onOpen(timepicker){\n     *    this.toast.show();\n     *}\n     * //...\n     * ```\n     * ```html\n     *<igx-time-picker [minValue]=\"min\" [maxValue]=\"max\" (onOpen)=\"onOpen($event)\"></igx-time-picker>\n     *<igx-toast #toast message=\"The time picker has been opened!\"></igx-toast>\n     * ```\n     */\n    @DeprecateProperty(`'onOpen' @Output property is deprecated. Use 'onOpened' instead.`)\n    @Output()\n    public get onOpen(): EventEmitter<IgxTimePickerComponent> {\n        return this._onOpen;\n    }\n\n    public set onOpen(val: EventEmitter<IgxTimePickerComponent>) {\n        this._onOpen = val;\n    }\n\n    /**\n     * Emitted when a timePicker is opened.\n     */\n    @Output()\n    public onOpened = new EventEmitter<IgxTimePickerComponent>();\n\n    /**\n     * @deprecated Use 'onClosed' instead.\n     * Emitted when a timePicker is being closed.\n     */\n    @DeprecateProperty(`'onClose' @Output property is deprecated. Use 'onClosed' instead.`)\n    @Output()\n    public get onClose(): EventEmitter<IgxTimePickerComponent> {\n        return this._onClose;\n    }\n\n    public set onClose(val: EventEmitter<IgxTimePickerComponent>) {\n        this._onClose = val;\n    }\n\n    /**\n     * Emitted when a timePicker is closed.\n     */\n    @Output()\n    public onClosed = new EventEmitter<IgxTimePickerComponent>();\n\n    /**\n     * Emitted when a timePicker is being closed.\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs & IBaseEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @ViewChild('hourList', { static: false })\n    public hourList: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('minuteList', { static: false })\n    public minuteList: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('ampmList', { static: false })\n    public ampmList: ElementRef;\n\n    /*\n     * @hidden\n     */\n    @ViewChild('defaultTimePickerTemplate', { read: TemplateRef, static: true })\n    protected defaultTimePickerTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxTimePickerTemplateDirective, { read: IgxTimePickerTemplateDirective, static: false })\n    protected timePickerTemplateDirective: IgxTimePickerTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxTimePickerActionsDirective, { read: IgxTimePickerActionsDirective, static: false })\n    public timePickerActionsDirective: IgxTimePickerActionsDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxInputDirective, { read: ElementRef, static: false })\n    private _input: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxToggleDirective, { static: true })\n    public toggleRef: IgxToggleDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('input', { read: ElementRef, static: false })\n    private input: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('group', { read: IgxInputGroupComponent, static: false })\n    private group: IgxInputGroupComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('dropdownInputTemplate', { read: TemplateRef, static: true })\n    private dropdownInputTemplate: TemplateRef<any>;\n\n    private _overlaySettings: OverlaySettings;\n\n    /**\n     * @hidden\n     */\n    public _hourItems = [];\n    /**\n     * @hidden\n     */\n    public _minuteItems = [];\n    /**\n     * @hidden\n     */\n    public _ampmItems = [];\n\n    /**\n     * @hidden\n    */\n    public cleared = false;\n    /**\n     * @hidden\n    */\n    public isNotEmpty = false;\n    /**\n     * @hidden\n    */\n    public displayFormat = new TimeDisplayFormatPipe(this);\n    /**\n     * @hidden\n    */\n    public inputFormat = new TimeInputFormatPipe(this);\n\n    /**\n     * @hidden\n     */\n    public selectedHour: string;\n    /**\n     * @hidden\n     */\n    public selectedMinute: string;\n    /**\n     * @hidden\n     */\n    public selectedAmPm: string;\n\n    private _value: Date;\n    private _resourceStrings = CurrentResourceStrings.TimePickerResStrings;\n    private _okButtonLabel = null;\n    private _cancelButtonLabel = null;\n    private _format: string;\n    private _mask: string;\n    private _displayValue: string;\n\n    private _isHourListLoop = this.isSpinLoop;\n    private _isMinuteListLoop = this.isSpinLoop;\n\n    private _hourView = [];\n    private _minuteView = [];\n    private _ampmView = [];\n\n    private _dateFromModel: Date;\n    private _destroy$ = new Subject<boolean>();\n    private _dropDownOverlaySettings: OverlaySettings;\n    private _dialogOverlaySettings: OverlaySettings;\n\n    private _prevSelectedHour: string;\n    private _prevSelectedMinute: string;\n    private _prevSelectedAmPm: string;\n\n    private _onOpen = new EventEmitter<IgxTimePickerComponent>();\n    private _onClose = new EventEmitter<IgxTimePickerComponent>();\n\n    private _onTouchedCallback: () => void = () => { };\n    private _onChangeCallback: (_: Date) => void = () => { };\n\n    /**\n     * @hidden\n    */\n    get mask(): string {\n        return this._mask || '00:00 LL';\n    }\n\n    set mask(val: string) {\n        this._mask = val;\n    }\n\n    /**\n     * @hidden\n     */\n    get displayValue(): string {\n        if (this._displayValue === undefined) {\n            return this._formatTime(this.value, this.format);\n        }\n        return this._displayValue;\n    }\n\n    set displayValue(value: string) {\n        this._displayValue = value;\n    }\n\n    /**\n     * Returns the current time formatted as string using the `format` option.\n     * If there is no set time the return is an empty string.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let time = this.picker.displayTime;\n     *}\n     *```\n     */\n    public get displayTime(): string {\n        if (this.value) {\n            return this._formatTime(this.value, this.format);\n        }\n        return '';\n    }\n\n    /**\n     * @hidden\n     */\n    get hourView(): string[] {\n        return this._hourView;\n    }\n\n    /**\n     * @hidden\n     */\n    get minuteView(): string[] {\n        return this._minuteView;\n    }\n\n    /**\n     * @hidden\n     */\n    get ampmView(): string[] {\n        return this._ampmView;\n    }\n\n    /**\n     * @hidden\n     */\n    get showClearButton(): boolean {\n        return (this.displayValue && this.displayValue !== this.parseMask(false)) || this.isNotEmpty;\n    }\n\n    /**\n     * @hidden\n     */\n    get showHoursList(): boolean {\n        return this.format.indexOf('h') !== - 1 || this.format.indexOf('H') !== - 1;\n    }\n\n    /**\n     * @hidden\n     */\n    get showMinutesList(): boolean {\n        return this.format.indexOf('m') !== - 1;\n    }\n\n    /**\n     * @hidden\n     */\n    get showAmPmList(): boolean {\n        return this.format.indexOf('t') !== - 1;\n    }\n\n    /**\n     * @hidden\n     */\n    get validMinuteEntries(): any[] {\n        const minuteEntries = [];\n        for (let i = 0; i < 60; i++) {\n            minuteEntries.push(i);\n        }\n        return minuteEntries;\n    }\n\n    /**\n     * @hidden\n     */\n    get validHourEntries(): any[] {\n        const hourEntries = [];\n        const index = this.format.indexOf('h') !== -1 ? 13 : 24;\n        for (let i = 0; i < index; i++) {\n            hourEntries.push(i);\n        }\n        return hourEntries;\n    }\n\n    /**\n     * Gets the input group template.\n     * ```typescript\n     * let template = this.template();\n     * ```\n     * @memberof IgxTimePickerComponent\n     */\n    get template(): TemplateRef<any> {\n        if (this.timePickerTemplateDirective) {\n            return this.timePickerTemplateDirective.template;\n        }\n        return this.mode === InteractionMode.Dialog ? this.defaultTimePickerTemplate : this.dropdownInputTemplate;\n    }\n\n    /**\n     * Gets the context passed to the input group template.\n     * @memberof IgxTimePickerComponent\n     */\n    get context() {\n        return {\n            value: this.value,\n            displayTime: this.displayTime,\n            displayValue: this.displayValue,\n            openDialog: (target?: HTMLElement) => this.openDialog(target)\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit(): void {\n        this._generateHours();\n        this._generateMinutes();\n        if (this.format.indexOf('tt') !== -1) {\n            this._generateAmPm();\n        }\n\n        this._dropDownOverlaySettings = {\n            modal: false,\n            closeOnOutsideClick: true,\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            positionStrategy: new AutoPositionStrategy()\n        };\n        this._dialogOverlaySettings = {};\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit(): void {\n        if (this.mode === InteractionMode.DropDown && this.input) {\n            fromEvent(this.input.nativeElement, 'keydown').pipe(\n                throttle(() => interval(0, animationFrameScheduler)),\n                takeUntil(this._destroy$)\n            ).subscribe((event: KeyboardEvent) => {\n                if (event.key === KEYS.UP_ARROW || event.key === KEYS.UP_ARROW_IE ||\n                    event.key === KEYS.DOWN_ARROW || event.key === KEYS.DOWN_ARROW_IE) {\n                    this.spinOnEdit(event);\n                }\n            });\n        }\n\n        if (this.toggleRef && this.group) {\n            this.toggleRef.element.style.width = this.group.element.nativeElement.getBoundingClientRect().width + 'px';\n        }\n\n        if (this.toggleRef) {\n            this.toggleRef.onClosed.pipe(takeUntil(this._destroy$)).subscribe(() => {\n\n                if (this._input) {\n                    this._input.nativeElement.focus();\n                }\n\n                if (this.mode === InteractionMode.DropDown) {\n                    this._onDropDownClosed();\n                }\n\n                this.onClosed.emit(this);\n\n                // TODO: remove this line after deprecating 'onClose'\n                this._onClose.emit(this);\n            });\n\n            this.toggleRef.onOpened.pipe(takeUntil(this._destroy$)).subscribe(() => {\n                this.onOpened.emit(this);\n\n                // TODO: remove this line after deprecating 'onOpen'\n                this._onOpen.emit(this);\n            });\n\n            this.toggleRef.onClosing.pipe(takeUntil(this._destroy$)).subscribe((event) => {\n                this.onClosing.emit(event);\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy(): void {\n        this._destroy$.next(true);\n        this._destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.spacebar', ['$event'])\n    @HostListener('keydown.space', ['$event'])\n    public onKeydownSpace(event) {\n        this.openDialog(this.getInputGroupElement());\n        event.preventDefault();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.Alt.ArrowDown')\n    public onAltArrowDown() {\n        this.openDialog(this.getInputGroupElement());\n    }\n\n    private _scrollItemIntoView(item: string, items: any[], selectedItem: string, isListLoop: boolean, viewType: string): any {\n        let itemIntoView;\n        if (items) {\n            const index = (item === 'AM' || item === 'PM') ? items.indexOf(item) : items.indexOf(parseInt(item, 10));\n            let view;\n\n            if (index !== -1) {\n                if (isListLoop) {\n                    if (index > 0) {\n                        selectedItem = this._itemToString(items[index - 1], viewType);\n                        itemIntoView = this._nextItem(items, selectedItem, isListLoop, viewType);\n                    } else {\n                        selectedItem = this._itemToString(items[1], viewType);\n                        itemIntoView = this._prevItem(items, selectedItem, isListLoop, viewType);\n                    }\n                } else {\n                    view = items.slice(index - 3, index + 4);\n                    selectedItem = this._itemToString(items[index], viewType);\n                    itemIntoView = { selectedItem, view };\n                }\n                itemIntoView.view = this._viewToString(itemIntoView.view, viewType);\n            }\n        }\n        return itemIntoView;\n    }\n\n    private _viewToString(view: any, viewType: string): any {\n        for (let i = 0; i < view.length; i++) {\n            if (typeof (view[i]) !== 'string') {\n                view[i] = this._itemToString(view[i], viewType);\n            }\n        }\n        return view;\n    }\n\n    private _itemToString(item: any, viewType: string): string {\n        if (item === null) {\n            item = '';\n        } else if (viewType && typeof (item) !== 'string') {\n            const leadZeroHour = (item < 10 && (this.format.indexOf('hh') !== -1 || this.format.indexOf('HH') !== -1));\n            const leadZeroMinute = (item < 10 && this.format.indexOf('mm') !== -1);\n\n            const leadZero = (viewType === 'hour') ? leadZeroHour : leadZeroMinute;\n            item = (leadZero) ? '0' + item : `${item}`;\n        }\n        return item;\n    }\n\n    private _prevItem(items: any[], selectedItem: string, isListLoop: boolean, viewType: string): any {\n        const selectedIndex = items.indexOf(parseInt(selectedItem, 10));\n        const itemsCount = items.length;\n        let view;\n\n        if (selectedIndex === -1) {\n            view = items.slice(0, 7);\n            selectedItem = items[3];\n        } else if (isListLoop) {\n            if (selectedIndex - 4 < 0) {\n                view = items.slice(itemsCount - (4 - selectedIndex), itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 3));\n            } else if (selectedIndex + 4 > itemsCount) {\n                view = items.slice(selectedIndex - 4, itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 3 - itemsCount));\n            } else {\n                view = items.slice(selectedIndex - 4, selectedIndex + 3);\n            }\n\n            selectedItem = (selectedIndex === 0) ? items[itemsCount - 1] : items[selectedIndex - 1];\n        } else if (selectedIndex > 3) {\n            view = items.slice(selectedIndex - 4, selectedIndex + 3);\n            selectedItem = items[selectedIndex - 1];\n        } else if (selectedIndex === 3) {\n            view = items.slice(0, 7);\n        }\n        view = this._viewToString(view, viewType);\n        selectedItem = this._itemToString(selectedItem, viewType);\n        return {\n            selectedItem,\n            view\n        };\n    }\n\n    private _nextItem(items: any[], selectedItem: string, isListLoop: boolean, viewType: string): any {\n        const selectedIndex = items.indexOf(parseInt(selectedItem, 10));\n        const itemsCount = items.length;\n        let view;\n\n        if (selectedIndex === -1) {\n            view = items.slice(0, 7);\n            selectedItem = items[3];\n        } else if (isListLoop) {\n            if (selectedIndex < 2) {\n                view = items.slice(itemsCount - (2 - selectedIndex), itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 5));\n            } else if (selectedIndex + 4 >= itemsCount) {\n                view = items.slice(selectedIndex - 2, itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 5 - itemsCount));\n            } else {\n                view = items.slice(selectedIndex - 2, selectedIndex + 5);\n            }\n\n            selectedItem = (selectedIndex === itemsCount - 1) ? items[0] : items[selectedIndex + 1];\n        } else if (selectedIndex + 1 < itemsCount - 3) {\n            view = items.slice(selectedIndex - 2, selectedIndex + 5);\n            selectedItem = items[selectedIndex + 1];\n        } else if (selectedIndex === itemsCount - 4) {\n            view = items.slice(selectedIndex - 3, itemsCount);\n        }\n        view = this._viewToString(view, viewType);\n        selectedItem = this._itemToString(selectedItem, viewType);\n        return {\n            selectedItem,\n            view\n        };\n    }\n\n    private _formatTime(value: Date, format: string): string {\n        if (!value) {\n            return '';\n        } else {\n            let hour = value.getHours();\n            let formattedMinute, formattedHour;\n\n            const minute = value.getMinutes();\n            const amPM = (hour > 11) ? 'PM' : 'AM';\n\n            if (format.indexOf('h') !== -1) {\n                if (hour > 12) {\n                    hour -= 12;\n                    formattedHour = hour < 10 && format.indexOf('hh') !== -1 ? '0' + hour : `${hour}`;\n                } else if (hour === 0) {\n                    formattedHour = '12';\n                } else if (hour < 10 && format.indexOf('hh') !== -1) {\n                    formattedHour = '0' + hour;\n                } else {\n                    formattedHour = `${hour}`;\n                }\n            } else {\n                if (hour < 10 && format.indexOf('HH') !== -1) {\n                    formattedHour = '0' + hour;\n                } else {\n                    formattedHour = `${hour}`;\n                }\n            }\n\n            formattedMinute = minute < 10 && format.indexOf('mm') !== -1 ? '0' + minute : `${minute}`;\n\n            return format.replace('hh', formattedHour).replace('h', formattedHour)\n                .replace('HH', formattedHour).replace('H', formattedHour)\n                .replace('mm', formattedMinute).replace('m', formattedMinute)\n                .replace('tt', amPM);\n        }\n    }\n\n    private _updateHourView(start: any, end: any): void {\n        this._hourView = this._viewToString(this._hourItems.slice(start, end), 'hour');\n    }\n\n    private _updateMinuteView(start: any, end: any): void {\n        this._minuteView = this._viewToString(this._minuteItems.slice(start, end), 'minute');\n    }\n\n    private _updateAmPmView(start: any, end: any): void {\n        this._ampmView = this._ampmItems.slice(start, end);\n    }\n\n    private _addEmptyItems(items: string[]): void {\n        for (let i = 0; i < 3; i++) {\n            items.push(null);\n        }\n    }\n\n    private _generateHours(): void {\n        let hourItemsCount = 24;\n        if (this.format.indexOf('h') !== -1) {\n            hourItemsCount = 13;\n        }\n\n        hourItemsCount /= this.itemsDelta.hours;\n\n        let i = this.format.indexOf('H') !== -1 ? 0 : 1;\n\n        if (hourItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._hourItems);\n            this._isHourListLoop = false;\n        }\n\n        if (hourItemsCount > 1) {\n            for (i; i < hourItemsCount; i++) {\n                this._hourItems.push(i * this.itemsDelta.hours);\n            }\n        } else {\n            this._hourItems.push(0);\n        }\n\n        if (hourItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._hourItems);\n        }\n    }\n\n    private _generateMinutes(): void {\n        const minuteItemsCount = 60 / this.itemsDelta.minutes;\n\n        if (minuteItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._minuteItems);\n            this._isMinuteListLoop = false;\n        }\n\n        for (let i = 0; i < minuteItemsCount; i++) {\n            this._minuteItems.push(i * this.itemsDelta.minutes);\n        }\n\n        if (minuteItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._minuteItems);\n        }\n    }\n\n    private _generateAmPm(): void {\n\n        this._addEmptyItems(this._ampmItems);\n\n        this._ampmItems.push('AM');\n        this._ampmItems.push('PM');\n\n        this._addEmptyItems(this._ampmItems);\n    }\n\n    private _getSelectedTime(): Date {\n        const date = this.value ? new Date(this.value) : new Date();\n        if (this.selectedHour) {\n            date.setHours(parseInt(this.selectedHour, 10));\n        }\n        if (this.selectedMinute) {\n            date.setMinutes(parseInt(this.selectedMinute, 10));\n        }\n        date.setSeconds(0);\n        if (((this.showHoursList && this.selectedHour !== '12') || (!this.showHoursList && this.selectedHour <= '11')) &&\n                this.selectedAmPm === 'PM') {\n            date.setHours(date.getHours() + 12);\n        }\n        if (!this.showHoursList && this.selectedAmPm === 'AM' && this.selectedHour > '11') {\n            date.setHours(date.getHours() - 12);\n        }\n        if (this.selectedAmPm === 'AM' && this.selectedHour === '12') {\n            date.setHours(0);\n        }\n        return date;\n    }\n\n    private _convertMinMaxValue(value: string): Date {\n        const date = this.value ? new Date(this.value) : this._dateFromModel ? new Date(this._dateFromModel) : new Date();\n        const sections = value.split(/[\\s:]+/);\n        let hour, minutes, amPM;\n\n        date.setSeconds(0);\n\n        if (this.showHoursList) {\n            hour = sections[0];\n            date.setHours(parseInt(hour, 10));\n        }\n\n        if (this.showMinutesList) {\n            minutes = this.showHoursList ? sections[1] : sections[0];\n            date.setMinutes(parseInt(minutes, 10));\n        }\n\n        if (this.showAmPmList) {\n            amPM = sections[sections.length - 1];\n\n            if (((this.showHoursList && date.getHours().toString() !== '12') ||\n                    (!this.showHoursList && date.getHours().toString() <= '11')) && amPM === 'PM') {\n                        date.setHours(date.getHours() + 12);\n            }\n\n            if (!this.showHoursList && amPM === 'AM' && date.getHours().toString() > '11') {\n                date.setHours(date.getHours() - 12);\n            }\n\n            if (this.showHoursList && date.getHours() === 12 && amPM === 'AM') {\n                date.setHours(0);\n            }\n        }\n\n        return date;\n    }\n\n    private _isValueValid(value: Date): boolean {\n        if (this.maxValue && value > this._convertMinMaxValue(this.maxValue)) {\n            return false;\n        } else if (this.minValue && value < this._convertMinMaxValue(this.minValue)) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    private _isEntryValid(val: string): boolean {\n        let validH = true;\n        let validM = true;\n\n        const sections = val.split(/[\\s:]+/);\n        const re = new RegExp(this.promptChar, 'g');\n\n        if (this.showHoursList) {\n            validH = this.validHourEntries.indexOf(parseInt(sections[0].replace(re, ''), 10)) !== -1;\n        }\n\n        if (this.showMinutesList) {\n            const minutes = this.showHoursList ? sections[1] : sections[0];\n            validM = this.validMinuteEntries.indexOf(parseInt(minutes.replace(re, ''), 10)) !== -1;\n        }\n\n        return validH && validM;\n    }\n\n    private _getCursorPosition(): number {\n        return this.input.nativeElement.selectionStart;\n    }\n\n    private _setCursorPosition(start: number, end: number = start): void {\n        this.input.nativeElement.setSelectionRange(start, end);\n    }\n\n    private _updateEditableInput(): void {\n        if (this.mode === InteractionMode.DropDown) {\n            this.displayValue = this._formatTime(this._getSelectedTime(), this.format);\n        }\n    }\n\n    private _spinHours(currentVal: Date, minVal: Date, maxVal: Date, hDelta: number, sign: number): Date {\n        const oldVal = new Date(currentVal);\n\n        currentVal.setMinutes(sign * hDelta);\n        if (currentVal.getDate() !== oldVal.getDate() && this.isSpinLoop) {\n            currentVal.setDate(oldVal.getDate());\n        }\n\n        let minutes = currentVal.getMinutes();\n        if (currentVal.getTime() > maxVal.getTime()) {\n            if (this.isSpinLoop) {\n                minutes = minutes < minVal.getMinutes() ? 60 + minutes : minutes;\n                minVal.setMinutes(sign * minutes);\n                return minVal;\n            } else {\n                return oldVal;\n            }\n        } else if (currentVal.getTime() < minVal.getTime()) {\n            if (this.isSpinLoop) {\n                minutes = minutes <= maxVal.getMinutes() ? minutes : minutes - 60;\n                maxVal.setMinutes(minutes);\n                return maxVal;\n            } else {\n                return oldVal;\n            }\n        } else {\n            return currentVal;\n        }\n    }\n\n    private _spinMinutes(currentVal: Date, mDelta: number, sign: number) {\n        let minutes = currentVal.getMinutes() + (sign * mDelta);\n\n        if (minutes < 0 || minutes >= 60) {\n            minutes = this.isSpinLoop ? minutes - (sign * 60) : currentVal.getMinutes();\n        }\n\n        currentVal.setMinutes(minutes);\n        return currentVal;\n    }\n\n    private _initializeContainer() {\n        if (this.value) {\n            const formttedTime = this._formatTime(this.value, this.format);\n            const sections = formttedTime.split(/[\\s:]+/);\n\n            if (this.showHoursList) {\n                this.selectedHour = sections[0];\n            }\n\n            if (this.showMinutesList) {\n                this.selectedMinute = this.showHoursList ? sections[1] : sections[0];\n            }\n\n            if (this.showAmPmList && this._ampmItems !== null) {\n                this.selectedAmPm = sections[sections.length - 1];\n            }\n        }\n\n        if (this.selectedHour === undefined) {\n            this.selectedHour = !this.showHoursList && this.value ? this.value.getHours().toString() :\n                this.showHoursList ? `${this._hourItems[3]}` : '0';\n        }\n        if (this.selectedMinute === undefined) {\n            this.selectedMinute = !this.showMinutesList && this.value ? this.value.getMinutes().toString() : '0';\n        }\n        if (this.selectedAmPm === undefined && this._ampmItems !== null) {\n            this.selectedAmPm = this._ampmItems[3];\n        }\n\n        this._prevSelectedHour = this.selectedHour;\n        this._prevSelectedMinute = this.selectedMinute;\n        this._prevSelectedAmPm = this.selectedAmPm;\n\n        this._onTouchedCallback();\n\n        this._updateHourView(0, ITEMS_COUNT);\n        this._updateMinuteView(0, ITEMS_COUNT);\n        this._updateAmPmView(0, ITEMS_COUNT);\n\n        if (this.selectedHour) {\n            this.scrollHourIntoView(this.selectedHour);\n        }\n        if (this.selectedMinute) {\n            this.scrollMinuteIntoView(this.selectedMinute);\n        }\n        if (this.selectedAmPm) {\n            this.scrollAmPmIntoView(this.selectedAmPm);\n        }\n\n        requestAnimationFrame(() => {\n            if (this.hourList) {\n                this.hourList.nativeElement.focus();\n            } else if (this.minuteList) {\n                this.minuteList.nativeElement.focus();\n            }\n        });\n    }\n\n    private _onDropDownClosed(): void {\n        const oldValue = this.value;\n        const newVal = this._convertMinMaxValue(this.displayValue);\n\n        if (this._isValueValid(newVal)) {\n            if (!this.value || oldValue.getTime() !== newVal.getTime()) {\n                this.value = newVal;\n            }\n        } else {\n            this.displayValue = this.inputFormat.transform(this._formatTime(oldValue, this.format));\n\n            const args: IgxTimePickerValidationFailedEventArgs = {\n                timePicker: this,\n                currentValue: newVal,\n                setThroughUI: true\n            };\n            this.onValidationFailed.emit(args);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    getEditElement() {\n        return this._input ? this._input.nativeElement : null;\n    }\n\n    /**\n     * @hidden\n     */\n    public getInputGroupElement() {\n        return this.group ? this.group.element.nativeElement : null;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n        // use this flag to make sure that min/maxValue are checked (in _convertMinMaxValue() method)\n        // against the real value when initializing the component and value is bound via ngModel\n        this._dateFromModel = value;\n\n        this.value = value;\n\n        if (this.mode === InteractionMode.DropDown) {\n            this.displayValue = this._formatTime(this.value, this.format);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (_: Date) => void) { this._onChangeCallback = fn; }\n\n    /**\n     *@hidden\n     */\n    public setDisabledState(isDisabled: boolean): void { this.disabled = isDisabled; }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n\n    /**\n     * opens the dialog.\n     * @param target HTMLElement - the target element to use for positioning the drop down container according to\n     * ```html\n     * <igx-time-picker [value]=\"date\" mode=\"dropdown\" #retemplated>\n     *   <ng-template igxTimePickerTemplate let-openDialog=\"openDialog\"\n     *                let-displayTime=\"displayTime\">\n     *     <igx-input-group>\n     *       <input #dropDownTarget igxInput [value]=\"displayTime\" />\n     *       <igx-suffix (click)=\"openDialog(dropDownTarget)\">\n     *         <igx-icon>alarm</igx-icon>\n     *       </igx-suffix>\n     *     </igx-input-group>\n     *   </ng-template>\n     * </igx-time-picker>\n     * ```\n     */\n    public openDialog(target?: HTMLElement): void {\n        if (!this.toggleRef.collapsed) {\n            return this._onDropDownClosed();\n        }\n        const settings = this.overlaySettings;\n\n        if (target && settings && settings.positionStrategy) {\n            settings.positionStrategy.settings.target = target;\n        }\n        if (this.outlet) {\n            settings.outlet = this.outlet;\n        }\n\n        this.toggleRef.open(settings);\n        this._initializeContainer();\n    }\n\n    /**\n     * Scrolls a hour item into view.\n     * ```typescript\n     *scrhintoView(picker) {\n     *picker.scrollHourIntoView('2');\n     *}\n     * ```\n     *```html\n     *<igx-time-picker #picker format=\"h:mm tt\" (onOpen)=\"scrhintoView(picker)\"></igx-time-picker>\n     *```\n     *@param item to be scrolled in view.\n     */\n    public scrollHourIntoView(item: string): void {\n        if (this.showHoursList) {\n            const hourIntoView = this._scrollItemIntoView(item, this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');\n            if (hourIntoView) {\n                this._hourView = hourIntoView.view;\n                this.selectedHour = hourIntoView.selectedItem;\n                this._updateEditableInput();\n            }\n        }\n    }\n\n    /**\n     * Scrolls a minute item into view.\n     * ```typescript\n     *scrMintoView(picker) {\n     *picker.scrollMinuteIntoView('3');\n     *}\n     * ```\n     *```html\n     *<igx-time-picker #picker format=\"h:mm tt\" (onOpen)=\"scrMintoView(picker)\"></igx-time-picker>\n     *```\n     * @param item to be scrolled in view.\n     */\n    public scrollMinuteIntoView(item: string): void {\n        if (this.showMinutesList) {\n            const minuteIntoView = this._scrollItemIntoView(item, this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');\n            if (minuteIntoView) {\n                this._minuteView = minuteIntoView.view;\n                this.selectedMinute = minuteIntoView.selectedItem;\n                this._updateEditableInput();\n            }\n        }\n    }\n\n    /**\n     * Scrolls an ampm item into view.\n     * ```typescript\n     *scrAmPmIntoView(picker) {\n     *picker.scrollAmPmIntoView('PM');\n     *}\n     * ```\n     *```html\n     *<igx-time-picker #picker format=\"h:mm tt\" (onOpen)=\"scrAmPmIntoView(picker)\"></igx-time-picker>\n     *```\n     * @param item to be scrolled in view.\n     */\n    public scrollAmPmIntoView(item: string): void {\n        if (this.showAmPmList) {\n            const ampmIntoView = this._scrollItemIntoView(item, this._ampmItems, this.selectedAmPm, false, null);\n            if (ampmIntoView) {\n                this._ampmView = ampmIntoView.view;\n                this.selectedAmPm = ampmIntoView.selectedItem;\n                this._updateEditableInput();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public nextHour() {\n        const nextHour = this._nextItem(this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');\n        this._hourView = nextHour.view;\n        this.selectedHour = nextHour.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public prevHour() {\n        const prevHour = this._prevItem(this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');\n        this._hourView = prevHour.view;\n        this.selectedHour = prevHour.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public nextMinute() {\n        const nextMinute = this._nextItem(this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');\n        this._minuteView = nextMinute.view;\n        this.selectedMinute = nextMinute.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public prevMinute() {\n        const prevMinute = this._prevItem(this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');\n        this._minuteView = prevMinute.view;\n        this.selectedMinute = prevMinute.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public nextAmPm() {\n        const selectedIndex = this._ampmItems.indexOf(this.selectedAmPm);\n\n        if (selectedIndex + 1 < this._ampmItems.length - 3) {\n            this._updateAmPmView(selectedIndex - 2, selectedIndex + 5);\n            this.selectedAmPm = this._ampmItems[selectedIndex + 1];\n\n            this._updateEditableInput();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public prevAmPm() {\n        const selectedIndex = this._ampmItems.indexOf(this.selectedAmPm);\n\n        if (selectedIndex > 3) {\n            this._updateAmPmView(selectedIndex - 4, selectedIndex + 3);\n            this.selectedAmPm = this._ampmItems[selectedIndex - 1];\n\n            this._updateEditableInput();\n        }\n    }\n\n    /**\n     * If current value is valid selects it, closes the dialog and returns true, otherwise returns false.\n     * ```html\n     * <igx-dialog class=\"igx-time-picker__dialog-popup\" [rightButtonLabel]=\"okButtonLabel\" (onRightButtonSelect)=\"okButtonClick()\">\n     * //..\n     * </igx-dialog>\n     * ```\n     */\n    public okButtonClick(): boolean {\n        const time = this._getSelectedTime();\n        if (this._isValueValid(time)) {\n            this.close();\n            this.value = time;\n            return true;\n        } else {\n            const args: IgxTimePickerValidationFailedEventArgs = {\n                timePicker: this,\n                currentValue: time,\n                setThroughUI: true\n            };\n            this.onValidationFailed.emit(args);\n            return false;\n        }\n    }\n\n    /**\n     * Closes the dialog without selecting the current value.\n     * ```html\n     * <igx-dialog class=\"igx-time-picker__dialog-popup\" [leftButtonLabel]=\"cancelButtonLabel\" (onLeftButtonSelect)=\"cancelButtonClick()\">\n     * //...\n     * </igx-dialog>\n     * ```\n     */\n    public cancelButtonClick(): void {\n        if (this.mode === InteractionMode.DropDown) {\n            this.displayValue = this._formatTime(this.value, this.format);\n        }\n\n        this.close();\n\n        this.selectedHour = this._prevSelectedHour;\n        this.selectedMinute = this._prevSelectedMinute;\n        this.selectedAmPm = this._prevSelectedAmPm;\n    }\n\n    /**\n     * Returns an array of the hours currently in view.\n     *```html\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let hInView = this.picker.hoursInView;\n     *}\n     *```\n     */\n    public hoursInView(): string[] {\n        return this._hourView.filter((hour) => hour !== '');\n    }\n\n    /**\n     * Returns an array of the minutes currently in view.\n     *```html\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let minInView = this.picker.minutesInView;\n     *}\n     *```\n     */\n    public minutesInView(): string[] {\n        return this._minuteView.filter((minute) => minute !== '');\n    }\n\n    /**\n     * Returns an array of the AM/PM currently in view.\n     *```html\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let ApInView = this.picker.ampmInView;\n     *}\n     *```\n     */\n    public ampmInView(): string[] {\n        return this._ampmView.filter((ampm) => ampm !== '');\n    }\n\n    /**\n     * Closes the dropdown/dialog.\n     * ```html\n     *<igx-time-picker #timePicker></igx-time-picker>\n     * ```\n     * ```typescript\n     * @ViewChild('timePicker', { read: IgxTimePickerComponent }) picker: IgxTimePickerComponent;\n     * picker.close();\n     * ```\n     */\n    public close(): void {\n        this.toggleRef.close();\n    }\n\n    /**\n     * @hidden\n     */\n    public parseMask(preserveAmPm = true): string {\n        const maskWithAmPm = this.mask.replace(new RegExp('0', 'g'), this.promptChar).replace('LL', 'AM');\n        const pureMask = this.mask.replace(new RegExp('0', 'g'), this.promptChar).replace(new RegExp('L', 'g'), this.promptChar);\n\n        return preserveAmPm ? maskWithAmPm : pureMask;\n    }\n\n    /**\n     * @hidden\n     */\n    public clear(): void {\n        if (this.toggleRef.collapsed) {\n            this.cleared = true;\n            this.isNotEmpty = false;\n\n            const oldVal = new Date(this.value);\n\n            this.displayValue = '';\n            this.value.setHours(0, 0);\n\n            if (oldVal.getTime() !== this.value.getTime()) {\n                const args: IgxTimePickerValueChangedEventArgs = {\n                    oldValue: oldVal,\n                    newValue: this.value\n                };\n                this.onValueChanged.emit(args);\n            }\n        } else {\n            this.close();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onInput(event): void {\n        const val = event.target.value;\n        const oldVal = new Date(this.value);\n\n        this.isNotEmpty = val !== this.parseMask(false);\n\n        // handle cases where all empty positions (promts) are filled and we want to update\n        // timepicker own value property if it is a valid Date\n        if (val.indexOf(this.promptChar) === -1) {\n            if (this._isEntryValid(val)) {\n                const newVal = this._convertMinMaxValue(val);\n                if (oldVal.getTime() !== newVal.getTime()) {\n                    this.value = newVal;\n                }\n            } else {\n                const args: IgxTimePickerValidationFailedEventArgs = {\n                    timePicker: this,\n                    currentValue: val,\n                    setThroughUI: false\n                };\n                this.onValidationFailed.emit(args);\n            }\n            // handle cases where the user deletes the display value (when pressing backspace or delete)\n        } else if (!this.value || !val || val === this.parseMask(false)) {\n            this.isNotEmpty = false;\n\n            this.value.setHours(0, 0);\n            this.displayValue = val;\n\n            if (oldVal.getTime() !== this.value.getTime()) {\n                const args: IgxTimePickerValueChangedEventArgs = {\n                    oldValue: oldVal,\n                    newValue: this.value\n                };\n                this.onValueChanged.emit(args);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onFocus(event): void {\n        this.isNotEmpty = event.target.value !== this.parseMask(false);\n    }\n\n    /**\n     * @hidden\n     */\n    public onBlur(event): void {\n        const value = event.target.value;\n\n        this.isNotEmpty = value !== '';\n        this.displayValue = value;\n\n        if (value && value !== this.parseMask()) {\n            if (this._isEntryValid(value)) {\n                const newVal = this._convertMinMaxValue(value);\n                if (!this.value || this.value.getTime() !== newVal.getTime()) {\n                    this.value = newVal;\n                }\n            } else {\n                const args: IgxTimePickerValidationFailedEventArgs = {\n                    timePicker: this,\n                    currentValue: value,\n                    setThroughUI: false\n                };\n                this.onValidationFailed.emit(args);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public spinOnEdit(event): void {\n        event.preventDefault();\n\n        let sign: number;\n        let displayVal: string;\n        const currentVal = new Date(this.value);\n        const min = this.minValue ? this._convertMinMaxValue(this.minValue) : this._convertMinMaxValue('00:00');\n        const max = this.maxValue ? this._convertMinMaxValue(this.maxValue) : this._convertMinMaxValue('24:00');\n\n        const cursor = this._getCursorPosition();\n\n        if (event.key) {\n            const key = event.key;\n            sign = key === KEYS.DOWN_ARROW || key === KEYS.DOWN_ARROW_IE ? -1 : 1;\n        }\n\n        if (event.deltaY) {\n            sign = event.deltaY < 0 ? 1 : -1;\n        }\n\n        if (!this.displayValue) {\n            this.value = min;\n            displayVal = this._formatTime(this.value, this.format);\n        } else {\n            const hDelta = this.itemsDelta.hours * 60 + (sign * this.value.getMinutes());\n            const mDelta = this.itemsDelta.minutes;\n\n            if (this.showHoursList && HOURS_POS.indexOf(cursor) !== -1) {\n                this.value = this._spinHours(currentVal, min, max, hDelta, sign);\n            }\n\n            if (this.showMinutesList &&\n                ((this.showHoursList && MINUTES_POS.indexOf(cursor) !== -1) || (!this.showHoursList && HOURS_POS.indexOf(cursor) !== -1))) {\n                    this.value = this._spinMinutes(currentVal, mDelta, sign);\n            }\n\n            if (this.showAmPmList) {\n                if (((!this.showHoursList || !this.showMinutesList) && MINUTES_POS.indexOf(cursor) !== -1) ||\n                    (this.showHoursList && this.showMinutesList &&  AMPM_POS.indexOf(cursor) !== -1)) {\n\n                        const sections = this.displayValue.split(/[\\s:]+/);\n                        sign = sections[sections.length - 1] === 'AM' ? 1 : -1;\n                        currentVal.setHours(currentVal.getHours() + (sign * 12));\n\n                        this.value = currentVal;\n                }\n            }\n\n            displayVal = this._formatTime(this.value, this.format);\n        }\n\n        // minor hack for preventing cursor jumping in IE\n        this._displayValue = this.inputFormat.transform(displayVal);\n        this.input.nativeElement.value = this._displayValue;\n        this._setCursorPosition(cursor);\n\n        requestAnimationFrame(() => {\n            this._setCursorPosition(cursor);\n        });\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxTimePickerComponent,\n        IgxHourItemDirective,\n        IgxItemListDirective,\n        IgxMinuteItemDirective,\n        IgxAmPmItemDirective,\n        IgxTimePickerTemplateDirective,\n        IgxTimePickerActionsDirective,\n        TimeDisplayFormatPipe,\n        TimeInputFormatPipe\n    ],\n    exports: [\n        IgxTimePickerComponent,\n        IgxTimePickerTemplateDirective,\n        IgxTimePickerActionsDirective,\n        TimeDisplayFormatPipe,\n        TimeInputFormatPipe\n    ],\n    imports: [\n        CommonModule,\n        IgxInputGroupModule,\n        IgxIconModule,\n        IgxButtonModule,\n        IgxMaskModule,\n        IgxToggleModule\n    ],\n    providers: []\n})\nexport class IgxTimePickerModule { }\n","import { animate, state, style, transition, trigger } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output\n} from '@angular/core';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Toast** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/toast.html)\n *\n * The Ignite UI Toast provides information and warning messages that are non-interactive and cannot\n * be dismissed by the user. Toasts can be displayed at the bottom, middle, or top of the page.\n *\n * Example:\n * ```html\n * <button (click)=\"toast.show()\">Show notification</button>\n * <igx-toast #toast\n *           message=\"Notification displayed\"\n *           displayTime=\"1000\">\n * </igx-toast>\n * ```\n */\n@Component({\n    animations: [\n        trigger('animate', [\n            state('show', style({\n                opacity: 1\n            })),\n            transition('* => show', animate('.20s ease')),\n            transition('show => *', animate('.40s ease-out'))\n        ])\n    ],\n    selector: 'igx-toast',\n    templateUrl: 'toast.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxToastComponent implements IToggleView, OnInit, OnDestroy {\n    private _isVisible = false;\n    /**\n     * Returns a list of available CSS classes.\n     * ```typescript\n     * let toastClasses =  this.toast.CSS_CLASSES;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public readonly CSS_CLASSES = {\n        IGX_TOAST_BOTTOM: 'igx-toast--bottom',\n        IGX_TOAST_MIDDLE: 'igx-toast--middle',\n        IGX_TOAST_TOP: 'igx-toast--top'\n    };\n\n    /**\n     * Sets/gets the `id` of the toast.\n     * If not set, the `id` will have value `\"igx-toast-0\"`.\n     * ```html\n     * <igx-toast id = \"my-first-toast\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastId = this.toast.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-toast-${NEXT_ID++}`;\n\n    /**\n     * Emits an event prior the toast is shown.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onShowing) = \"onShowing($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onShowing = new EventEmitter<IgxToastComponent>();\n\n    /**\n     * Emits an event when the toast is shown.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onShown) = \"onShown($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onShown = new EventEmitter<IgxToastComponent>();\n\n    /**\n     * Emits an event prior the toast is hidden.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onHiding) = \"onHiding($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onHiding = new EventEmitter<IgxToastComponent>();\n\n    /**\n     *  Emits an event when the toast is hidden.\n     *  Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onHidden) = \"onHidden($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onHidden = new EventEmitter<IgxToastComponent>();\n    /**\n     * Sets/gets the `role` attribute.\n     * If not set, `role` will have value `\"alert\"`.\n     * ```html\n     * <igx-toast [role] = \"'notify'\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastRole = this.toast.role;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public role = 'alert';\n    /**\n     * Sets/gets whether the toast will be hidden after the `displayTime` is over.\n     * Default value is `true`.\n     * ```html\n     * <igx-toast [autoHide] = \"false\"></igx-toast>\n     * ```\n     * ```typescript\n     * let autoHide = this.toast.autoHide;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public autoHide = true;\n\n    /**\n     * Sets/gets the duration of time span(in milliseconds) which the toast will be visible\n     * after it is being shown.\n     * Default value is `4000`.\n     * ```html\n     * <igx-toast [displayTime] = \"2500\"></igx-toast>\n     * ```\n     * ```typescript\n     * let displayTime = this.toast.displayTime;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public displayTime = 4000;\n\n    /**\n     * Enables/Disables the visibility of the toast.\n     * If not set, the `isVisible` attribute will have value `false`.\n     * ```html\n     * <igx-toast [isVisible] = \"true\"></igx-toast>\n     * ```\n     * ```typescript\n     * let isVisible = this.toast.isVisible;\n     * ```\n     *\n     * Two-way data binding.\n     * ```html\n     * <igx-toast [(isVisible)] = \"model.isVisible\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public get isVisible() {\n        return this._isVisible;\n    }\n    public set isVisible(value) {\n        this._isVisible = value;\n        this.isVisibleChange.emit(this._isVisible);\n\n    }\n\n    /**\n     *@hidden\n     */\n    @Output()\n    public isVisibleChange = new EventEmitter<boolean>();\n\n    /**\n     * Sets/gets the message that will be shown by the toast.\n     * ```html\n     * <igx-toast [message] = \"Notification\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastMessage = this.toast.message;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public message: string;\n\n    /**\n     * Sets/gets the position of the toast.\n     * If not set, the `position` attribute will have value `IgxToastPosition.Bottom`.\n     * ```html\n     * <igx-toast [position] = \"top\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastPosition = this.toast.position;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public position: IgxToastPosition = IgxToastPosition.Bottom;\n\n    /**\n     * Gets the nativeElement of the toast.\n     * ```typescript\n     * let nativeElement = this.toast.element;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n    /**\n     *@hidden\n     */\n    private timeoutId;\n\n    constructor(\n        private elementRef: ElementRef,\n        @Optional() private navService: IgxNavigationService) { }\n\n    /**\n     * Shows the toast.\n     * If `autoHide` is enabled, the toast will hide after `displayTime` is over.\n     * ```typescript\n     * this.toast.show();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public show(): void {\n        clearInterval(this.timeoutId);\n        this.onShowing.emit(this);\n        this.isVisible = true;\n\n        if (this.autoHide) {\n            this.timeoutId = setTimeout(() => {\n                this.hide();\n            }, this.displayTime);\n        }\n\n        this.onShown.emit(this);\n    }\n\n    /**\n     * Hides the toast.\n     * ```typescript\n     * this.toast.hide();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public hide(): void {\n        this.onHiding.emit(this);\n        this.isVisible = false;\n        this.onHidden.emit(this);\n\n        clearInterval(this.timeoutId);\n    }\n\n    /**\n     * Wraps @show() method due @IToggleView interface implementation.\n     * @hidden\n     */\n    public open() {\n        this.show();\n    }\n\n    /**\n     * Wraps @hide() method due @IToggleView interface implementation.\n     * @hidden\n     */\n    public close() {\n        this.hide();\n    }\n\n    /**\n     * Toggles the visible state of the toast.\n     * ```typescript\n     * this.toast.toggle();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public toggle() {\n        this.isVisible ? this.close() : this.open();\n    }\n    /**\n     * Sets/gets the class name of the toast based on the `position` value.\n     * ```typescript\n     * let className =  this.toast.mapPositionToClassName();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public mapPositionToClassName(): any {\n        if (this.position === IgxToastPosition.Top) {\n            return this.CSS_CLASSES.IGX_TOAST_TOP;\n        }\n\n        if (this.position === IgxToastPosition.Middle) {\n            return this.CSS_CLASSES.IGX_TOAST_MIDDLE;\n        }\n\n        if (this.position === IgxToastPosition.Bottom) {\n            return this.CSS_CLASSES.IGX_TOAST_BOTTOM;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public ngOnInit() {\n        if (this.navService && this.id) {\n            this.navService.add(this.id, this);\n        }\n    }\n    /**\n     *@hidden\n     */\n    public ngOnDestroy() {\n        if (this.navService && this.id) {\n            this.navService.remove(this.id);\n        }\n    }\n}\n\n/**\n * Enumeration for toast position\n * Can be:\n * Bottom\n * Middle\n * Top\n */\nexport enum IgxToastPosition {\n    Bottom,\n    Middle,\n    Top\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxToastComponent],\n    exports: [IgxToastComponent],\n    imports: [CommonModule]\n})\nexport class IgxToastModule { }\n"]}