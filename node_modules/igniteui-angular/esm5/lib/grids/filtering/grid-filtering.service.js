/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { IgxIconService } from '../../icon/icon.service';
import { FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';
import icons from './svgIcons';
import { FilteringLogic } from '../../data-operations/filtering-expression.interface';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { IgxDatePipeComponent } from '../grid.common';
import { GridBaseAPIService } from '../api.service';
/** @type {?} */
var FILTERING_ICONS_FONT_SET = 'filtering-icons';
/**
 * @hidden
 */
var /**
 * @hidden
 */
ExpressionUI = /** @class */ (function () {
    function ExpressionUI() {
        this.isSelected = false;
        this.isVisible = true;
    }
    return ExpressionUI;
}());
/**
 * @hidden
 */
export { ExpressionUI };
if (false) {
    /** @type {?} */
    ExpressionUI.prototype.expression;
    /** @type {?} */
    ExpressionUI.prototype.beforeOperator;
    /** @type {?} */
    ExpressionUI.prototype.afterOperator;
    /** @type {?} */
    ExpressionUI.prototype.isSelected;
    /** @type {?} */
    ExpressionUI.prototype.isVisible;
}
/**
 * @hidden
 */
var IgxFilteringService = /** @class */ (function () {
    function IgxFilteringService(gridAPI, iconService) {
        this.gridAPI = gridAPI;
        this.iconService = iconService;
        this.columnsWithComplexFilter = new Set();
        this.areEventsSubscribed = false;
        this.destroy$ = new Subject();
        this.isFiltering = false;
        this.columnToExpressionsMap = new Map();
        this.columnStartIndex = -1;
        this._filterIconsRegistered = false;
        this.isFilterRowVisible = false;
        this.filteredColumn = null;
        this.selectedExpression = null;
        this.columnToFocus = null;
        this.shouldFocusNext = false;
        this.columnToMoreIconHidden = new Map();
    }
    /**
     * @return {?}
     */
    IgxFilteringService.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy$.next(true);
        this.destroy$.complete();
    };
    Object.defineProperty(IgxFilteringService.prototype, "displayContainerWidth", {
        get: /**
         * @return {?}
         */
        function () {
            return parseInt(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth, 10);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxFilteringService.prototype, "displayContainerScrollLeft", {
        get: /**
         * @return {?}
         */
        function () {
            return this.grid.headerContainer.scrollPosition;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxFilteringService.prototype, "areAllColumnsInView", {
        get: /**
         * @return {?}
         */
        function () {
            return parseInt(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth, 10) === 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxFilteringService.prototype, "unpinnedFilterableColumns", {
        get: /**
         * @return {?}
         */
        function () {
            return this.grid.unpinnedColumns.filter(function (col) { return !col.columnGroup && col.filterable; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxFilteringService.prototype, "unpinnedColumns", {
        get: /**
         * @return {?}
         */
        function () {
            return this.grid.unpinnedColumns.filter(function (col) { return !col.columnGroup; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxFilteringService.prototype, "datePipe", {
        get: /**
         * @return {?}
         */
        function () {
            if (!this._datePipe) {
                this._datePipe = new IgxDatePipeComponent(this.grid.locale);
            }
            return this._datePipe;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Subscribe to grid's events.
     */
    /**
     * Subscribe to grid's events.
     * @return {?}
     */
    IgxFilteringService.prototype.subscribeToEvents = /**
     * Subscribe to grid's events.
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.areEventsSubscribed) {
            this.areEventsSubscribed = true;
            this.grid.onColumnResized.pipe(takeUntil(this.destroy$)).subscribe(function (eventArgs) {
                _this.updateFilteringCell(eventArgs.column);
            });
            this.grid.parentVirtDir.onChunkLoad.pipe(takeUntil(this.destroy$)).subscribe(function (eventArgs) {
                if (eventArgs.startIndex !== _this.columnStartIndex) {
                    _this.columnStartIndex = eventArgs.startIndex;
                    _this.grid.filterCellList.forEach(function (filterCell) {
                        filterCell.updateFilterCellArea();
                    });
                }
                if (_this.columnToFocus) {
                    _this.focusFilterCellChip(_this.columnToFocus, false);
                    _this.columnToFocus = null;
                }
            });
            this.grid.onColumnMovingEnd.pipe(takeUntil(this.destroy$)).subscribe(function () {
                _this.grid.filterCellList.forEach(function (filterCell) {
                    filterCell.updateFilterCellArea();
                });
            });
            this.grid.onColumnVisibilityChanged.pipe(takeUntil(this.destroy$)).subscribe(function (eventArgs) {
                if (_this.grid.filteringRow && _this.grid.filteringRow.column === eventArgs.column) {
                    _this.grid.filteringRow.close();
                }
            });
        }
    };
    /**
     * Internal method to create expressionsTree and filter grid used in both filter modes.
     */
    /**
     * Internal method to create expressionsTree and filter grid used in both filter modes.
     * @param {?} field
     * @param {?=} expressions
     * @return {?}
     */
    IgxFilteringService.prototype.filterInternal = /**
     * Internal method to create expressionsTree and filter grid used in both filter modes.
     * @param {?} field
     * @param {?=} expressions
     * @return {?}
     */
    function (field, expressions) {
        if (expressions === void 0) { expressions = null; }
        this.isFiltering = true;
        /** @type {?} */
        var expressionsTree;
        if (expressions instanceof FilteringExpressionsTree) {
            expressionsTree = expressions;
        }
        else {
            expressionsTree = this.createSimpleFilteringTree(field, expressions);
        }
        if (expressionsTree.filteringOperands.length === 0) {
            this.clearFilter(field);
        }
        else {
            this.filter(field, null, expressionsTree);
        }
        this.isFiltering = false;
    };
    /**
     * Execute filtering on the grid.
     */
    /**
     * Execute filtering on the grid.
     * @param {?} field
     * @param {?} value
     * @param {?=} conditionOrExpressionTree
     * @param {?=} ignoreCase
     * @return {?}
     */
    IgxFilteringService.prototype.filter = /**
     * Execute filtering on the grid.
     * @param {?} field
     * @param {?} value
     * @param {?=} conditionOrExpressionTree
     * @param {?=} ignoreCase
     * @return {?}
     */
    function (field, value, conditionOrExpressionTree, ignoreCase) {
        var _this = this;
        /** @type {?} */
        var col = this.gridAPI.get_column_by_name(field);
        /** @type {?} */
        var filteringIgnoreCase = ignoreCase || (col ? col.filteringIgnoreCase : false);
        if (conditionOrExpressionTree) {
            this.gridAPI.filter(field, value, conditionOrExpressionTree, filteringIgnoreCase);
        }
        else {
            /** @type {?} */
            var expressionsTreeForColumn = this.grid.filteringExpressionsTree.find(field);
            if (!expressionsTreeForColumn) {
                throw new Error('Invalid condition or Expression Tree!');
            }
            else if (expressionsTreeForColumn instanceof FilteringExpressionsTree) {
                this.gridAPI.filter(field, value, expressionsTreeForColumn, filteringIgnoreCase);
            }
            else {
                /** @type {?} */
                var expressionForColumn = (/** @type {?} */ (expressionsTreeForColumn));
                this.gridAPI.filter(field, value, expressionForColumn.condition, filteringIgnoreCase);
            }
        }
        // Wait for the change detection to update filtered data through the pipes and then emit the event.
        requestAnimationFrame(function () { return _this.grid.onFilteringDone.emit(col.filteringExpressionsTree); });
    };
    /**
     * Clear the filter of a given column.
     */
    /**
     * Clear the filter of a given column.
     * @param {?} field
     * @return {?}
     */
    IgxFilteringService.prototype.clearFilter = /**
     * Clear the filter of a given column.
     * @param {?} field
     * @return {?}
     */
    function (field) {
        var _this = this;
        if (field) {
            /** @type {?} */
            var column = this.gridAPI.get_column_by_name(field);
            if (!column) {
                return;
            }
        }
        this.isFiltering = true;
        this.gridAPI.clear_filter(field);
        // Wait for the change detection to update filtered data through the pipes and then emit the event.
        requestAnimationFrame(function () { return _this.grid.onFilteringDone.emit(null); });
        if (field) {
            /** @type {?} */
            var expressions = this.getExpressions(field);
            expressions.length = 0;
        }
        this.isFiltering = false;
    };
    /**
     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.
     */
    /**
     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.
     * @param {?} value
     * @param {?} condition
     * @param {?=} ignoreCase
     * @return {?}
     */
    IgxFilteringService.prototype.filterGlobal = /**
     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.
     * @param {?} value
     * @param {?} condition
     * @param {?=} ignoreCase
     * @return {?}
     */
    function (value, condition, ignoreCase) {
        var _this = this;
        this.gridAPI.filter_global(value, condition, ignoreCase);
        // Wait for the change detection to update filtered data through the pipes and then emit the event.
        requestAnimationFrame(function () { return _this.grid.onFilteringDone.emit(_this.grid.filteringExpressionsTree); });
    };
    /**
     * Register filtering SVG icons in the icon service.
     */
    /**
     * Register filtering SVG icons in the icon service.
     * @return {?}
     */
    IgxFilteringService.prototype.registerSVGIcons = /**
     * Register filtering SVG icons in the icon service.
     * @return {?}
     */
    function () {
        var e_1, _a;
        if (!this._filterIconsRegistered) {
            try {
                for (var icons_1 = tslib_1.__values(icons), icons_1_1 = icons_1.next(); !icons_1_1.done; icons_1_1 = icons_1.next()) {
                    var icon = icons_1_1.value;
                    if (!this.iconService.isSvgIconCached(icon.name, FILTERING_ICONS_FONT_SET)) {
                        this.iconService.addSvgIconFromText(icon.name, icon.value, FILTERING_ICONS_FONT_SET);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (icons_1_1 && !icons_1_1.done && (_a = icons_1.return)) _a.call(icons_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            this._filterIconsRegistered = true;
        }
    };
    /**
     * Returns the ExpressionUI array for a given column.
     */
    /**
     * Returns the ExpressionUI array for a given column.
     * @param {?} columnId
     * @return {?}
     */
    IgxFilteringService.prototype.getExpressions = /**
     * Returns the ExpressionUI array for a given column.
     * @param {?} columnId
     * @return {?}
     */
    function (columnId) {
        if (!this.columnToExpressionsMap.has(columnId)) {
            /** @type {?} */
            var column = this.grid.columns.find(function (col) { return col.field === columnId; });
            /** @type {?} */
            var expressionUIs = new Array();
            if (column) {
                this.generateExpressionsList(column.filteringExpressionsTree, this.grid.filteringExpressionsTree.operator, expressionUIs);
                this.columnToExpressionsMap.set(columnId, expressionUIs);
            }
            return expressionUIs;
        }
        return this.columnToExpressionsMap.get(columnId);
    };
    /**
     * Recreates all ExpressionUIs for all columns. Executed after filtering to refresh the cache.
     */
    /**
     * Recreates all ExpressionUIs for all columns. Executed after filtering to refresh the cache.
     * @return {?}
     */
    IgxFilteringService.prototype.refreshExpressions = /**
     * Recreates all ExpressionUIs for all columns. Executed after filtering to refresh the cache.
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.isFiltering) {
            this.columnsWithComplexFilter.clear();
            this.columnToExpressionsMap.forEach(function (value, key) {
                /** @type {?} */
                var column = _this.grid.columns.find(function (col) { return col.field === key; });
                if (column) {
                    value.length = 0;
                    _this.generateExpressionsList(column.filteringExpressionsTree, _this.grid.filteringExpressionsTree.operator, value);
                    /** @type {?} */
                    var isComplex = _this.isFilteringTreeComplex(column.filteringExpressionsTree);
                    if (isComplex) {
                        _this.columnsWithComplexFilter.add(key);
                    }
                    _this.updateFilteringCell(column);
                }
                else {
                    _this.columnToExpressionsMap.delete(key);
                }
            });
        }
    };
    /**
     * Remove an ExpressionUI for a given column.
     */
    /**
     * Remove an ExpressionUI for a given column.
     * @param {?} columnId
     * @param {?} indexToRemove
     * @return {?}
     */
    IgxFilteringService.prototype.removeExpression = /**
     * Remove an ExpressionUI for a given column.
     * @param {?} columnId
     * @param {?} indexToRemove
     * @return {?}
     */
    function (columnId, indexToRemove) {
        /** @type {?} */
        var expressionsList = this.getExpressions(columnId);
        if (indexToRemove === 0 && expressionsList.length > 1) {
            expressionsList[1].beforeOperator = null;
        }
        else if (indexToRemove === expressionsList.length - 1) {
            expressionsList[indexToRemove - 1].afterOperator = null;
        }
        else {
            expressionsList[indexToRemove - 1].afterOperator = expressionsList[indexToRemove + 1].beforeOperator;
            expressionsList[0].beforeOperator = null;
            expressionsList[expressionsList.length - 1].afterOperator = null;
        }
        expressionsList.splice(indexToRemove, 1);
    };
    /**
     * Generate filtering tree for a given column from existing ExpressionUIs.
     */
    /**
     * Generate filtering tree for a given column from existing ExpressionUIs.
     * @param {?} columnId
     * @param {?=} expressionUIList
     * @return {?}
     */
    IgxFilteringService.prototype.createSimpleFilteringTree = /**
     * Generate filtering tree for a given column from existing ExpressionUIs.
     * @param {?} columnId
     * @param {?=} expressionUIList
     * @return {?}
     */
    function (columnId, expressionUIList) {
        if (expressionUIList === void 0) { expressionUIList = null; }
        /** @type {?} */
        var expressionsList = expressionUIList ? expressionUIList : this.getExpressions(columnId);
        /** @type {?} */
        var expressionsTree = new FilteringExpressionsTree(FilteringLogic.Or, columnId);
        /** @type {?} */
        var currAndBranch;
        /** @type {?} */
        var currExpressionUI;
        for (var i = 0; i < expressionsList.length; i++) {
            currExpressionUI = expressionsList[i];
            if (!currExpressionUI.expression.condition.isUnary && currExpressionUI.expression.searchVal === null) {
                if (currExpressionUI.afterOperator === FilteringLogic.And && !currAndBranch) {
                    currAndBranch = new FilteringExpressionsTree(FilteringLogic.And, columnId);
                    expressionsTree.filteringOperands.push(currAndBranch);
                }
                continue;
            }
            if ((currExpressionUI.beforeOperator === undefined || currExpressionUI.beforeOperator === null ||
                currExpressionUI.beforeOperator === FilteringLogic.Or) &&
                currExpressionUI.afterOperator === FilteringLogic.And) {
                currAndBranch = new FilteringExpressionsTree(FilteringLogic.And, columnId);
                expressionsTree.filteringOperands.push(currAndBranch);
                currAndBranch.filteringOperands.push(currExpressionUI.expression);
            }
            else if (currExpressionUI.beforeOperator === FilteringLogic.And) {
                currAndBranch.filteringOperands.push(currExpressionUI.expression);
            }
            else {
                expressionsTree.filteringOperands.push(currExpressionUI.expression);
                currAndBranch = null;
            }
        }
        return expressionsTree;
    };
    /**
     * Returns whether a complex filter is applied to a given column.
     */
    /**
     * Returns whether a complex filter is applied to a given column.
     * @param {?} columnId
     * @return {?}
     */
    IgxFilteringService.prototype.isFilterComplex = /**
     * Returns whether a complex filter is applied to a given column.
     * @param {?} columnId
     * @return {?}
     */
    function (columnId) {
        if (this.columnsWithComplexFilter.has(columnId)) {
            return true;
        }
        /** @type {?} */
        var column = this.grid.columns.find(function (col) { return col.field === columnId; });
        /** @type {?} */
        var isComplex = column && this.isFilteringTreeComplex(column.filteringExpressionsTree);
        if (isComplex) {
            this.columnsWithComplexFilter.add(columnId);
        }
        return isComplex;
    };
    /**
     * Returns the string representation of the FilteringLogic operator.
     */
    /**
     * Returns the string representation of the FilteringLogic operator.
     * @param {?} operator
     * @return {?}
     */
    IgxFilteringService.prototype.getOperatorAsString = /**
     * Returns the string representation of the FilteringLogic operator.
     * @param {?} operator
     * @return {?}
     */
    function (operator) {
        if (operator === 0) {
            return this.grid.resourceStrings.igx_grid_filter_operator_and;
        }
        else {
            return this.grid.resourceStrings.igx_grid_filter_operator_or;
        }
    };
    /**
     * Generate the label of a chip from a given filtering expression.
     */
    /**
     * Generate the label of a chip from a given filtering expression.
     * @param {?} expression
     * @return {?}
     */
    IgxFilteringService.prototype.getChipLabel = /**
     * Generate the label of a chip from a given filtering expression.
     * @param {?} expression
     * @return {?}
     */
    function (expression) {
        if (expression.condition.isUnary) {
            return this.grid.resourceStrings["igx_grid_filter_" + expression.condition.name] || expression.condition.name;
        }
        else if (expression.searchVal instanceof Date) {
            return this.datePipe.transform(expression.searchVal, this.grid.locale);
        }
        else {
            return expression.searchVal;
        }
    };
    /**
     * Updates the content of a filterCell.
     */
    /**
     * Updates the content of a filterCell.
     * @param {?} column
     * @return {?}
     */
    IgxFilteringService.prototype.updateFilteringCell = /**
     * Updates the content of a filterCell.
     * @param {?} column
     * @return {?}
     */
    function (column) {
        /** @type {?} */
        var filterCell = column.filterCell;
        if (filterCell) {
            filterCell.updateFilterCellArea();
        }
    };
    /**
     * Focus a chip in a filterCell.
     */
    /**
     * Focus a chip in a filterCell.
     * @param {?} column
     * @param {?} focusFirst
     * @return {?}
     */
    IgxFilteringService.prototype.focusFilterCellChip = /**
     * Focus a chip in a filterCell.
     * @param {?} column
     * @param {?} focusFirst
     * @return {?}
     */
    function (column, focusFirst) {
        /** @type {?} */
        var filterCell = column.filterCell;
        if (filterCell) {
            filterCell.focusChip(focusFirst);
        }
    };
    /**
     * Focus the close button in the filtering row.
     */
    /**
     * Focus the close button in the filtering row.
     * @return {?}
     */
    IgxFilteringService.prototype.focusFilterRowCloseButton = /**
     * Focus the close button in the filtering row.
     * @return {?}
     */
    function () {
        this.grid.filteringRow.closeButton.nativeElement.focus();
    };
    Object.defineProperty(IgxFilteringService.prototype, "filteredData", {
        get: /**
         * @return {?}
         */
        function () {
            return this.grid.filteredData;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Scrolls to a filterCell.
     */
    /**
     * Scrolls to a filterCell.
     * @param {?} column
     * @param {?} shouldFocusNext
     * @return {?}
     */
    IgxFilteringService.prototype.scrollToFilterCell = /**
     * Scrolls to a filterCell.
     * @param {?} column
     * @param {?} shouldFocusNext
     * @return {?}
     */
    function (column, shouldFocusNext) {
        this.grid.nativeElement.focus({ preventScroll: true });
        this.columnToFocus = column;
        this.shouldFocusNext = shouldFocusNext;
        /** @type {?} */
        var currentColumnRight = 0;
        /** @type {?} */
        var currentColumnLeft = 0;
        for (var index = 0; index < this.unpinnedColumns.length; index++) {
            currentColumnRight += parseInt(this.unpinnedColumns[index].width, 10);
            if (this.unpinnedColumns[index] === column) {
                currentColumnLeft = currentColumnRight - parseInt(this.unpinnedColumns[index].width, 10);
                break;
            }
        }
        /** @type {?} */
        var forOfDir = this.grid.headerContainer;
        /** @type {?} */
        var width = this.displayContainerWidth + this.displayContainerScrollLeft;
        if (shouldFocusNext) {
            forOfDir.scrollPosition += currentColumnRight - width;
        }
        else {
            forOfDir.scrollPosition = currentColumnLeft;
        }
    };
    /**
     * @private
     * @param {?} expressions
     * @return {?}
     */
    IgxFilteringService.prototype.isFilteringTreeComplex = /**
     * @private
     * @param {?} expressions
     * @return {?}
     */
    function (expressions) {
        if (!expressions) {
            return false;
        }
        if (expressions instanceof FilteringExpressionsTree) {
            /** @type {?} */
            var expressionsTree = (/** @type {?} */ (expressions));
            if (expressionsTree.operator === FilteringLogic.Or) {
                /** @type {?} */
                var andOperatorsCount = this.getChildAndOperatorsCount(expressionsTree);
                // having more that 'And' and operator in the sub-tree means that the filter could not be represented without parentheses.
                return andOperatorsCount > 1;
            }
            /** @type {?} */
            var isComplex = false;
            for (var i = 0; i < expressionsTree.filteringOperands.length; i++) {
                isComplex = isComplex || this.isFilteringTreeComplex(expressionsTree.filteringOperands[i]);
            }
            return isComplex;
        }
        return false;
    };
    /**
     * @private
     * @param {?} expressions
     * @return {?}
     */
    IgxFilteringService.prototype.getChildAndOperatorsCount = /**
     * @private
     * @param {?} expressions
     * @return {?}
     */
    function (expressions) {
        /** @type {?} */
        var count = 0;
        /** @type {?} */
        var operand;
        for (var i = 0; i < expressions.filteringOperands.length; i++) {
            operand = expressions[i];
            if (operand instanceof FilteringExpressionsTree) {
                if (operand.operator === FilteringLogic.And) {
                    count++;
                }
                count = count + this.getChildAndOperatorsCount(operand);
            }
        }
        return count;
    };
    /**
     * @param {?} expressions
     * @param {?} operator
     * @param {?} expressionsUIs
     * @return {?}
     */
    IgxFilteringService.prototype.generateExpressionsList = /**
     * @param {?} expressions
     * @param {?} operator
     * @param {?} expressionsUIs
     * @return {?}
     */
    function (expressions, operator, expressionsUIs) {
        this.generateExpressionsListRecursive(expressions, operator, expressionsUIs);
        // The beforeOperator of the first expression and the afterOperator of the last expression should be null
        if (expressionsUIs.length) {
            expressionsUIs[expressionsUIs.length - 1].afterOperator = null;
        }
    };
    /**
     * @private
     * @param {?} expressions
     * @param {?} operator
     * @param {?} expressionsUIs
     * @return {?}
     */
    IgxFilteringService.prototype.generateExpressionsListRecursive = /**
     * @private
     * @param {?} expressions
     * @param {?} operator
     * @param {?} expressionsUIs
     * @return {?}
     */
    function (expressions, operator, expressionsUIs) {
        if (!expressions) {
            return;
        }
        if (expressions instanceof FilteringExpressionsTree) {
            /** @type {?} */
            var expressionsTree = (/** @type {?} */ (expressions));
            for (var i = 0; i < expressionsTree.filteringOperands.length; i++) {
                this.generateExpressionsListRecursive(expressionsTree.filteringOperands[i], expressionsTree.operator, expressionsUIs);
            }
            if (expressionsUIs.length) {
                expressionsUIs[expressionsUIs.length - 1].afterOperator = operator;
            }
        }
        else {
            /** @type {?} */
            var exprUI = new ExpressionUI();
            exprUI.expression = (/** @type {?} */ (expressions));
            exprUI.afterOperator = operator;
            /** @type {?} */
            var prevExprUI = expressionsUIs[expressionsUIs.length - 1];
            if (prevExprUI) {
                exprUI.beforeOperator = prevExprUI.afterOperator;
            }
            expressionsUIs.push(exprUI);
        }
    };
    /**
     * @return {?}
     */
    IgxFilteringService.prototype.isFilteringExpressionsTreeEmpty = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var expressionTree = this.grid.filteringExpressionsTree;
        if (FilteringExpressionsTree.empty(expressionTree)) {
            return true;
        }
        /** @type {?} */
        var expr;
        for (var i = 0; i < expressionTree.filteringOperands.length; i++) {
            expr = expressionTree.filteringOperands[i];
            if ((expr instanceof FilteringExpressionsTree)) {
                /** @type {?} */
                var exprTree = (/** @type {?} */ (expr));
                if (exprTree.filteringOperands && exprTree.filteringOperands.length) {
                    return false;
                }
            }
            else {
                return false;
            }
        }
        return true;
    };
    IgxFilteringService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    IgxFilteringService.ctorParameters = function () { return [
        { type: GridBaseAPIService },
        { type: IgxIconService }
    ]; };
    return IgxFilteringService;
}());
export { IgxFilteringService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxFilteringService.prototype.columnsWithComplexFilter;
    /**
     * @type {?}
     * @private
     */
    IgxFilteringService.prototype.areEventsSubscribed;
    /**
     * @type {?}
     * @private
     */
    IgxFilteringService.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    IgxFilteringService.prototype.isFiltering;
    /**
     * @type {?}
     * @private
     */
    IgxFilteringService.prototype.columnToExpressionsMap;
    /**
     * @type {?}
     * @private
     */
    IgxFilteringService.prototype._datePipe;
    /**
     * @type {?}
     * @private
     */
    IgxFilteringService.prototype.columnStartIndex;
    /**
     * @type {?}
     * @private
     */
    IgxFilteringService.prototype._filterIconsRegistered;
    /** @type {?} */
    IgxFilteringService.prototype.gridId;
    /** @type {?} */
    IgxFilteringService.prototype.isFilterRowVisible;
    /** @type {?} */
    IgxFilteringService.prototype.filteredColumn;
    /** @type {?} */
    IgxFilteringService.prototype.selectedExpression;
    /** @type {?} */
    IgxFilteringService.prototype.columnToFocus;
    /** @type {?} */
    IgxFilteringService.prototype.shouldFocusNext;
    /** @type {?} */
    IgxFilteringService.prototype.columnToMoreIconHidden;
    /** @type {?} */
    IgxFilteringService.prototype.grid;
    /**
     * @type {?}
     * @private
     */
    IgxFilteringService.prototype.gridAPI;
    /**
     * @type {?}
     * @private
     */
    IgxFilteringService.prototype.iconService;
}
//# sourceMappingURL=data:application/json;base64,