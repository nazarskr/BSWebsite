/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ChangeDetectionStrategy, Input, Output, EventEmitter, ChangeDetectorRef, ViewChild } from '@angular/core';
import { IgxColumnComponent } from '../../column.component';
import { ExpressionUI } from '../grid-filtering.service';
import { IgxButtonGroupComponent } from '../../../buttonGroup/buttonGroup.component';
import { IgxDropDownComponent } from '../../../drop-down/index';
import { IgxInputGroupComponent, IgxInputDirective } from '../../../input-group/index';
import { DataType } from '../../../data-operations/data-util';
import { ConnectedPositioningStrategy, CloseScrollStrategy } from '../../../services/index';
import { DisplayDensity } from '../../../core/density';
/**
 * @hidden
 * @record
 */
export function ILogicOperatorChangedArgs() { }
if (false) {
    /** @type {?} */
    ILogicOperatorChangedArgs.prototype.target;
    /** @type {?} */
    ILogicOperatorChangedArgs.prototype.newValue;
}
/**
 * @hidden
 */
var IgxExcelStyleDefaultExpressionComponent = /** @class */ (function () {
    function IgxExcelStyleDefaultExpressionComponent(cdr) {
        this.cdr = cdr;
        this._dropDownOverlaySettings = {
            closeOnOutsideClick: true,
            modal: false,
            positionStrategy: new ConnectedPositioningStrategy(),
            scrollStrategy: new CloseScrollStrategy()
        };
        this.onExpressionRemoved = new EventEmitter();
        this.onLogicOperatorChanged = new EventEmitter();
    }
    Object.defineProperty(IgxExcelStyleDefaultExpressionComponent.prototype, "inputValuesElement", {
        get: /**
         * @protected
         * @return {?}
         */
        function () {
            return this.inputValuesDirective;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxExcelStyleDefaultExpressionComponent.prototype, "isLast", {
        get: /**
         * @return {?}
         */
        function () {
            return this.expressionsList[this.expressionsList.length - 1] === this.expressionUI;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxExcelStyleDefaultExpressionComponent.prototype, "isSingle", {
        get: /**
         * @return {?}
         */
        function () {
            return this.expressionsList.length === 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxExcelStyleDefaultExpressionComponent.prototype, "inputConditionsPlaceholder", {
        get: /**
         * @return {?}
         */
        function () {
            return this.grid.resourceStrings['igx_grid_filter_condition_placeholder'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxExcelStyleDefaultExpressionComponent.prototype, "inputValuePlaceholder", {
        get: /**
         * @return {?}
         */
        function () {
            return this.grid.resourceStrings['igx_grid_filter_row_placeholder'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxExcelStyleDefaultExpressionComponent.prototype, "type", {
        get: /**
         * @return {?}
         */
        function () {
            switch (this.column.dataType) {
                case DataType.Number:
                    return 'number';
                default:
                    return 'text';
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IgxExcelStyleDefaultExpressionComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this._dropDownOverlaySettings.outlet = this.column.grid.outletDirective;
        this._dropDownOverlaySettings.positionStrategy.settings.target = this.inputGroupConditions.element.nativeElement;
    };
    /**
     * @return {?}
     */
    IgxExcelStyleDefaultExpressionComponent.prototype.focus = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // use requestAnimationFrame to focus the values input because when initializing the component
        // datepicker's input group is not yet fully initialized
        requestAnimationFrame(function () { return _this.inputValuesElement.focus(); });
    };
    /**
     * @param {?} conditionName
     * @return {?}
     */
    IgxExcelStyleDefaultExpressionComponent.prototype.isConditionSelected = /**
     * @param {?} conditionName
     * @return {?}
     */
    function (conditionName) {
        return this.expressionUI.expression.condition && this.expressionUI.expression.condition.name === conditionName;
    };
    /**
     * @param {?} condition
     * @return {?}
     */
    IgxExcelStyleDefaultExpressionComponent.prototype.getConditionName = /**
     * @param {?} condition
     * @return {?}
     */
    function (condition) {
        return condition ? this.translateCondition(condition.name) : null;
    };
    /**
     * @return {?}
     */
    IgxExcelStyleDefaultExpressionComponent.prototype.getInputWidth = /**
     * @return {?}
     */
    function () {
        return this.inputGroupConditions.element.nativeElement.offsetWidth + 'px';
    };
    Object.defineProperty(IgxExcelStyleDefaultExpressionComponent.prototype, "conditions", {
        get: /**
         * @return {?}
         */
        function () {
            return this.column.filters.conditionList();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @return {?}
     */
    IgxExcelStyleDefaultExpressionComponent.prototype.translateCondition = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return this.grid.resourceStrings["igx_grid_filter_" + this.getCondition(value).name] || value;
    };
    /**
     * @return {?}
     */
    IgxExcelStyleDefaultExpressionComponent.prototype.getIconName = /**
     * @return {?}
     */
    function () {
        if (this.column.dataType === DataType.Boolean && this.expressionUI.expression.condition === null) {
            return this.getCondition(this.conditions[0]).iconName;
        }
        else if (!this.expressionUI.expression.condition) {
            return 'filter_list';
        }
        else {
            return this.expressionUI.expression.condition.iconName;
        }
    };
    /**
     * @return {?}
     */
    IgxExcelStyleDefaultExpressionComponent.prototype.toggleCustomDialogDropDown = /**
     * @return {?}
     */
    function () {
        this.dropdownConditions.toggle(this._dropDownOverlaySettings);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    IgxExcelStyleDefaultExpressionComponent.prototype.getCondition = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return this.column.filters.condition(value);
    };
    /**
     * @param {?} eventArgs
     * @return {?}
     */
    IgxExcelStyleDefaultExpressionComponent.prototype.onConditionsChanged = /**
     * @param {?} eventArgs
     * @return {?}
     */
    function (eventArgs) {
        /** @type {?} */
        var value = ((/** @type {?} */ (eventArgs.newSelection))).value;
        this.expressionUI.expression.condition = this.getCondition(value);
        this.focus();
    };
    /**
     * @param {?} eventArgs
     * @return {?}
     */
    IgxExcelStyleDefaultExpressionComponent.prototype.onValuesInput = /**
     * @param {?} eventArgs
     * @return {?}
     */
    function (eventArgs) {
        this.expressionUI.expression.searchVal = this.transformValue(eventArgs.target.value);
    };
    /**
     * @param {?} eventArgs
     * @param {?} buttonIndex
     * @return {?}
     */
    IgxExcelStyleDefaultExpressionComponent.prototype.onLogicOperatorButtonClicked = /**
     * @param {?} eventArgs
     * @param {?} buttonIndex
     * @return {?}
     */
    function (eventArgs, buttonIndex) {
        if (this.logicOperatorButtonGroup.selectedButtons.length === 0) {
            eventArgs.stopPropagation();
            this.logicOperatorButtonGroup.selectButton(buttonIndex);
        }
        else {
            this.onLogicOperatorChanged.emit({
                target: this.expressionUI,
                newValue: (/** @type {?} */ (buttonIndex))
            });
        }
    };
    /**
     * @param {?} eventArgs
     * @param {?} buttonIndex
     * @return {?}
     */
    IgxExcelStyleDefaultExpressionComponent.prototype.onLogicOperatorKeyDown = /**
     * @param {?} eventArgs
     * @param {?} buttonIndex
     * @return {?}
     */
    function (eventArgs, buttonIndex) {
        if (eventArgs.key === "Enter" /* ENTER */) {
            this.logicOperatorButtonGroup.selectButton(buttonIndex);
            this.onLogicOperatorChanged.emit({
                target: this.expressionUI,
                newValue: (/** @type {?} */ (buttonIndex))
            });
        }
    };
    /**
     * @return {?}
     */
    IgxExcelStyleDefaultExpressionComponent.prototype.onRemoveButtonClick = /**
     * @return {?}
     */
    function () {
        this.onExpressionRemoved.emit(this.expressionUI);
    };
    /**
     * @param {?} eventArgs
     * @return {?}
     */
    IgxExcelStyleDefaultExpressionComponent.prototype.onInputConditionsKeyDown = /**
     * @param {?} eventArgs
     * @return {?}
     */
    function (eventArgs) {
        if (eventArgs.altKey && (eventArgs.key === "ArrowDown" /* DOWN_ARROW */ || eventArgs.key === "Down" /* DOWN_ARROW_IE */)) {
            this.toggleCustomDialogDropDown();
        }
        if (eventArgs.key === "Tab" /* TAB */ && eventArgs.shiftKey && this.expressionsList[0] === this.expressionUI) {
            eventArgs.preventDefault();
        }
        event.stopPropagation();
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    IgxExcelStyleDefaultExpressionComponent.prototype.transformValue = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.column.dataType === DataType.Number) {
            value = parseFloat(value);
        }
        else if (this.column.dataType === DataType.Boolean) {
            value = Boolean(value);
        }
        return value;
    };
    IgxExcelStyleDefaultExpressionComponent.decorators = [
        { type: Component, args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    selector: 'igx-excel-style-default-expression',
                    template: "<igx-drop-down\n    #dropdownConditions\n    [maxHeight]=\"'200px'\"\n    [width]=\"getInputWidth()\"\n    [displayDensity]=\"displayDensity\"\n    (onSelection)=\"onConditionsChanged($event)\">\n    <igx-drop-down-item *ngFor=\"let condition of conditions\" [value]=\"condition\" [selected]=\"isConditionSelected(condition)\">\n        <igx-icon fontSet=\"filtering-icons\" [name]=\"getCondition(condition).iconName\"></igx-icon>\n        <span>{{ translateCondition(condition) }}</span>\n    </igx-drop-down-item>\n</igx-drop-down>\n\n<igx-input-group\n    #inputGroupConditions\n    (click)=\"toggleCustomDialogDropDown()\"\n    type=\"box\"\n    [displayDensity]=\"displayDensity\"\n    [supressInputAutofocus]=\"true\">\n\n    <igx-prefix>\n        <igx-icon *ngIf=\"expressionUI.expression.condition\" fontSet=\"filtering-icons\" [name]=\"getIconName()\"></igx-icon>\n        <igx-icon *ngIf=\"!expressionUI.expression.condition\">filter_list</igx-icon>\n    </igx-prefix>\n\n    <input\n        igxInput\n        (keydown)=\"onInputConditionsKeyDown($event)\"\n        [igxDropDownItemNavigation]=\"dropdownConditions\"\n        tabindex=\"0\"\n        [placeholder]=\"inputConditionsPlaceholder\"\n        autocomplete=\"off\"\n        [value]=\"getConditionName(expressionUI.expression.condition)\"\n        [readonly]=\"true\"\n    />\n</igx-input-group>\n\n<igx-input-group #inputGroupValues type=\"box\" [displayDensity]=\"displayDensity\" [supressInputAutofocus]=\"true\">\n    <input\n        #inputValues\n        igxInput\n        [type]=\"type\"\n        tabindex=\"0\"\n        [placeholder]=\"inputValuePlaceholder\"\n        [disabled]=\"expressionUI.expression.condition && expressionUI.expression.condition.isUnary\"\n        autocomplete=\"off\"\n        [value]=\"expressionUI.expression.searchVal\"\n        (input)=\"onValuesInput($event)\"\n    />\n</igx-input-group>\n\n<button (click)=\"onRemoveButtonClick()\" igxButton=\"icon\" [displayDensity]=\"displayDensity\" *ngIf=\"!isSingle\">\n    <igx-icon>cancel</igx-icon>\n</button>\n\n<igx-buttongroup #logicOperatorButtonGroup\n    *ngIf=\"!isLast\"\n    [multiSelection]=\"false\">\n    <span igxButton [displayDensity]=\"displayDensity\"\n        tabindex=\"0\"\n        #andButton\n        (keydown)=\"onLogicOperatorKeyDown($event, 0)\"\n        [selected]=\"expressionUI.afterOperator === 0\"\n        type=\"button\"\n        (click)=\"onLogicOperatorButtonClicked($event, 0)\">\n        {{ grid.resourceStrings.igx_grid_filter_operator_and }}\n    </span>\n\n    <span igxButton [displayDensity]=\"displayDensity\"\n        tabindex=\"0\"\n        #orButton\n        (keydown)=\"onLogicOperatorKeyDown($event, 1)\"\n        [selected]=\"expressionUI.afterOperator === 1\"\n        type=\"button\"\n        (click)=\"onLogicOperatorButtonClicked($event, 1)\">\n        {{ grid.resourceStrings.igx_grid_filter_operator_or }}\n    </span>\n</igx-buttongroup>\n"
                }] }
    ];
    /** @nocollapse */
    IgxExcelStyleDefaultExpressionComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    IgxExcelStyleDefaultExpressionComponent.propDecorators = {
        column: [{ type: Input }],
        expressionUI: [{ type: Input }],
        expressionsList: [{ type: Input }],
        grid: [{ type: Input }],
        displayDensity: [{ type: Input }],
        onExpressionRemoved: [{ type: Output }],
        onLogicOperatorChanged: [{ type: Output }],
        inputGroupConditions: [{ type: ViewChild, args: ['inputGroupConditions', { read: IgxInputGroupComponent, static: true },] }],
        inputValuesDirective: [{ type: ViewChild, args: ['inputValues', { read: IgxInputDirective, static: true },] }],
        dropdownConditions: [{ type: ViewChild, args: ['dropdownConditions', { read: IgxDropDownComponent, static: true },] }],
        logicOperatorButtonGroup: [{ type: ViewChild, args: ['logicOperatorButtonGroup', { read: IgxButtonGroupComponent, static: false },] }]
    };
    return IgxExcelStyleDefaultExpressionComponent;
}());
export { IgxExcelStyleDefaultExpressionComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxExcelStyleDefaultExpressionComponent.prototype._dropDownOverlaySettings;
    /** @type {?} */
    IgxExcelStyleDefaultExpressionComponent.prototype.column;
    /** @type {?} */
    IgxExcelStyleDefaultExpressionComponent.prototype.expressionUI;
    /** @type {?} */
    IgxExcelStyleDefaultExpressionComponent.prototype.expressionsList;
    /** @type {?} */
    IgxExcelStyleDefaultExpressionComponent.prototype.grid;
    /** @type {?} */
    IgxExcelStyleDefaultExpressionComponent.prototype.displayDensity;
    /** @type {?} */
    IgxExcelStyleDefaultExpressionComponent.prototype.onExpressionRemoved;
    /** @type {?} */
    IgxExcelStyleDefaultExpressionComponent.prototype.onLogicOperatorChanged;
    /**
     * @type {?}
     * @protected
     */
    IgxExcelStyleDefaultExpressionComponent.prototype.inputGroupConditions;
    /**
     * @type {?}
     * @protected
     */
    IgxExcelStyleDefaultExpressionComponent.prototype.inputValuesDirective;
    /**
     * @type {?}
     * @protected
     */
    IgxExcelStyleDefaultExpressionComponent.prototype.dropdownConditions;
    /**
     * @type {?}
     * @protected
     */
    IgxExcelStyleDefaultExpressionComponent.prototype.logicOperatorButtonGroup;
    /** @type {?} */
    IgxExcelStyleDefaultExpressionComponent.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,