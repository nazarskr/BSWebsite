/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { IgxGridExcelStyleFilteringComponent } from './grid.excel-style-filtering.component';
import { cloneArray } from '../../../core/utils';
/**
 * @hidden
 */
var IgxExcelStyleSearchFilterPipe = /** @class */ (function () {
    function IgxExcelStyleSearchFilterPipe(esf) {
        this.esf = esf;
    }
    /**
     * @param {?} items
     * @param {?} searchText
     * @return {?}
     */
    IgxExcelStyleSearchFilterPipe.prototype.transform = /**
     * @param {?} items
     * @param {?} searchText
     * @return {?}
     */
    function (items, searchText) {
        if (!items || !items.length) {
            return [];
        }
        if (!searchText) {
            this.esf.excelStyleSearch.filteredData = null;
            return items;
        }
        searchText = searchText.toLowerCase();
        /** @type {?} */
        var result = items.filter(function (it, i) { return (i === 0 && it.isSpecial) ||
            (it.value !== null && it.value !== undefined) &&
                it.value.toString().toLowerCase().indexOf(searchText) > -1; });
        // If 'result' contains the 'Select All' item and at least one more, we use it as a 'finalResult',
        // otherwise we use an empty array as a 'finalResult' of the filtering.
        /** @type {?} */
        var finalResult = result.length > 1 ? result : [];
        // Update the filteredData of the search component.
        this.esf.excelStyleSearch.filteredData = cloneArray(finalResult);
        this.esf.cdr.detectChanges();
        return finalResult;
    };
    IgxExcelStyleSearchFilterPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'excelStyleSearchFilter'
                },] }
    ];
    /** @nocollapse */
    IgxExcelStyleSearchFilterPipe.ctorParameters = function () { return [
        { type: IgxGridExcelStyleFilteringComponent }
    ]; };
    return IgxExcelStyleSearchFilterPipe;
}());
export { IgxExcelStyleSearchFilterPipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxExcelStyleSearchFilterPipe.prototype.esf;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhjZWwtc3R5bGUtc2VhcmNoLnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2dyaWRzL2ZpbHRlcmluZy9leGNlbC1zdHlsZS9leGNlbC1zdHlsZS1zZWFyY2gucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFrQixtQ0FBbUMsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQzdHLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7OztBQUtqRDtJQUtJLHVDQUFvQixHQUF3QztRQUF4QyxRQUFHLEdBQUgsR0FBRyxDQUFxQztJQUFJLENBQUM7Ozs7OztJQUVqRSxpREFBUzs7Ozs7SUFBVCxVQUFVLEtBQXVCLEVBQUUsVUFBa0I7UUFDakQsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDekIsT0FBTyxFQUFFLENBQUM7U0FDYjtRQUVELElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDYixJQUFJLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7WUFDOUMsT0FBTyxLQUFLLENBQUM7U0FDaEI7UUFFRCxVQUFVLEdBQUcsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDOztZQUNoQyxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFDLEVBQUUsRUFBRSxDQUFDLElBQUssT0FBQSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLFNBQVMsQ0FBQztZQUM1RCxDQUFDLEVBQUUsQ0FBQyxLQUFLLEtBQUssSUFBSSxJQUFJLEVBQUUsQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDO2dCQUM3QyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsRUFGdkIsQ0FFdUIsQ0FBQzs7OztZQUl6RCxXQUFXLEdBQUcsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUVuRCxtREFBbUQ7UUFDbkQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEdBQUcsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2pFLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBRTdCLE9BQU8sV0FBVyxDQUFDO0lBQ3ZCLENBQUM7O2dCQS9CSixJQUFJLFNBQUM7b0JBQ0YsSUFBSSxFQUFFLHdCQUF3QjtpQkFDakM7Ozs7Z0JBUndCLG1DQUFtQzs7SUFzQzVELG9DQUFDO0NBQUEsQUFoQ0QsSUFnQ0M7U0E3QlksNkJBQTZCOzs7Ozs7SUFFMUIsNENBQWdEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRmlsdGVyTGlzdEl0ZW0sIElneEdyaWRFeGNlbFN0eWxlRmlsdGVyaW5nQ29tcG9uZW50IH0gZnJvbSAnLi9ncmlkLmV4Y2VsLXN0eWxlLWZpbHRlcmluZy5jb21wb25lbnQnO1xuaW1wb3J0IHsgY2xvbmVBcnJheSB9IGZyb20gJy4uLy4uLy4uL2NvcmUvdXRpbHMnO1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuQFBpcGUoe1xuICAgIG5hbWU6ICdleGNlbFN0eWxlU2VhcmNoRmlsdGVyJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hFeGNlbFN0eWxlU2VhcmNoRmlsdGVyUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlc2Y6IElneEdyaWRFeGNlbFN0eWxlRmlsdGVyaW5nQ29tcG9uZW50KSB7IH1cblxuICAgIHRyYW5zZm9ybShpdGVtczogRmlsdGVyTGlzdEl0ZW1bXSwgc2VhcmNoVGV4dDogc3RyaW5nKTogYW55W10ge1xuICAgICAgICBpZiAoIWl0ZW1zIHx8ICFpdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghc2VhcmNoVGV4dCkge1xuICAgICAgICAgICAgdGhpcy5lc2YuZXhjZWxTdHlsZVNlYXJjaC5maWx0ZXJlZERhdGEgPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW1zO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VhcmNoVGV4dCA9IHNlYXJjaFRleHQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gaXRlbXMuZmlsdGVyKChpdCwgaSkgPT4gKGkgPT09IDAgJiYgaXQuaXNTcGVjaWFsKSB8fFxuICAgICAgICAgICAgKGl0LnZhbHVlICE9PSBudWxsICYmIGl0LnZhbHVlICE9PSB1bmRlZmluZWQpICYmXG4gICAgICAgICAgICBpdC52YWx1ZS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihzZWFyY2hUZXh0KSA+IC0xKTtcblxuICAgICAgICAvLyBJZiAncmVzdWx0JyBjb250YWlucyB0aGUgJ1NlbGVjdCBBbGwnIGl0ZW0gYW5kIGF0IGxlYXN0IG9uZSBtb3JlLCB3ZSB1c2UgaXQgYXMgYSAnZmluYWxSZXN1bHQnLFxuICAgICAgICAvLyBvdGhlcndpc2Ugd2UgdXNlIGFuIGVtcHR5IGFycmF5IGFzIGEgJ2ZpbmFsUmVzdWx0JyBvZiB0aGUgZmlsdGVyaW5nLlxuICAgICAgICBjb25zdCBmaW5hbFJlc3VsdCA9IHJlc3VsdC5sZW5ndGggPiAxID8gcmVzdWx0IDogW107XG5cbiAgICAgICAgLy8gVXBkYXRlIHRoZSBmaWx0ZXJlZERhdGEgb2YgdGhlIHNlYXJjaCBjb21wb25lbnQuXG4gICAgICAgIHRoaXMuZXNmLmV4Y2VsU3R5bGVTZWFyY2guZmlsdGVyZWREYXRhID0gY2xvbmVBcnJheShmaW5hbFJlc3VsdCk7XG4gICAgICAgIHRoaXMuZXNmLmNkci5kZXRlY3RDaGFuZ2VzKCk7XG5cbiAgICAgICAgcmV0dXJuIGZpbmFsUmVzdWx0O1xuICAgIH1cbn1cbiJdfQ==