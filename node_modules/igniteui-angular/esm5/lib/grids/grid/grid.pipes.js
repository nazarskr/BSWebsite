/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { cloneArray } from '../../core/utils';
import { DataUtil } from '../../data-operations/data-util';
import { FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';
import { GridBaseAPIService } from '../api.service';
/**
 * @hidden
 */
var IgxGridSortingPipe = /** @class */ (function () {
    function IgxGridSortingPipe(gridAPI) {
        this.gridAPI = (/** @type {?} */ (gridAPI));
    }
    /**
     * @param {?} collection
     * @param {?} expressions
     * @param {?} id
     * @param {?} pipeTrigger
     * @return {?}
     */
    IgxGridSortingPipe.prototype.transform = /**
     * @param {?} collection
     * @param {?} expressions
     * @param {?} id
     * @param {?} pipeTrigger
     * @return {?}
     */
    function (collection, expressions, id, pipeTrigger) {
        /** @type {?} */
        var grid = this.gridAPI.grid;
        /** @type {?} */
        var result;
        if (!expressions.length) {
            result = collection;
        }
        else {
            result = DataUtil.sort(cloneArray(collection), expressions);
        }
        grid.filteredSortedData = result;
        return result;
    };
    IgxGridSortingPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'gridSort',
                    pure: true
                },] }
    ];
    /** @nocollapse */
    IgxGridSortingPipe.ctorParameters = function () { return [
        { type: GridBaseAPIService }
    ]; };
    return IgxGridSortingPipe;
}());
export { IgxGridSortingPipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxGridSortingPipe.prototype.gridAPI;
}
/**
 * @hidden
 */
var IgxGridGroupingPipe = /** @class */ (function () {
    function IgxGridGroupingPipe(gridAPI) {
        this.gridAPI = (/** @type {?} */ (gridAPI));
    }
    /**
     * @param {?} collection
     * @param {?} expression
     * @param {?} expansion
     * @param {?} defaultExpanded
     * @param {?} id
     * @param {?} groupsRecords
     * @param {?} pipeTrigger
     * @return {?}
     */
    IgxGridGroupingPipe.prototype.transform = /**
     * @param {?} collection
     * @param {?} expression
     * @param {?} expansion
     * @param {?} defaultExpanded
     * @param {?} id
     * @param {?} groupsRecords
     * @param {?} pipeTrigger
     * @return {?}
     */
    function (collection, expression, expansion, defaultExpanded, id, groupsRecords, pipeTrigger) {
        /** @type {?} */
        var state = { expressions: [], expansion: [], defaultExpanded: defaultExpanded };
        /** @type {?} */
        var grid = this.gridAPI.grid;
        state.expressions = grid.groupingExpressions;
        /** @type {?} */
        var result;
        /** @type {?} */
        var fullResult = { data: [], metadata: [] };
        if (!state.expressions.length) {
            // empty the array without changing reference
            groupsRecords.splice(0, groupsRecords.length);
            result = {
                data: collection,
                metadata: collection
            };
        }
        else {
            state.expansion = grid.groupingExpansionState;
            state.defaultExpanded = grid.groupsExpanded;
            result = DataUtil.group(cloneArray(collection), state, grid, groupsRecords, fullResult);
        }
        grid.groupingFlatResult = result.data;
        grid.groupingResult = fullResult.data;
        grid.groupingMetadata = fullResult.metadata;
        return result;
    };
    IgxGridGroupingPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'gridGroupBy',
                    pure: true
                },] }
    ];
    /** @nocollapse */
    IgxGridGroupingPipe.ctorParameters = function () { return [
        { type: GridBaseAPIService }
    ]; };
    return IgxGridGroupingPipe;
}());
export { IgxGridGroupingPipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxGridGroupingPipe.prototype.gridAPI;
}
/**
 * @hidden
 */
var IgxGridPagingPipe = /** @class */ (function () {
    function IgxGridPagingPipe(gridAPI) {
        this.gridAPI = gridAPI;
    }
    /**
     * @param {?} collection
     * @param {?=} page
     * @param {?=} perPage
     * @param {?=} id
     * @param {?=} pipeTrigger
     * @return {?}
     */
    IgxGridPagingPipe.prototype.transform = /**
     * @param {?} collection
     * @param {?=} page
     * @param {?=} perPage
     * @param {?=} id
     * @param {?=} pipeTrigger
     * @return {?}
     */
    function (collection, page, perPage, id, pipeTrigger) {
        if (page === void 0) { page = 0; }
        if (perPage === void 0) { perPage = 15; }
        if (!this.gridAPI.grid.paging) {
            return collection;
        }
        /** @type {?} */
        var state = {
            index: page,
            recordsPerPage: perPage
        };
        DataUtil.correctPagingState(state, collection.data.length);
        /** @type {?} */
        var result = {
            data: DataUtil.page(cloneArray(collection.data), state),
            metadata: DataUtil.page(cloneArray(collection.metadata), state)
        };
        if (this.gridAPI.grid.page !== state.index) {
            this.gridAPI.grid.page = state.index;
        }
        this.gridAPI.grid.pagingState = state;
        return result;
    };
    IgxGridPagingPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'gridPaging',
                    pure: true
                },] }
    ];
    /** @nocollapse */
    IgxGridPagingPipe.ctorParameters = function () { return [
        { type: GridBaseAPIService }
    ]; };
    return IgxGridPagingPipe;
}());
export { IgxGridPagingPipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxGridPagingPipe.prototype.gridAPI;
}
/**
 * @hidden
 */
var IgxGridFilteringPipe = /** @class */ (function () {
    function IgxGridFilteringPipe(gridAPI) {
        this.gridAPI = gridAPI;
    }
    /**
     * @param {?} collection
     * @param {?} expressionsTree
     * @param {?} filterStrategy
     * @param {?} advancedExpressionsTree
     * @param {?} id
     * @param {?} pipeTrigger
     * @return {?}
     */
    IgxGridFilteringPipe.prototype.transform = /**
     * @param {?} collection
     * @param {?} expressionsTree
     * @param {?} filterStrategy
     * @param {?} advancedExpressionsTree
     * @param {?} id
     * @param {?} pipeTrigger
     * @return {?}
     */
    function (collection, expressionsTree, filterStrategy, advancedExpressionsTree, id, pipeTrigger) {
        /** @type {?} */
        var grid = this.gridAPI.grid;
        /** @type {?} */
        var state = {
            expressionsTree: expressionsTree,
            strategy: filterStrategy,
            advancedExpressionsTree: advancedExpressionsTree
        };
        if (FilteringExpressionsTree.empty(state.expressionsTree) && FilteringExpressionsTree.empty(state.advancedExpressionsTree)) {
            return collection;
        }
        /** @type {?} */
        var result = DataUtil.filter(cloneArray(collection), state);
        grid.filteredData = result;
        return result;
    };
    IgxGridFilteringPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'gridFiltering',
                    pure: true
                },] }
    ];
    /** @nocollapse */
    IgxGridFilteringPipe.ctorParameters = function () { return [
        { type: GridBaseAPIService }
    ]; };
    return IgxGridFilteringPipe;
}());
export { IgxGridFilteringPipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxGridFilteringPipe.prototype.gridAPI;
}
//# sourceMappingURL=data:application/json;base64,