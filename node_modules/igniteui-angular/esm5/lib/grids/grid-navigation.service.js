/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { first } from 'rxjs/operators';
import { IgxGridGroupByRowComponent } from './grid/groupby-row.component';
import { FilterMode } from './common/enums';
/** @enum {string} */
var MoveDirection = {
    LEFT: 'left',
    RIGHT: 'right',
};
/**
 * @hidden
 */
var IgxGridNavigationService = /** @class */ (function () {
    function IgxGridNavigationService() {
    }
    Object.defineProperty(IgxGridNavigationService.prototype, "displayContainerWidth", {
        get: /**
         * @return {?}
         */
        function () {
            return Math.round(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridNavigationService.prototype, "displayContainerScrollLeft", {
        get: /**
         * @return {?}
         */
        function () {
            return Math.ceil(this.grid.headerContainer.scrollPosition);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridNavigationService.prototype, "verticalDisplayContainerElement", {
        get: /**
         * @return {?}
         */
        function () {
            return this.grid.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} rowIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.horizontalScroll = /**
     * @param {?} rowIndex
     * @return {?}
     */
    function (rowIndex) {
        /** @type {?} */
        var rowComp = this.grid.dataRowList.find(function (row) { return row.index === rowIndex; }) || this.grid.dataRowList.first;
        if (!rowComp) {
            rowComp = this.grid.summariesRowList.find(function (row) { return row.index === rowIndex; });
        }
        return rowComp.virtDirRow;
    };
    /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.getColumnUnpinnedIndex = /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (visibleColumnIndex) {
        /** @type {?} */
        var column = this.grid.unpinnedColumns.find(function (col) { return !col.columnGroup && col.visibleIndex === visibleColumnIndex; });
        return this.grid.pinnedColumns.length ? this.grid.unpinnedColumns.filter(function (c) { return !c.columnGroup; }).indexOf(column) :
            visibleColumnIndex;
    };
    /**
     * @param {?} columnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.isColumnFullyVisible = /**
     * @param {?} columnIndex
     * @return {?}
     */
    function (columnIndex) {
        return this.isColumnRightEdgeVisible(columnIndex) && this.isColumnLeftEdgeVisible(columnIndex);
    };
    /**
     * @param {?} columnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.isColumnRightEdgeVisible = /**
     * @param {?} columnIndex
     * @return {?}
     */
    function (columnIndex) {
        /** @type {?} */
        var forOfDir = this.forOfDir();
        if (this.isColumnPinned(columnIndex, forOfDir)) {
            return true;
        }
        /** @type {?} */
        var index = this.getColumnUnpinnedIndex(columnIndex);
        return this.displayContainerWidth >= forOfDir.getColumnScrollLeft(index + 1) - this.displayContainerScrollLeft;
    };
    /**
     * @param {?} columnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.isColumnLeftEdgeVisible = /**
     * @param {?} columnIndex
     * @return {?}
     */
    function (columnIndex) {
        /** @type {?} */
        var forOfDir = this.forOfDir();
        if (this.isColumnPinned(columnIndex, forOfDir)) {
            return true;
        }
        /** @type {?} */
        var index = this.getColumnUnpinnedIndex(columnIndex);
        return this.displayContainerScrollLeft <= forOfDir.getColumnScrollLeft(index);
    };
    /**
     * @private
     * @return {?}
     */
    IgxGridNavigationService.prototype.forOfDir = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var forOfDir;
        if (this.grid.dataRowList.length > 0) {
            forOfDir = this.grid.dataRowList.first.virtDirRow;
        }
        else {
            forOfDir = this.grid.headerContainer;
        }
        return forOfDir;
    };
    /**
     * @private
     * @param {?} columnIndex
     * @param {?} forOfDir
     * @return {?}
     */
    IgxGridNavigationService.prototype.isColumnPinned = /**
     * @private
     * @param {?} columnIndex
     * @param {?} forOfDir
     * @return {?}
     */
    function (columnIndex, forOfDir) {
        /** @type {?} */
        var horizontalScroll = forOfDir.getScroll();
        /** @type {?} */
        var column = this.grid.columnList.filter(function (c) { return !c.columnGroup; }).find(function (col) { return col.visibleIndex === columnIndex; });
        return (!horizontalScroll.clientWidth || column.pinned);
    };
    Object.defineProperty(IgxGridNavigationService.prototype, "gridOrderedColumns", {
        get: /**
         * @return {?}
         */
        function () {
            return tslib_1.__spread(this.grid.pinnedColumns, this.grid.unpinnedColumns).filter(function (c) { return !c.columnGroup; });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} rowIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.isRowInEditMode = /**
     * @param {?} rowIndex
     * @return {?}
     */
    function (rowIndex) {
        return this.grid.rowEditable && (this.grid.rowInEditMode && this.grid.rowInEditMode.index === rowIndex);
    };
    /**
     * @param {?} direction
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.findNextEditable = /**
     * @param {?} direction
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (direction, visibleColumnIndex) {
        // go trough all columns in one cycle instead of
        // splice().reverse().find()
        /** @type {?} */
        var gridColumns = this.gridOrderedColumns;
        /** @type {?} */
        var start = visibleColumnIndex;
        /** @type {?} */
        var end = 0;
        /** @type {?} */
        var step = 0;
        /** @type {?} */
        var result = -1;
        if (direction === MoveDirection.LEFT) {
            end = 0;
            step = -1;
        }
        else if (direction === MoveDirection.RIGHT) {
            end = gridColumns.length - 1;
            step = 1;
        }
        for (var c = start; (c * step) <= end; c += step) {
            /** @type {?} */
            var column = gridColumns[c];
            if (column.editable) {
                result = c;
                break;
            }
        }
        return result;
    };
    /**
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @param {?=} isSummary
     * @return {?}
     */
    IgxGridNavigationService.prototype.getCellElementByVisibleIndex = /**
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @param {?=} isSummary
     * @return {?}
     */
    function (rowIndex, visibleColumnIndex, isSummary) {
        if (isSummary === void 0) { isSummary = false; }
        /** @type {?} */
        var cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);
        return (/** @type {?} */ (this.grid.nativeElement.querySelector(cellSelector + "[data-rowindex=\"" + rowIndex + "\"][data-visibleIndex=\"" + visibleColumnIndex + "\"]")));
    };
    /**
     * @param {?} element
     * @param {?} selectedNode
     * @return {?}
     */
    IgxGridNavigationService.prototype.onKeydownArrowRight = /**
     * @param {?} element
     * @param {?} selectedNode
     * @return {?}
     */
    function (element, selectedNode) {
        /** @type {?} */
        var rowIndex = selectedNode.row;
        /** @type {?} */
        var visibleColumnIndex = selectedNode.column;
        /** @type {?} */
        var isSummary = selectedNode.isSummaryRow;
        if (this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {
            return;
        }
        if (this.isColumnRightEdgeVisible(visibleColumnIndex + 1)) { // if next column is fully visible or is pinned
            if (element.classList.contains('igx-grid__td--pinned-last') || element.classList.contains('igx-grid-summary--pinned-last')) {
                if (this.isColumnLeftEdgeVisible(visibleColumnIndex + 1)) {
                    element.nextElementSibling.firstElementChild.focus({ preventScroll: true });
                }
                else {
                    this.getFocusableGrid().nativeElement.focus({ preventScroll: true });
                    this.grid.parentVirtDir.onChunkLoad
                        .pipe(first())
                        .subscribe(function () {
                        element.nextElementSibling.firstElementChild.focus({ preventScroll: true });
                    });
                    this.horizontalScroll(rowIndex).scrollTo(0);
                }
            }
            else {
                element.nextElementSibling.focus({ preventScroll: true });
            }
        }
        else {
            this.performHorizontalScrollToCell(rowIndex, visibleColumnIndex + 1, isSummary);
        }
    };
    /**
     * @param {?} element
     * @param {?} selectedNode
     * @return {?}
     */
    IgxGridNavigationService.prototype.onKeydownArrowLeft = /**
     * @param {?} element
     * @param {?} selectedNode
     * @return {?}
     */
    function (element, selectedNode) {
        /** @type {?} */
        var rowIndex = selectedNode.row;
        /** @type {?} */
        var visibleColumnIndex = selectedNode.column;
        /** @type {?} */
        var isSummary = selectedNode.isSummaryRow;
        if (visibleColumnIndex === 0) {
            return;
        }
        /** @type {?} */
        var index = this.getColumnUnpinnedIndex(visibleColumnIndex - 1);
        if (!element.previousElementSibling && this.grid.pinnedColumns.length && index === -1) {
            element.parentNode.previousElementSibling.focus({ preventScroll: true });
        }
        else if (!this.isColumnLeftEdgeVisible(visibleColumnIndex - 1)) {
            this.performHorizontalScrollToCell(rowIndex, visibleColumnIndex - 1, isSummary);
        }
        else {
            element.previousElementSibling.focus({ preventScroll: true });
        }
    };
    /**
     * @param {?} rowIndex
     * @param {?} currentColumnVisibleIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.movePreviousEditable = /**
     * @param {?} rowIndex
     * @param {?} currentColumnVisibleIndex
     * @return {?}
     */
    function (rowIndex, currentColumnVisibleIndex) {
        /** @type {?} */
        var prevEditableColumnIndex = this.findNextEditable(MoveDirection.LEFT, currentColumnVisibleIndex - 1);
        if (prevEditableColumnIndex === -1 && this.grid.rowEditTabs.length) {
            //  TODO: make gridAPI visible for internal use and remove cast to any
            ((/** @type {?} */ (this.grid))).gridAPI.submit_value();
            this.grid.rowEditTabs.last.element.nativeElement.focus();
            return;
        }
        this.focusEditableTarget(rowIndex, prevEditableColumnIndex);
    };
    /**
     * @param {?} rowIndex
     * @param {?} currentColumnVisibleIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.moveNextEditable = /**
     * @param {?} rowIndex
     * @param {?} currentColumnVisibleIndex
     * @return {?}
     */
    function (rowIndex, currentColumnVisibleIndex) {
        /** @type {?} */
        var nextEditableColumnIndex = this.findNextEditable(MoveDirection.RIGHT, currentColumnVisibleIndex + 1);
        if (nextEditableColumnIndex === -1 && this.grid.rowEditTabs.length) {
            //  TODO: make gridAPI visible for internal use and remove cast to any
            ((/** @type {?} */ (this.grid))).gridAPI.submit_value();
            this.grid.rowEditTabs.first.element.nativeElement.focus();
            return;
        }
        this.focusEditableTarget(rowIndex, nextEditableColumnIndex);
    };
    /**
     * @param {?} rowIndex
     * @param {?} columnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.focusEditableTarget = /**
     * @param {?} rowIndex
     * @param {?} columnIndex
     * @return {?}
     */
    function (rowIndex, columnIndex) {
        if (this.isColumnFullyVisible(columnIndex)) {
            this.getCellElementByVisibleIndex(rowIndex, columnIndex).focus();
        }
        else {
            this.performHorizontalScrollToCell(rowIndex, columnIndex);
        }
    };
    /**
     * @param {?} rowIndex
     * @param {?=} isSummary
     * @return {?}
     */
    IgxGridNavigationService.prototype.onKeydownHome = /**
     * @param {?} rowIndex
     * @param {?=} isSummary
     * @return {?}
     */
    function (rowIndex, isSummary) {
        if (isSummary === void 0) { isSummary = false; }
        /** @type {?} */
        var rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;
        /** @type {?} */
        var rowElement = rowList.find(function (row) { return row.index === rowIndex; });
        /** @type {?} */
        var cellSelector = this.getCellSelector(0, isSummary);
        if (!rowElement) {
            return;
        }
        rowElement = rowElement.nativeElement;
        /** @type {?} */
        var firstCell = rowElement.querySelector(cellSelector);
        if (this.grid.pinnedColumns.length || this.displayContainerScrollLeft === 0) {
            firstCell.focus({ preventScroll: true });
        }
        else {
            this.getFocusableGrid().nativeElement.focus({ preventScroll: true });
            this.grid.parentVirtDir.onChunkLoad
                .pipe(first())
                .subscribe(function () {
                firstCell = rowElement.querySelector(cellSelector);
                firstCell.focus({ preventScroll: true });
            });
            this.horizontalScroll(rowIndex).scrollTo(0);
        }
    };
    /**
     * @param {?} rowIndex
     * @param {?=} isSummary
     * @return {?}
     */
    IgxGridNavigationService.prototype.onKeydownEnd = /**
     * @param {?} rowIndex
     * @param {?=} isSummary
     * @return {?}
     */
    function (rowIndex, isSummary) {
        var _this = this;
        if (isSummary === void 0) { isSummary = false; }
        /** @type {?} */
        var index = this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex;
        /** @type {?} */
        var rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;
        /** @type {?} */
        var rowElement = rowList.find(function (row) { return row.index === rowIndex; });
        if (!rowElement) {
            return;
        }
        rowElement = rowElement.nativeElement;
        if (this.isColumnRightEdgeVisible(index)) {
            /** @type {?} */
            var allCells = rowElement.querySelectorAll(this.getCellSelector(-1, isSummary));
            allCells[allCells.length - 1].focus({ preventScroll: true });
        }
        else {
            this.getFocusableGrid().nativeElement.focus({ preventScroll: true });
            this.grid.parentVirtDir.onChunkLoad
                .pipe(first())
                .subscribe(function () {
                /** @type {?} */
                var allCells = rowElement.querySelectorAll(_this.getCellSelector(-1, isSummary));
                allCells[allCells.length - 1].focus({ preventScroll: true });
            });
            this.horizontalScroll(rowIndex).scrollTo(this.getColumnUnpinnedIndex(index));
        }
    };
    /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.navigateTop = /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (visibleColumnIndex) {
        var _this = this;
        /** @type {?} */
        var verticalScroll = this.grid.verticalScrollContainer.getScroll();
        /** @type {?} */
        var cellSelector = this.getCellSelector(visibleColumnIndex);
        if (verticalScroll.scrollTop === 0) {
            /** @type {?} */
            var cells = this.grid.nativeElement.querySelectorAll(cellSelector + "[data-visibleIndex=\"" + visibleColumnIndex + "\"]");
            ((/** @type {?} */ (cells[0]))).focus();
        }
        else {
            this.getFocusableGrid().nativeElement.focus({ preventScroll: true });
            this.grid.verticalScrollContainer.scrollTo(0);
            this.grid.verticalScrollContainer.onChunkLoad
                .pipe(first()).subscribe(function () {
                /** @type {?} */
                var cells = _this.grid.nativeElement.querySelectorAll(cellSelector + "[data-visibleIndex=\"" + visibleColumnIndex + "\"]");
                if (cells.length > 0) {
                    ((/** @type {?} */ (cells[0]))).focus();
                }
            });
        }
    };
    /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.navigateBottom = /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (visibleColumnIndex) {
        var _this = this;
        /** @type {?} */
        var verticalScroll = this.grid.verticalScrollContainer.getScroll();
        /** @type {?} */
        var cellSelector = this.getCellSelector(visibleColumnIndex);
        if (verticalScroll.scrollHeight === 0 ||
            verticalScroll.scrollTop === verticalScroll.scrollHeight - this.grid.verticalScrollContainer.igxForContainerSize) {
            /** @type {?} */
            var cells = this.grid.nativeElement.querySelectorAll(cellSelector + "[data-visibleIndex=\"" + visibleColumnIndex + "\"]");
            ((/** @type {?} */ (cells[cells.length - 1]))).focus();
        }
        else {
            this.getFocusableGrid().nativeElement.focus({ preventScroll: true });
            this.grid.verticalScrollContainer.scrollTo(this.grid.dataView.length - 1);
            this.grid.verticalScrollContainer.onChunkLoad
                .pipe(first()).subscribe(function () {
                /** @type {?} */
                var cells = _this.grid.nativeElement.querySelectorAll(cellSelector + "[data-visibleIndex=\"" + visibleColumnIndex + "\"]");
                if (cells.length > 0) {
                    ((/** @type {?} */ (cells[cells.length - 1]))).focus();
                }
            });
        }
    };
    /**
     * @param {?} rowElement
     * @param {?} selectedNode
     * @return {?}
     */
    IgxGridNavigationService.prototype.navigateUp = /**
     * @param {?} rowElement
     * @param {?} selectedNode
     * @return {?}
     */
    function (rowElement, selectedNode) {
        var _this = this;
        /** @type {?} */
        var currentRowIndex = selectedNode.row;
        /** @type {?} */
        var visibleColumnIndex = selectedNode.column;
        if (currentRowIndex === 0) {
            return;
        }
        /** @type {?} */
        var containerTopOffset = parseInt(this.verticalDisplayContainerElement.style.top, 10);
        if (!rowElement.previousElementSibling ||
            rowElement.previousElementSibling.offsetTop < Math.abs(containerTopOffset)) {
            this.getFocusableGrid().nativeElement.focus({ preventScroll: true });
            this.grid.verticalScrollContainer.scrollTo(currentRowIndex - 1);
            this.grid.verticalScrollContainer.onChunkLoad
                .pipe(first())
                .subscribe(function () {
                /** @type {?} */
                var tag = rowElement.tagName.toLowerCase();
                /** @type {?} */
                var rowSelector = _this.getRowSelector();
                if (tag === rowSelector || tag === 'igx-grid-summary-row') {
                    rowElement = _this.getRowByIndex(currentRowIndex, tag);
                }
                else {
                    rowElement = _this.grid.nativeElement.querySelector("igx-grid-groupby-row[data-rowindex=\"" + currentRowIndex + "\"]");
                }
                _this.focusPreviousElement(rowElement, visibleColumnIndex);
            });
        }
        else {
            this.focusPreviousElement(rowElement, visibleColumnIndex);
        }
    };
    /**
     * @protected
     * @param {?} currentRowEl
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.focusPreviousElement = /**
     * @protected
     * @param {?} currentRowEl
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (currentRowEl, visibleColumnIndex) {
        this.focusElem(currentRowEl.previousElementSibling, visibleColumnIndex);
    };
    /**
     * @param {?} rowElement
     * @param {?} selectedNode
     * @return {?}
     */
    IgxGridNavigationService.prototype.navigateDown = /**
     * @param {?} rowElement
     * @param {?} selectedNode
     * @return {?}
     */
    function (rowElement, selectedNode) {
        var _this = this;
        /** @type {?} */
        var currentRowIndex = selectedNode.row;
        /** @type {?} */
        var visibleColumnIndex = selectedNode.column;
        if (currentRowIndex === this.grid.dataView.length - 1 ||
            (currentRowIndex === 0 && rowElement.tagName.toLowerCase() === 'igx-grid-summary-row')) {
            // check if this is rootSummary row
            return;
        }
        /** @type {?} */
        var rowHeight = this.grid.verticalScrollContainer.getSizeAt(currentRowIndex + 1);
        /** @type {?} */
        var containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;
        /** @type {?} */
        var targetEndTopOffset = rowElement.nextElementSibling ?
            rowElement.nextElementSibling.offsetTop + rowHeight + parseInt(this.verticalDisplayContainerElement.style.top, 10) :
            containerHeight + rowHeight;
        this.getFocusableGrid().nativeElement.focus({ preventScroll: true });
        if (containerHeight && containerHeight < targetEndTopOffset) {
            /** @type {?} */
            var nextIndex_1 = currentRowIndex + 1;
            this.grid.verticalScrollContainer.scrollTo(nextIndex_1);
            this.grid.verticalScrollContainer.onChunkLoad
                .pipe(first())
                .subscribe(function () {
                rowElement = _this.getNextRowByIndex(nextIndex_1);
                _this.focusElem(rowElement, visibleColumnIndex);
            });
        }
        else {
            this.focusNextElement(rowElement, visibleColumnIndex);
        }
    };
    /**
     * @protected
     * @param {?} rowElement
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.focusElem = /**
     * @protected
     * @param {?} rowElement
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (rowElement, visibleColumnIndex) {
        if (rowElement.tagName.toLowerCase() === 'igx-grid-groupby-row') {
            rowElement.focus();
        }
        else {
            /** @type {?} */
            var isSummaryRow = rowElement.tagName.toLowerCase() === 'igx-grid-summary-row';
            if (this.isColumnFullyVisible(visibleColumnIndex)) {
                /** @type {?} */
                var cellSelector = this.getCellSelector(visibleColumnIndex, isSummaryRow);
                /** @type {?} */
                var cell = rowElement.querySelector(cellSelector + "[data-visibleIndex=\"" + visibleColumnIndex + "\"]");
                cell.focus();
                return cell;
            }
            this.performHorizontalScrollToCell(parseInt(rowElement.getAttribute('data-rowindex'), 10), visibleColumnIndex, isSummaryRow);
        }
    };
    /**
     * @protected
     * @param {?} rowElement
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.focusNextElement = /**
     * @protected
     * @param {?} rowElement
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (rowElement, visibleColumnIndex) {
        return this.focusElem(rowElement.nextElementSibling, visibleColumnIndex);
    };
    /**
     * @return {?}
     */
    IgxGridNavigationService.prototype.goToFirstCell = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var verticalScroll = this.grid.verticalScrollContainer.getScroll();
        /** @type {?} */
        var horizontalScroll = this.grid.dataRowList.first.virtDirRow.getScroll();
        if (verticalScroll.scrollTop === 0) {
            this.onKeydownHome(this.grid.dataRowList.first.index);
        }
        else {
            if (!horizontalScroll.clientWidth || parseInt(horizontalScroll.scrollLeft, 10) <= 1 || this.grid.pinnedColumns.length) {
                this.navigateTop(0);
            }
            else {
                this.getFocusableGrid().nativeElement.focus({ preventScroll: true });
                this.horizontalScroll(this.grid.dataRowList.first.index).scrollTo(0);
                this.grid.parentVirtDir.onChunkLoad
                    .pipe(first())
                    .subscribe(function () {
                    _this.navigateTop(0);
                });
            }
        }
    };
    /**
     * @return {?}
     */
    IgxGridNavigationService.prototype.goToLastCell = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var verticalScroll = this.grid.verticalScrollContainer.getScroll();
        if (verticalScroll.scrollHeight === 0 ||
            verticalScroll.scrollTop === verticalScroll.scrollHeight - this.grid.verticalScrollContainer.igxForContainerSize) {
            /** @type {?} */
            var rows = this.getAllRows();
            /** @type {?} */
            var rowIndex = parseInt(rows[rows.length - 1].getAttribute('data-rowIndex'), 10);
            this.onKeydownEnd(rowIndex);
        }
        else {
            this.getFocusableGrid().nativeElement.focus({ preventScroll: true });
            this.grid.verticalScrollContainer.scrollTo(this.grid.dataView.length - 1);
            this.grid.verticalScrollContainer.onChunkLoad
                .pipe(first()).subscribe(function () {
                /** @type {?} */
                var rows = _this.getAllRows();
                if (rows.length > 0) {
                    /** @type {?} */
                    var rowIndex = parseInt(rows[rows.length - 1].getAttribute('data-rowIndex'), 10);
                    _this.onKeydownEnd(rowIndex);
                }
            });
        }
    };
    /**
     * @return {?}
     */
    IgxGridNavigationService.prototype.goToLastBodyElement = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var verticalScroll = this.grid.verticalScrollContainer.getScroll();
        if (verticalScroll.scrollHeight === 0 ||
            verticalScroll.scrollTop === verticalScroll.scrollHeight - this.grid.verticalScrollContainer.igxForContainerSize) {
            /** @type {?} */
            var rowIndex = this.grid.dataView.length - 1;
            /** @type {?} */
            var row = (/** @type {?} */ (this.grid.nativeElement.querySelector("[data-rowindex=\"" + rowIndex + "\"]")));
            if (row && row.tagName.toLowerCase() === 'igx-grid-groupby-row') {
                row.focus();
                return;
            }
            /** @type {?} */
            var isSummary = (row && row.tagName.toLowerCase() === 'igx-grid-summary-row') ? true : false;
            this.onKeydownEnd(rowIndex, isSummary);
        }
        else {
            this.grid.verticalScrollContainer.scrollTo(this.grid.dataView.length - 1);
            this.grid.verticalScrollContainer.onChunkLoad
                .pipe(first()).subscribe(function () {
                /** @type {?} */
                var rowIndex = _this.grid.dataView.length - 1;
                /** @type {?} */
                var row = (/** @type {?} */ (_this.grid.nativeElement.querySelector("[data-rowindex=\"" + rowIndex + "\"]")));
                if (row && row.tagName.toLowerCase() === 'igx-grid-groupby-row') {
                    row.focus();
                    return;
                }
                /** @type {?} */
                var isSummary = (row && row.tagName.toLowerCase() === 'igx-grid-summary-row') ? true : false;
                _this.onKeydownEnd(rowIndex, isSummary);
            });
        }
    };
    /**
     * @param {?} currentRowEl
     * @param {?} selectedNode
     * @return {?}
     */
    IgxGridNavigationService.prototype.performTab = /**
     * @param {?} currentRowEl
     * @param {?} selectedNode
     * @return {?}
     */
    function (currentRowEl, selectedNode) {
        /** @type {?} */
        var rowIndex = selectedNode.row;
        /** @type {?} */
        var visibleColumnIndex = selectedNode.column;
        /** @type {?} */
        var isSummaryRow = selectedNode.isSummaryRow;
        if (isSummaryRow && rowIndex === 0 &&
            this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {
            return;
        }
        if (this.isRowInEditMode(rowIndex)) {
            this.moveNextEditable(rowIndex, visibleColumnIndex);
            return;
        }
        if (this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {
            /** @type {?} */
            var rowEl = this.grid.rowList.find(function (row) { return row.index === rowIndex + 1; }) ?
                this.grid.rowList.find(function (row) { return row.index === rowIndex + 1; }) :
                this.grid.summariesRowList.find(function (row) { return row.index === rowIndex + 1; });
            if (rowIndex === this.grid.dataView.length - 1 && this.grid.rootSummariesEnabled) {
                this.onKeydownHome(0, true);
                return;
            }
            if (rowEl) {
                this.navigateDown(currentRowEl, { row: rowIndex, column: 0 });
            }
        }
        else {
            /** @type {?} */
            var cell = this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummaryRow);
            if (cell) {
                this.onKeydownArrowRight(cell, selectedNode);
            }
        }
    };
    /**
     * @param {?=} toStart
     * @return {?}
     */
    IgxGridNavigationService.prototype.moveFocusToFilterCell = /**
     * @param {?=} toStart
     * @return {?}
     */
    function (toStart) {
        if (this.grid.filteringService.isFilterRowVisible) {
            this.grid.filteringService.focusFilterRowCloseButton();
            return;
        }
        /** @type {?} */
        var columns = this.grid.filteringService.unpinnedFilterableColumns;
        /** @type {?} */
        var targetIndex = toStart ? 0 : columns.length - 1;
        /** @type {?} */
        var visibleIndex = columns[targetIndex].visibleIndex;
        /** @type {?} */
        var isVisible = toStart ? this.isColumnLeftEdgeVisible(visibleIndex) : this.isColumnRightEdgeVisible(visibleIndex);
        if (isVisible) {
            this.grid.filteringService.focusFilterCellChip(columns[targetIndex], false);
        }
        else {
            this.grid.filteringService.scrollToFilterCell(columns[targetIndex], false);
        }
    };
    /**
     * @param {?} column
     * @param {?} eventArgs
     * @return {?}
     */
    IgxGridNavigationService.prototype.navigatePrevFilterCell = /**
     * @param {?} column
     * @param {?} eventArgs
     * @return {?}
     */
    function (column, eventArgs) {
        /** @type {?} */
        var cols = this.grid.filteringService.unpinnedFilterableColumns;
        /** @type {?} */
        var prevFilterableIndex = cols.indexOf(column) - 1;
        /** @type {?} */
        var visibleIndex = column.visibleIndex;
        if (visibleIndex === 0 || prevFilterableIndex < 0) {
            // prev is not filter cell
            /** @type {?} */
            var firstFiltarableCol = this.getFirstPinnedFilterableColumn();
            if (!firstFiltarableCol || column === firstFiltarableCol) {
                eventArgs.preventDefault();
            }
            return;
        }
        /** @type {?} */
        var prevColumn = cols[prevFilterableIndex];
        /** @type {?} */
        var prevVisibleIndex = prevColumn.visibleIndex;
        if (prevFilterableIndex >= 0 && visibleIndex > 0 && !this.isColumnLeftEdgeVisible(prevVisibleIndex) && !column.pinned) {
            eventArgs.preventDefault();
            this.grid.filteringService.scrollToFilterCell(prevColumn, false);
        }
    };
    /**
     * @param {?} eventArgs
     * @return {?}
     */
    IgxGridNavigationService.prototype.navigateFirstCellIfPossible = /**
     * @param {?} eventArgs
     * @return {?}
     */
    function (eventArgs) {
        if (this.grid.rowList.length > 0) {
            if (this.grid.rowList.filter(function (row) { return row instanceof IgxGridGroupByRowComponent; }).length > 0) {
                eventArgs.stopPropagation();
                return;
            }
            this.goToFirstCell();
        }
        else if (this.grid.rootSummariesEnabled) {
            this.onKeydownHome(0, true);
        }
        eventArgs.preventDefault();
    };
    /**
     * @param {?} column
     * @param {?} eventArgs
     * @return {?}
     */
    IgxGridNavigationService.prototype.navigateNextFilterCell = /**
     * @param {?} column
     * @param {?} eventArgs
     * @return {?}
     */
    function (column, eventArgs) {
        /** @type {?} */
        var cols = this.grid.filteringService.unpinnedFilterableColumns;
        /** @type {?} */
        var nextFilterableIndex = cols.indexOf(column) + 1;
        if (nextFilterableIndex >= this.grid.filteringService.unpinnedFilterableColumns.length) {
            // next is not filter cell
            this.navigateFirstCellIfPossible(eventArgs);
            return;
        }
        /** @type {?} */
        var nextColumn = cols[nextFilterableIndex];
        /** @type {?} */
        var nextVisibleIndex = nextColumn.visibleIndex;
        if (!column.pinned && !this.isColumnRightEdgeVisible(nextVisibleIndex)) {
            eventArgs.preventDefault();
            this.grid.filteringService.scrollToFilterCell(nextColumn, true);
        }
        else if (column === this.getLastPinnedFilterableColumn() && !this.isColumnRightEdgeVisible(nextVisibleIndex)) {
            this.grid.filteringService.scrollToFilterCell(nextColumn, false);
            eventArgs.stopPropagation();
        }
    };
    /**
     * @private
     * @return {?}
     */
    IgxGridNavigationService.prototype.getLastPinnedFilterableColumn = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var pinnedFilterableColums = this.grid.pinnedColumns.filter(function (col) { return !(col.columnGroup) && col.filterable; });
        return pinnedFilterableColums[pinnedFilterableColums.length - 1];
    };
    /**
     * @private
     * @return {?}
     */
    IgxGridNavigationService.prototype.getFirstPinnedFilterableColumn = /**
     * @private
     * @return {?}
     */
    function () {
        return this.grid.pinnedColumns.filter(function (col) { return !(col.columnGroup) && col.filterable; })[0];
    };
    /**
     * @param {?} currentRowEl
     * @param {?} selectedNode
     * @return {?}
     */
    IgxGridNavigationService.prototype.performShiftTabKey = /**
     * @param {?} currentRowEl
     * @param {?} selectedNode
     * @return {?}
     */
    function (currentRowEl, selectedNode) {
        /** @type {?} */
        var rowIndex = selectedNode.row;
        /** @type {?} */
        var visibleColumnIndex = selectedNode.column;
        /** @type {?} */
        var isSummary = selectedNode.isSummaryRow;
        if (isSummary && rowIndex === 0 && visibleColumnIndex === 0 && this.grid.rowList.length) {
            this.goToLastBodyElement();
            return;
        }
        if (this.isRowInEditMode(rowIndex)) {
            this.movePreviousEditable(rowIndex, visibleColumnIndex);
            return;
        }
        if (visibleColumnIndex === 0) {
            if (rowIndex === 0 && this.grid.allowFiltering && this.grid.filterMode === FilterMode.quickFilter) {
                this.moveFocusToFilterCell();
            }
            else {
                this.navigateUp(currentRowEl, {
                    row: rowIndex,
                    column: this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex
                });
            }
        }
        else {
            /** @type {?} */
            var cell = this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary);
            if (cell) {
                this.onKeydownArrowLeft(cell, selectedNode);
            }
        }
    };
    /**
     * @param {?} targetRowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.shouldPerformVerticalScroll = /**
     * @param {?} targetRowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (targetRowIndex, visibleColumnIndex) {
        /** @type {?} */
        var containerTopOffset = parseInt(this.verticalDisplayContainerElement.style.top, 10);
        /** @type {?} */
        var targetRow = this.grid.summariesRowList.filter(function (s) { return s.index !== 0; })
            .concat(this.grid.rowList.toArray()).find(function (r) { return r.index === targetRowIndex; });
        /** @type {?} */
        var rowHeight = this.grid.verticalScrollContainer.getSizeAt(targetRowIndex);
        /** @type {?} */
        var containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;
        /** @type {?} */
        var targetEndTopOffset = targetRow ? targetRow.nativeElement.offsetTop + rowHeight + containerTopOffset :
            containerHeight + rowHeight;
        if (!targetRow || targetRow.nativeElement.offsetTop < Math.abs(containerTopOffset)
            || containerHeight && containerHeight < targetEndTopOffset) {
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * @param {?} rowIndex
     * @param {?} visibleColIndex
     * @param {?=} cb
     * @return {?}
     */
    IgxGridNavigationService.prototype.performVerticalScrollToCell = /**
     * @param {?} rowIndex
     * @param {?} visibleColIndex
     * @param {?=} cb
     * @return {?}
     */
    function (rowIndex, visibleColIndex, cb) {
        this.grid.verticalScrollContainer.scrollTo(rowIndex);
        this.grid.verticalScrollContainer.onChunkLoad
            .pipe(first()).subscribe(function () {
            cb();
        });
    };
    /**
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @param {?=} isSummary
     * @param {?=} cb
     * @return {?}
     */
    IgxGridNavigationService.prototype.performHorizontalScrollToCell = /**
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @param {?=} isSummary
     * @param {?=} cb
     * @return {?}
     */
    function (rowIndex, visibleColumnIndex, isSummary, cb) {
        var _this = this;
        if (isSummary === void 0) { isSummary = false; }
        /** @type {?} */
        var unpinnedIndex = this.getColumnUnpinnedIndex(visibleColumnIndex);
        this.getFocusableGrid().nativeElement.focus({ preventScroll: true });
        this.grid.parentVirtDir.onChunkLoad
            .pipe(first())
            .subscribe(function () {
            if (cb) {
                cb();
            }
            else {
                /** @type {?} */
                var cellElement = _this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary);
                if (cellElement) {
                    cellElement.focus({ preventScroll: true });
                }
            }
        });
        this.horizontalScroll(rowIndex).scrollTo(unpinnedIndex);
    };
    /**
     * @protected
     * @return {?}
     */
    IgxGridNavigationService.prototype.getFocusableGrid = /**
     * @protected
     * @return {?}
     */
    function () {
        return this.grid;
    };
    /**
     * @protected
     * @param {?} index
     * @param {?=} selector
     * @return {?}
     */
    IgxGridNavigationService.prototype.getRowByIndex = /**
     * @protected
     * @param {?} index
     * @param {?=} selector
     * @return {?}
     */
    function (index, selector) {
        if (selector === void 0) { selector = this.getRowSelector(); }
        return this.grid.nativeElement.querySelector(selector + "[data-rowindex=\"" + index + "\"]");
    };
    /**
     * @protected
     * @param {?} nextIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.getNextRowByIndex = /**
     * @protected
     * @param {?} nextIndex
     * @return {?}
     */
    function (nextIndex) {
        return this.grid.tbody.nativeElement.querySelector("[data-rowindex=\"" + nextIndex + "\"]");
    };
    /**
     * @private
     * @return {?}
     */
    IgxGridNavigationService.prototype.getAllRows = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var selector = this.getRowSelector();
        return this.grid.nativeElement.querySelectorAll(selector);
    };
    /**
     * @protected
     * @param {?=} visibleIndex
     * @param {?=} isSummary
     * @return {?}
     */
    IgxGridNavigationService.prototype.getCellSelector = /**
     * @protected
     * @param {?=} visibleIndex
     * @param {?=} isSummary
     * @return {?}
     */
    function (visibleIndex, isSummary) {
        if (isSummary === void 0) { isSummary = false; }
        return isSummary ? 'igx-grid-summary-cell' : 'igx-grid-cell';
    };
    /**
     * @protected
     * @return {?}
     */
    IgxGridNavigationService.prototype.getRowSelector = /**
     * @protected
     * @return {?}
     */
    function () {
        return 'igx-grid-row';
    };
    IgxGridNavigationService.decorators = [
        { type: Injectable }
    ];
    return IgxGridNavigationService;
}());
export { IgxGridNavigationService };
if (false) {
    /** @type {?} */
    IgxGridNavigationService.prototype.grid;
}
//# sourceMappingURL=data:application/json;base64,