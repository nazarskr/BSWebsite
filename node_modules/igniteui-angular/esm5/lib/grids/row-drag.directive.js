/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, Input, NgModule, TemplateRef } from '@angular/core';
import { IgxDragDirective } from '../directives/drag-drop/drag-drop.directive';
import { fromEvent } from 'rxjs';
/** @type {?} */
var ghostBackgroundClass = 'igx-grid__tr--ghost';
/** @type {?} */
var gridCellClass = 'igx-grid__td';
/** @type {?} */
var rowSelectedClass = 'igx-grid__tr--selected';
/** @type {?} */
var cellSelectedClass = 'igx-grid__td--selected';
/** @type {?} */
var cellActiveClass = 'igx-grid__td--active';
/**
 * @hidden
 */
var IgxRowDragDirective = /** @class */ (function (_super) {
    tslib_1.__extends(IgxRowDragDirective, _super);
    function IgxRowDragDirective() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._rowDragStarted = false;
        _this.transitionEndEvent = function (evt) {
            if (_this.ghostElement) {
                _this.ghostElement.removeEventListener('transitionend', _this.transitionEndEvent, false);
            }
            _this.endDragging();
        };
        return _this;
    }
    Object.defineProperty(IgxRowDragDirective.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this.row;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.row = val;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    IgxRowDragDirective.prototype.onPointerDown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        this._rowDragStarted = false;
        this._removeOnDestroy = false;
        _super.prototype.onPointerDown.call(this, event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxRowDragDirective.prototype.onPointerMove = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        _super.prototype.onPointerMove.call(this, event);
        if (this._dragStarted && !this._rowDragStarted) {
            this._rowDragStarted = true;
            /** @type {?} */
            var args = {
                dragDirective: this,
                dragData: this.row,
                cancel: false,
                owner: this.row.grid
            };
            this.row.grid.onRowDragStart.emit(args);
            if (args.cancel) {
                this.ghostElement.parentNode.removeChild(this.ghostElement);
                this.ghostElement = null;
                this._dragStarted = false;
                this._clicked = false;
                return;
            }
            this.row.dragging = true;
            this.row.grid.rowDragging = true;
            this.row.grid.markForCheck();
            this.subscription$ = fromEvent(this.row.grid.document.defaultView, 'keydown').subscribe(function (ev) {
                if (ev.key === "Escape" /* ESCAPE */ || ev.key === "Esc" /* ESCAPE_IE */) {
                    _this._lastDropArea = false;
                    _this.onPointerUp(event);
                }
            });
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxRowDragDirective.prototype.onPointerUp = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        if (!this._clicked) {
            return;
        }
        /** @type {?} */
        var args = {
            dragDirective: this,
            dragData: this.row,
            animation: false,
            owner: this.row.grid
        };
        this.zone.run(function () {
            _this.row.grid.onRowDragEnd.emit(args);
        });
        /** @type {?} */
        var dropArea = this._lastDropArea;
        _super.prototype.onPointerUp.call(this, event);
        if (!dropArea && this.ghostElement) {
            this.ghostElement.addEventListener('transitionend', this.transitionEndEvent, false);
        }
        else {
            this.endDragging();
        }
    };
    /**
     * @protected
     * @param {?} pageX
     * @param {?} pageY
     * @return {?}
     */
    IgxRowDragDirective.prototype.createGhost = /**
     * @protected
     * @param {?} pageX
     * @param {?} pageY
     * @return {?}
     */
    function (pageX, pageY) {
        this.row.grid.endEdit(true);
        this.row.grid.markForCheck();
        this.ghostContext = {
            $implicit: this.row.rowData,
            data: this.row.rowData,
            grid: this.row.grid
        };
        _super.prototype.createGhost.call(this, pageX, pageY, this.row.nativeElement);
        /** @type {?} */
        var ghost = this.ghostElement;
        /** @type {?} */
        var gridRect = this.row.grid.nativeElement.getBoundingClientRect();
        /** @type {?} */
        var rowRect = this.row.nativeElement.getBoundingClientRect();
        ghost.style.overflow = 'hidden';
        ghost.style.width = gridRect.width + 'px';
        ghost.style.height = rowRect.height + 'px';
        this.renderer.addClass(ghost, ghostBackgroundClass);
        this.renderer.removeClass(ghost, rowSelectedClass);
        /** @type {?} */
        var ghostCells = ghost.getElementsByClassName(gridCellClass);
        for (var index = 0; index < ghostCells.length; index++) {
            this.renderer.removeClass(ghostCells[index], cellSelectedClass);
            this.renderer.removeClass(ghostCells[index], cellActiveClass);
        }
    };
    /**
     * @private
     * @return {?}
     */
    IgxRowDragDirective.prototype._unsubscribe = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.subscription$ && !this.subscription$.closed) {
            this.subscription$.unsubscribe();
        }
    };
    /**
     * @private
     * @return {?}
     */
    IgxRowDragDirective.prototype.endDragging = /**
     * @private
     * @return {?}
     */
    function () {
        this.onTransitionEnd(null);
        this.row.dragging = false;
        this.row.grid.rowDragging = false;
        this.row.grid.markForCheck();
        this._unsubscribe();
    };
    IgxRowDragDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxRowDrag]'
                },] }
    ];
    IgxRowDragDirective.propDecorators = {
        data: [{ type: Input, args: ['igxRowDrag',] }]
    };
    return IgxRowDragDirective;
}(IgxDragDirective));
export { IgxRowDragDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxRowDragDirective.prototype.row;
    /**
     * @type {?}
     * @private
     */
    IgxRowDragDirective.prototype.subscription$;
    /**
     * @type {?}
     * @private
     */
    IgxRowDragDirective.prototype._rowDragStarted;
    /**
     * @type {?}
     * @private
     */
    IgxRowDragDirective.prototype.transitionEndEvent;
}
/**
 * @hidden
 */
var IgxDragIndicatorIconDirective = /** @class */ (function () {
    function IgxDragIndicatorIconDirective() {
    }
    IgxDragIndicatorIconDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxDragIndicatorIcon]'
                },] }
    ];
    return IgxDragIndicatorIconDirective;
}());
export { IgxDragIndicatorIconDirective };
/**
 * @hidden
 */
var IgxRowDragGhostDirective = /** @class */ (function () {
    function IgxRowDragGhostDirective(templateRef) {
        this.templateRef = templateRef;
    }
    IgxRowDragGhostDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxRowDragGhost]'
                },] }
    ];
    /** @nocollapse */
    IgxRowDragGhostDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return IgxRowDragGhostDirective;
}());
export { IgxRowDragGhostDirective };
if (false) {
    /** @type {?} */
    IgxRowDragGhostDirective.prototype.templateRef;
}
var IgxRowDragModule = /** @class */ (function () {
    function IgxRowDragModule() {
    }
    IgxRowDragModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [IgxRowDragDirective, IgxDragIndicatorIconDirective, IgxRowDragGhostDirective],
                    entryComponents: [],
                    exports: [IgxRowDragDirective, IgxDragIndicatorIconDirective, IgxRowDragGhostDirective],
                    imports: []
                },] }
    ];
    return IgxRowDragModule;
}());
export { IgxRowDragModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm93LWRyYWcuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9ncmlkcy9yb3ctZHJhZy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBYSxRQUFRLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25GLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBRy9FLE9BQU8sRUFBRSxTQUFTLEVBQWdCLE1BQU0sTUFBTSxDQUFDOztJQUl6QyxvQkFBb0IsR0FBRyxxQkFBcUI7O0lBQzVDLGFBQWEsR0FBRyxjQUFjOztJQUM5QixnQkFBZ0IsR0FBRyx3QkFBd0I7O0lBQzNDLGlCQUFpQixHQUFHLHdCQUF3Qjs7SUFDNUMsZUFBZSxHQUFHLHNCQUFzQjs7OztBQUs5QztJQUd5QywrQ0FBZ0I7SUFIekQ7UUFBQSxxRUFpSUM7UUEzSFcscUJBQWUsR0FBRyxLQUFLLENBQUM7UUFxSHhCLHdCQUFrQixHQUFHLFVBQUMsR0FBSTtZQUM5QixJQUFJLEtBQUksQ0FBQyxZQUFZLEVBQUU7Z0JBQ25CLEtBQUksQ0FBQyxZQUFZLENBQUMsbUJBQW1CLENBQUMsZUFBZSxFQUFFLEtBQUksQ0FBQyxrQkFBa0IsRUFBRSxLQUFLLENBQUMsQ0FBQzthQUMxRjtZQUNELEtBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUN2QixDQUFDLENBQUE7O0lBQ0wsQ0FBQztJQXpIRyxzQkFDSSxxQ0FBSTs7OztRQUlSO1lBQ0ksT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBQ3BCLENBQUM7Ozs7O1FBUEQsVUFDUyxHQUFHO1lBQ1IsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDbkIsQ0FBQzs7O09BQUE7Ozs7O0lBTU0sMkNBQWE7Ozs7SUFBcEIsVUFBcUIsS0FBSztRQUN0QixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUM7UUFDN0IsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUssQ0FBQztRQUM5QixpQkFBTSxhQUFhLFlBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0IsQ0FBQzs7Ozs7SUFFTSwyQ0FBYTs7OztJQUFwQixVQUFxQixLQUFLO1FBQTFCLGlCQThCQztRQTdCRyxpQkFBTSxhQUFhLFlBQUMsS0FBSyxDQUFDLENBQUM7UUFDM0IsSUFBSSxJQUFJLENBQUMsWUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUM1QyxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQzs7Z0JBQ3RCLElBQUksR0FBMkI7Z0JBQ2pDLGFBQWEsRUFBRSxJQUFJO2dCQUNuQixRQUFRLEVBQUUsSUFBSSxDQUFDLEdBQUc7Z0JBQ2xCLE1BQU0sRUFBRSxLQUFLO2dCQUNiLEtBQUssRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUk7YUFDdkI7WUFFRCxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3hDLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDYixJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO2dCQUM1RCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztnQkFDekIsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7Z0JBQzFCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO2dCQUN0QixPQUFPO2FBQ1Y7WUFDRCxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7WUFDekIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztZQUNqQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUU3QixJQUFJLENBQUMsYUFBYSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxVQUFDLEVBQWlCO2dCQUN0RyxJQUFJLEVBQUUsQ0FBQyxHQUFHLDBCQUFnQixJQUFJLEVBQUUsQ0FBQyxHQUFHLDBCQUFtQixFQUFFO29CQUNyRCxLQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztvQkFDM0IsS0FBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDM0I7WUFDTCxDQUFDLENBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQzs7Ozs7SUFFTSx5Q0FBVzs7OztJQUFsQixVQUFtQixLQUFLO1FBQXhCLGlCQXVCQztRQXJCRyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNoQixPQUFPO1NBQ1Y7O1lBRUssSUFBSSxHQUF5QjtZQUMvQixhQUFhLEVBQUUsSUFBSTtZQUNuQixRQUFRLEVBQUUsSUFBSSxDQUFDLEdBQUc7WUFDbEIsU0FBUyxFQUFFLEtBQUs7WUFDaEIsS0FBSyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSTtTQUN2QjtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1lBQ1YsS0FBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxQyxDQUFDLENBQUMsQ0FBQzs7WUFFRyxRQUFRLEdBQUcsSUFBSSxDQUFDLGFBQWE7UUFDbkMsaUJBQU0sV0FBVyxZQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNoQyxJQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsa0JBQWtCLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDdkY7YUFBUTtZQUNMLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUN0QjtJQUNMLENBQUM7Ozs7Ozs7SUFFUyx5Q0FBVzs7Ozs7O0lBQXJCLFVBQXNCLEtBQUssRUFBRSxLQUFLO1FBQzlCLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUM3QixJQUFJLENBQUMsWUFBWSxHQUFHO1lBQ2hCLFNBQVMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU87WUFDM0IsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTztZQUN0QixJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJO1NBQ3RCLENBQUM7UUFDRixpQkFBTSxXQUFXLFlBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDOztZQUVsRCxLQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVk7O1lBRXpCLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMscUJBQXFCLEVBQUU7O1lBQzlELE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsRUFBRTtRQUM5RCxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDaEMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDMUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFFM0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLG9CQUFvQixDQUFDLENBQUM7UUFDcEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLGdCQUFnQixDQUFDLENBQUM7O1lBRTdDLFVBQVUsR0FBRyxLQUFLLENBQUMsc0JBQXNCLENBQUMsYUFBYSxDQUFDO1FBQzlELEtBQUssSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxVQUFVLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ3BELElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1lBQ2hFLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRSxlQUFlLENBQUMsQ0FBQztTQUNqRTtJQUNMLENBQUM7Ozs7O0lBRU8sMENBQVk7Ozs7SUFBcEI7UUFDSSxJQUFJLElBQUksQ0FBQyxhQUFhLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRTtZQUNsRCxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ3BDO0lBQ0wsQ0FBQzs7Ozs7SUFFTyx5Q0FBVzs7OztJQUFuQjtRQUNJLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQzFCLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7UUFDbEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDN0IsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3hCLENBQUM7O2dCQXpISixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLGNBQWM7aUJBQzNCOzs7dUJBTUksS0FBSyxTQUFDLFlBQVk7O0lBeUh2QiwwQkFBQztDQUFBLEFBaklELENBR3lDLGdCQUFnQixHQThIeEQ7U0E5SFksbUJBQW1COzs7Ozs7SUFDNUIsa0NBQXVFOzs7OztJQUN2RSw0Q0FBb0M7Ozs7O0lBQ3BDLDhDQUFnQzs7Ozs7SUFxSGhDLGlEQUtDOzs7OztBQU1MO0lBQUE7SUFLQSxDQUFDOztnQkFMQSxTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLHdCQUF3QjtpQkFDckM7O0lBR0Qsb0NBQUM7Q0FBQSxBQUxELElBS0M7U0FEWSw2QkFBNkI7Ozs7QUFNMUM7SUFLSSxrQ0FBbUIsV0FBNkI7UUFBN0IsZ0JBQVcsR0FBWCxXQUFXLENBQWtCO0lBQUksQ0FBQzs7Z0JBTHhELFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsbUJBQW1CO2lCQUNoQzs7OztnQkFuSytDLFdBQVc7O0lBdUszRCwrQkFBQztDQUFBLEFBTkQsSUFNQztTQUZZLHdCQUF3Qjs7O0lBQ3JCLCtDQUFvQzs7QUFHcEQ7SUFBQTtJQVFBLENBQUM7O2dCQVJBLFFBQVEsU0FBQztvQkFDTixZQUFZLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSw2QkFBNkIsRUFBRSx3QkFBd0IsQ0FBQztvQkFDNUYsZUFBZSxFQUFFLEVBQUU7b0JBQ25CLE9BQU8sRUFBRSxDQUFDLG1CQUFtQixFQUFFLDZCQUE2QixFQUFFLHdCQUF3QixDQUFDO29CQUN2RixPQUFPLEVBQUUsRUFBRTtpQkFDZDs7SUFHRCx1QkFBQztDQUFBLEFBUkQsSUFRQztTQURZLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIE9uRGVzdHJveSwgTmdNb2R1bGUsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJZ3hEcmFnRGlyZWN0aXZlIH0gZnJvbSAnLi4vZGlyZWN0aXZlcy9kcmFnLWRyb3AvZHJhZy1kcm9wLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBJUm93RHJhZ0VuZEV2ZW50QXJncywgSVJvd0RyYWdTdGFydEV2ZW50QXJncyB9IGZyb20gJy4vZ3JpZC1iYXNlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBLRVlTIH0gZnJvbSAnLi4vY29yZS91dGlscyc7XG5pbXBvcnQgeyBmcm9tRXZlbnQsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgSWd4Um93Q29tcG9uZW50LCBJZ3hHcmlkQmFzZUNvbXBvbmVudCwgSUdyaWREYXRhQmluZGFibGUgfSBmcm9tICcuL2dyaWQnO1xuXG5cbmNvbnN0IGdob3N0QmFja2dyb3VuZENsYXNzID0gJ2lneC1ncmlkX190ci0tZ2hvc3QnO1xuY29uc3QgZ3JpZENlbGxDbGFzcyA9ICdpZ3gtZ3JpZF9fdGQnO1xuY29uc3Qgcm93U2VsZWN0ZWRDbGFzcyA9ICdpZ3gtZ3JpZF9fdHItLXNlbGVjdGVkJztcbmNvbnN0IGNlbGxTZWxlY3RlZENsYXNzID0gJ2lneC1ncmlkX190ZC0tc2VsZWN0ZWQnO1xuY29uc3QgY2VsbEFjdGl2ZUNsYXNzID0gJ2lneC1ncmlkX190ZC0tYWN0aXZlJztcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneFJvd0RyYWddJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hSb3dEcmFnRGlyZWN0aXZlIGV4dGVuZHMgSWd4RHJhZ0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSByb3c6IElneFJvd0NvbXBvbmVudDxJZ3hHcmlkQmFzZUNvbXBvbmVudCAmIElHcmlkRGF0YUJpbmRhYmxlPjtcbiAgICBwcml2YXRlIHN1YnNjcmlwdGlvbiQ6IFN1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIF9yb3dEcmFnU3RhcnRlZCA9IGZhbHNlO1xuXG4gICAgQElucHV0KCdpZ3hSb3dEcmFnJylcbiAgICBzZXQgZGF0YSh2YWwpIHtcbiAgICAgICAgdGhpcy5yb3cgPSB2YWw7XG4gICAgfVxuXG4gICAgZ2V0IGRhdGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvdztcbiAgICB9XG5cbiAgICBwdWJsaWMgb25Qb2ludGVyRG93bihldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLl9yb3dEcmFnU3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9yZW1vdmVPbkRlc3Ryb3kgPSBmYWxzZTtcbiAgICAgICAgc3VwZXIub25Qb2ludGVyRG93bihldmVudCk7XG4gICAgfVxuXG4gICAgcHVibGljIG9uUG9pbnRlck1vdmUoZXZlbnQpIHtcbiAgICAgICAgc3VwZXIub25Qb2ludGVyTW92ZShldmVudCk7XG4gICAgICAgIGlmICh0aGlzLl9kcmFnU3RhcnRlZCAmJiAhdGhpcy5fcm93RHJhZ1N0YXJ0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3Jvd0RyYWdTdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnN0IGFyZ3M6IElSb3dEcmFnU3RhcnRFdmVudEFyZ3MgPSB7XG4gICAgICAgICAgICAgICAgZHJhZ0RpcmVjdGl2ZTogdGhpcyxcbiAgICAgICAgICAgICAgICBkcmFnRGF0YTogdGhpcy5yb3csXG4gICAgICAgICAgICAgICAgY2FuY2VsOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBvd25lcjogdGhpcy5yb3cuZ3JpZFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy5yb3cuZ3JpZC5vblJvd0RyYWdTdGFydC5lbWl0KGFyZ3MpO1xuICAgICAgICAgICAgaWYgKGFyZ3MuY2FuY2VsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5naG9zdEVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmdob3N0RWxlbWVudCk7XG4gICAgICAgICAgICAgICAgdGhpcy5naG9zdEVsZW1lbnQgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMuX2RyYWdTdGFydGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2xpY2tlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucm93LmRyYWdnaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMucm93LmdyaWQucm93RHJhZ2dpbmcgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5yb3cuZ3JpZC5tYXJrRm9yQ2hlY2soKTtcblxuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24kID0gZnJvbUV2ZW50KHRoaXMucm93LmdyaWQuZG9jdW1lbnQuZGVmYXVsdFZpZXcsICdrZXlkb3duJykuc3Vic2NyaWJlKChldjogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChldi5rZXkgPT09IEtFWVMuRVNDQVBFIHx8IGV2LmtleSA9PT0gS0VZUy5FU0NBUEVfSUUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGFzdERyb3BBcmVhID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25Qb2ludGVyVXAoZXZlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIG9uUG9pbnRlclVwKGV2ZW50KSB7XG5cbiAgICAgICAgaWYgKCF0aGlzLl9jbGlja2VkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBhcmdzOiBJUm93RHJhZ0VuZEV2ZW50QXJncyA9IHtcbiAgICAgICAgICAgIGRyYWdEaXJlY3RpdmU6IHRoaXMsXG4gICAgICAgICAgICBkcmFnRGF0YTogdGhpcy5yb3csXG4gICAgICAgICAgICBhbmltYXRpb246IGZhbHNlLFxuICAgICAgICAgICAgb3duZXI6IHRoaXMucm93LmdyaWRcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy56b25lLnJ1bigoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJvdy5ncmlkLm9uUm93RHJhZ0VuZC5lbWl0KGFyZ3MpO1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBkcm9wQXJlYSA9IHRoaXMuX2xhc3REcm9wQXJlYTtcbiAgICAgICAgc3VwZXIub25Qb2ludGVyVXAoZXZlbnQpO1xuICAgICAgICBpZiAoIWRyb3BBcmVhICYmIHRoaXMuZ2hvc3RFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLmdob3N0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgdGhpcy50cmFuc2l0aW9uRW5kRXZlbnQsIGZhbHNlKTtcbiAgICAgICAgfSAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5lbmREcmFnZ2luZygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGNyZWF0ZUdob3N0KHBhZ2VYLCBwYWdlWSkge1xuICAgICAgICB0aGlzLnJvdy5ncmlkLmVuZEVkaXQodHJ1ZSk7XG4gICAgICAgIHRoaXMucm93LmdyaWQubWFya0ZvckNoZWNrKCk7XG4gICAgICAgIHRoaXMuZ2hvc3RDb250ZXh0ID0ge1xuICAgICAgICAgICAgJGltcGxpY2l0OiB0aGlzLnJvdy5yb3dEYXRhLFxuICAgICAgICAgICAgZGF0YTogdGhpcy5yb3cucm93RGF0YSxcbiAgICAgICAgICAgIGdyaWQ6IHRoaXMucm93LmdyaWRcbiAgICAgICAgfTtcbiAgICAgICAgc3VwZXIuY3JlYXRlR2hvc3QocGFnZVgsIHBhZ2VZLCB0aGlzLnJvdy5uYXRpdmVFbGVtZW50KTtcblxuICAgICAgICBjb25zdCBnaG9zdCA9IHRoaXMuZ2hvc3RFbGVtZW50O1xuXG4gICAgICAgIGNvbnN0IGdyaWRSZWN0ID0gdGhpcy5yb3cuZ3JpZC5uYXRpdmVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBjb25zdCByb3dSZWN0ID0gdGhpcy5yb3cubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgZ2hvc3Quc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcbiAgICAgICAgZ2hvc3Quc3R5bGUud2lkdGggPSBncmlkUmVjdC53aWR0aCArICdweCc7XG4gICAgICAgIGdob3N0LnN0eWxlLmhlaWdodCA9IHJvd1JlY3QuaGVpZ2h0ICsgJ3B4JztcblxuICAgICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKGdob3N0LCBnaG9zdEJhY2tncm91bmRDbGFzcyk7XG4gICAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3MoZ2hvc3QsIHJvd1NlbGVjdGVkQ2xhc3MpO1xuXG4gICAgICAgIGNvbnN0IGdob3N0Q2VsbHMgPSBnaG9zdC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGdyaWRDZWxsQ2xhc3MpO1xuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgZ2hvc3RDZWxscy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3MoZ2hvc3RDZWxsc1tpbmRleF0sIGNlbGxTZWxlY3RlZENsYXNzKTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3MoZ2hvc3RDZWxsc1tpbmRleF0sIGNlbGxBY3RpdmVDbGFzcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIF91bnN1YnNjcmliZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9uJCAmJiAhdGhpcy5zdWJzY3JpcHRpb24kLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24kLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGVuZERyYWdnaW5nKCkge1xuICAgICAgICB0aGlzLm9uVHJhbnNpdGlvbkVuZChudWxsKTtcbiAgICAgICAgdGhpcy5yb3cuZHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5yb3cuZ3JpZC5yb3dEcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnJvdy5ncmlkLm1hcmtGb3JDaGVjaygpO1xuICAgICAgICB0aGlzLl91bnN1YnNjcmliZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgdHJhbnNpdGlvbkVuZEV2ZW50ID0gKGV2dD8pID0+IHtcbiAgICAgICAgaWYgKHRoaXMuZ2hvc3RFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLmdob3N0RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgdGhpcy50cmFuc2l0aW9uRW5kRXZlbnQsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVuZERyYWdnaW5nKCk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4RHJhZ0luZGljYXRvckljb25dJ1xufSlcblxuZXhwb3J0IGNsYXNzIElneERyYWdJbmRpY2F0b3JJY29uRGlyZWN0aXZlIHtcbn1cblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneFJvd0RyYWdHaG9zdF0nXG59KVxuXG5leHBvcnQgY2xhc3MgSWd4Um93RHJhZ0dob3N0RGlyZWN0aXZlICB7XG4gICAgY29uc3RydWN0b3IocHVibGljIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+KSB7IH1cbn1cblxuQE5nTW9kdWxlKHtcbiAgICBkZWNsYXJhdGlvbnM6IFtJZ3hSb3dEcmFnRGlyZWN0aXZlLCBJZ3hEcmFnSW5kaWNhdG9ySWNvbkRpcmVjdGl2ZSwgSWd4Um93RHJhZ0dob3N0RGlyZWN0aXZlXSxcbiAgICBlbnRyeUNvbXBvbmVudHM6IFtdLFxuICAgIGV4cG9ydHM6IFtJZ3hSb3dEcmFnRGlyZWN0aXZlLCBJZ3hEcmFnSW5kaWNhdG9ySWNvbkRpcmVjdGl2ZSwgSWd4Um93RHJhZ0dob3N0RGlyZWN0aXZlXSxcbiAgICBpbXBvcnRzOiBbXVxufSlcblxuZXhwb3J0IGNsYXNzIElneFJvd0RyYWdNb2R1bGUge1xufVxuIl19