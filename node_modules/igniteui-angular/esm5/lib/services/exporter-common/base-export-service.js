/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Output } from '@angular/core';
import { cloneValue } from '../../core/utils';
import { DataUtil } from '../../data-operations/data-util';
import { ExportUtilities } from './export-utilities';
import { TreeGridFilteringStrategy } from '../../grids/tree-grid/tree-grid.filtering.pipe';
/**
 * onRowExport event arguments
 * this.exporterService.onRowExport.subscribe((args: IRowExportingEventArgs) => {
 * // set args properties here
 * })
 * @record
 */
export function IRowExportingEventArgs() { }
if (false) {
    /**
     * Contains the exporting row data
     * @type {?}
     */
    IRowExportingEventArgs.prototype.rowData;
    /**
     * Contains the exporting row index
     * @type {?}
     */
    IRowExportingEventArgs.prototype.rowIndex;
    /**
     * Skip the exporting row when set to true
     * @type {?}
     */
    IRowExportingEventArgs.prototype.cancel;
}
/**
 * onColumnExport event arguments
 * ```typescript
 * this.exporterService.onColumnExport.subscribe((args: IColumnExportingEventArgs) => {
 * // set args properties here
 * });
 * ```
 * @record
 */
export function IColumnExportingEventArgs() { }
if (false) {
    /**
     * Contains the exporting column header
     * @type {?}
     */
    IColumnExportingEventArgs.prototype.header;
    /**
     * Contains the exporting column field name
     * @type {?}
     */
    IColumnExportingEventArgs.prototype.field;
    /**
     * Contains the exporting column index
     * @type {?}
     */
    IColumnExportingEventArgs.prototype.columnIndex;
    /**
     * Skip the exporting column when set to true
     * @type {?}
     */
    IColumnExportingEventArgs.prototype.cancel;
    /**
     * Export the column's data without applying its formatter, when set to true
     * @type {?}
     */
    IColumnExportingEventArgs.prototype.skipFormatter;
}
/**
 * @abstract
 */
var IgxBaseExporter = /** @class */ (function () {
    function IgxBaseExporter() {
        this.flatRecords = [];
        this._isTreeGrid = false;
        this._indexOfLastPinnedColumn = -1;
        this._sort = null;
        /**
         * This event is emitted when a row is exported.
         * ```typescript
         * this.exporterService.onRowExport.subscribe((args: IRowExportingEventArgs) => {
         * // put event handler code here
         * });
         * ```
         * \@memberof IgxBaseExporter
         */
        this.onRowExport = new EventEmitter();
        /**
         * This event is emitted when a column is exported.
         * ```typescript
         * this.exporterService.onColumnExport.subscribe((args: IColumnExportingEventArgs) => {
         * // put event handler code here
         * });
         * ```
         * \@memberof IgxBaseExporter
         */
        this.onColumnExport = new EventEmitter();
    }
    /**
     * Method for exporting IgxGrid component's data.
     * ```typescript
     * this.exporterService.export(this.igxGridForExport, this.exportOptions);
     * ```
     * @memberof IgxBaseExporter
     */
    /**
     * Method for exporting IgxGrid component's data.
     * ```typescript
     * this.exporterService.export(this.igxGridForExport, this.exportOptions);
     * ```
     * \@memberof IgxBaseExporter
     * @param {?} grid
     * @param {?} options
     * @return {?}
     */
    IgxBaseExporter.prototype.export = /**
     * Method for exporting IgxGrid component's data.
     * ```typescript
     * this.exporterService.export(this.igxGridForExport, this.exportOptions);
     * ```
     * \@memberof IgxBaseExporter
     * @param {?} grid
     * @param {?} options
     * @return {?}
     */
    function (grid, options) {
        var _this = this;
        if (options === undefined || options === null) {
            throw Error('No options provided!');
        }
        /** @type {?} */
        var columns = grid.columnList.toArray();
        this._columnList = new Array(columns.length);
        /** @type {?} */
        var hiddenColumns = [];
        /** @type {?} */
        var lastVisbleColumnIndex = -1;
        columns.forEach(function (column) {
            /** @type {?} */
            var columnHeader = column.header !== '' ? column.header : column.field;
            /** @type {?} */
            var exportColumn = !column.hidden || options.ignoreColumnsVisibility;
            /** @type {?} */
            var index = options.ignoreColumnsOrder ? column.index : column.visibleIndex;
            /** @type {?} */
            var columnInfo = {
                header: columnHeader,
                field: column.field,
                skip: !exportColumn,
                formatter: column.formatter,
                skipFormatter: false
            };
            if (index !== -1) {
                _this._columnList[index] = columnInfo;
                lastVisbleColumnIndex = Math.max(lastVisbleColumnIndex, index);
            }
            else {
                hiddenColumns.push(columnInfo);
            }
            if (column.pinned && exportColumn) {
                _this._indexOfLastPinnedColumn = index;
            }
        });
        // Append the hidden columns to the end of the list
        hiddenColumns.forEach(function (hiddenColumn) {
            _this._columnList[++lastVisbleColumnIndex] = hiddenColumn;
        });
        /** @type {?} */
        var data = this.prepareData(grid, options);
        this.exportData(data, options);
    };
    /**
     * Method for exporting any kind of array data.
     * ```typescript
     * this.exporterService.exportData(this.arrayForExport, this.exportOptions);
     * ```
     * @memberof IgxBaseExporter
     */
    /**
     * Method for exporting any kind of array data.
     * ```typescript
     * this.exporterService.exportData(this.arrayForExport, this.exportOptions);
     * ```
     * \@memberof IgxBaseExporter
     * @param {?} data
     * @param {?} options
     * @return {?}
     */
    IgxBaseExporter.prototype.exportData = /**
     * Method for exporting any kind of array data.
     * ```typescript
     * this.exporterService.exportData(this.arrayForExport, this.exportOptions);
     * ```
     * \@memberof IgxBaseExporter
     * @param {?} data
     * @param {?} options
     * @return {?}
     */
    function (data, options) {
        var _this = this;
        if (options === undefined || options === null) {
            throw Error('No options provided!');
        }
        if (!this._columnList || this._columnList.length === 0) {
            /** @type {?} */
            var keys = ExportUtilities.getKeysFromData(data);
            this._columnList = keys.map(function (k) { return ({ header: k, field: k, skip: false }); });
        }
        /** @type {?} */
        var skippedPinnedColumnsCount = 0;
        /** @type {?} */
        var columnsWithoutHeaderCount = 1;
        this._columnList.forEach(function (column, index) {
            if (!column.skip) {
                /** @type {?} */
                var columnExportArgs = {
                    header: ExportUtilities.isNullOrWhitespaces(column.header) ?
                        'Column' + columnsWithoutHeaderCount++ : column.header,
                    field: column.field,
                    columnIndex: index,
                    cancel: false,
                    skipFormatter: false
                };
                _this.onColumnExport.emit(columnExportArgs);
                column.header = columnExportArgs.header;
                column.skip = columnExportArgs.cancel;
                column.skipFormatter = columnExportArgs.skipFormatter;
                if (column.skip && index <= _this._indexOfLastPinnedColumn) {
                    skippedPinnedColumnsCount++;
                }
                if (_this._sort && _this._sort.fieldName === column.field) {
                    if (column.skip) {
                        _this._sort = null;
                    }
                    else {
                        _this._sort.fieldName = column.header;
                    }
                }
            }
        });
        this._indexOfLastPinnedColumn -= skippedPinnedColumnsCount;
        /** @type {?} */
        var dataToExport = new Array();
        /** @type {?} */
        var isSpecialData = ExportUtilities.isSpecialData(data);
        data.forEach(function (row, index) {
            _this.exportRow(dataToExport, row, index, isSpecialData);
        });
        this.exportDataImplementation(dataToExport, options);
        this.resetDefaults();
    };
    /**
     * @private
     * @param {?} data
     * @param {?} rowData
     * @param {?} index
     * @param {?} isSpecialData
     * @return {?}
     */
    IgxBaseExporter.prototype.exportRow = /**
     * @private
     * @param {?} data
     * @param {?} rowData
     * @param {?} index
     * @param {?} isSpecialData
     * @return {?}
     */
    function (data, rowData, index, isSpecialData) {
        var _this = this;
        /** @type {?} */
        var row;
        if (!isSpecialData) {
            row = this._columnList.reduce(function (a, e) {
                if (!e.skip) {
                    /** @type {?} */
                    var rawValue = _this._isTreeGrid ? rowData.data[e.field] : rowData[e.field];
                    a[e.header] = e.formatter && !e.skipFormatter ? e.formatter(rawValue) : rawValue;
                }
                return a;
            }, {});
        }
        else {
            row = this._isTreeGrid ? rowData.data : rowData;
        }
        /** @type {?} */
        var rowArgs = {
            rowData: row,
            rowIndex: index,
            cancel: false
        };
        this.onRowExport.emit(rowArgs);
        if (!rowArgs.cancel) {
            data.push({ rowData: rowArgs.rowData, originalRowData: rowData });
        }
    };
    /**
     * @private
     * @param {?} grid
     * @param {?} options
     * @return {?}
     */
    IgxBaseExporter.prototype.prepareData = /**
     * @private
     * @param {?} grid
     * @param {?} options
     * @return {?}
     */
    function (grid, options) {
        this.flatRecords = [];
        /** @type {?} */
        var rootRecords = grid.rootRecords;
        this._isTreeGrid = rootRecords !== undefined;
        if (this._isTreeGrid) {
            this.prepareHierarchicalData(rootRecords);
        }
        /** @type {?} */
        var data = this._isTreeGrid ? this.flatRecords : grid.data;
        if (grid.filteringExpressionsTree &&
            grid.filteringExpressionsTree.filteringOperands.length > 0 &&
            !options.ignoreFiltering) {
            /** @type {?} */
            var filteringState = {
                expressionsTree: grid.filteringExpressionsTree,
                advancedExpressionsTree: grid.advancedExpressionsTree,
                logic: grid.filteringLogic
            };
            if (this._isTreeGrid) {
                this.flatRecords = [];
                filteringState.strategy = new TreeGridFilteringStrategy();
                rootRecords = filteringState.strategy.filter(rootRecords, filteringState.expressionsTree, filteringState.advancedExpressionsTree);
                this.prepareHierarchicalData(rootRecords);
                data = this.flatRecords;
            }
            else {
                data = DataUtil.filter(data, filteringState);
            }
        }
        if (grid.sortingExpressions &&
            grid.sortingExpressions.length > 0 &&
            !options.ignoreSorting) {
            this._sort = cloneValue(grid.sortingExpressions[0]);
            if (this._isTreeGrid) {
                this.flatRecords = [];
                rootRecords = DataUtil.treeGridSort(rootRecords, grid.sortingExpressions);
                this.prepareHierarchicalData(rootRecords);
                data = this.flatRecords;
            }
            else {
                data = DataUtil.sort(data, grid.sortingExpressions);
            }
        }
        return data;
    };
    /**
     * @private
     * @param {?} records
     * @return {?}
     */
    IgxBaseExporter.prototype.prepareHierarchicalData = /**
     * @private
     * @param {?} records
     * @return {?}
     */
    function (records) {
        if (!records) {
            return;
        }
        for (var i = 0; i < records.length; i++) {
            /** @type {?} */
            var hierarchicalRecord = records[i];
            this.flatRecords.push(hierarchicalRecord);
            this.prepareHierarchicalData(hierarchicalRecord.children);
        }
    };
    /**
     * @private
     * @return {?}
     */
    IgxBaseExporter.prototype.resetDefaults = /**
     * @private
     * @return {?}
     */
    function () {
        this._columnList = [];
        this._indexOfLastPinnedColumn = -1;
        this._sort = null;
        this.flatRecords = [];
    };
    IgxBaseExporter.propDecorators = {
        onRowExport: [{ type: Output }],
        onColumnExport: [{ type: Output }]
    };
    return IgxBaseExporter;
}());
export { IgxBaseExporter };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxBaseExporter.prototype._columnList;
    /**
     * @type {?}
     * @private
     */
    IgxBaseExporter.prototype.flatRecords;
    /**
     * @type {?}
     * @protected
     */
    IgxBaseExporter.prototype._isTreeGrid;
    /**
     * @type {?}
     * @protected
     */
    IgxBaseExporter.prototype._indexOfLastPinnedColumn;
    /**
     * @type {?}
     * @protected
     */
    IgxBaseExporter.prototype._sort;
    /**
     * This event is emitted when a row is exported.
     * ```typescript
     * this.exporterService.onRowExport.subscribe((args: IRowExportingEventArgs) => {
     * // put event handler code here
     * });
     * ```
     * \@memberof IgxBaseExporter
     * @type {?}
     */
    IgxBaseExporter.prototype.onRowExport;
    /**
     * This event is emitted when a column is exported.
     * ```typescript
     * this.exporterService.onColumnExport.subscribe((args: IColumnExportingEventArgs) => {
     * // put event handler code here
     * });
     * ```
     * \@memberof IgxBaseExporter
     * @type {?}
     */
    IgxBaseExporter.prototype.onColumnExport;
    /**
     * @abstract
     * @protected
     * @param {?} data
     * @param {?} options
     * @return {?}
     */
    IgxBaseExporter.prototype.exportDataImplementation = function (data, options) { };
}
//# sourceMappingURL=data:application/json;base64,