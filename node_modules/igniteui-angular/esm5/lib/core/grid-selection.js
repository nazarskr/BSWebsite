/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, NgZone } from '@angular/core';
/**
 * @record
 */
export function GridSelectionRange() { }
if (false) {
    /** @type {?} */
    GridSelectionRange.prototype.rowStart;
    /** @type {?} */
    GridSelectionRange.prototype.rowEnd;
    /** @type {?} */
    GridSelectionRange.prototype.columnStart;
    /** @type {?} */
    GridSelectionRange.prototype.columnEnd;
}
/**
 * @record
 */
export function ISelectionNode() { }
if (false) {
    /** @type {?} */
    ISelectionNode.prototype.row;
    /** @type {?} */
    ISelectionNode.prototype.column;
    /** @type {?|undefined} */
    ISelectionNode.prototype.layout;
    /** @type {?|undefined} */
    ISelectionNode.prototype.isSummaryRow;
}
/**
 * @record
 */
export function IMultiRowLayoutNode() { }
if (false) {
    /** @type {?} */
    IMultiRowLayoutNode.prototype.rowStart;
    /** @type {?} */
    IMultiRowLayoutNode.prototype.colStart;
    /** @type {?} */
    IMultiRowLayoutNode.prototype.rowEnd;
    /** @type {?} */
    IMultiRowLayoutNode.prototype.colEnd;
    /** @type {?} */
    IMultiRowLayoutNode.prototype.columnVisibleIndex;
}
/**
 * @record
 */
function ISelectionKeyboardState() { }
if (false) {
    /** @type {?} */
    ISelectionKeyboardState.prototype.node;
    /** @type {?} */
    ISelectionKeyboardState.prototype.shift;
    /** @type {?} */
    ISelectionKeyboardState.prototype.range;
    /** @type {?} */
    ISelectionKeyboardState.prototype.active;
}
/**
 * @record
 */
function ISelectionPointerState() { }
if (false) {
    /** @type {?} */
    ISelectionPointerState.prototype.ctrl;
    /** @type {?} */
    ISelectionPointerState.prototype.primaryButton;
}
// TODO: Refactor - export in a separate file
var 
// TODO: Refactor - export in a separate file
IgxRow = /** @class */ (function () {
    function IgxRow(id, index, data) {
        this.id = id;
        this.index = index;
        this.data = data;
    }
    /**
     * @return {?}
     */
    IgxRow.prototype.createEditEventArgs = /**
     * @return {?}
     */
    function () {
        return {
            rowID: this.id,
            oldValue: tslib_1.__assign({}, this.data),
            newValue: this.newData,
            cancel: false
        };
    };
    return IgxRow;
}());
// TODO: Refactor - export in a separate file
export { IgxRow };
if (false) {
    /** @type {?} */
    IgxRow.prototype.transactionState;
    /** @type {?} */
    IgxRow.prototype.state;
    /** @type {?} */
    IgxRow.prototype.newData;
    /** @type {?} */
    IgxRow.prototype.id;
    /** @type {?} */
    IgxRow.prototype.index;
    /** @type {?} */
    IgxRow.prototype.data;
}
var IgxCell = /** @class */ (function () {
    function IgxCell(id, rowIndex, column, value, editValue, rowData) {
        this.id = id;
        this.rowIndex = rowIndex;
        this.column = column;
        this.value = value;
        this.editValue = editValue;
        this.rowData = rowData;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    IgxCell.prototype.castToNumber = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.column.dataType === 'number' && !this.column.inlineEditorTemplate) {
            /** @type {?} */
            var v = parseFloat(value);
            return !isNaN(v) && isFinite(v) ? v : 0;
        }
        return value;
    };
    /**
     * @return {?}
     */
    IgxCell.prototype.createEditEventArgs = /**
     * @return {?}
     */
    function () {
        return {
            rowID: this.id.rowID,
            cellID: this.id,
            oldValue: this.value,
            newValue: this.editValue,
            cancel: false
        };
    };
    return IgxCell;
}());
export { IgxCell };
if (false) {
    /** @type {?} */
    IgxCell.prototype.primaryKey;
    /** @type {?} */
    IgxCell.prototype.state;
    /** @type {?} */
    IgxCell.prototype.id;
    /** @type {?} */
    IgxCell.prototype.rowIndex;
    /** @type {?} */
    IgxCell.prototype.column;
    /** @type {?} */
    IgxCell.prototype.value;
    /** @type {?} */
    IgxCell.prototype.editValue;
    /** @type {?} */
    IgxCell.prototype.rowData;
}
var IgxGridCRUDService = /** @class */ (function () {
    function IgxGridCRUDService() {
        this.cell = null;
        this.row = null;
    }
    /**
     * @param {?} cell
     * @return {?}
     */
    IgxGridCRUDService.prototype.createCell = /**
     * @param {?} cell
     * @return {?}
     */
    function (cell) {
        return new IgxCell(cell.cellID, cell.rowIndex, cell.column, cell.value, cell.value, cell.row.rowData);
    };
    /**
     * @param {?} cell
     * @return {?}
     */
    IgxGridCRUDService.prototype.createRow = /**
     * @param {?} cell
     * @return {?}
     */
    function (cell) {
        return new IgxRow(cell.id.rowID, cell.rowIndex, cell.rowData);
    };
    /**
     * @param {?} rowID
     * @return {?}
     */
    IgxGridCRUDService.prototype.sameRow = /**
     * @param {?} rowID
     * @return {?}
     */
    function (rowID) {
        return this.row && this.row.id === rowID;
    };
    /**
     * @param {?} cell
     * @return {?}
     */
    IgxGridCRUDService.prototype.sameCell = /**
     * @param {?} cell
     * @return {?}
     */
    function (cell) {
        return (this.cell.id.rowID === cell.id.rowID &&
            this.cell.id.columnID === cell.id.columnID);
    };
    Object.defineProperty(IgxGridCRUDService.prototype, "inEditMode", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.cell;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridCRUDService.prototype, "rowEditing", {
        get: /**
         * @return {?}
         */
        function () {
            return this.grid.rowEditable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridCRUDService.prototype, "primaryKey", {
        get: /**
         * @return {?}
         */
        function () {
            return this.grid.primaryKey;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IgxGridCRUDService.prototype.beginRowEdit = /**
     * @return {?}
     */
    function () {
        if (this.grid.rowEditable && (this.grid.primaryKey === undefined || this.grid.primaryKey === null)) {
            console.warn('The grid must have a `primaryKey` specified when using `rowEditable`!');
        }
        this.row = this.createRow(this.cell);
        /** @type {?} */
        var args = {
            rowID: this.row.id,
            oldValue: this.row.data,
            cancel: false
        };
        this.grid.onRowEditEnter.emit(args);
        if (args.cancel) {
            this.endRowEdit();
            return;
        }
        this.row.transactionState = this.grid.transactions.getAggregatedValue(this.row.id, true);
        this.grid.transactions.startPending();
        this.grid.openRowOverlay(this.row.id);
    };
    /**
     * @return {?}
     */
    IgxGridCRUDService.prototype.endRowEdit = /**
     * @return {?}
     */
    function () {
        this.row = null;
    };
    /**
     * @param {?} cell
     * @return {?}
     */
    IgxGridCRUDService.prototype.begin = /**
     * @param {?} cell
     * @return {?}
     */
    function (cell) {
        /** @type {?} */
        var newCell = this.createCell(cell);
        newCell.primaryKey = this.primaryKey;
        /** @type {?} */
        var args = {
            cellID: newCell.id,
            rowID: newCell.id.rowID,
            oldValue: newCell.value,
            cancel: false
        };
        this.grid.onCellEditEnter.emit(args);
        if (args.cancel) {
            this.end();
            return;
        }
        if (this.rowEditing) {
            if (this.row && !this.sameRow(newCell.id.rowID)) {
                this.grid.endEdit(true);
                this.cell = newCell;
                this.beginRowEdit();
                return;
            }
            this.cell = newCell;
            if (!this.row) {
                this.beginRowEdit();
                return;
            }
        }
        else {
            this.cell = newCell;
            this.endRowEdit();
        }
    };
    /**
     * @return {?}
     */
    IgxGridCRUDService.prototype.end = /**
     * @return {?}
     */
    function () {
        this.cell = null;
    };
    /**
     * @param {?} rowIndex
     * @param {?} columnIndex
     * @return {?}
     */
    IgxGridCRUDService.prototype.isInEditMode = /**
     * @param {?} rowIndex
     * @param {?} columnIndex
     * @return {?}
     */
    function (rowIndex, columnIndex) {
        if (!this.cell) {
            return false;
        }
        return this.cell.column.index === columnIndex && this.cell.rowIndex === rowIndex;
    };
    IgxGridCRUDService.decorators = [
        { type: Injectable }
    ];
    return IgxGridCRUDService;
}());
export { IgxGridCRUDService };
if (false) {
    /** @type {?} */
    IgxGridCRUDService.prototype.grid;
    /** @type {?} */
    IgxGridCRUDService.prototype.cell;
    /** @type {?} */
    IgxGridCRUDService.prototype.row;
}
var IgxGridSelectionService = /** @class */ (function () {
    function IgxGridSelectionService(zone) {
        this.zone = zone;
        this.dragMode = false;
        this.keyboardState = (/** @type {?} */ ({}));
        this.pointerState = (/** @type {?} */ ({}));
        this.selection = new Map();
        this.temp = new Map();
        this._ranges = new Set();
        this.rowSelection = new Set();
        this.initPointerState();
        this.initKeyboardState();
    }
    Object.defineProperty(IgxGridSelectionService.prototype, "ranges", {
        /**
         * Returns the current selected ranges in the grid from both
         * keyboard and pointer interactions
         */
        get: /**
         * Returns the current selected ranges in the grid from both
         * keyboard and pointer interactions
         * @return {?}
         */
        function () {
            // The last action was keyboard + shift selection -> add it
            this.addKeyboardRange();
            /** @type {?} */
            var ranges = Array.from(this._ranges).map(function (range) { return JSON.parse(range); });
            // No ranges but we have a focused cell -> add it
            if (!ranges.length && this.activeElement && this.grid.isCellSelectable) {
                ranges.push(this.generateRange(this.activeElement));
            }
            return ranges;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridSelectionService.prototype, "primaryButton", {
        get: /**
         * @return {?}
         */
        function () {
            return this.pointerState.primaryButton;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.pointerState.primaryButton = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Resets the keyboard state
     */
    /**
     * Resets the keyboard state
     * @return {?}
     */
    IgxGridSelectionService.prototype.initKeyboardState = /**
     * Resets the keyboard state
     * @return {?}
     */
    function () {
        this.keyboardState.node = null;
        this.keyboardState.shift = false;
        this.keyboardState.range = null;
        this.keyboardState.active = false;
    };
    /**
     * Resets the pointer state
     */
    /**
     * Resets the pointer state
     * @return {?}
     */
    IgxGridSelectionService.prototype.initPointerState = /**
     * Resets the pointer state
     * @return {?}
     */
    function () {
        this.pointerState.node = null;
        this.pointerState.ctrl = false;
        this.pointerState.shift = false;
        this.pointerState.range = null;
        this.pointerState.primaryButton = true;
    };
    /**
     * Adds a single node.
     * Single clicks | Ctrl + single clicks on cells is the usual case.
     */
    /**
     * Adds a single node.
     * Single clicks | Ctrl + single clicks on cells is the usual case.
     * @param {?} node
     * @param {?=} addToRange
     * @return {?}
     */
    IgxGridSelectionService.prototype.add = /**
     * Adds a single node.
     * Single clicks | Ctrl + single clicks on cells is the usual case.
     * @param {?} node
     * @param {?=} addToRange
     * @return {?}
     */
    function (node, addToRange) {
        if (addToRange === void 0) { addToRange = true; }
        this.selection.has(node.row) ? this.selection.get(node.row).add(node.column) :
            this.selection.set(node.row, new Set()).get(node.row).add(node.column);
        if (addToRange) {
            this._ranges.add(JSON.stringify(this.generateRange(node)));
        }
    };
    /**
     * Adds the active keyboard range selection (if any) to the `ranges` meta.
     */
    /**
     * Adds the active keyboard range selection (if any) to the `ranges` meta.
     * @return {?}
     */
    IgxGridSelectionService.prototype.addKeyboardRange = /**
     * Adds the active keyboard range selection (if any) to the `ranges` meta.
     * @return {?}
     */
    function () {
        if (this.keyboardState.range) {
            this._ranges.add(JSON.stringify(this.keyboardState.range));
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    IgxGridSelectionService.prototype.remove = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        if (this.selection.has(node.row)) {
            this.selection.get(node.row).delete(node.column);
        }
        if (this.isActiveNode(node)) {
            this.activeElement = null;
        }
        this._ranges.delete(JSON.stringify(this.generateRange(node)));
    };
    /**
     * @param {?} node
     * @return {?}
     */
    IgxGridSelectionService.prototype.isInMap = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        return (this.selection.has(node.row) && this.selection.get(node.row).has(node.column)) ||
            (this.temp.has(node.row) && this.temp.get(node.row).has(node.column));
    };
    /**
     * @param {?} node
     * @return {?}
     */
    IgxGridSelectionService.prototype.selected = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        return (this.isActiveNode(node) && this.grid.isCellSelectable) || this.isInMap(node);
    };
    /**
     * @param {?} node
     * @return {?}
     */
    IgxGridSelectionService.prototype.isActiveNode = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        if (this.activeElement) {
            /** @type {?} */
            var isActive = this.activeElement.column === node.column && this.activeElement.row === node.row;
            if (this.grid.hasColumnLayouts) {
                /** @type {?} */
                var layout = this.activeElement.layout;
                return isActive && this.isActiveLayout(layout, node.layout);
            }
            return isActive;
        }
        return false;
    };
    /**
     * @param {?} current
     * @param {?} target
     * @return {?}
     */
    IgxGridSelectionService.prototype.isActiveLayout = /**
     * @param {?} current
     * @param {?} target
     * @return {?}
     */
    function (current, target) {
        return current.columnVisibleIndex === target.columnVisibleIndex;
    };
    /**
     * @param {?} node
     * @param {?=} state
     * @return {?}
     */
    IgxGridSelectionService.prototype.addRangeMeta = /**
     * @param {?} node
     * @param {?=} state
     * @return {?}
     */
    function (node, state) {
        this._ranges.add(JSON.stringify(this.generateRange(node, state)));
    };
    /**
     * @param {?} node
     * @param {?=} state
     * @return {?}
     */
    IgxGridSelectionService.prototype.removeRangeMeta = /**
     * @param {?} node
     * @param {?=} state
     * @return {?}
     */
    function (node, state) {
        this._ranges.delete(JSON.stringify(this.generateRange(node, state)));
    };
    /**
     * Generates a new selection range from the given `node`.
     * If `state` is passed instead it will generate the range based on the passed `node`
     * and the start node of the `state`.
     */
    /**
     * Generates a new selection range from the given `node`.
     * If `state` is passed instead it will generate the range based on the passed `node`
     * and the start node of the `state`.
     * @param {?} node
     * @param {?=} state
     * @return {?}
     */
    IgxGridSelectionService.prototype.generateRange = /**
     * Generates a new selection range from the given `node`.
     * If `state` is passed instead it will generate the range based on the passed `node`
     * and the start node of the `state`.
     * @param {?} node
     * @param {?=} state
     * @return {?}
     */
    function (node, state) {
        if (!state) {
            return {
                rowStart: node.row,
                rowEnd: node.row,
                columnStart: node.column,
                columnEnd: node.column
            };
        }
        var _a = state.node, row = _a.row, column = _a.column;
        /** @type {?} */
        var rowStart = Math.min(node.row, row);
        /** @type {?} */
        var rowEnd = Math.max(node.row, row);
        /** @type {?} */
        var columnStart = Math.min(node.column, column);
        /** @type {?} */
        var columnEnd = Math.max(node.column, column);
        return { rowStart: rowStart, rowEnd: rowEnd, columnStart: columnStart, columnEnd: columnEnd };
    };
    /**
     *
     */
    /**
     *
     * @param {?} node
     * @param {?} shift
     * @param {?} shiftTab
     * @return {?}
     */
    IgxGridSelectionService.prototype.keyboardStateOnKeydown = /**
     *
     * @param {?} node
     * @param {?} shift
     * @param {?} shiftTab
     * @return {?}
     */
    function (node, shift, shiftTab) {
        this.keyboardState.active = true;
        this.initPointerState();
        this.keyboardState.shift = shift && !shiftTab;
        // Kb navigation with shift and no previous node.
        // Clear the current selection init the start node.
        if (this.keyboardState.shift && !this.keyboardState.node) {
            this.clear();
            this.keyboardState.node = node;
        }
    };
    /**
     * @param {?} node
     * @param {?} emitter
     * @param {?} dom
     * @return {?}
     */
    IgxGridSelectionService.prototype.keyboardStateOnFocus = /**
     * @param {?} node
     * @param {?} emitter
     * @param {?} dom
     * @return {?}
     */
    function (node, emitter, dom) {
        /** @type {?} */
        var kbState = this.keyboardState;
        // Focus triggered by keyboard navigation
        if (kbState.active) {
            if (isChromium()) {
                this._moveSelectionChrome(dom);
            }
            // Start generating a range if shift is hold
            if (kbState.shift) {
                this.dragSelect(node, kbState);
                kbState.range = this.generateRange(node, kbState);
                emitter.emit(this.generateRange(node, kbState));
                return;
            }
            this.initKeyboardState();
            this.clear();
            this.add(node);
        }
    };
    /**
     * @param {?} node
     * @param {?} shift
     * @param {?} ctrl
     * @return {?}
     */
    IgxGridSelectionService.prototype.pointerDown = /**
     * @param {?} node
     * @param {?} shift
     * @param {?} ctrl
     * @return {?}
     */
    function (node, shift, ctrl) {
        this.addKeyboardRange();
        this.initKeyboardState();
        this.pointerState.ctrl = ctrl;
        this.pointerState.shift = shift;
        // No ctrl key pressed - no multiple selection
        if (!ctrl) {
            this.clear();
        }
        if (shift) {
            // No previously 'clicked' node. Use the last active node.
            if (!this.pointerState.node) {
                this.pointerState.node = this.activeElement || node;
            }
            this.pointerDownShiftKey(node);
            this.clearTextSelection();
            return;
        }
        this.removeRangeMeta(node);
        this.pointerState.node = node;
    };
    /**
     * @param {?} node
     * @return {?}
     */
    IgxGridSelectionService.prototype.pointerDownShiftKey = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.clear();
        this.selectRange(node, this.pointerState);
    };
    /**
     * @param {?} target
     * @param {?} source
     * @return {?}
     */
    IgxGridSelectionService.prototype.mergeMap = /**
     * @param {?} target
     * @param {?} source
     * @return {?}
     */
    function (target, source) {
        /** @type {?} */
        var iterator = source.entries();
        /** @type {?} */
        var pair = iterator.next();
        /** @type {?} */
        var key;
        /** @type {?} */
        var value;
        var _loop_1 = function () {
            var _a;
            _a = tslib_1.__read(pair.value, 2), key = _a[0], value = _a[1];
            if (target.has(key)) {
                /** @type {?} */
                var newValue_1 = target.get(key);
                value.forEach(function (record) { return newValue_1.add(record); });
                target.set(key, newValue_1);
            }
            else {
                target.set(key, value);
            }
            pair = iterator.next();
        };
        while (!pair.done) {
            _loop_1();
        }
    };
    /**
     * @param {?} node
     * @param {?} event
     * @return {?}
     */
    IgxGridSelectionService.prototype.pointerEnter = /**
     * @param {?} node
     * @param {?} event
     * @return {?}
     */
    function (node, event) {
        // https://www.w3.org/TR/pointerevents/#the-button-property
        this.dragMode = event.buttons === 1 && event.button === -1;
        if (!this.dragMode) {
            return false;
        }
        this.clearTextSelection();
        // If the users triggers a drag-like event by first clicking outside the grid cells
        // and then enters in the grid body we may not have a initial pointer starting node.
        // Assume the first pointerenter node is where we start.
        if (!this.pointerState.node) {
            this.pointerState.node = node;
        }
        this.pointerState.ctrl ? this.selectRange(node, this.pointerState, this.temp) :
            this.dragSelect(node, this.pointerState);
        return true;
    };
    /**
     * @param {?} node
     * @param {?} emitter
     * @return {?}
     */
    IgxGridSelectionService.prototype.pointerUp = /**
     * @param {?} node
     * @param {?} emitter
     * @return {?}
     */
    function (node, emitter) {
        var _this = this;
        if (this.dragMode) {
            this.restoreTextSelection();
            this.addRangeMeta(node, this.pointerState);
            this.mergeMap(this.selection, this.temp);
            this.zone.runTask(function () { return emitter.emit(_this.generateRange(node, _this.pointerState)); });
            this.temp.clear();
            this.dragMode = false;
            return true;
        }
        if (this.pointerState.shift) {
            this.clearTextSelection();
            this.restoreTextSelection();
            this.addRangeMeta(node, this.pointerState);
            emitter.emit(this.generateRange(node, this.pointerState));
            return true;
        }
        this.add(node);
        return false;
    };
    /**
     * @param {?} node
     * @param {?} state
     * @param {?=} collection
     * @return {?}
     */
    IgxGridSelectionService.prototype.selectRange = /**
     * @param {?} node
     * @param {?} state
     * @param {?=} collection
     * @return {?}
     */
    function (node, state, collection) {
        if (collection === void 0) { collection = this.selection; }
        if (collection === this.temp) {
            collection.clear();
        }
        var _a = this.generateRange(node, state), rowStart = _a.rowStart, rowEnd = _a.rowEnd, columnStart = _a.columnStart, columnEnd = _a.columnEnd;
        for (var i = rowStart; i <= rowEnd; i++) {
            for (var j = (/** @type {?} */ (columnStart)); j <= columnEnd; j++) {
                collection.has(i) ? collection.get(i).add(j) :
                    collection.set(i, new Set()).get(i).add(j);
            }
        }
    };
    /**
     * @param {?} node
     * @param {?} state
     * @return {?}
     */
    IgxGridSelectionService.prototype.dragSelect = /**
     * @param {?} node
     * @param {?} state
     * @return {?}
     */
    function (node, state) {
        if (!this.pointerState.ctrl) {
            this.selection.clear();
        }
        this.selectRange(node, state);
    };
    /**
     * @param {?=} clearAcriveEl
     * @return {?}
     */
    IgxGridSelectionService.prototype.clear = /**
     * @param {?=} clearAcriveEl
     * @return {?}
     */
    function (clearAcriveEl) {
        if (clearAcriveEl === void 0) { clearAcriveEl = false; }
        if (clearAcriveEl) {
            this.activeElement = null;
        }
        this.selection.clear();
        this.temp.clear();
        this._ranges.clear();
    };
    /**
     * @return {?}
     */
    IgxGridSelectionService.prototype.clearTextSelection = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var selection = window.getSelection();
        if (selection.rangeCount) {
            this._selectionRange = selection.getRangeAt(0);
            this._selectionRange.collapse(true);
            selection.removeAllRanges();
        }
    };
    /**
     * @return {?}
     */
    IgxGridSelectionService.prototype.restoreTextSelection = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var selection = window.getSelection();
        if (!selection.rangeCount) {
            selection.addRange(this._selectionRange || document.createRange());
        }
    };
    /**
     * (╯°□°）╯︵ ┻━┻
     * Chrome and Chromium don't care about the active
     * range after keyboard navigation, thus this.
     */
    /**
     * (╯°□°）╯︵ ┻━┻
     * Chrome and Chromium don't care about the active
     * range after keyboard navigation, thus this.
     * @param {?} node
     * @return {?}
     */
    IgxGridSelectionService.prototype._moveSelectionChrome = /**
     * (╯°□°）╯︵ ┻━┻
     * Chrome and Chromium don't care about the active
     * range after keyboard navigation, thus this.
     * @param {?} node
     * @return {?}
     */
    function (node) {
        /** @type {?} */
        var selection = window.getSelection();
        selection.removeAllRanges();
        /** @type {?} */
        var range = new Range();
        range.selectNode(node);
        range.collapse(true);
        selection.addRange(range);
    };
    /** Returns array of the selected row id's. */
    /**
     * Returns array of the selected row id's.
     * @return {?}
     */
    IgxGridSelectionService.prototype.getSelectedRows = /**
     * Returns array of the selected row id's.
     * @return {?}
     */
    function () {
        return this.rowSelection.size ? Array.from(this.rowSelection.keys()) : [];
    };
    /** Clears row selection, if filtering is applied clears only selected rows from filtered data. */
    /**
     * Clears row selection, if filtering is applied clears only selected rows from filtered data.
     * @param {?=} event
     * @return {?}
     */
    IgxGridSelectionService.prototype.clearRowSelection = /**
     * Clears row selection, if filtering is applied clears only selected rows from filtered data.
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        /** @type {?} */
        var removedRec = this.isFilteringApplied() ?
            this.getRowIDs(this.allData).filter(function (rID) { return _this.isRowSelected(rID); }) : this.getSelectedRows();
        /** @type {?} */
        var newSelection = this.isFilteringApplied() ? this.getSelectedRows().filter(function (x) { return !removedRec.includes(x); }) : [];
        this.emitRowSelectionEvent(newSelection, [], removedRec, event);
    };
    /** Select all rows, if filtering is applied select only from filtered data. */
    /**
     * Select all rows, if filtering is applied select only from filtered data.
     * @param {?=} event
     * @return {?}
     */
    IgxGridSelectionService.prototype.selectAllRows = /**
     * Select all rows, if filtering is applied select only from filtered data.
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        /** @type {?} */
        var allRowIDs = this.getRowIDs(this.allData);
        /** @type {?} */
        var addedRows = allRowIDs.filter(function (rID) { return !_this.isRowSelected(rID); });
        /** @type {?} */
        var newSelection = this.rowSelection.size ? this.getSelectedRows().concat(addedRows) : addedRows;
        this.emitRowSelectionEvent(newSelection, addedRows, [], event);
    };
    /** Select the specified row and emit event. */
    /**
     * Select the specified row and emit event.
     * @param {?} rowID
     * @param {?=} clearPrevSelection
     * @param {?=} event
     * @return {?}
     */
    IgxGridSelectionService.prototype.selectRowById = /**
     * Select the specified row and emit event.
     * @param {?} rowID
     * @param {?=} clearPrevSelection
     * @param {?=} event
     * @return {?}
     */
    function (rowID, clearPrevSelection, event) {
        if (!this.grid.isRowSelectable || this.isRowDeleted(rowID)) {
            return;
        }
        clearPrevSelection = !this.grid.isMultiRowSelectionEnabled || clearPrevSelection;
        /** @type {?} */
        var newSelection = clearPrevSelection ? [rowID] : this.getSelectedRows().indexOf(rowID) !== -1 ?
            this.getSelectedRows() : tslib_1.__spread(this.getSelectedRows(), [rowID]);
        /** @type {?} */
        var removed = clearPrevSelection ? this.getSelectedRows() : [];
        this.emitRowSelectionEvent(newSelection, [rowID], removed, event);
    };
    /** Deselect the specified row and emit event. */
    /**
     * Deselect the specified row and emit event.
     * @param {?} rowID
     * @param {?=} event
     * @return {?}
     */
    IgxGridSelectionService.prototype.deselectRow = /**
     * Deselect the specified row and emit event.
     * @param {?} rowID
     * @param {?=} event
     * @return {?}
     */
    function (rowID, event) {
        if (!this.isRowSelected(rowID)) {
            return;
        }
        /** @type {?} */
        var newSelection = this.getSelectedRows().filter(function (r) { return r !== rowID; });
        if (this.rowSelection.size && this.rowSelection.has(rowID)) {
            this.emitRowSelectionEvent(newSelection, [], [rowID], event);
        }
    };
    /** Select specified rows. No event is emitted. */
    /**
     * Select specified rows. No event is emitted.
     * @param {?} rowIDs
     * @param {?=} clearPrevSelection
     * @return {?}
     */
    IgxGridSelectionService.prototype.selectRowsWithNoEvent = /**
     * Select specified rows. No event is emitted.
     * @param {?} rowIDs
     * @param {?=} clearPrevSelection
     * @return {?}
     */
    function (rowIDs, clearPrevSelection) {
        var _this = this;
        if (clearPrevSelection) {
            this.rowSelection.clear();
        }
        rowIDs.forEach(function (rowID) { _this.rowSelection.add(rowID); });
        this.allRowsSelected = undefined;
    };
    /** Deselect specified rows. No event is emitted. */
    /**
     * Deselect specified rows. No event is emitted.
     * @param {?} rowIDs
     * @return {?}
     */
    IgxGridSelectionService.prototype.deselectRowsWithNoEvent = /**
     * Deselect specified rows. No event is emitted.
     * @param {?} rowIDs
     * @return {?}
     */
    function (rowIDs) {
        var _this = this;
        rowIDs.forEach(function (rowID) { return _this.rowSelection.delete(rowID); });
        this.allRowsSelected = undefined;
    };
    /**
     * @param {?} rowID
     * @return {?}
     */
    IgxGridSelectionService.prototype.isRowSelected = /**
     * @param {?} rowID
     * @return {?}
     */
    function (rowID) {
        return this.rowSelection.size > 0 && this.rowSelection.has(rowID);
    };
    /** Select range from last selected row to the current specified row.*/
    /**
     * Select range from last selected row to the current specified row.
     * @param {?} rowID
     * @param {?} rowData
     * @param {?=} event
     * @return {?}
     */
    IgxGridSelectionService.prototype.selectMultipleRows = /**
     * Select range from last selected row to the current specified row.
     * @param {?} rowID
     * @param {?} rowData
     * @param {?=} event
     * @return {?}
     */
    function (rowID, rowData, event) {
        var _this = this;
        this.allRowsSelected = undefined;
        if (!this.rowSelection.size || this.isRowDeleted(rowID)) {
            this.selectRowById(rowID);
            return;
        }
        /** @type {?} */
        var gridData = this.allData;
        /** @type {?} */
        var lastRowID = this.getSelectedRows()[this.rowSelection.size - 1];
        /** @type {?} */
        var currIndex = gridData.indexOf(this.getRowDataById(lastRowID));
        /** @type {?} */
        var newIndex = gridData.indexOf(rowData);
        /** @type {?} */
        var rows = gridData.slice(Math.min(currIndex, newIndex), Math.max(currIndex, newIndex) + 1);
        /** @type {?} */
        var added = this.getRowIDs(rows).filter(function (rID) { return !_this.isRowSelected(rID); });
        /** @type {?} */
        var newSelection = this.getSelectedRows().concat(added);
        this.emitRowSelectionEvent(newSelection, added, [], event);
    };
    /**
     * @return {?}
     */
    IgxGridSelectionService.prototype.areAllRowSelected = /**
     * @return {?}
     */
    function () {
        if (!this.grid.data) {
            return false;
        }
        if (this.allRowsSelected !== undefined) {
            return this.allRowsSelected;
        }
        /** @type {?} */
        var dataItemsID = this.getRowIDs(this.allData);
        return this.allRowsSelected = Math.min(this.rowSelection.size, dataItemsID.length) > 0 &&
            new Set(Array.from(this.rowSelection.values()).concat(dataItemsID)).size === this.rowSelection.size;
    };
    /**
     * @return {?}
     */
    IgxGridSelectionService.prototype.hasSomeRowSelected = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var filteredData = this.isFilteringApplied() ?
            this.getRowIDs(this.grid.filteredData).some(function (rID) { return _this.isRowSelected(rID); }) : true;
        return this.rowSelection.size > 0 && filteredData && !this.areAllRowSelected();
    };
    Object.defineProperty(IgxGridSelectionService.prototype, "filteredSelectedRowIds", {
        get: /**
         * @return {?}
         */
        function () {
            var _this = this;
            return this.isFilteringApplied() ?
                this.getRowIDs(this.allData).filter(function (rowID) { return _this.isRowSelected(rowID); }) :
                this.getSelectedRows().filter(function (rowID) { return !_this.isRowDeleted(rowID); });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} newSelection
     * @param {?} added
     * @param {?} removed
     * @param {?=} event
     * @return {?}
     */
    IgxGridSelectionService.prototype.emitRowSelectionEvent = /**
     * @param {?} newSelection
     * @param {?} added
     * @param {?} removed
     * @param {?=} event
     * @return {?}
     */
    function (newSelection, added, removed, event) {
        /** @type {?} */
        var currSelection = this.getSelectedRows();
        if (this.areEqualCollections(currSelection, newSelection)) {
            return;
        }
        /** @type {?} */
        var args = {
            oldSelection: currSelection, newSelection: newSelection,
            added: added, removed: removed, event: event, cancel: false
        };
        this.grid.onRowSelectionChange.emit(args);
        if (args.cancel) {
            return;
        }
        this.selectRowsWithNoEvent(args.newSelection, true);
    };
    /**
     * @param {?} rowID
     * @return {?}
     */
    IgxGridSelectionService.prototype.getRowDataById = /**
     * @param {?} rowID
     * @return {?}
     */
    function (rowID) {
        if (!this.grid.primaryKey) {
            return rowID;
        }
        /** @type {?} */
        var rowIndex = this.getRowIDs(this.grid.gridAPI.get_all_data(true)).indexOf(rowID);
        return rowIndex < 0 ? {} : this.grid.gridAPI.get_all_data(true)[rowIndex];
    };
    /**
     * @param {?} data
     * @return {?}
     */
    IgxGridSelectionService.prototype.getRowIDs = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        return this.grid.primaryKey && data.length ? data.map(function (rec) { return rec[_this.grid.primaryKey]; }) : data;
    };
    /**
     * @return {?}
     */
    IgxGridSelectionService.prototype.clearHeaderCBState = /**
     * @return {?}
     */
    function () {
        this.allRowsSelected = undefined;
    };
    /**Clear rowSelection and update checkbox state*/
    /**
     * Clear rowSelection and update checkbox state
     * @return {?}
     */
    IgxGridSelectionService.prototype.clearAllSelectedRows = /**
     * Clear rowSelection and update checkbox state
     * @return {?}
     */
    function () {
        this.rowSelection.clear();
        this.clearHeaderCBState();
    };
    Object.defineProperty(IgxGridSelectionService.prototype, "allData", {
        /** Returns all data in the grid, with applied filtering and sorting and without deleted rows. */
        get: /**
         * Returns all data in the grid, with applied filtering and sorting and without deleted rows.
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var allData = this.isFilteringApplied() || this.grid.sortingExpressions.length ?
                this.grid.filteredSortedData : this.grid.gridAPI.get_all_data(true);
            return allData.filter(function (rData) { return !_this.isRowDeleted(_this.grid.gridAPI.get_row_id(rData)); });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    IgxGridSelectionService.prototype.areEqualCollections = /**
     * @private
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    function (first, second) {
        return first.length === second.length && new Set(first.concat(second)).size === first.length;
    };
    /**
     * @private
     * @return {?}
     */
    IgxGridSelectionService.prototype.isFilteringApplied = /**
     * @private
     * @return {?}
     */
    function () {
        return this.grid.filteringExpressionsTree.filteringOperands.length > 0;
    };
    /**
     * @private
     * @param {?} rowID
     * @return {?}
     */
    IgxGridSelectionService.prototype.isRowDeleted = /**
     * @private
     * @param {?} rowID
     * @return {?}
     */
    function (rowID) {
        return this.grid.gridAPI.row_deleted_transaction(rowID);
    };
    IgxGridSelectionService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    IgxGridSelectionService.ctorParameters = function () { return [
        { type: NgZone }
    ]; };
    return IgxGridSelectionService;
}());
export { IgxGridSelectionService };
if (false) {
    /** @type {?} */
    IgxGridSelectionService.prototype.grid;
    /** @type {?} */
    IgxGridSelectionService.prototype.dragMode;
    /** @type {?} */
    IgxGridSelectionService.prototype.activeElement;
    /** @type {?} */
    IgxGridSelectionService.prototype.keyboardState;
    /** @type {?} */
    IgxGridSelectionService.prototype.pointerState;
    /** @type {?} */
    IgxGridSelectionService.prototype.selection;
    /** @type {?} */
    IgxGridSelectionService.prototype.temp;
    /** @type {?} */
    IgxGridSelectionService.prototype._ranges;
    /** @type {?} */
    IgxGridSelectionService.prototype._selectionRange;
    /** @type {?} */
    IgxGridSelectionService.prototype.rowSelection;
    /**
     * @type {?}
     * @private
     */
    IgxGridSelectionService.prototype.allRowsSelected;
    /**
     * @type {?}
     * @private
     */
    IgxGridSelectionService.prototype.zone;
}
/**
 * @return {?}
 */
export function isChromium() {
    return (/Chrom|e?ium/g.test(navigator.userAgent) || /Google Inc/g.test(navigator.vendor)) && !/Edge/g.test(navigator.userAgent);
}
//# sourceMappingURL=data:application/json;base64,