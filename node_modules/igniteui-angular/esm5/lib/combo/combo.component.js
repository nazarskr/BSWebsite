/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ConnectedPositioningStrategy } from './../services/overlay/position/connected-positioning-strategy';
import { CommonModule } from '@angular/common';
import { ChangeDetectorRef, Component, ContentChild, ElementRef, EventEmitter, HostBinding, HostListener, Input, NgModule, Output, TemplateRef, ViewChild, Optional, Inject, Injector, forwardRef } from '@angular/core';
import { IgxComboItemDirective, IgxComboEmptyDirective, IgxComboHeaderItemDirective, IgxComboHeaderDirective, IgxComboFooterDirective, IgxComboAddItemDirective, IgxComboToggleIconDirective, IgxComboClearIconDirective } from './combo.directives';
import { FormsModule, ReactiveFormsModule, NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';
import { IgxCheckboxModule } from '../checkbox/checkbox.component';
import { IgxSelectionAPIService } from '../core/selection';
import { cloneArray } from '../core/utils';
import { IgxStringFilteringOperand, IgxBooleanFilteringOperand } from '../data-operations/filtering-condition';
import { FilteringLogic } from '../data-operations/filtering-expression.interface';
import { SortingDirection } from '../data-operations/sorting-expression.interface';
import { IgxForOfModule, IgxForOfDirective } from '../directives/for-of/for_of.directive';
import { IgxIconModule } from '../icon/index';
import { IgxRippleModule } from '../directives/ripple/ripple.directive';
import { IgxToggleModule } from '../directives/toggle/toggle.directive';
import { IgxButtonModule } from '../directives/button/button.directive';
import { IgxDropDownModule } from '../drop-down/index';
import { IgxInputGroupModule, IgxInputGroupComponent } from '../input-group/input-group.component';
import { IgxComboItemComponent } from './combo-item.component';
import { IgxComboDropDownComponent } from './combo-dropdown.component';
import { IgxComboFilterConditionPipe, IgxComboFilteringPipe, IgxComboGroupingPipe, IgxComboSortingPipe } from './combo.pipes';
import { AbsoluteScrollStrategy } from '../services';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { DefaultSortingStrategy } from '../data-operations/sorting-strategy';
import { DisplayDensityBase, DisplayDensityToken } from '../core/density';
import { IGX_COMBO_COMPONENT } from './combo.common';
import { IgxComboAddItemComponent } from './combo-add-item.component';
import { IgxComboAPIService } from './combo.api';
import { take } from 'rxjs/operators';
import { IgxInputState, IgxInputDirective } from '../directives/input/input.directive';
/** @enum {string} */
var DataTypes = {
    EMPTY: 'empty',
    PRIMITIVE: 'primitive',
    COMPLEX: 'complex',
    PRIMARYKEY: 'valueKey',
};
/**
 * @hidden
 * @type {?}
 */
var ItemHeights = {
    'comfortable': 40,
    'cosy': 32,
    'compact': 28,
};
/**
 * @hidden
 * The default number of items that should be in the combo's
 * drop-down list if no `[itemsMaxHeight]` is specified
 * @type {?}
 */
var itemsInContainer = 10;
/** @enum {number} */
var IgxComboState = {
    /**
     * Combo with initial state.
     */
    INITIAL: 0,
    /**
     * Combo with valid state.
     */
    VALID: 1,
    /**
     * Combo with invalid state.
     */
    INVALID: 2,
};
export { IgxComboState };
IgxComboState[IgxComboState.INITIAL] = 'INITIAL';
IgxComboState[IgxComboState.VALID] = 'VALID';
IgxComboState[IgxComboState.INVALID] = 'INVALID';
/**
 * Event emitted when an igx-combo's selection is changing
 * @record
 */
export function IComboSelectionChangeEventArgs() { }
if (false) {
    /**
     * An array containing the values that are currently selected
     * @type {?}
     */
    IComboSelectionChangeEventArgs.prototype.oldSelection;
    /**
     * An array containing the values that will be selected after this event
     * @type {?}
     */
    IComboSelectionChangeEventArgs.prototype.newSelection;
    /**
     * An array containing the values that will be added to the selection (if any)
     * @type {?}
     */
    IComboSelectionChangeEventArgs.prototype.added;
    /**
     * An array containing the values that will be removed from the selection (if any)
     * @type {?}
     */
    IComboSelectionChangeEventArgs.prototype.removed;
    /**
     * The user interaction that triggered the selection change
     * @type {?|undefined}
     */
    IComboSelectionChangeEventArgs.prototype.event;
}
/**
 * @record
 */
export function IComboItemAdditionEvent() { }
if (false) {
    /** @type {?} */
    IComboItemAdditionEvent.prototype.oldCollection;
    /** @type {?} */
    IComboItemAdditionEvent.prototype.addedItem;
    /** @type {?} */
    IComboItemAdditionEvent.prototype.newCollection;
}
/**
 * When called with sets A & B, returns A - B (as array);
 * @hidden
 * @param {?} set1
 * @param {?} set2
 * @return {?}
 */
function diffInSets(set1, set2) {
    /** @type {?} */
    var results = [];
    set1.forEach(function (entry) {
        if (!set2.has(entry)) {
            results.push(entry);
        }
    });
    return results;
}
/** @type {?} */
var NEXT_ID = 0;
/** @type {?} */
var noop = function () { };
var Éµ0 = noop;
var IgxComboComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgxComboComponent, _super);
    function IgxComboComponent(elementRef, cdr, selection, comboAPI, _displayDensityOptions, _injector) {
        var _this = _super.call(this, _displayDensityOptions) || this;
        _this.elementRef = elementRef;
        _this.cdr = cdr;
        _this.selection = selection;
        _this.comboAPI = comboAPI;
        _this._displayDensityOptions = _displayDensityOptions;
        _this._injector = _injector;
        /**
         * @hidden \@internal
         */
        _this.customValueFlag = true;
        /**
         * @hidden \@internal
         */
        _this.defaultFallbackGroup = 'Other';
        _this.stringFilters = IgxStringFilteringOperand;
        _this.booleanFilters = IgxBooleanFilteringOperand;
        _this._filteringLogic = FilteringLogic.Or;
        _this._filteringExpressions = [];
        _this._sortingExpressions = [];
        _this._groupKey = '';
        _this._prevInputValue = '';
        _this._dataType = '';
        _this.ngControl = null;
        _this.destroy$ = new Subject();
        _this._data = [];
        _this._filteredData = [];
        _this._itemHeight = null;
        _this._itemsMaxHeight = null;
        _this._remoteSelection = {};
        _this._onChangeCallback = noop;
        _this._overlaySettings = {
            scrollStrategy: new AbsoluteScrollStrategy(),
            positionStrategy: new ConnectedPositioningStrategy(),
            modal: false,
            closeOnOutsideClick: true,
            excludePositionTarget: true
        };
        _this._value = '';
        _this._valid = IgxComboState.INITIAL;
        /**
         * Set custom overlay settings that control how the combo's list of items is displayed.
         * Set:
         * ```html
         * <igx-combo [overlaySettings] = "customOverlaySettings"></igx-combo>
         * ```
         *
         * ```typescript
         *  const customSettings = { positionStrategy: { settings: { target: myTarget } } };
         *  combo.overlaySettings = customSettings;
         * ```
         * Get any custom overlay settings used by the combo:
         * ```typescript
         *  const comboOverlaySettings: OverlaySettings = myCombo.overlaySettings;
         * ```
         */
        _this.overlaySettings = null;
        /**
         * @hidden \@internal
         */
        _this.searchInput = null;
        /**
         * The custom template, if any, that should be used when rendering ITEMS in the combo list
         *
         * ```typescript
         * // Set in typescript
         * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
         * myComponent.combo.itemTemplate = myCustomTemplate;
         * ```
         * ```html
         * <!-- Set in markup -->
         *  <igx-combo #combo>
         *      ...
         *      <ng-template igxComboItem>
         *          <div class="custom-item" let-item let-key="valueKey">
         *              <div class="custom-item__name">{{ item[key] }}</div>
         *              <div class="custom-item__cost">{{ item.cost }}</div>
         *          </div>
         *      </ng-template>
         *  </igx-combo>
         * ```
         */
        _this.itemTemplate = null;
        /**
         * The custom template, if any, that should be used when rendering the HEADER for the combo items list
         *
         * ```typescript
         * // Set in typescript
         * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
         * myComponent.combo.headerTemplate = myCustomTemplate;
         * ```
         * ```html
         * <!-- Set in markup -->
         *  <igx-combo #combo>
         *      ...
         *      <ng-template igxComboHeader>
         *          <div class="combo__header">
         *              This is a custom header
         *          </div>
         *      </ng-template>
         *  </igx-combo>
         * ```
         */
        _this.headerTemplate = null;
        /**
         * The custom template, if any, that should be used when rendering the FOOTER for the combo items list
         *
         * ```typescript
         * // Set in typescript
         * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
         * myComponent.combo.footerTemplate = myCustomTemplate;
         * ```
         * ```html
         * <!-- Set in markup -->
         *  <igx-combo #combo>
         *      ...
         *      <ng-template igxComboFooter>
         *          <div class="combo__footer">
         *              This is a custom footer
         *          </div>
         *      </ng-template>
         *  </igx-combo>
         * ```
         */
        _this.footerTemplate = null;
        /**
         * The custom template, if any, that should be used when rendering HEADER ITEMS for groups in the combo list
         *
         * ```typescript
         * // Set in typescript
         * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
         * myComponent.combo.headerItemTemplate = myCustomTemplate;
         * ```
         * ```html
         * <!-- Set in markup -->
         *  <igx-combo #combo>
         *      ...
         *      <ng-template igxComboHeaderItem let-item let-key="groupKey">
         *          <div class="custom-item--group">Group header for {{ item[key] }}</div>
         *      </ng-template>
         *  </igx-combo>
         * ```
         */
        _this.headerItemTemplate = null;
        /**
         * The custom template, if any, that should be used when rendering the ADD BUTTON in the combo drop down
         *
         * ```typescript
         * // Set in typescript
         * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
         * myComponent.combo.addItemTemplate = myCustomTemplate;
         * ```
         * ```html
         * <!-- Set in markup -->
         *  <igx-combo #combo>
         *      ...
         *      <ng-template igxComboAddItem>
         *          <button class="combo__add-button">
         *              Click to add item
         *          </button>
         *      </ng-template>
         *  </igx-combo>
         * ```
         */
        _this.addItemTemplate = null;
        /**
         * The custom template, if any, that should be used when rendering the ADD BUTTON in the combo drop down
         *
         * ```typescript
         * // Set in typescript
         * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
         * myComponent.combo.emptyTemplate = myCustomTemplate;
         * ```
         * ```html
         * <!-- Set in markup -->
         *  <igx-combo #combo>
         *      ...
         *      <ng-template igxComboEmpty>
         *          <div class="combo--empty">
         *              There are no items to display
         *          </div>
         *      </ng-template>
         *  </igx-combo>
         * ```
         */
        _this.emptyTemplate = null;
        /**
         * The custom template, if any, that should be used when rendering the combo TOGGLE(open/close) button
         *
         * ```typescript
         * // Set in typescript
         * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
         * myComponent.combo.toggleIconTemplate = myCustomTemplate;
         * ```
         * ```html
         * <!-- Set in markup -->
         *  <igx-combo #combo>
         *      ...
         *      <ng-template igxComboToggleIcon let-collapsed>
         *          <igx-icon>{{ collapsed ? 'remove_circle' : 'remove_circle_outline'}}</igx-icon>
         *      </ng-template>
         *  </igx-combo>
         * ```
         */
        _this.toggleIconTemplate = null;
        /**
         * The custom template, if any, that should be used when rendering the combo CLEAR button
         *
         * ```typescript
         * // Set in typescript
         * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
         * myComponent.combo.clearIconTemplate = myCustomTemplate;
         * ```
         * ```html
         * <!-- Set in markup -->
         *  <igx-combo #combo>
         *      ...
         *      <ng-template igxComboClearIcon>
         *          <igx-icon>clear</igx-icon>
         *      </ng-template>
         *  </igx-combo>
         * ```
         */
        _this.clearIconTemplate = null;
        _this.dropdownContainer = null;
        /**
         * Emitted when item selection is changing, before the selection completes
         *
         * ```html
         * <igx-combo (onSelectionChange)='handleSelection()'></igx-combo>
         * ```
         */
        _this.onSelectionChange = new EventEmitter();
        /**
         * Emitted before the dropdown is opened
         *
         * ```html
         * <igx-combo onOpening='handleOpening($event)'></igx-combo>
         * ```
         */
        _this.onOpening = new EventEmitter();
        /**
         * Emitted after the dropdown is opened
         *
         * ```html
         * <igx-combo (onOpened)='handleOpened()'></igx-combo>
         * ```
         */
        _this.onOpened = new EventEmitter();
        /**
         * Emitted before the dropdown is closed
         *
         * ```html
         * <igx-combo (onClosing)='handleClosing($event)'></igx-combo>
         * ```
         */
        _this.onClosing = new EventEmitter();
        /**
         * Emitted after the dropdown is closed
         *
         * ```html
         * <igx-combo (onClosed)='handleClosed()'></igx-combo>
         * ```
         */
        _this.onClosed = new EventEmitter();
        /**
         * Emitted when an item is being added to the data collection
         *
         * ```html
         * <igx-combo (onAddition)='handleAdditionEvent()'></igx-combo>
         * ```
         */
        _this.onAddition = new EventEmitter();
        /**
         * Emitted when the value of the search input changes (e.g. typing, pasting, clear, etc.)
         *
         * ```html
         * <igx-combo (onSearchInput)='handleSearchInputEvent()'></igx-combo>
         * ```
         */
        _this.onSearchInput = new EventEmitter();
        /**
         * Emitted when new chunk of data is loaded from the virtualization
         *
         * ```html
         * <igx-combo (onDataPreLoad)='handleDataPreloadEvent()'></igx-combo>
         * ```
         */
        _this.onDataPreLoad = new EventEmitter();
        /**
         * Gets/gets combo id.
         *
         * ```typescript
         * // get
         * let id = this.combo.id;
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-combo [id]='combo1'></igx-combo>
         * ```
         */
        _this.id = "igx-combo-" + NEXT_ID++;
        /**
         * @hidden \@internal
         */
        _this.cssClass = 'igx-combo'; // Independent of display density, at the time being
        // Independent of display density, at the time being
        /**
         * @hidden \@internal
         */
        _this.role = 'combobox';
        /**
         * Controls whether custom values can be added to the collection
         *
         * ```typescript
         * // get
         * let comboAllowsCustomValues = this.combo.allowCustomValues;
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-combo [allowCustomValues]='true'></igx-combo>
         * ```
         */
        _this.allowCustomValues = false;
        /**
         * @hidden \@internal
         */
        _this.filteringLogic = FilteringLogic.Or;
        /**
         * Defines the placeholder value for the combo dropdown search field
         *
         * ```typescript
         * // get
         * let myComboSearchPlaceholder = this.combo.searchPlaceholder;
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-combo [searchPlaceholder]='newPlaceHolder'></igx-combo>
         * ```
         */
        _this.searchPlaceholder = 'Enter a Search Term';
        /**
         * Combo value data source property.
         *
         * ```typescript
         * // get
         * let myComboValueKey = this.combo.valueKey;
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-combo [valueKey]='myKey'></igx-combo>
         * ```
         */
        _this.valueKey = null;
        /**
         * An \@Input property that enabled/disables filtering in the list. The default is `true`.
         * ```html
         * <igx-combo [filterable]="'false'">
         * ```
         */
        _this.filterable = true;
        /**
         * An \@Input property that enabled/disables combo. The default is `false`.
         * ```html
         * <igx-combo [disabled]="'true'">
         * ```
         */
        _this.disabled = false;
        /**
         * An \@Input property that sets how the combo will be styled.
         * The allowed values are `line`, `box`, `border` and `search`. The default is `box`.
         * ```html
         * <igx-combo [type]="'line'">
         * ```
         */
        _this.type = 'box';
        /**
         * @hidden \@internal
         */
        _this.searchValue = '';
        _this.onStatusChanged = function () {
            if ((_this.ngControl.control.touched || _this.ngControl.control.dirty) &&
                (_this.ngControl.control.validator || _this.ngControl.control.asyncValidator)) {
                _this.valid = _this.ngControl.valid ? IgxComboState.VALID : IgxComboState.INVALID;
            }
            _this.manageRequiredAsterisk();
        };
        _this.comboAPI.register(_this);
        return _this;
    }
    Object.defineProperty(IgxComboComponent.prototype, "displaySearchInput", {
        /**
         * @hidden @internal
         */
        get: /**
         * @hidden \@internal
         * @return {?}
         */
        function () {
            return this.filterable || this.allowCustomValues;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "ariaExpanded", {
        /**
         * @hidden @internal
         */
        get: /**
         * @hidden \@internal
         * @return {?}
         */
        function () {
            return !this.dropdown.collapsed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "hasPopUp", {
        /**
         * @hidden @internal
         */
        get: /**
         * @hidden \@internal
         * @return {?}
         */
        function () {
            return 'listbox';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "ariaOwns", {
        /**
         * @hidden @internal
         */
        get: /**
         * @hidden \@internal
         * @return {?}
         */
        function () {
            return this.dropdown.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "itemsMaxHeight", {
        /**
         * Configures the drop down list height
         *
         * ```typescript
         * // get
         * let myComboItemsMaxHeight = this.combo.itemsMaxHeight;
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-combo [itemsMaxHeight]='320'></igx-combo>
         * ```
        */
        get: /**
         * Configures the drop down list height
         *
         * ```typescript
         * // get
         * let myComboItemsMaxHeight = this.combo.itemsMaxHeight;
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-combo [itemsMaxHeight]='320'></igx-combo>
         * ```
         * @return {?}
         */
        function () {
            if (this._itemsMaxHeight === null || this._itemsMaxHeight === undefined) {
                return this.itemHeight * itemsInContainer;
            }
            return this._itemsMaxHeight;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._itemsMaxHeight = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "itemHeight", {
        /**
         * Configures the drop down list item height
         *
         * ```typescript
         * // get
         * let myComboItemHeight = this.combo.itemHeight;
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-combo [itemHeight]='32'></igx-combo>
         * ```
         */
        get: /**
         * Configures the drop down list item height
         *
         * ```typescript
         * // get
         * let myComboItemHeight = this.combo.itemHeight;
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-combo [itemHeight]='32'></igx-combo>
         * ```
         * @return {?}
         */
        function () {
            if (this._itemHeight === null || this._itemHeight === undefined) {
                return ItemHeights[this.displayDensity];
            }
            return this._itemHeight;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._itemHeight = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "inputEmpty", {
        /**
         * @hidden @internal
         */
        get: /**
         * @hidden \@internal
         * @return {?}
         */
        function () {
            return !this.value && !this.placeholder;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "data", {
        /**
         * Combo data source.
         *
         * ```html
         * <!--set-->
         * <igx-combo [data]='items'></igx-combo>
         * ```
         */
        get: /**
         * Combo data source.
         *
         * ```html
         * <!--set-->
         * <igx-combo [data]='items'></igx-combo>
         * ```
         * @return {?}
         */
        function () {
            return this._data;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._data = (val) ? val : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "displayKey", {
        /**
         * Combo text data source property.
         *
         * ```typescript
         * // get
         * let myComboDisplayKey = this.combo.displayKey;
         *
         * // set
         * this.combo.displayKey = 'val';
         *
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-combo [displayKey]='myDisplayKey'></igx-combo>
         * ```
         */
        get: /**
         * Combo text data source property.
         *
         * ```typescript
         * // get
         * let myComboDisplayKey = this.combo.displayKey;
         *
         * // set
         * this.combo.displayKey = 'val';
         *
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-combo [displayKey]='myDisplayKey'></igx-combo>
         * ```
         * @return {?}
         */
        function () {
            return this._displayKey ? this._displayKey : this.valueKey;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._displayKey = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "groupKey", {
        /**
         * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].
         *
         * ```typescript
         * // get
         * let currentGroupKey = this.combo.groupKey;
         * ```
         */
        get: /**
         * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].
         *
         * ```typescript
         * // get
         * let currentGroupKey = this.combo.groupKey;
         * ```
         * @return {?}
         */
        function () {
            return this._groupKey;
        },
        /**
         * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].
         *
         * ```html
         * <!--set-->
         * <igx-combo [groupKey]='newGroupKey'></igx-combo>
         * ```
         */
        set: /**
         * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].
         *
         * ```html
         * <!--set-->
         * <igx-combo [groupKey]='newGroupKey'></igx-combo>
         * ```
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.clearSorting(this._groupKey);
            this._groupKey = val;
            this.sort(this._groupKey);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "valid", {
        /**
         * Gets if control is valid, when used in a form
         *
         * ```typescript
         * // get
         * let valid = this.combo.valid;
         * ```
         * */
        get: /**
         * Gets if control is valid, when used in a form
         *
         * ```typescript
         * // get
         * let valid = this.combo.valid;
         * ```
         *
         * @return {?}
         */
        function () {
            return this._valid;
        },
        /**
        * Sets if control is valid, when used in a form
        *
        * ```typescript
        * // set
        * this.combo.valid = IgxComboState.INVALID;
        * ```
       */
        set: /**
         * Sets if control is valid, when used in a form
         *
         * ```typescript
         * // set
         * this.combo.valid = IgxComboState.INVALID;
         * ```
         * @param {?} valid
         * @return {?}
         */
        function (valid) {
            this._valid = valid;
            this.comboInput.valid = IgxInputState[IgxComboState[valid]];
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @param {?} event
     * @return {?}
     */
    IgxComboComponent.prototype.onArrowDown = /**
     * @hidden \@internal
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        event.stopPropagation();
        this.open();
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @param {?} event
     * @return {?}
     */
    IgxComboComponent.prototype.onInputClick = /**
     * @hidden \@internal
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        event.preventDefault();
        this.toggle();
    };
    Object.defineProperty(IgxComboComponent.prototype, "virtualizationState", {
        /**
         * Defines the current state of the virtualized data. It contains `startIndex` and `chunkSize`
         *
         * ```typescript
         * // get
         * let state = this.combo.virtualizationState;
         * ```
        */
        get: /**
         * Defines the current state of the virtualized data. It contains `startIndex` and `chunkSize`
         *
         * ```typescript
         * // get
         * let state = this.combo.virtualizationState;
         * ```
         * @return {?}
         */
        function () {
            return this.virtDir.state;
        },
        /**
         * Sets the current state of the virtualized data.
         *
         * ```typescript
         * // set
         * this.combo.virtualizationState(state);
         * ```
         */
        set: /**
         * Sets the current state of the virtualized data.
         *
         * ```typescript
         * // set
         * this.combo.virtualizationState(state);
         * ```
         * @param {?} state
         * @return {?}
         */
        function (state) {
            this.virtDir.state = state;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "totalItemCount", {
        /**
         * Gets total count of the virtual data items, when using remote service.
         *
         * ```typescript
         * // get
         * let count = this.combo.totalItemCount;
         * ```
        */
        get: /**
         * Gets total count of the virtual data items, when using remote service.
         *
         * ```typescript
         * // get
         * let count = this.combo.totalItemCount;
         * ```
         * @return {?}
         */
        function () {
            return this.virtDir.totalItemCount;
        },
        /**
         * Sets total count of the virtual data items, when using remote service.
         *
         * ```typescript
         * // set
         * this.combo.totalItemCount(remoteService.count);
         * ```
         */
        set: /**
         * Sets total count of the virtual data items, when using remote service.
         *
         * ```typescript
         * // set
         * this.combo.totalItemCount(remoteService.count);
         * ```
         * @param {?} count
         * @return {?}
         */
        function (count) {
            this.virtDir.totalItemCount = count;
            this.cdr.detectChanges();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "filteringExpressions", {
        /**
         * @hidden @internal
         */
        get: /**
         * @hidden \@internal
         * @return {?}
         */
        function () {
            return this.filterable ? this._filteringExpressions : [];
        },
        /**
         * @hidden @internal
         */
        set: /**
         * @hidden \@internal
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._filteringExpressions = value;
            this.cdr.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "sortingExpressions", {
        /**
         * @hidden @internal
         */
        get: /**
         * @hidden \@internal
         * @return {?}
         */
        function () {
            return this._sortingExpressions;
        },
        /**
         * @hidden @internal
         */
        set: /**
         * @hidden \@internal
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._sortingExpressions = value;
            this.cdr.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @protected
     * @param {?=} field
     * @return {?}
     */
    IgxComboComponent.prototype.clearSorting = /**
     * @protected
     * @param {?=} field
     * @return {?}
     */
    function (field) {
        if (field === undefined || field === null) {
            this.sortingExpressions = [];
            return;
        }
        /** @type {?} */
        var currentState = cloneArray(this.sortingExpressions);
        /** @type {?} */
        var index = currentState.findIndex(function (expr) { return expr.fieldName === field; });
        if (index > -1) {
            currentState.splice(index, 1);
            this.sortingExpressions = currentState;
        }
    };
    Object.defineProperty(IgxComboComponent.prototype, "value", {
        /**
         * The text displayed in the combo input
         *
         * ```typescript
         * // get
         * let comboValue = this.combo.value;
         * ```
         */
        get: /**
         * The text displayed in the combo input
         *
         * ```typescript
         * // get
         * let comboValue = this.combo.value;
         * ```
         * @return {?}
         */
        function () {
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "filteredData", {
        /**
         * @hidden @internal
         */
        get: /**
         * @hidden \@internal
         * @return {?}
         */
        function () {
            return this.filterable ? this._filteredData : this.data;
        },
        /**
         * @hidden @internal
         */
        set: /**
         * @hidden \@internal
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._filteredData = this.groupKey ? (val || []).filter(function (e) { return e.isHeader !== true; }) : val;
            this.checkMatch();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @param {?} event
     * @return {?}
     */
    IgxComboComponent.prototype.handleKeyUp = /**
     * @hidden \@internal
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.key === 'ArrowDown' || event.key === 'Down') {
            this.dropdown.focusedItem = this.dropdown.items[0];
            this.dropdownContainer.nativeElement.focus();
        }
        else if (event.key === 'Escape' || event.key === 'Esc') {
            this.toggle();
        }
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @param {?} event
     * @return {?}
     */
    IgxComboComponent.prototype.handleKeyDown = /**
     * @hidden \@internal
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.key === 'ArrowUp' || event.key === 'Up') {
            event.preventDefault();
            event.stopPropagation();
            this.close();
        }
    };
    /**
     * @private
     * @return {?}
     */
    IgxComboComponent.prototype.checkMatch = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var displayKey = this.displayKey;
        /** @type {?} */
        var matchFn = function (e) {
            /** @type {?} */
            var value = displayKey ? e[displayKey] : e;
            return value.toString().toLowerCase() === _this.searchValue.trim().toLowerCase();
        };
        /** @type {?} */
        var itemMatch = this.filteredData.some(matchFn);
        this.customValueFlag = this.allowCustomValues && !itemMatch;
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @param {?=} event
     * @return {?}
     */
    IgxComboComponent.prototype.handleInputChange = /**
     * @hidden \@internal
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        /** @type {?} */
        var cdrFlag = false;
        /** @type {?} */
        var vContainer = this.virtDir;
        if (event !== undefined && this._prevInputValue === event) {
            // Nothing has changed
            return;
        }
        else {
            this._prevInputValue = event !== undefined ? event : '';
        }
        if (event !== undefined) {
            // Do not scroll if not scrollable
            if (vContainer.isScrollable()) {
                vContainer.scrollTo(0);
            }
            else {
                cdrFlag = true;
            }
            this.onSearchInput.emit(event);
        }
        else {
            cdrFlag = true;
        }
        if (this.filterable) {
            this.filter();
            // If there was no scroll before filtering, check if there is after and detect changes
            if (cdrFlag) {
                vContainer.onChunkLoad.pipe(take(1)).subscribe(function () {
                    if (vContainer.isScrollable()) {
                        _this.cdr.detectChanges();
                    }
                });
            }
        }
        else {
            this.checkMatch();
        }
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @param {?} fieldName
     * @param {?=} dir
     * @param {?=} ignoreCase
     * @param {?=} strategy
     * @return {?}
     */
    IgxComboComponent.prototype.sort = /**
     * @hidden \@internal
     * @param {?} fieldName
     * @param {?=} dir
     * @param {?=} ignoreCase
     * @param {?=} strategy
     * @return {?}
     */
    function (fieldName, dir, ignoreCase, strategy) {
        if (dir === void 0) { dir = SortingDirection.Asc; }
        if (ignoreCase === void 0) { ignoreCase = true; }
        if (strategy === void 0) { strategy = DefaultSortingStrategy.instance(); }
        if (!fieldName) {
            return;
        }
        /** @type {?} */
        var sortingState = cloneArray(this.sortingExpressions, true);
        this.prepare_sorting_expression(sortingState, fieldName, dir, ignoreCase, strategy);
        this.sortingExpressions = sortingState;
    };
    /**
     * @protected
     * @param {?} state
     * @param {?} fieldName
     * @param {?} dir
     * @param {?} ignoreCase
     * @param {?} strategy
     * @return {?}
     */
    IgxComboComponent.prototype.prepare_sorting_expression = /**
     * @protected
     * @param {?} state
     * @param {?} fieldName
     * @param {?} dir
     * @param {?} ignoreCase
     * @param {?} strategy
     * @return {?}
     */
    function (state, fieldName, dir, ignoreCase, strategy) {
        if (dir === SortingDirection.None) {
            state.splice(state.findIndex(function (expr) { return expr.fieldName === fieldName; }), 1);
            return;
        }
        /** @type {?} */
        var expression = state.find(function (expr) { return expr.fieldName === fieldName; });
        if (!expression) {
            state.push({ fieldName: fieldName, dir: dir, ignoreCase: ignoreCase, strategy: strategy });
        }
        else {
            Object.assign(expression, { fieldName: fieldName, dir: dir, ignoreCase: ignoreCase });
        }
    };
    Object.defineProperty(IgxComboComponent.prototype, "dataType", {
        /**
         * @hidden @internal
         */
        get: /**
         * @hidden \@internal
         * @return {?}
         */
        function () {
            if (this.displayKey) {
                return DataTypes.COMPLEX;
            }
            return DataTypes.PRIMITIVE;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "isRemote", {
        /**
         * @hidden @internal
         */
        get: /**
         * @hidden \@internal
         * @return {?}
         */
        function () {
            return this.totalItemCount > 0 &&
                this.valueKey &&
                this.dataType === DataTypes.COMPLEX;
        },
        enumerable: true,
        configurable: true
    });
    /** Contains key-value pairs of the selected valueKeys and their resp. displayKeys */
    /**
     * Contains key-value pairs of the selected valueKeys and their resp. displayKeys
     * @private
     * @param {?} ids
     * @param {?=} add
     * @return {?}
     */
    IgxComboComponent.prototype.registerRemoteEntries = /**
     * Contains key-value pairs of the selected valueKeys and their resp. displayKeys
     * @private
     * @param {?} ids
     * @param {?=} add
     * @return {?}
     */
    function (ids, add) {
        var e_1, _a, e_2, _b;
        if (add === void 0) { add = true; }
        if (add) {
            /** @type {?} */
            var selection = this.getValueDisplayPairs(ids);
            try {
                for (var selection_1 = tslib_1.__values(selection), selection_1_1 = selection_1.next(); !selection_1_1.done; selection_1_1 = selection_1.next()) {
                    var entry = selection_1_1.value;
                    this._remoteSelection[entry[this.valueKey]] = entry[this.displayKey];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (selection_1_1 && !selection_1_1.done && (_a = selection_1.return)) _a.call(selection_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            try {
                for (var ids_1 = tslib_1.__values(ids), ids_1_1 = ids_1.next(); !ids_1_1.done; ids_1_1 = ids_1.next()) {
                    var entry = ids_1_1.value;
                    delete this._remoteSelection[entry];
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (ids_1_1 && !ids_1_1.done && (_b = ids_1.return)) _b.call(ids_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    };
    /** For `id: any[]` returns a mapped `{ [combo.valueKey]: any, [combo.displayKey]: any }[]`*/
    /**
     * For `id: any[]` returns a mapped `{ [combo.valueKey]: any, [combo.displayKey]: any }[]`
     * @private
     * @param {?} ids
     * @return {?}
     */
    IgxComboComponent.prototype.getValueDisplayPairs = /**
     * For `id: any[]` returns a mapped `{ [combo.valueKey]: any, [combo.displayKey]: any }[]`
     * @private
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        var _this = this;
        return this.data.filter(function (entry) { return ids.indexOf(entry[_this.valueKey]) > -1; }).map(function (e) {
            var _a;
            return _a = {},
                _a[_this.valueKey] = e[_this.valueKey],
                _a[_this.displayKey] = e[_this.displayKey],
                _a;
        });
    };
    /**
     * Returns if the specified itemID is selected
     * @hidden
     * @internal
     */
    /**
     * Returns if the specified itemID is selected
     * @hidden
     * \@internal
     * @param {?} item
     * @return {?}
     */
    IgxComboComponent.prototype.isItemSelected = /**
     * Returns if the specified itemID is selected
     * @hidden
     * \@internal
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return this.selection.is_item_selected(this.id, item);
    };
    /**
     * Triggers change detection on the combo view
     */
    /**
     * Triggers change detection on the combo view
     * @return {?}
     */
    IgxComboComponent.prototype.triggerCheck = /**
     * Triggers change detection on the combo view
     * @return {?}
     */
    function () {
        this.cdr.detectChanges();
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @return {?}
     */
    IgxComboComponent.prototype.isAddButtonVisible = /**
     * @hidden \@internal
     * @return {?}
     */
    function () {
        // This should always return a boolean value. If this.searchValue was '', it returns '' instead of false;
        return this.searchValue !== '' && this.customValueFlag;
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @param {?} evt
     * @return {?}
     */
    IgxComboComponent.prototype.handleSelectAll = /**
     * @hidden \@internal
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        if (evt.checked) {
            this.selectAllItems();
        }
        else {
            this.deselectAllItems();
        }
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @return {?}
     */
    IgxComboComponent.prototype.addItemToCollection = /**
     * @hidden \@internal
     * @return {?}
     */
    function () {
        var _a, _b;
        if (!this.searchValue) {
            return;
        }
        /** @type {?} */
        var newValue = this.searchValue.trim();
        /** @type {?} */
        var addedItem = this.displayKey ? (_a = {},
            _a[this.valueKey] = newValue,
            _a[this.displayKey] = newValue,
            _a) : newValue;
        if (this.groupKey) {
            Object.assign(addedItem, (_b = {}, _b[this.groupKey] = this.defaultFallbackGroup, _b));
        }
        /** @type {?} */
        var oldCollection = this.data;
        /** @type {?} */
        var newCollection = tslib_1.__spread(this.data);
        newCollection.push(addedItem);
        /** @type {?} */
        var args = {
            oldCollection: oldCollection, addedItem: addedItem, newCollection: newCollection
        };
        this.onAddition.emit(args);
        this.data.push(addedItem);
        // If you mutate the array, no pipe is invoked and the display isn't updated;
        // if you replace the array, the pipe executes and the display is updated.
        this.data = cloneArray(this.data);
        this.selectItems(this.comboAPI.valueKey !== null ? [addedItem[this.valueKey]] : [addedItem], false);
        this.customValueFlag = false;
        this.searchInput.nativeElement.focus();
        this.dropdown.focusedItem = null;
        this.handleInputChange();
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @param {?=} opening
     * @return {?}
     */
    IgxComboComponent.prototype.focusSearchInput = /**
     * @hidden \@internal
     * @param {?=} opening
     * @return {?}
     */
    function (opening) {
        if (this.displaySearchInput && this.searchInput) {
            this.searchInput.nativeElement.focus();
        }
        else {
            if (opening) {
                this.dropdownContainer.nativeElement.focus();
            }
            else {
                this.comboInput.nativeElement.focus();
                this.toggle();
            }
        }
    };
    /**
     * @protected
     * @param {?} searchVal
     * @param {?} condition
     * @param {?} ignoreCase
     * @param {?=} fieldName
     * @return {?}
     */
    IgxComboComponent.prototype.prepare_filtering_expression = /**
     * @protected
     * @param {?} searchVal
     * @param {?} condition
     * @param {?} ignoreCase
     * @param {?=} fieldName
     * @return {?}
     */
    function (searchVal, condition, ignoreCase, fieldName) {
        /** @type {?} */
        var newArray = tslib_1.__spread(this.filteringExpressions);
        /** @type {?} */
        var expression = newArray.find(function (expr) { return expr.fieldName === fieldName; });
        /** @type {?} */
        var newExpression = { fieldName: fieldName, searchVal: searchVal, condition: condition, ignoreCase: ignoreCase };
        if (!expression) {
            newArray.push(newExpression);
        }
        else {
            Object.assign(expression, newExpression);
        }
        if (this.groupKey) {
            /** @type {?} */
            var expression2 = newArray.find(function (expr) { return expr.fieldName === 'isHeader'; });
            /** @type {?} */
            var headerExpression = {
                fieldName: 'isHeader', searchVale: '',
                condition: IgxBooleanFilteringOperand.instance().condition('true'), ignoreCase: true
            };
            if (!expression2) {
                newArray.push(headerExpression);
            }
            else {
                Object.assign(expression2, headerExpression);
            }
        }
        this.filteringExpressions = newArray;
    };
    /**
     * @protected
     * @return {?}
     */
    IgxComboComponent.prototype.manageRequiredAsterisk = /**
     * @protected
     * @return {?}
     */
    function () {
        if (this.ngControl && this.ngControl.control.validator) {
            // Run the validation with empty object to check if required is enabled.
            /** @type {?} */
            var error = this.ngControl.control.validator((/** @type {?} */ ({})));
            this.inputGroup.isRequired = error && error.required;
        }
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @return {?}
     */
    IgxComboComponent.prototype.onBlur = /**
     * @hidden \@internal
     * @return {?}
     */
    function () {
        if (this.collapsed) {
            if (this.ngControl && !this.ngControl.valid) {
                this.valid = IgxComboState.INVALID;
            }
            else {
                this.valid = IgxComboState.INITIAL;
            }
        }
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @return {?}
     */
    IgxComboComponent.prototype.filter = /**
     * @hidden \@internal
     * @return {?}
     */
    function () {
        this.prepare_filtering_expression(this.searchValue.trim(), IgxStringFilteringOperand.instance().condition('contains'), true, this.dataType === DataTypes.PRIMITIVE ? undefined : this.displayKey);
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @return {?}
     */
    IgxComboComponent.prototype.ngOnInit = /**
     * @hidden \@internal
     * @return {?}
     */
    function () {
        this.ngControl = this._injector.get((/** @type {?} */ (NgControl)), null);
        this._overlaySettings.positionStrategy.settings.target = this.elementRef.nativeElement;
        this.selection.set(this.id, new Set());
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @return {?}
     */
    IgxComboComponent.prototype.ngAfterViewInit = /**
     * @hidden \@internal
     * @return {?}
     */
    function () {
        this.filteredData = tslib_1.__spread(this.data);
        if (this.ngControl) {
            this.ngControl.statusChanges.pipe(takeUntil(this.destroy$)).subscribe(this.onStatusChanged);
            this.manageRequiredAsterisk();
            this.cdr.detectChanges();
        }
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @return {?}
     */
    IgxComboComponent.prototype.ngOnDestroy = /**
     * @hidden \@internal
     * @return {?}
     */
    function () {
        this.destroy$.next();
        this.destroy$.complete();
        this.comboAPI.clear();
        this.selection.clear(this.id);
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @param {?} event
     * @return {?}
     */
    IgxComboComponent.prototype.dataLoading = /**
     * @hidden \@internal
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onDataPreLoad.emit(event);
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @param {?} value
     * @return {?}
     */
    IgxComboComponent.prototype.writeValue = /**
     * @hidden \@internal
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.selectItems(value, true);
        this.cdr.markForCheck();
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @param {?} fn
     * @return {?}
     */
    IgxComboComponent.prototype.registerOnChange = /**
     * @hidden \@internal
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onChangeCallback = fn;
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @param {?} fn
     * @return {?}
     */
    IgxComboComponent.prototype.registerOnTouched = /**
     * @hidden \@internal
     * @param {?} fn
     * @return {?}
     */
    function (fn) { };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @param {?} isDisabled
     * @return {?}
     */
    IgxComboComponent.prototype.setDisabledState = /**
     * @hidden \@internal
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxComboComponent.prototype.getEditElement = /**
     * @hidden
     * @return {?}
     */
    function () {
        return this.comboInput.nativeElement;
    };
    Object.defineProperty(IgxComboComponent.prototype, "template", {
        /**
         * @hidden @internal
         */
        get: /**
         * @hidden \@internal
         * @return {?}
         */
        function () {
            this._dataType = this.dataType;
            if (this.itemTemplate) {
                return this.itemTemplate;
            }
            if (this._dataType === DataTypes.COMPLEX) {
                return this.complexTemplate;
            }
            return this.primitiveTemplate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboComponent.prototype, "context", {
        /**
         * @hidden @internal
         */
        get: /**
         * @hidden \@internal
         * @return {?}
         */
        function () {
            return {
                $implicit: this
            };
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @param {?} event
     * @return {?}
     */
    IgxComboComponent.prototype.handleClearItems = /**
     * @hidden \@internal
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.deselectAllItems(true, event);
        event.stopPropagation();
    };
    /**
     * A method that opens/closes the combo.
     *
     *```html
     *<button (click)="combo.toggle()">Toggle Combo</button>
     *<igx-combo #combo></igx-combo>
     *```
     */
    /**
     * A method that opens/closes the combo.
     *
     * ```html
     * <button (click)="combo.toggle()">Toggle Combo</button>
     * <igx-combo #combo></igx-combo>
     * ```
     * @return {?}
     */
    IgxComboComponent.prototype.toggle = /**
     * A method that opens/closes the combo.
     *
     * ```html
     * <button (click)="combo.toggle()">Toggle Combo</button>
     * <igx-combo #combo></igx-combo>
     * ```
     * @return {?}
     */
    function () {
        /** @type {?} */
        var overlaySettings = Object.assign({}, this._overlaySettings, this.overlaySettings);
        this.dropdown.toggle(overlaySettings);
    };
    /**
     * A method that opens the combo.
     *
     *```html
     *<button (click)="combo.open()">Open Combo</button>
     *<igx-combo #combo></igx-combo>
     *```
     */
    /**
     * A method that opens the combo.
     *
     * ```html
     * <button (click)="combo.open()">Open Combo</button>
     * <igx-combo #combo></igx-combo>
     * ```
     * @return {?}
     */
    IgxComboComponent.prototype.open = /**
     * A method that opens the combo.
     *
     * ```html
     * <button (click)="combo.open()">Open Combo</button>
     * <igx-combo #combo></igx-combo>
     * ```
     * @return {?}
     */
    function () {
        /** @type {?} */
        var overlaySettings = Object.assign({}, this._overlaySettings, this.overlaySettings);
        this.dropdown.open(overlaySettings);
    };
    /**
     * A method that closes the combo.
     *
     *```html
     *<button (click)="combo.close()">Close Combo</button>
     *<igx-combo #combo></igx-combo>
     *```
     */
    /**
     * A method that closes the combo.
     *
     * ```html
     * <button (click)="combo.close()">Close Combo</button>
     * <igx-combo #combo></igx-combo>
     * ```
     * @return {?}
     */
    IgxComboComponent.prototype.close = /**
     * A method that closes the combo.
     *
     * ```html
     * <button (click)="combo.close()">Close Combo</button>
     * <igx-combo #combo></igx-combo>
     * ```
     * @return {?}
     */
    function () {
        this.dropdown.close();
    };
    Object.defineProperty(IgxComboComponent.prototype, "collapsed", {
        /**
         * Gets drop down state.
         *
         * ```typescript
         * let state = this.combo.collapsed;
         * ```
        */
        get: /**
         * Gets drop down state.
         *
         * ```typescript
         * let state = this.combo.collapsed;
         * ```
         * @return {?}
         */
        function () {
            return this.dropdown.collapsed;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get current selection state
     * @returns Array of selected items
     * ```typescript
     * let selectedItems = this.combo.selectedItems();
     * ```
     */
    /**
     * Get current selection state
     * @return {?} Array of selected items
     * ```typescript
     * let selectedItems = this.combo.selectedItems();
     * ```
     */
    IgxComboComponent.prototype.selectedItems = /**
     * Get current selection state
     * @return {?} Array of selected items
     * ```typescript
     * let selectedItems = this.combo.selectedItems();
     * ```
     */
    function () {
        /** @type {?} */
        var items = Array.from(this.selection.get(this.id));
        return items;
    };
    /**
     * Select defined items
     * @param newItems new items to be selected
     * @param clearCurrentSelection if true clear previous selected items
     * ```typescript
     * this.combo.selectItems(["New York", "New Jersey"]);
     * ```
     */
    /**
     * Select defined items
     * @param {?} newItems new items to be selected
     * @param {?=} clearCurrentSelection if true clear previous selected items
     * ```typescript
     * this.combo.selectItems(["New York", "New Jersey"]);
     * ```
     * @param {?=} event
     * @return {?}
     */
    IgxComboComponent.prototype.selectItems = /**
     * Select defined items
     * @param {?} newItems new items to be selected
     * @param {?=} clearCurrentSelection if true clear previous selected items
     * ```typescript
     * this.combo.selectItems(["New York", "New Jersey"]);
     * ```
     * @param {?=} event
     * @return {?}
     */
    function (newItems, clearCurrentSelection, event) {
        if (newItems) {
            /** @type {?} */
            var newSelection = this.selection.add_items(this.id, newItems, clearCurrentSelection);
            this.setSelection(newSelection, event);
        }
    };
    /**
     * Deselect defined items
     * @param items items to deselected
     * ```typescript
     * this.combo.deselectItems(["New York", "New Jersey"]);
     * ```
     */
    /**
     * Deselect defined items
     * @param {?} items items to deselected
     * ```typescript
     * this.combo.deselectItems(["New York", "New Jersey"]);
     * ```
     * @param {?=} event
     * @return {?}
     */
    IgxComboComponent.prototype.deselectItems = /**
     * Deselect defined items
     * @param {?} items items to deselected
     * ```typescript
     * this.combo.deselectItems(["New York", "New Jersey"]);
     * ```
     * @param {?=} event
     * @return {?}
     */
    function (items, event) {
        if (items) {
            /** @type {?} */
            var newSelection = this.selection.delete_items(this.id, items);
            this.setSelection(newSelection, event);
        }
    };
    /**
     * Select all (filtered) items
     * @param ignoreFilter if set to true, selects all items, otherwise selects only the filtered ones.
     * ```typescript
     * this.combo.selectAllItems();
     * ```
     */
    /**
     * Select all (filtered) items
     * @param {?=} ignoreFilter if set to true, selects all items, otherwise selects only the filtered ones.
     * ```typescript
     * this.combo.selectAllItems();
     * ```
     * @param {?=} event
     * @return {?}
     */
    IgxComboComponent.prototype.selectAllItems = /**
     * Select all (filtered) items
     * @param {?=} ignoreFilter if set to true, selects all items, otherwise selects only the filtered ones.
     * ```typescript
     * this.combo.selectAllItems();
     * ```
     * @param {?=} event
     * @return {?}
     */
    function (ignoreFilter, event) {
        /** @type {?} */
        var allVisible = this.selection.get_all_ids(ignoreFilter ? this.data : this.filteredData, this.valueKey);
        /** @type {?} */
        var newSelection = this.selection.add_items(this.id, allVisible);
        this.setSelection(newSelection, event);
    };
    /**
     * Deselect all (filtered) items
     * @param ignoreFilter if set to true, deselects all items, otherwise deselects only the filtered ones.
     * ```typescript
     * this.combo.deselectAllItems();
     * ```
     */
    /**
     * Deselect all (filtered) items
     * @param {?=} ignoreFilter if set to true, deselects all items, otherwise deselects only the filtered ones.
     * ```typescript
     * this.combo.deselectAllItems();
     * ```
     * @param {?=} event
     * @return {?}
     */
    IgxComboComponent.prototype.deselectAllItems = /**
     * Deselect all (filtered) items
     * @param {?=} ignoreFilter if set to true, deselects all items, otherwise deselects only the filtered ones.
     * ```typescript
     * this.combo.deselectAllItems();
     * ```
     * @param {?=} event
     * @return {?}
     */
    function (ignoreFilter, event) {
        /** @type {?} */
        var newSelection = this.selection.get_empty();
        if (this.filteredData.length !== this.data.length && !ignoreFilter) {
            newSelection = this.selection.delete_items(this.id, this.selection.get_all_ids(this.filteredData, this.valueKey));
        }
        this.setSelection(newSelection, event);
    };
    /**
     * Selects/Deselects a single item
     * @param itemID the itemID of the specific item
     * @param select If the item should be selected (true) or deselected (false)
     *
     * Without specified valueKey;
     * ```typescript
     * this.combo.valueKey = null;
     * const items: { field: string, region: string}[] = data;
     * this.combo.setSelectedItem(items[0], true);
     * ```
     * With specified valueKey;
     * ```typescript
     * this.combo.valueKey = 'field';
     * const items: { field: string, region: string}[] = data;
     * this.combo.setSelectedItem('Connecticut', true);
     * ```
     */
    /**
     * Selects/Deselects a single item
     * @param {?} itemID the itemID of the specific item
     * @param {?=} select If the item should be selected (true) or deselected (false)
     *
     * Without specified valueKey;
     * ```typescript
     * this.combo.valueKey = null;
     * const items: { field: string, region: string}[] = data;
     * this.combo.setSelectedItem(items[0], true);
     * ```
     * With specified valueKey;
     * ```typescript
     * this.combo.valueKey = 'field';
     * const items: { field: string, region: string}[] = data;
     * this.combo.setSelectedItem('Connecticut', true);
     * ```
     * @param {?=} event
     * @return {?}
     */
    IgxComboComponent.prototype.setSelectedItem = /**
     * Selects/Deselects a single item
     * @param {?} itemID the itemID of the specific item
     * @param {?=} select If the item should be selected (true) or deselected (false)
     *
     * Without specified valueKey;
     * ```typescript
     * this.combo.valueKey = null;
     * const items: { field: string, region: string}[] = data;
     * this.combo.setSelectedItem(items[0], true);
     * ```
     * With specified valueKey;
     * ```typescript
     * this.combo.valueKey = 'field';
     * const items: { field: string, region: string}[] = data;
     * this.combo.setSelectedItem('Connecticut', true);
     * ```
     * @param {?=} event
     * @return {?}
     */
    function (itemID, select, event) {
        if (select === void 0) { select = true; }
        if (itemID === null || itemID === undefined) {
            return;
        }
        if (select) {
            this.selectItems([itemID], false, event);
        }
        else {
            this.deselectItems([itemID], event);
        }
    };
    /**
     * @protected
     * @param {?} newSelection
     * @param {?=} event
     * @return {?}
     */
    IgxComboComponent.prototype.setSelection = /**
     * @protected
     * @param {?} newSelection
     * @param {?=} event
     * @return {?}
     */
    function (newSelection, event) {
        var _this = this;
        /** @type {?} */
        var removed = diffInSets(this.selection.get(this.id), newSelection);
        /** @type {?} */
        var added = diffInSets(newSelection, this.selection.get(this.id));
        /** @type {?} */
        var args = {
            newSelection: Array.from(newSelection),
            oldSelection: Array.from(this.selection.get(this.id) || []),
            added: added,
            removed: removed,
            event: event,
            cancel: false
        };
        this.onSelectionChange.emit(args);
        if (!args.cancel) {
            this.selection.select_items(this.id, args.newSelection, true);
            /** @type {?} */
            var value = '';
            if (this.isRemote) {
                if (args.newSelection.length) {
                    /** @type {?} */
                    var removedItems = args.oldSelection.filter(function (e) { return args.newSelection.indexOf(e) < 0; });
                    /** @type {?} */
                    var addedItems = args.newSelection.filter(function (e) { return args.oldSelection.indexOf(e) < 0; });
                    this.registerRemoteEntries(addedItems);
                    this.registerRemoteEntries(removedItems, false);
                    value = Object.keys(this._remoteSelection).map(function (e) { return _this._remoteSelection[e]; }).join(', ');
                }
                else {
                    // If new selection is empty, clear all items
                    this.registerRemoteEntries(args.oldSelection, false);
                }
            }
            else {
                value = this.displayKey !== null && this.displayKey !== undefined ?
                    this.convertKeysToItems(args.newSelection).map(function (entry) { return entry[_this.displayKey]; }).join(', ') :
                    args.newSelection.join(', ');
            }
            this._value = value;
            this._onChangeCallback(args.newSelection);
        }
    };
    /** if there is a valueKey - map the keys to data items, else - just return the keys */
    /**
     * if there is a valueKey - map the keys to data items, else - just return the keys
     * @private
     * @param {?} keys
     * @return {?}
     */
    IgxComboComponent.prototype.convertKeysToItems = /**
     * if there is a valueKey - map the keys to data items, else - just return the keys
     * @private
     * @param {?} keys
     * @return {?}
     */
    function (keys) {
        var _this = this;
        if (this.comboAPI.valueKey === null) {
            return keys;
        }
        // map keys vs. filter data to retain the order of the selected items
        return keys.map(function (key) { return _this.data.find(function (entry) { return entry[_this.valueKey] === key; }); }).filter(function (e) { return e !== undefined; });
    };
    /**
     * Event handlers
     * @hidden
     * @internal
     */
    /**
     * Event handlers
     * @hidden
     * \@internal
     * @param {?} event
     * @return {?}
     */
    IgxComboComponent.prototype.handleOpening = /**
     * Event handlers
     * @hidden
     * \@internal
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onOpening.emit(event);
        if (event.cancel) {
            return;
        }
        this.handleInputChange();
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @return {?}
     */
    IgxComboComponent.prototype.handleOpened = /**
     * @hidden \@internal
     * @return {?}
     */
    function () {
        this.triggerCheck();
        this.focusSearchInput(true);
        this.onOpened.emit();
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @param {?} event
     * @return {?}
     */
    IgxComboComponent.prototype.handleClosing = /**
     * @hidden \@internal
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onClosing.emit(event);
        if (event.cancel) {
            return;
        }
        this.searchValue = '';
        this.comboInput.nativeElement.focus();
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @return {?}
     */
    IgxComboComponent.prototype.handleClosed = /**
     * @hidden \@internal
     * @return {?}
     */
    function () {
        this.onClosed.emit();
    };
    IgxComboComponent.decorators = [
        { type: Component, args: [{
                    selector: 'igx-combo',
                    template: "<ng-template #complex let-display let-data=\"data\" let-key=\"displayKey\">\n    {{display[key]}}\n</ng-template>\n<ng-template #primitive let-display>\n    {{display}}\n</ng-template>\n<ng-template #empty>\n    <span>The list is empty</span>\n</ng-template>\n<ng-template #addItemDefault let-control>\n    <button igxButton=\"flat\" igxRipple>Add item</button>\n</ng-template>\n<ng-template #headerItemBase let-item let-key=\"valueKey\" let-groupKey=\"groupKey\">\n    {{ item[key] }}\n</ng-template>\n\n<igx-input-group #inputGroup [displayDensity]=\"displayDensity\" [type]=\"type\" (click)=\"onInputClick($event)\">\n    <ng-container ngProjectAs=\"[igxLabel]\">\n        <ng-content select=\"[igxLabel]\"></ng-content>\n    </ng-container>\n    <ng-container ngProjectAs=\"igx-prefix\">\n        <ng-content select=\"igx-prefix\"></ng-content>\n    </ng-container>\n    <ng-container ngProjectAs=\"igx-hint, [igxHint]\">\n            <ng-content select=\"igx-hint, [igxHint]\"></ng-content>\n        </ng-container>\n    <input igxInput #comboInput name=\"comboInput\" type=\"text\" [value]=\"value\" readonly [attr.placeholder]=\"placeholder\"\n        [disabled]=\"disabled\" (blur)=\"onBlur()\" />\n    <ng-container ngProjectAs=\"igx-suffix\">\n        <ng-content select=\"igx-suffix\"></ng-content>\n    </ng-container>\n    <igx-suffix *ngIf=\"value.length\" aria-label=\"Clear Selection\" class=\"igx-combo__clear-button\" igxRipple (click)=\"handleClearItems($event)\">\n        <ng-container *ngIf=\"clearIconTemplate\">\n            <ng-container *ngTemplateOutlet=\"clearIconTemplate\"></ng-container>\n        </ng-container>\n        <igx-icon *ngIf=\"!clearIconTemplate\" fontSet=\"material\">clear</igx-icon>\n    </igx-suffix>\n    <igx-suffix igxButton=\"icon\" class=\"igx-combo__toggle-button\" igxRipple>\n        <ng-container *ngIf=\"toggleIconTemplate\">\n            <ng-container *ngTemplateOutlet=\"toggleIconTemplate; context: {$implicit: this.collapsed}\"></ng-container>\n        </ng-container>\n        <igx-icon *ngIf=\"!toggleIconTemplate\" fontSet=\"material\">{{ dropdown.collapsed ? 'arrow_drop_down' : 'arrow_drop_up'}}</igx-icon>\n    </igx-suffix>\n</igx-input-group>\n<igx-combo-drop-down #igxComboDropDown class=\"igx-combo__drop-down\" [displayDensity]=\"displayDensity\" [width]=\"itemsWidth || '100%'\" (onOpening)=\"handleOpening($event)\"\n    (onClosing)=\"handleClosing($event)\" (onOpened)=\"handleOpened()\" (onClosed)=\"handleClosed()\">\n    <igx-input-group *ngIf=\"displaySearchInput\" [displayDensity]=\"displayDensity\" class=\"igx-combo__search\">\n        <input class=\"igx-combo-input\" igxInput #searchInput name=\"searchInput\" autocomplete=\"off\" type=\"text\"\n            [(ngModel)]=\"searchValue\" (ngModelChange)=\"handleInputChange($event)\" (keyup)=\"handleKeyUp($event)\"\n            (keydown)=\"handleKeyDown($event)\" (focus)=\"dropdown.onBlur($event)\" [attr.placeholder]=\"searchPlaceholder\"\n            aria-autocomplete=\"both\" [attr.aria-owns]=\"dropdown.id\" [attr.aria-labelledby]=\"ariaLabelledBy\" />\n    </igx-input-group>\n    <ng-container *ngTemplateOutlet=\"headerTemplate\">\n    </ng-container>\n    <div #dropdownItemContainer class=\"igx-combo__content\" [style.overflow]=\"'hidden'\" [style.maxHeight.px]=\"itemsMaxHeight\"\n        [igxDropDownItemNavigation]=\"dropdown\" (focus)=\"dropdown.onFocus()\" [tabindex]=\"dropdown.collapsed ? -1 : 0\"\n        role=\"listbox\" [attr.id]=\"dropdown.id\">\n        <ng-template igxFor let-item let-index=\"index\" [igxForOf]=\"data | comboFiltering:filteringExpressions:filteringLogic | comboSorting:sortingExpressions | comboGrouping:groupKey\"\n            [igxForScrollOrientation]=\"'vertical'\" [igxForContainerSize]=\"itemsMaxHeight\" [igxForItemSize]=\"itemHeight\"\n            (onChunkPreload)=\"dataLoading($event)\">\n            <igx-combo-item  [itemHeight]='itemHeight' [value]=\"item\" [isHeader]=\"item.isHeader\" role=\"option\" [index]=\"index\">\n                <ng-container *ngIf=\"item.isHeader\">\n                    <ng-container *ngTemplateOutlet=\"headerItemTemplate ? headerItemTemplate : headerItemBase; context: {$implicit: item, data: data, valueKey: valueKey, groupKey: groupKey, displayKey: displayKey}\"></ng-container>\n                </ng-container>\n                <ng-container *ngIf=\"!item.isHeader\">\n                    <ng-container #listItem *ngTemplateOutlet=\"template; context: {$implicit: item, data: data, valueKey: valueKey, displayKey: displayKey};\"></ng-container>\n                </ng-container>\n            </igx-combo-item>\n        </ng-template>\n    </div>\n    <div class=\"igx-combo__add\" *ngIf=\"filteredData.length === 0 || isAddButtonVisible()\">\n        <div class=\"igx-combo__empty\" *ngIf=\"filteredData.length === 0\">\n            <ng-container *ngTemplateOutlet=\"emptyTemplate ? emptyTemplate : empty\">\n            </ng-container>\n        </div>\n        <igx-combo-add-item [itemHeight]='itemHeight' *ngIf=\"isAddButtonVisible()\" [tabindex]=\"dropdown.collapsed ? -1 : customValueFlag ? 1 : -1\"\n            class=\"igx-combo__add-item\" role=\"button\" aria-label=\"Add Item\" [index]=\"virtualScrollContainer.igxForOf.length\">\n            <ng-container *ngTemplateOutlet=\"addItemTemplate ? addItemTemplate : addItemDefault\">\n            </ng-container>\n        </igx-combo-add-item>\n    </div>\n    <ng-container *ngTemplateOutlet=\"footerTemplate\">\n    </ng-container>\n</igx-combo-drop-down>\n",
                    providers: [
                        IgxComboAPIService,
                        { provide: IGX_COMBO_COMPONENT, useExisting: IgxComboComponent },
                        { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(function () { return IgxComboComponent; }), multi: true }
                    ]
                }] }
    ];
    /** @nocollapse */
    IgxComboComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: IgxSelectionAPIService },
        { type: IgxComboAPIService },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] },
        { type: Injector, decorators: [{ type: Optional }] }
    ]; };
    IgxComboComponent.propDecorators = {
        virtDir: [{ type: ViewChild, args: [IgxForOfDirective, { read: IgxForOfDirective, static: true },] }],
        overlaySettings: [{ type: Input }],
        inputGroup: [{ type: ViewChild, args: ['inputGroup', { read: IgxInputGroupComponent, static: true },] }],
        comboInput: [{ type: ViewChild, args: ['comboInput', { read: IgxInputDirective, static: true },] }],
        dropdown: [{ type: ViewChild, args: [IgxComboDropDownComponent, { read: IgxComboDropDownComponent, static: true },] }],
        searchInput: [{ type: ViewChild, args: ['searchInput', { static: false },] }],
        itemTemplate: [{ type: ContentChild, args: [IgxComboItemDirective, { read: TemplateRef, static: false },] }],
        headerTemplate: [{ type: ContentChild, args: [IgxComboHeaderDirective, { read: TemplateRef, static: false },] }],
        footerTemplate: [{ type: ContentChild, args: [IgxComboFooterDirective, { read: TemplateRef, static: false },] }],
        headerItemTemplate: [{ type: ContentChild, args: [IgxComboHeaderItemDirective, { read: TemplateRef, static: false },] }],
        addItemTemplate: [{ type: ContentChild, args: [IgxComboAddItemDirective, { read: TemplateRef, static: false },] }],
        emptyTemplate: [{ type: ContentChild, args: [IgxComboEmptyDirective, { read: TemplateRef, static: false },] }],
        toggleIconTemplate: [{ type: ContentChild, args: [IgxComboToggleIconDirective, { read: TemplateRef, static: false },] }],
        clearIconTemplate: [{ type: ContentChild, args: [IgxComboClearIconDirective, { read: TemplateRef, static: false },] }],
        primitiveTemplate: [{ type: ViewChild, args: ['primitive', { read: TemplateRef, static: true },] }],
        complexTemplate: [{ type: ViewChild, args: ['complex', { read: TemplateRef, static: true },] }],
        virtualScrollContainer: [{ type: ViewChild, args: [IgxForOfDirective, { static: true },] }],
        dropdownContainer: [{ type: ViewChild, args: ['dropdownItemContainer', { static: true },] }],
        onSelectionChange: [{ type: Output }],
        onOpening: [{ type: Output }],
        onOpened: [{ type: Output }],
        onClosing: [{ type: Output }],
        onClosed: [{ type: Output }],
        onAddition: [{ type: Output }],
        onSearchInput: [{ type: Output }],
        onDataPreLoad: [{ type: Output }],
        id: [{ type: HostBinding, args: ['attr.id',] }, { type: Input }],
        width: [{ type: HostBinding, args: ['style.width',] }, { type: Input }],
        cssClass: [{ type: HostBinding, args: ['class.igx-combo',] }],
        role: [{ type: HostBinding, args: ["attr.role",] }],
        ariaExpanded: [{ type: HostBinding, args: ['attr.aria-expanded',] }],
        hasPopUp: [{ type: HostBinding, args: ['attr.aria-haspopup',] }],
        ariaOwns: [{ type: HostBinding, args: ['attr.aria-owns',] }],
        allowCustomValues: [{ type: Input }],
        itemsMaxHeight: [{ type: Input }],
        itemsWidth: [{ type: Input }],
        itemHeight: [{ type: Input }],
        placeholder: [{ type: Input }],
        searchPlaceholder: [{ type: Input }],
        data: [{ type: Input }],
        valueKey: [{ type: Input }],
        displayKey: [{ type: Input }],
        groupKey: [{ type: Input }],
        filterable: [{ type: Input }],
        ariaLabelledBy: [{ type: Input }, { type: HostBinding, args: ['attr.aria-labelledby',] }],
        disabled: [{ type: Input }],
        type: [{ type: Input }],
        onArrowDown: [{ type: HostListener, args: ['keydown.ArrowDown', ['$event'],] }, { type: HostListener, args: ['keydown.Alt.ArrowDown', ['$event'],] }]
    };
    return IgxComboComponent;
}(DisplayDensityBase));
export { IgxComboComponent };
if (false) {
    /**
     * @hidden \@internal
     * @type {?}
     */
    IgxComboComponent.prototype.customValueFlag;
    /**
     * @hidden \@internal
     * @type {?}
     */
    IgxComboComponent.prototype.defaultFallbackGroup;
    /**
     * @type {?}
     * @protected
     */
    IgxComboComponent.prototype.stringFilters;
    /**
     * @type {?}
     * @protected
     */
    IgxComboComponent.prototype.booleanFilters;
    /**
     * @type {?}
     * @protected
     */
    IgxComboComponent.prototype._filteringLogic;
    /**
     * @type {?}
     * @protected
     */
    IgxComboComponent.prototype._filteringExpressions;
    /**
     * @type {?}
     * @protected
     */
    IgxComboComponent.prototype._sortingExpressions;
    /**
     * @type {?}
     * @protected
     */
    IgxComboComponent.prototype._groupKey;
    /**
     * @type {?}
     * @protected
     */
    IgxComboComponent.prototype._displayKey;
    /**
     * @type {?}
     * @protected
     */
    IgxComboComponent.prototype._prevInputValue;
    /**
     * @type {?}
     * @private
     */
    IgxComboComponent.prototype._dataType;
    /**
     * @type {?}
     * @private
     */
    IgxComboComponent.prototype.ngControl;
    /**
     * @type {?}
     * @private
     */
    IgxComboComponent.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    IgxComboComponent.prototype._data;
    /**
     * @type {?}
     * @private
     */
    IgxComboComponent.prototype._filteredData;
    /**
     * @type {?}
     * @private
     */
    IgxComboComponent.prototype._itemHeight;
    /**
     * @type {?}
     * @private
     */
    IgxComboComponent.prototype._itemsMaxHeight;
    /**
     * @type {?}
     * @private
     */
    IgxComboComponent.prototype._remoteSelection;
    /**
     * @type {?}
     * @private
     */
    IgxComboComponent.prototype._onChangeCallback;
    /**
     * @type {?}
     * @private
     */
    IgxComboComponent.prototype._overlaySettings;
    /**
     * @type {?}
     * @private
     */
    IgxComboComponent.prototype._value;
    /**
     * @type {?}
     * @private
     */
    IgxComboComponent.prototype._valid;
    /**
     * @type {?}
     * @protected
     */
    IgxComboComponent.prototype.virtDir;
    /**
     * Set custom overlay settings that control how the combo's list of items is displayed.
     * Set:
     * ```html
     * <igx-combo [overlaySettings] = "customOverlaySettings"></igx-combo>
     * ```
     *
     * ```typescript
     *  const customSettings = { positionStrategy: { settings: { target: myTarget } } };
     *  combo.overlaySettings = customSettings;
     * ```
     * Get any custom overlay settings used by the combo:
     * ```typescript
     *  const comboOverlaySettings: OverlaySettings = myCombo.overlaySettings;
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.overlaySettings;
    /**
     * @hidden \@internal
     * @type {?}
     */
    IgxComboComponent.prototype.inputGroup;
    /**
     * @hidden \@internal
     * @type {?}
     */
    IgxComboComponent.prototype.comboInput;
    /**
     * @hidden \@internal
     * @type {?}
     */
    IgxComboComponent.prototype.dropdown;
    /**
     * @hidden \@internal
     * @type {?}
     */
    IgxComboComponent.prototype.searchInput;
    /**
     * The custom template, if any, that should be used when rendering ITEMS in the combo list
     *
     * ```typescript
     * // Set in typescript
     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
     * myComponent.combo.itemTemplate = myCustomTemplate;
     * ```
     * ```html
     * <!-- Set in markup -->
     *  <igx-combo #combo>
     *      ...
     *      <ng-template igxComboItem>
     *          <div class="custom-item" let-item let-key="valueKey">
     *              <div class="custom-item__name">{{ item[key] }}</div>
     *              <div class="custom-item__cost">{{ item.cost }}</div>
     *          </div>
     *      </ng-template>
     *  </igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.itemTemplate;
    /**
     * The custom template, if any, that should be used when rendering the HEADER for the combo items list
     *
     * ```typescript
     * // Set in typescript
     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
     * myComponent.combo.headerTemplate = myCustomTemplate;
     * ```
     * ```html
     * <!-- Set in markup -->
     *  <igx-combo #combo>
     *      ...
     *      <ng-template igxComboHeader>
     *          <div class="combo__header">
     *              This is a custom header
     *          </div>
     *      </ng-template>
     *  </igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.headerTemplate;
    /**
     * The custom template, if any, that should be used when rendering the FOOTER for the combo items list
     *
     * ```typescript
     * // Set in typescript
     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
     * myComponent.combo.footerTemplate = myCustomTemplate;
     * ```
     * ```html
     * <!-- Set in markup -->
     *  <igx-combo #combo>
     *      ...
     *      <ng-template igxComboFooter>
     *          <div class="combo__footer">
     *              This is a custom footer
     *          </div>
     *      </ng-template>
     *  </igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.footerTemplate;
    /**
     * The custom template, if any, that should be used when rendering HEADER ITEMS for groups in the combo list
     *
     * ```typescript
     * // Set in typescript
     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
     * myComponent.combo.headerItemTemplate = myCustomTemplate;
     * ```
     * ```html
     * <!-- Set in markup -->
     *  <igx-combo #combo>
     *      ...
     *      <ng-template igxComboHeaderItem let-item let-key="groupKey">
     *          <div class="custom-item--group">Group header for {{ item[key] }}</div>
     *      </ng-template>
     *  </igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.headerItemTemplate;
    /**
     * The custom template, if any, that should be used when rendering the ADD BUTTON in the combo drop down
     *
     * ```typescript
     * // Set in typescript
     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
     * myComponent.combo.addItemTemplate = myCustomTemplate;
     * ```
     * ```html
     * <!-- Set in markup -->
     *  <igx-combo #combo>
     *      ...
     *      <ng-template igxComboAddItem>
     *          <button class="combo__add-button">
     *              Click to add item
     *          </button>
     *      </ng-template>
     *  </igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.addItemTemplate;
    /**
     * The custom template, if any, that should be used when rendering the ADD BUTTON in the combo drop down
     *
     * ```typescript
     * // Set in typescript
     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
     * myComponent.combo.emptyTemplate = myCustomTemplate;
     * ```
     * ```html
     * <!-- Set in markup -->
     *  <igx-combo #combo>
     *      ...
     *      <ng-template igxComboEmpty>
     *          <div class="combo--empty">
     *              There are no items to display
     *          </div>
     *      </ng-template>
     *  </igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.emptyTemplate;
    /**
     * The custom template, if any, that should be used when rendering the combo TOGGLE(open/close) button
     *
     * ```typescript
     * // Set in typescript
     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
     * myComponent.combo.toggleIconTemplate = myCustomTemplate;
     * ```
     * ```html
     * <!-- Set in markup -->
     *  <igx-combo #combo>
     *      ...
     *      <ng-template igxComboToggleIcon let-collapsed>
     *          <igx-icon>{{ collapsed ? 'remove_circle' : 'remove_circle_outline'}}</igx-icon>
     *      </ng-template>
     *  </igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.toggleIconTemplate;
    /**
     * The custom template, if any, that should be used when rendering the combo CLEAR button
     *
     * ```typescript
     * // Set in typescript
     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
     * myComponent.combo.clearIconTemplate = myCustomTemplate;
     * ```
     * ```html
     * <!-- Set in markup -->
     *  <igx-combo #combo>
     *      ...
     *      <ng-template igxComboClearIcon>
     *          <igx-icon>clear</igx-icon>
     *      </ng-template>
     *  </igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.clearIconTemplate;
    /**
     * @type {?}
     * @protected
     */
    IgxComboComponent.prototype.primitiveTemplate;
    /**
     * @type {?}
     * @protected
     */
    IgxComboComponent.prototype.complexTemplate;
    /**
     * @hidden \@internal
     * @type {?}
     */
    IgxComboComponent.prototype.virtualScrollContainer;
    /**
     * @type {?}
     * @protected
     */
    IgxComboComponent.prototype.dropdownContainer;
    /**
     * Emitted when item selection is changing, before the selection completes
     *
     * ```html
     * <igx-combo (onSelectionChange)='handleSelection()'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.onSelectionChange;
    /**
     * Emitted before the dropdown is opened
     *
     * ```html
     * <igx-combo onOpening='handleOpening($event)'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.onOpening;
    /**
     * Emitted after the dropdown is opened
     *
     * ```html
     * <igx-combo (onOpened)='handleOpened()'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.onOpened;
    /**
     * Emitted before the dropdown is closed
     *
     * ```html
     * <igx-combo (onClosing)='handleClosing($event)'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.onClosing;
    /**
     * Emitted after the dropdown is closed
     *
     * ```html
     * <igx-combo (onClosed)='handleClosed()'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.onClosed;
    /**
     * Emitted when an item is being added to the data collection
     *
     * ```html
     * <igx-combo (onAddition)='handleAdditionEvent()'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.onAddition;
    /**
     * Emitted when the value of the search input changes (e.g. typing, pasting, clear, etc.)
     *
     * ```html
     * <igx-combo (onSearchInput)='handleSearchInputEvent()'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.onSearchInput;
    /**
     * Emitted when new chunk of data is loaded from the virtualization
     *
     * ```html
     * <igx-combo (onDataPreLoad)='handleDataPreloadEvent()'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.onDataPreLoad;
    /**
     * Gets/gets combo id.
     *
     * ```typescript
     * // get
     * let id = this.combo.id;
     * ```
     *
     * ```html
     * <!--set-->
     * <igx-combo [id]='combo1'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.id;
    /**
     * Sets the style width of the element
     *
     * ```typescript
     * // get
     * let myComboWidth = this.combo.width;
     * ```
     *
     * ```html
     * <!--set-->
     * <igx-combo [width]='250px'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.width;
    /**
     * @hidden \@internal
     * @type {?}
     */
    IgxComboComponent.prototype.cssClass;
    /**
     * @hidden \@internal
     * @type {?}
     */
    IgxComboComponent.prototype.role;
    /**
     * Controls whether custom values can be added to the collection
     *
     * ```typescript
     * // get
     * let comboAllowsCustomValues = this.combo.allowCustomValues;
     * ```
     *
     * ```html
     * <!--set-->
     * <igx-combo [allowCustomValues]='true'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.allowCustomValues;
    /**
     * Configures the drop down list width
     *
     * ```typescript
     * // get
     * let myComboItemsWidth = this.combo.itemsWidth;
     * ```
     *
     * ```html
     * <!--set-->
     * <igx-combo [itemsWidth] = '"180px"'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.itemsWidth;
    /**
     * @hidden \@internal
     * @type {?}
     */
    IgxComboComponent.prototype.filteringLogic;
    /**
     * Defines the placeholder value for the combo value field
     *
     * ```typescript
     * // get
     * let myComboPlaceholder = this.combo.placeholder;
     * ```
     *
     * ```html
     * <!--set-->
     * <igx-combo [placeholder]='newPlaceHolder'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.placeholder;
    /**
     * Defines the placeholder value for the combo dropdown search field
     *
     * ```typescript
     * // get
     * let myComboSearchPlaceholder = this.combo.searchPlaceholder;
     * ```
     *
     * ```html
     * <!--set-->
     * <igx-combo [searchPlaceholder]='newPlaceHolder'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.searchPlaceholder;
    /**
     * Combo value data source property.
     *
     * ```typescript
     * // get
     * let myComboValueKey = this.combo.valueKey;
     * ```
     *
     * ```html
     * <!--set-->
     * <igx-combo [valueKey]='myKey'></igx-combo>
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.valueKey;
    /**
     * An \@Input property that enabled/disables filtering in the list. The default is `true`.
     * ```html
     * <igx-combo [filterable]="'false'">
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.filterable;
    /**
     * An \@Input property that set aria-labelledby attribute
     * ```html
     * <igx-combo [ariaLabelledBy]="'label1'">
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.ariaLabelledBy;
    /**
     * An \@Input property that enabled/disables combo. The default is `false`.
     * ```html
     * <igx-combo [disabled]="'true'">
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.disabled;
    /**
     * An \@Input property that sets how the combo will be styled.
     * The allowed values are `line`, `box`, `border` and `search`. The default is `box`.
     * ```html
     * <igx-combo [type]="'line'">
     * ```
     * @type {?}
     */
    IgxComboComponent.prototype.type;
    /**
     * @hidden \@internal
     * @type {?}
     */
    IgxComboComponent.prototype.searchValue;
    /**
     * @type {?}
     * @protected
     */
    IgxComboComponent.prototype.onStatusChanged;
    /**
     * @type {?}
     * @protected
     */
    IgxComboComponent.prototype.elementRef;
    /**
     * @type {?}
     * @protected
     */
    IgxComboComponent.prototype.cdr;
    /**
     * @type {?}
     * @protected
     */
    IgxComboComponent.prototype.selection;
    /**
     * @type {?}
     * @protected
     */
    IgxComboComponent.prototype.comboAPI;
    /**
     * @type {?}
     * @protected
     */
    IgxComboComponent.prototype._displayDensityOptions;
    /**
     * @type {?}
     * @private
     */
    IgxComboComponent.prototype._injector;
}
/**
 * @hidden
 */
var IgxComboModule = /** @class */ (function () {
    function IgxComboModule() {
    }
    IgxComboModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [IgxComboComponent, IgxComboItemComponent, IgxComboFilterConditionPipe, IgxComboGroupingPipe,
                        IgxComboFilteringPipe, IgxComboSortingPipe, IgxComboDropDownComponent, IgxComboAddItemComponent,
                        IgxComboItemDirective,
                        IgxComboEmptyDirective,
                        IgxComboHeaderItemDirective,
                        IgxComboHeaderDirective,
                        IgxComboFooterDirective,
                        IgxComboAddItemDirective,
                        IgxComboToggleIconDirective,
                        IgxComboClearIconDirective],
                    exports: [IgxComboComponent, IgxComboItemComponent, IgxComboDropDownComponent, IgxComboAddItemComponent,
                        IgxComboItemDirective,
                        IgxComboEmptyDirective,
                        IgxComboHeaderItemDirective,
                        IgxComboHeaderDirective,
                        IgxComboFooterDirective,
                        IgxComboAddItemDirective,
                        IgxComboToggleIconDirective,
                        IgxComboClearIconDirective],
                    imports: [IgxRippleModule, CommonModule, IgxInputGroupModule, FormsModule, ReactiveFormsModule,
                        IgxForOfModule, IgxToggleModule, IgxCheckboxModule, IgxDropDownModule, IgxButtonModule, IgxIconModule],
                    providers: [IgxSelectionAPIService]
                },] }
    ];
    return IgxComboModule;
}());
export { IgxComboModule };
export { Éµ0 };
//# sourceMappingURL=data:application/json;base64,