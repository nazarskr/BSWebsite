/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Output, EventEmitter, Input, HostListener, ViewChildren, QueryList, HostBinding } from '@angular/core';
import { isDateInRanges } from '../../calendar/calendar';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { IgxDayItemComponent } from './day-item.component';
import { DateRangeType } from '../../core/dates';
import { IgxCalendarBase, CalendarSelection } from '../calendar-base';
import { isEqual } from '../../core/utils';
import { IgxDaysViewNavigationService } from './daysview-navigation.service';
/** @type {?} */
var NEXT_ID = 0;
var IgxDaysViewComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgxDaysViewComponent, _super);
    /**
     * @hidden
     */
    function IgxDaysViewComponent(navService) {
        var _this = _super.call(this) || this;
        _this.navService = navService;
        /**
         * Sets/gets the `id` of the days view.
         * If not set, the `id` will have value `"igx-days-view-0"`.
         * ```html
         * <igx-days-view id="my-days-view"></igx-days-view>
         * ```
         * ```typescript
         * let daysViewId =  this.daysView.id;
         * ```
         */
        _this.id = "igx-days-view-" + NEXT_ID++;
        /**
         * @hidden
         */
        _this.changeDaysView = false;
        /**
         * @hidden
         */
        _this.onDateSelection = new EventEmitter();
        /**
         * @hidden
         */
        _this.onViewChanging = new EventEmitter();
        /**
         * The default css class applied to the component.
         *
         * @hidden
         */
        _this.styleClass = true;
        return _this;
    }
    Object.defineProperty(IgxDaysViewComponent.prototype, "getCalendarMonth", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth(), true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxDaysViewComponent.prototype.ngOnInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.navService.monthView = this;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxDaysViewComponent.prototype.ngDoCheck = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (!this.changeDaysView && this.dates) {
            this.disableOutOfRangeDates();
        }
    };
    /**
     * Returns the locale representation of the date in the days view.
     *
     * @hidden
     */
    /**
     * Returns the locale representation of the date in the days view.
     *
     * @hidden
     * @param {?} value
     * @return {?}
     */
    IgxDaysViewComponent.prototype.formattedDate = /**
     * Returns the locale representation of the date in the days view.
     *
     * @hidden
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.formatViews.day) {
            return this.formatterDay.format(value);
        }
        return "" + value.getDate();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxDaysViewComponent.prototype.generateWeekHeader = /**
     * @hidden
     * @return {?}
     */
    function () {
        var e_1, _a;
        /** @type {?} */
        var dayNames = [];
        /** @type {?} */
        var rv = this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth())[0];
        try {
            for (var rv_1 = tslib_1.__values(rv), rv_1_1 = rv_1.next(); !rv_1_1.done; rv_1_1 = rv_1.next()) {
                var day = rv_1_1.value;
                dayNames.push(this.formatterWeekday.format(day.date));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (rv_1_1 && !rv_1_1.done && (_a = rv_1.return)) _a.call(rv_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return dayNames;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    IgxDaysViewComponent.prototype.rowTracker = /**
     * @hidden
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    function (index, item) {
        return "" + item[index].date.getMonth() + item[index].date.getDate();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    IgxDaysViewComponent.prototype.dateTracker = /**
     * @hidden
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    function (index, item) {
        return item.date.getMonth() + "--" + item.date.getDate();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    IgxDaysViewComponent.prototype.isCurrentMonth = /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return this.viewDate.getMonth() === value.getMonth();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    IgxDaysViewComponent.prototype.isCurrentYear = /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return this.viewDate.getFullYear() === value.getFullYear();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} date
     * @return {?}
     */
    IgxDaysViewComponent.prototype.isSelected = /**
     * @hidden
     * @param {?} date
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var selectedDates;
        if (this.isDateDisabled(date.date) || !this.value ||
            (Array.isArray(this.value) && this.value.length === 0)) {
            return false;
        }
        if (this.selection === CalendarSelection.SINGLE) {
            selectedDates = ((/** @type {?} */ (this.value)));
            return this.getDateOnly(selectedDates).getTime() === date.date.getTime();
        }
        selectedDates = ((/** @type {?} */ (this.value)));
        if (this.selection === CalendarSelection.RANGE && selectedDates.length === 1) {
            return this.getDateOnly(selectedDates[0]).getTime() === date.date.getTime();
        }
        if (this.selection === CalendarSelection.MULTI) {
            /** @type {?} */
            var start = this.getDateOnly(selectedDates[0]);
            /** @type {?} */
            var end = this.getDateOnly(selectedDates[selectedDates.length - 1]);
            if (this.isWithinRange(date.date, false, start, end)) {
                /** @type {?} */
                var currentDate = selectedDates.find(function (element) { return element.getTime() === date.date.getTime(); });
                return !!currentDate;
            }
            else {
                return false;
            }
        }
        else {
            return this.isWithinRange(date.date, true);
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} date
     * @return {?}
     */
    IgxDaysViewComponent.prototype.isLastInRange = /**
     * @hidden
     * @param {?} date
     * @return {?}
     */
    function (date) {
        if (this.isSingleSelection || !this.value) {
            return false;
        }
        /** @type {?} */
        var dates = (/** @type {?} */ (this.value));
        /** @type {?} */
        var lastDate = dates[dates.length - 1];
        return isEqual(lastDate, date.date);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} date
     * @return {?}
     */
    IgxDaysViewComponent.prototype.isFirstInRange = /**
     * @hidden
     * @param {?} date
     * @return {?}
     */
    function (date) {
        if (this.isSingleSelection || !this.value) {
            return false;
        }
        return isEqual(((/** @type {?} */ (this.value)))[0], date.date);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} date
     * @param {?} checkForRange
     * @param {?=} min
     * @param {?=} max
     * @return {?}
     */
    IgxDaysViewComponent.prototype.isWithinRange = /**
     * @hidden
     * @param {?} date
     * @param {?} checkForRange
     * @param {?=} min
     * @param {?=} max
     * @return {?}
     */
    function (date, checkForRange, min, max) {
        if (checkForRange && !(Array.isArray(this.value) && this.value.length > 1)) {
            return false;
        }
        min = min ? min : this.value[0];
        max = max ? max : this.value[((/** @type {?} */ (this.value))).length - 1];
        return isDateInRanges(date, [
            {
                type: DateRangeType.Between,
                dateRange: [min, max]
            }
        ]);
    };
    /**
     *@hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxDaysViewComponent.prototype.focusActiveDate = /**
     * @hidden
     * @return {?}
     */
    function () {
        /** @type {?} */
        var date = this.dates.find(function (d) { return d.selected; });
        if (!date) {
            date = this.dates.find(function (d) { return d.isToday; });
        }
        if (date.isFocusable) {
            date.nativeElement.focus();
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxDaysViewComponent.prototype.selectDay = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.selectDateFromClient(event.date);
        this.onDateSelection.emit(event);
        this.onSelection.emit(this.selectedDates);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @private
     * @return {?}
     */
    IgxDaysViewComponent.prototype.disableOutOfRangeDates = /**
     * @hidden
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var dateRange = [];
        this.dates.toArray().forEach(function (date) {
            if (!date.isCurrentMonth) {
                dateRange.push(date.date.date);
            }
        });
        this.outOfRangeDates = [{
                type: DateRangeType.Specific,
                dateRange: dateRange
            }];
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxDaysViewComponent.prototype.getFirstMonthView = /**
     * @hidden
     * @return {?}
     */
    function () {
        /** @type {?} */
        var monthView = (/** @type {?} */ (this));
        while (monthView.prevMonthView) {
            monthView = monthView.prevMonthView;
        }
        return monthView;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @private
     * @return {?}
     */
    IgxDaysViewComponent.prototype.getLastMonthView = /**
     * @hidden
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var monthView = (/** @type {?} */ (this));
        while (monthView.nextMonthView) {
            monthView = monthView.nextMonthView;
        }
        return monthView;
    };
    Object.defineProperty(IgxDaysViewComponent.prototype, "isSingleSelection", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @private
         * @return {?}
         */
        function () {
            return this.selection !== CalendarSelection.RANGE;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxDaysViewComponent.prototype.onKeydownArrow = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        event.stopPropagation();
        this.navService.focusNextDate((/** @type {?} */ (event.target)), event.key);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxDaysViewComponent.prototype.onKeydownHome = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        event.stopPropagation();
        this.getFirstMonthView().navService.focusHomeDate();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxDaysViewComponent.prototype.onKeydownEnd = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        event.stopPropagation();
        this.getLastMonthView().navService.focusEndDate();
    };
    IgxDaysViewComponent.decorators = [
        { type: Component, args: [{
                    providers: [
                        {
                            multi: true,
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: IgxDaysViewComponent
                        },
                        { provide: IgxDaysViewNavigationService, useClass: IgxDaysViewNavigationService }
                    ],
                    selector: 'igx-days-view',
                    template: "<div class=\"igx-calendar__body-row\">\n    <span *ngFor=\"let dayName of generateWeekHeader()\" class=\"igx-calendar__label\">\n        {{ dayName | titlecase }}\n    </span>\n</div>\n\n<div *ngFor=\"let week of getCalendarMonth; last as isLast; index as i; trackBy: rowTracker\"\n    class=\"igx-calendar__body-row\">\n    <igx-day-item\n        *ngFor=\"let day of week; trackBy: dateTracker\"\n        [date]=\"day\"\n        [selection]=\"selection\"\n        [selected]=\"isSelected(day)\"\n        [isLastInRange]=\"isLastInRange(day)\"\n        [isFirstInRange]=\"isFirstInRange(day)\"\n        [isWithinRange]=\"isWithinRange(day.date, true)\"\n        [disabledDates]=\"disabledDates\"\n        [specialDates]=\"specialDates\"\n        [outOfRangeDates]=\"outOfRangeDates\"\n        [hideOutsideDays]=\"hideOutsideDays\"\n        (onDateSelection)=\"selectDay($event)\">\n        {{ formattedDate(day.date) }}\n    </igx-day-item>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    IgxDaysViewComponent.ctorParameters = function () { return [
        { type: IgxDaysViewNavigationService }
    ]; };
    IgxDaysViewComponent.propDecorators = {
        id: [{ type: HostBinding, args: ['attr.id',] }, { type: Input }],
        changeDaysView: [{ type: Input }],
        onDateSelection: [{ type: Output }],
        onViewChanging: [{ type: Output }],
        dates: [{ type: ViewChildren, args: [IgxDayItemComponent, { read: IgxDayItemComponent },] }],
        styleClass: [{ type: HostBinding, args: ['class.igx-calendar',] }],
        onKeydownArrow: [{ type: HostListener, args: ['keydown.arrowleft', ['$event'],] }, { type: HostListener, args: ['keydown.arrowright', ['$event'],] }, { type: HostListener, args: ['keydown.arrowup', ['$event'],] }, { type: HostListener, args: ['keydown.arrowdown', ['$event'],] }],
        onKeydownHome: [{ type: HostListener, args: ['keydown.home', ['$event'],] }],
        onKeydownEnd: [{ type: HostListener, args: ['keydown.end', ['$event'],] }]
    };
    return IgxDaysViewComponent;
}(IgxCalendarBase));
export { IgxDaysViewComponent };
if (false) {
    /**
     * Sets/gets the `id` of the days view.
     * If not set, the `id` will have value `"igx-days-view-0"`.
     * ```html
     * <igx-days-view id="my-days-view"></igx-days-view>
     * ```
     * ```typescript
     * let daysViewId =  this.daysView.id;
     * ```
     * @type {?}
     */
    IgxDaysViewComponent.prototype.id;
    /**
     * @hidden
     * @type {?}
     */
    IgxDaysViewComponent.prototype.changeDaysView;
    /**
     * @hidden
     * @type {?}
     */
    IgxDaysViewComponent.prototype.onDateSelection;
    /**
     * @hidden
     * @type {?}
     */
    IgxDaysViewComponent.prototype.onViewChanging;
    /**
     * @hidden
     * @type {?}
     */
    IgxDaysViewComponent.prototype.dates;
    /**
     * @hidden
     * @type {?}
     */
    IgxDaysViewComponent.prototype.outOfRangeDates;
    /**
     * @hidden
     * @type {?}
     */
    IgxDaysViewComponent.prototype.nextMonthView;
    /**
     * @hidden
     * @type {?}
     */
    IgxDaysViewComponent.prototype.prevMonthView;
    /**
     * The default css class applied to the component.
     *
     * @hidden
     * @type {?}
     */
    IgxDaysViewComponent.prototype.styleClass;
    /** @type {?} */
    IgxDaysViewComponent.prototype.navService;
}
//# sourceMappingURL=data:application/json;base64,